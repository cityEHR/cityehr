<!-- 
    *********************************************************************************************************
    cityEHR
    cityEHRDashboard.xpl
    
    Pipleline to generate dashboard (including SVG charts) and load page.
    
    There are 6 stages:
        1. Get the combined parameters by calling getPipelineParameters pipeline
        2. Iterate through the queries defined in application parameters (returned in the combined parameters)
            2.1 Set up the query (queryText and location)
            2.2 Run the query
            2.3 Aggregate the results
        3. Run transform (Results2SVGDashboard.xsl) to generate the dashboard panes, including SVG charts
        4. Get the template cityEHRDashboard.xhtml
        5. Include the dashboard pane content in the template
        6. Serialize complete dashboard xhtml to the browser
    
    Copyright (C) 2013-2021 John Chelsom.
    
    This program is free software; you can redistribute it and/or modify it under the terms of the
    GNU Lesser General Public License as published by the Free Software Foundation; either version
    2.1 of the License, or (at your option) any later version.
    
    This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
    without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
    See the GNU Lesser General Public License for more details.
    
    The full text of the license is available at http://www.gnu.org/copyleft/lesser.html
    **********************************************************************************************************
-->
<p:pipeline xmlns:p="http://www.orbeon.com/oxf/pipeline" xmlns:oxf="http://www.orbeon.com/oxf/processors" xmlns:xf="http://www.w3.org/2002/xforms"
    xmlns:saxon="http://saxon.sf.net/" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:f="http://orbeon.org/oxf/xml/formatting"
    xmlns:xhtml="http://www.w3.org/1999/xhtml" xmlns:cda="urn:hl7-org:v3" xmlns:exist="http://exist.sourceforge.net/NS/exist"
    xmlns:xdb="http://orbeon.org/oxf/xml/xmldb">

    <!-- Input to pipeline is view-parameters.xml as set in the page-flow.xml file 
         with parameters set in the page element -->
    <p:param name="instance" type="input"/>
    
    <!-- Run the getPipelineParameters pipeline.
         Returns the combined application-parameters, session-parameters, system-parameters, database-parameters,  view-parameters -->
    <p:processor name="oxf:pipeline">
        <p:input name="config" href="getPipelineParameters.xpl"/>               
        <p:input name="instance" href="#instance"/>
        <p:output name="parameters" id="parameters"/>
    </p:processor>

    <!-- Aggregate results from dashboard queries.
         The results are generated by a query or by running a pipeline -->
    <p:for-each href="#parameters" select="//dashboardQuerySet/dashboardQuery" root="aggregatedResults"
        id="aggregatedResults">

        <p:processor name="oxf:identity">
            <p:input name="data" href="aggregate('configuration',current(),#parameters)"/>
            <p:output name="data" id="queryConfiguration"/>
        </p:processor>

        <!-- Run pipeline or XQuery, as specified -->
        <p:choose href="#queryConfiguration">
            <!-- Pipeline specified -->
            <p:when test="exists(configuration/dashboardQuery[@queryPipeline!=''])">
                <!-- Get the specified pipeline -->
                <p:processor name="oxf:url-generator">
                    <p:input name="config" transform="oxf:xslt" href="#queryConfiguration">
                        <config xsl:version="2.0">
                            <url>
                                <xsl:value-of select="configuration/dashboardQuery/@queryPipeline"/>.xpl
                            </url>
                        </config>
                    </p:input>
                    <p:output name="data" id="queryPipeline"/>
                </p:processor>
                
                <!-- Run the pipeline -->
                <p:processor name="oxf:pipeline">
                    <p:input name="config" href="#queryPipeline"/>                 
                    <p:input name="instance" href="#queryConfiguration"/>
                    <p:output name="response" id="queryResults"/>
                </p:processor>
                
                <!-- Catch exception if pipeline crashes out, otherwise acts like identity processor -->
                <p:processor name="oxf:exception-catcher">
                    <p:input name="data" href="#queryResults"/>
                    <p:output name="data" id="checkedQueryResults"/>
                </p:processor>
                
            </p:when>

            <!-- Anything else, run a query -->
            <p:otherwise>
                <!-- Set the query -->
                <p:processor name="oxf:xslt">
                    <p:input name="config">
                        <xsl:stylesheet version="2.0">
                             <xsl:variable name="queryRoot" select="concat(//parameters[@type='session']/databaseURL[.!=''][1],'/xmlstore')"/>
                            <xsl:variable name="applicationId" select="//parameters[@type='session']/applicationId[.!=''][1]"/>

                            <xsl:variable name="queryScope" select="configuration/dashboardQuery/@queryScope"/>
                            <xsl:variable name="queryPath" select="configuration/dashboardQuery/@queryPath"/>

                            <!-- Output is the exist:query -->
                            <xsl:template match="/">
                                <exist:query start="1" max="1000"
                                    queryLocation="{if ($queryScope = 'application') then concat($queryRoot,'/applications/',$applicationId,'/',$queryPath) else if ($queryScope = 'database') then concat($queryRoot,'/',$queryPath) else $queryRoot}">
                                    <exist:text>
                                        <xsl:value-of select="configuration/dashboardQuery"/>
                                    </exist:text>
                                </exist:query>
                            </xsl:template>

                            <!-- Mop up text nodes -->
                            <xsl:template match="text()"/>
                        </xsl:stylesheet>

                    </p:input>
                    <p:input name="data" href="#queryConfiguration"/>
                    <p:output name="data" id="query"/>
                </p:processor>

                <!-- Submit query to the xmlstore.
                     The AVT is relative to the request -->
                <p:processor name="oxf:xforms-submission">
                    <p:input name="submission">
                        <xf:submission action="{@queryLocation}" method="post"/>
                    </p:input>
                    <p:input name="request" href="#query"/>
                    <p:output name="response" id="queryResults"/>
                </p:processor>
                
                <!-- Catch exception if query crashes out, otherwise acts like identity processor -->
                <p:processor name="oxf:exception-catcher">
                    <p:input name="data" href="#queryResults"/>
                    <p:output name="data" id="checkedQueryResults"/>
                </p:processor>

            </p:otherwise>
        </p:choose>

        <!-- The exception catcher behaves like the identity processor if there is no exception
             However if there is an exception, it catches it, and you get a serialized form of the exception -->
        <p:processor name="oxf:exception-catcher">
            <p:input name="data" href="#checkedQueryResults"/>
            <p:output name="data" ref="aggregatedResults"/>
        </p:processor>
    </p:for-each>

    <!-- Transform the results to dashboard contents -->
    <p:processor name="oxf:unsafe-xslt">
        <p:input name="config" href="../xslt/Results2SVGDashboard.xsl"/>
        <p:input name="data" href="#aggregatedResults"/>
        <p:input name="parameters" href="#parameters"/>
        <p:output name="data" id="generatedContentReturned"/>
    </p:processor>
    
    <!-- The exception catcher behaves like the identity processor if there is no exception
             However if there is an exception, it catches it, and you get a serialized form of the exception -->
    <p:processor name="oxf:exception-catcher">
        <p:input name="data" href="#generatedContentReturned"/>
        <p:output name="data" id="generatedContent"/>
    </p:processor>

    <!-- Get the template dashboard.xhtml -->
    <p:processor name="oxf:url-generator">
        <p:input name="config">
            <config>
                <url>../views/cityEHRDashboard.xhtml</url>
                <content-type>application/xml</content-type>
            </config>
        </p:input>
        <p:output name="data" id="templateView"/>
    </p:processor>

    <!-- Resolve xincludes in the template xhtml view. -->
    <p:processor name="oxf:xinclude">
        <p:input name="config" href="#templateView"/>
        <p:input name="dashboardContent" href="#generatedContent"/>
        <p:output name="data" id="form"/>
    </p:processor>


    <!-- Now render the dashboard XForm -->
    <p:processor name="oxf:pipeline">
        <p:input name="data" href="#form"/>
        <p:input name="instance" href="#instance"/>
        <p:input name="config" href="oxf:/config/epilogue.xpl"/>
    </p:processor>
</p:pipeline>
