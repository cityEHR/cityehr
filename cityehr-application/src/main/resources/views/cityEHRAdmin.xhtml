<?xml version="1.0" encoding="UTF-8"?>
<!-- 
    *********************************************************************************************************
    cityEHR
    cityEHRAdmin.xhtml
    
    Administration tasks for the cityEHR.
   
    Tasks are specified in application-parameters/adminTaskList
    Each task has a corresponding element in the control-instance which holds its parameters.
    
    Parameters for the managed application are held in managedApplication
    When the page loads, set-managedApplication sets up the current application (as specified in session-parameters/view-parameters) to be managed.
    There are only a few tasks that manipulate applications other than the managedApplication:
        manageApplicationParameters shows a summary of the status for any installed application
        newApplicationWizard creates a new application
        manageUsers can grant users access to any application and filter users by application
    
    Parameters for the managed database are held in managedDatabase
    The managedDatabase is used by
        databaseAccessLayer
        browsePhysicalDatabases
        browseLogicalDatabases
        
    
    Copyright (C) 2013-2021 John Chelsom.
    
    This program is free software; you can redistribute it and/or modify it under the terms of the
    GNU Lesser General Public License as published by the Free Software Foundation; either version
    2.1 of the License, or (at your option) any later version.
    
    This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
    without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
    See the GNU Lesser General Public License for more details.
    
    The full text of the license is available at http://www.gnu.org/copyleft/lesser.html
    **********************************************************************************************************
-->

<xhtml:html lang="{xxf:instance('session-parameters-instance')/languageCode}"
    xmlns:xf="http://www.w3.org/2002/xforms" xmlns:ev="http://www.w3.org/2001/xml-events"
    xmlns:xxf="http://orbeon.org/oxf/xml/xforms" xmlns:exforms="http://www.exforms.org/exf/1-0"
    xmlns:widget="http://orbeon.org/oxf/xml/widget" xmlns:f="http://orbeon.org/oxf/xml/formatting"
    xmlns:xhtml="http://www.w3.org/1999/xhtml" xmlns:xi="http://www.w3.org/2001/XInclude"
    xmlns:exist="http://exist.sourceforge.net/NS/exist" xmlns:xs="http://www.w3.org/2001/XMLSchema"
    xmlns:xxi="http://orbeon.org/oxf/xml/xinclude" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:office2003Spreadsheet="urn:schemas-microsoft-com:office:spreadsheet"
    xmlns:office="urn:oasis:names:tc:opendocument:xmlns:office:1.0"
    xmlns:x2="http://schemas.microsoft.com/office/excel/2003/xml"
    xmlns:ss="urn:schemas-microsoft-com:office:spreadsheet" xmlns:cda="urn:hl7-org:v3"
    xmlns:msexcel="http://schemas.openxmlformats.org/spreadsheetml/2006/main"
    xmlns:iso-13606="http://www.iso.org/iso-13606" xmlns:owl="http://www.w3.org/2002/07/owl#"
    xmlns:cityEHR="http://openhealthinformatics.org/ehr"
    xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
    xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:svg="http://www.w3.org/2000/svg">

    <xhtml:head>

        <!-- Try this to force compatibility mode -->
        <xhtml:meta http-equiv="X-UA-Compatible" content="IE=10" />

        <!-- HTML Title is the displayName of the current application -->
        <xhtml:title>
            <xf:output ref="xxf:instance('view-parameters-instance')/applicationDisplayName"/>
        </xhtml:title>

        <!-- Stylesheet -->
        <xhtml:link rel="stylesheet" type="text/css"
            href="../resources/styles/cityEHRSkin.css?{xxf:instance('view-parameters-instance')/versionNumber/@version}"
            media="screen" />


        <!-- ========= System Parameters ===================================================== 
             ================================================================================= -->
        <xi:include href="../models/systemParametersModel.xml" xxi:omit-xml-base="true"/>

        <!-- ========= Database Access Layer model contains parameters of the eXist database ==== 
            ================================================================================== -->
        <xi:include href="../models/databaseAccessLayer.xml" xxi:omit-xml-base="true"/>

        <!-- ========= Session model contains stuff for handling of user sessions ============ 
            ================================================================================== -->
        <xi:include href="../models/sessionModel.xml" xxi:omit-xml-base="true"/>

        <!-- ========= Audit log model contains stuff for audit of user actions ============== 
            ================================================================================== -->
        <xi:include href="../models/auditLogModel.xml" xxi:omit-xml-base="true"/>

        <!-- ========= Page navigation model contains stuff for navigation between pages =====
        ====================================================================================== -->
        <xi:include href="../models/pageNavigationModel.xml" xxi:omit-xml-base="true"/>

        <!-- ========= Configuration model contains standard configuration of the page ======= 
            ================================================================================== -->
        <xi:include href="../models/configurationModel.xml" xxi:omit-xml-base="true"/>

        <!-- === Applications === -->
        <xi:include href="../models/applicationModel.xml" xxi:omit-xml-base="true"/>

        <!-- ========= Dictionary model contains the specialty dictionary ========= 
            ======================================================================= -->
        <xi:include href="../models/dictionaryModel.xml" xxi:omit-xml-base="true"/>


        <!-- ========= Reference data - directories of entries and elements ==== 
             =================================================================== -->
        <xi:include href="../models/directoryModel.xml" xxi:omit-xml-base="true"/>

        <!-- ========= Release Notes ========= 
            ============================================================================ -->
        <xi:include href="../models/releaseNotesModel.xml" xxi:omit-xml-base="true"/>

        <!-- ===  Patient demographics   === -->
        <xi:include href="../models/patientDemographicsModel.xml" xxi:omit-xml-base="true"/>

        <!-- ========= empiModel model contains stuff for Enterprise Master Patient Index ====== 
             =================================================================================== -->
        <xi:include href="../models/empiModel.xml" xxi:omit-xml-base="true"/>

        <!-- ========= exportDataModel model contains stuff for exporting patient records ==== 
            =================================================================================== -->
        <xi:include href="../models/exportDataModel.xml" xxi:omit-xml-base="true"/>

        <!-- === Manage Care Teams     === -->
        <xi:include href="../models/careTeamModel.xml" xxi:omit-xml-base="true"/>

        <!-- === Test Web Services === -->
        <xi:include href="../models/webServiceModel.xml" xxi:omit-xml-base="true"/>

        <!-- ===  Manage Export Data Sets  === -->
        <xi:include href="../models/exportDataSetModel.xml" xxi:omit-xml-base="true"/>

        <!-- ===  Redirect Notifications   === -->
        <xi:include href="../models/notificationModel.xml" xxi:omit-xml-base="true"/>

        <!-- ===  Application configuration   === -->
        <xi:include href="../models/configurationManagementModel.xml" xxi:omit-xml-base="true"/>

        <!-- ===   Manage parameters (system and application parameters)  === -->
        <xi:include href="../models/manageParametersModel.xml" xxi:omit-xml-base="true"/>

        <!-- ========= Processes =====================================================
            Set up and run multi-action processes
            ================================================================================== -->
        <xi:include href="../models/processModel.xml" xxi:omit-xml-base="true"/>

        <!-- ========= Manage cohort search model - load, save, delete cohort searches ========= 
            =================================================================================== -->
        <xi:include href="../models/manageCohortSearchModel.xml" xxi:omit-xml-base="true"/>

        <!-- ========= Cohort Set model contains stuff for managing cohorts of patients ========= 
            ============================================================================ -->
        <xi:include href="../models/cohortSetModel.xml" xxi:omit-xml-base="true"/>

        <!-- ========= Scheduling and booking ========= 
            ============================================================================ -->
        <xi:include href="../models/schedulingModel.xml" xxi:omit-xml-base="true"/>


        <!-- ========= Main model contains stuff specific to this page ========= 
            =================================================================== -->
        <xf:model id="main-model">
            <!-- Control of the admin view -->
            <xf:instance id="control-instance">
                <control xmlns="">
                    <status/>
                    <editStatus/>
                    <processStatus/>
                    <error/>

                    <!-- The current adminTask -->
                    <adminTask>
                        <adminTask/>
                        <adminSubTaskDisplay>expanded</adminSubTaskDisplay>
                        <previousAdminTask/>
                        <nextAdminTask/>
                        <adminTaskTitle/>
                        <adminTaskHint/>
                        <adminTaskLoadFile/>
                    </adminTask>

                    <importActionMessage/>
                    <statusMessage>
                        <entry/>
                        <entryList/>
                    </statusMessage>

                    <formatted-result/>
                    <formatted-query/>
                    <uploadStatus>waiting</uploadStatus>
                    <uploadedFileName/>
                    <!-- upload status is waiting | ready | failed | loaded
                        Button for upload is displayed when status is ready
                    -->
                    <importStatus>waiting</importStatus>
                    <!-- importStatus is waiting | loaded | ready | unsupported | processing | imported | generated | transformed | merged | checked | failed 
                         Control for file upload is displayed when status is waiting
                         Additional inputs (task specific) are displayed when status is loaded or ready
                         Button for import is displayed when status is ready
                    -->
                    <importXMLRoot/>
                    <importStatusMessage/>

                    <storageDocument/>
                    <storageObject/>
                    <importPatientId/>
                    <effectiveTime/>
                    <timeStamp/>

                    <sourceHandle/>
                    <targetHandle/>
                    <mergeHandle/>

                    <managedApplication>
                        <applicationIRI/>
                        <applicationId/>

                        <commonModelIRI/>
                        <commonModelId/>

                        <defaultSpecialtyIRI/>
                        <defaultSpecialtyId/>

                        <baseLanguage code="" displayName=""/>

                        <applicationStorageLocation/>
                        <applicationDatabaseLocation/>
                        <applicationParametersStatus/>

                    </managedApplication>

                    <managedDatabase>
                        <system/>

                        <physicalDatabase/>
                        <btuLocation/>
                        <physicalClusterNode/>
                        <databaseVersion/>
                        <databaseURL/>
                        <logicalDatabaseLocation/>
                        <databaseAccessible/>
                        <status/>
                    </managedDatabase>

                    <databaseAccessLayer>
                        <databaseLocation/>
                        <storageLocation/>
                        <applicationIRI/>
                        <processingAction/>
                        <databaseOperation>Replaced with template in
                            view-parameters</databaseOperation>
                        <queryDocument/>
                        <writeDocument/>
                        <queryReport displayName="" start="" end="" duration=""/>
                        <status/>
                        <cityEHR:empty/>
                    </databaseAccessLayer>

                    <manageEMPI>
                        <status/>
                    </manageEMPI>

                    <browsePhysicalDatabases>
                        <databaseHandle/>
                        <manifestLocation/>
                        <node type="collection" name="" path="" size="" lastModified=""/>
                        <filter/>
                        <sortCriteria>type</sortCriteria>
                        <sortDirection>ascending</sortDirection>
                        <showBTUs>false</showBTUs>
                    </browsePhysicalDatabases>

                    <browseLogicalDatabases>
                        <databaseLocation/>
                        <nodeHierarchy/>
                        <node type="collection" name="" path="" size="" lastModified=""/>
                    </browseLogicalDatabases>

                    <viewAuditLog>
                        <userIRI/>
                        <startDate/>
                        <patientFilter/>
                        <maxSessions/>
                        <auditLogSessionHandle/>
                    </viewAuditLog>

                    <manageCareTeams>
                        <careTeamId/>
                        <careTeamDisplayName/>
                        <filter/>
                        <applicationUser/>
                        <careTeamUser/>
                        <editStatus/>
                        <lifecycleStatus>waiting<!-- new | selected | waiting --></lifecycleStatus>
                    </manageCareTeams>

                    <manageDirectory>
                        <specialtyIRI/>
                        <directoryIRI/>
                        <languageCode/>
                        <lifecycleStatus/>
                        <statusMessage/>
                        <status/>
                        <editStatus/>
                        <editElementDisplayName/>
                        <directoryType><!-- element | entry --></directoryType>
                        <directory>Inserted from template in applicationControl-instance when a
                            directory is selected</directory>
                    </manageDirectory>

                    <importDirectory>
                        <applicationIRI/>
                        <specialtyIRI/>
                        <directoryIRI/>
                        <languageCode/>
                        <status/>
                        <statusMessage/>
                        <!-- directory element is replaced here from directoryList -->
                        <directory root="" displayName="" type="" key=""/>
                    </importDirectory>

                    <importLanguagePack>
                        <type/>
                        <application/>
                        <languageCode/>
                        <baseLanguageCode/>
                        <overwriteVariants/>
                        <status/>
                    </importLanguagePack>

                    <managedLanguagePack>
                        <type/>
                        <languageCode/>
                        <overwriteVariants/>
                        <exportFormat/>
                        <transformationXSL/>
                        <status/>
                    </managedLanguagePack>

                    <manageCohortSearch>
                        <cohortType/>
                        <userIRI/>
                        <userId/>
                        <userSearchId/>
                        <roleIRI/>
                        <roleId/>
                        <sharedSearchId/>
                    </manageCohortSearch>

                    <importCohortSearch>
                        <roleIRI/>
                    </importCohortSearch>

                    <manageUsers>
                        <showPassword>false</showPassword>
                        <applicationIRI/>
                        <managedUserId/>
                        <managedUserLogonAlias/>
                        <managedUserHandle/>
                        <validUserId>true</validUserId>
                        <managedUserApplications/>
                        <managedUserSpecialties/>
                        <managedUserRoles/>
                        <systemAdministrator/>
                        <editAccount>false</editAccount>
                        <editStatus/>
                        <lifecycleStatus>waiting<!-- new | selected | waiting | myAccount--></lifecycleStatus>
                        <filter/>
                        <!-- Fix legacy issues in stored credentials -->
                        <legacyFixes>
                            <role value="" displayName=""/>
                            <restrictPatientAccess value="" displayName=""/>
                            <logonAlias/>
                        </legacyFixes>
                    </manageUsers>

                    <manageSystemIcons>
                        <editStatus/>
                    </manageSystemIcons>

                    <manageSystemParameters>
                        <!-- Control is in systemParametersModel, except for language variants -->
                    </manageSystemParameters>

                    <manageApplicationParameters>
                        <status/>
                        <applicationIRI/>
                        <specialtyIRI/>
                        <userCount>0</userCount>
                        <specialtyCount>0</specialtyCount>
                        <informationModelCount>0</informationModelCount>
                        <recordCount>0</recordCount>
                        <compositionCount>0</compositionCount>
                        <edit/>
                        <debugInstance/>
                    </manageApplicationParameters>

                    <managedParameters>
                        <status/>
                        <language code="" displayName=""/>
                        <baseLanguage code="" displayName=""/>
                        <languagePackExists/>

                        <edit/>
                        <editType>parameters | languagePack</editType>
                        <editStatus/>

                        <termFilter/>
                        <termSortOrder/>
                    </managedParameters>

                    <newApplicationWizard>
                        <!-- status is waiting | applicationExists | application-parameters-built | creating-application | completed-create-application -->
                        <status>waiting</status>
                        <applicationIdBase/>
                        <applicationIRI/>

                    </newApplicationWizard>

                    <inspectSpreadsheet>
                        <spreadsheetFormat/>
                        <spreadsheetInfo activeTableId="" viewSheet="false" exportHeaders="true">
                            <!-- tableInfo elements are insterted here by set-spreadsheetInfo -->
                        </spreadsheetInfo>
                        <tableInfo id="" recordCount="" fieldCount="" headerRecordCount="0"/>
                    </inspectSpreadsheet>

                    <importRecords>
                        <status/>
                        <specialtyIRI/>
                        <setCompositionId/>
                        <recordFormat>msAccess | xml | database | invalid </recordFormat>
                        <recordImportMap>Gets replaced by template or stored map</recordImportMap>
                    </importRecords>

                    <manageRecords>
                        <!-- operation is merge | unmerge | archive | unarchive -->
                        <operation/>
                        <!-- subOperation is record | composition -->
                        <subOperation/>
                        <!-- status is unverified | verified | processed | error -->
                        <status default="unverified"/>
                        <effectiveTime/>
                        <serviceEventList/>
                        <source>
                            <patientId/>
                            <compositionCount/>
                            <effectiveTime/>
                            <!-- status is waiting | loaded | notFound | invalid | sameRecords -->
                            <status default="waiting"/>
                            <!-- cdaHeader is inserted from view-parameters -->
                            <cdaHeader>
                                <id/>
                                <prefix/>
                                <given/>
                                <family/>
                                <administrativeGenderCode/>
                                <birthTime/>
                            </cdaHeader>
                        </source>
                        <target>
                            <patientId/>
                            <compositionCount/>
                            <source/>
                            <effectiveTime/>
                            <!-- status is waiting | loaded | notFound | invalid | sameRecords -->
                            <status default="waiting"/>
                            <!-- cdaHeader is inserted from view-parameters -->
                            <cdaHeader>
                                <id/>
                                <prefix/>
                                <given/>
                                <family/>
                                <administrativeGenderCode/>
                                <birthTime/>
                            </cdaHeader>
                        </target>
                    </manageRecords>

                    <fixCompositions>
                        <compositionIRI>#CityEHR:Form:PonsetiCasting</compositionIRI>
                        <source entryIRI="#ISO-13606:Entry:CastDate"
                            elementIRI="#ISO-13606:Element:BaseTime"/>
                        <target entryIRI="" elementIRI="#ISO-13606:Element:PiraniDate"/>
                    </fixCompositions>

                    <codeKnowledgeSources>
                        <status/>
                        <selectedMapIndex/>
                        <codeSystem/>
                    </codeKnowledgeSources>

                    <importKnowledgeMap>
                        <!-- TBD -->
                    </importKnowledgeMap>

                    <generateTestData>
                        <status/>
                        <specialtyIRI/>
                        <debug/>
                        <reportProgress/>
                        <startTime/>
                        <processTime/>
                        <stepTime/>
                        <averageStepTime/>
                        <randomNumber/>
                        <randomNumberSize><!-- This is the power of ten i.e. 3 = random number 1-999--></randomNumberSize>
                        <randomNumberBase>1000</randomNumberBase>
                        <recordCount/>
                        <numberOfRecords/>
                        <genderValueSet processingValue="" transitionCount="" processingGivenName="">
                            <genderValue/>
                        </genderValueSet>
                        <identifierPrefix/>
                        <identifierLength><!-- This is the length of the whole suffix - minimum is identifierPrefixLength + identifierMinimumSuffixLength --></identifierLength>
                        <identifierPrefixLength/>
                        <identifierRandomSuffix/>
                        <identifierRandomSuffixLength/>
                        <identifierMinimumSuffixLength/>
                        <identifierLengthMin/>
                        <identifierLengthMax/>
                        <setBirthTime/>
                        <minimumAge>0<!--Gets reset in setup but needed to make sure xforms-value-changed works OK--></minimumAge>
                        <maximumAge>110<!--Gets reset in setup but needed to make sure xforms-value-changed works OK--></maximumAge>
                        <maximumPlausibleAge>110</maximumPlausibleAge>
                        <dayDuration>P1D</dayDuration>
                        <monthDuration>P1M</monthDuration>
                        <baseDate/>
                        <incrementDuration/>
                        <templateBirthTime/>
                        <cdaHeaderSet/>
                        <cdaHeader>
                            <id/>
                            <prefix/>
                            <given>Given Name</given>
                            <family>Family Name</family>
                            <administrativeGenderCode>Unkown</administrativeGenderCode>
                            <birthTime>1983-03-15</birthTime>
                            <providerOrganization>cityEHR</providerOrganization>
                        </cdaHeader>
                    </generateTestData>

                    <manageInformationModel>
                        <status/>
                        <editStatus/>
                        <specialtyIRI/>
                        <specialtyId/>
                        <specialtyDisplayName/>
                        <modelSelected/>
                        <classIRI/>
                        <modelIRI/>
                        <iso-13606Node/>
                        <compositionIRI/>
                        <compositionTermSet/>
                        <showOntologyDetails>true</showOntologyDetails>
                        <editLanguagePack>false</editLanguagePack>
                        <showLanguagePack>false</showLanguagePack>
                        <ontologyView/>
                        <staticDisplay/>
                        <language code="" displayName=""/>
                        <baseLanguage code="" displayName=""/>
                        <languagePackExists/>
                        <termFilter/>
                        <termFilterText/>
                        <termFilterComposition/>
                        <termFilterCharacterSet/>
                        <termSortOrder/>
                        <informationModelResource/>
                        <informationModelType><!-- Specialty | Class | Summary --></informationModelType>
                        <informationModelDisplayType/>
                        <exportExtract/>
                        <exportFormat/>
                    </manageInformationModel>

                    <importInformationModel>
                        <editStatus/>
                        <applicationIRI/>
                        <specialtyIRI/>
                        <informationModelType/>
                        <classIRI/>
                        <modelIRI/>
                        <baseLanguageCode/>
                        <isCommonModel/>
                        <hasCommonModel/>
                        <hasExistingModel/>
                        <mergeCommonModel>false</mergeCommonModel>
                        <mergeExistingModel>false</mergeExistingModel>
                        <rebuildDirectories>true</rebuildDirectories>
                        <checkExpressions>false</checkExpressions>
                    </importInformationModel>

                    <manageLocalInformationModel>
                        <specialtyIRI/>
                        <specialtyId/>
                        <specialtyDisplayName/>
                        <modelIRI/>
                    </manageLocalInformationModel>

                    <manageMedia>
                        <status/>
                        <entryIRI/>
                        <editStatus/>
                    </manageMedia>

                    <manageImageMaps>
                        <entryIRI/>
                        <editStatus/>
                    </manageImageMaps>

                    <manageLetterTemplates>
                        <editStatus/>
                        <specialtyIRI/>
                        <letterTemplateId/>
                        <status/>
                    </manageLetterTemplates>

                    <enumeratedClassSelection>
                        <selectedNode displayName=""/>
                        <suppDataSetId/>
                        <suppDataSet/>
                    </enumeratedClassSelection>

                    <manageSchedule>
                        <displayDate/>
                        <scheduleDate/>
                        <monthlySchedule id="" displayName="">
                            <!-- schedule inserted from template -->
                        </monthlySchedule>
                        <excludedDates>
                            <date value="" displayName=""/>
                        </excludedDates>
                    </manageSchedule>

                    <createClinic>
                        <status>waiting | created | scheduled</status>
                        <createDate/>
                        <clinicSchedule id="" specialty="" displayName="">
                            <!-- schedule inserted from template -->
                        </clinicSchedule>

                    </createClinic>

                    <manageClinic>
                        <specialtyIRI/>
                    </manageClinic>

                    <redirectNotifications>
                        <specialtyIRI/>
                        <notificationType/>
                        <notificationCount/>
                        <status>waiting<!-- set to ready when parameters have been set--></status>
                        <notifications>
                            <effectiveTime from="" to=""/>
                            <authorTime from="" to=""/>
                            <notifyActorType/>
                            <notifyActor/>
                            <actionType/>
                            <action/>
                            <originType/>
                            <origin/>
                            <trigger/>
                            <triggerComposition/>
                            <triggerEntry/>
                            <triggerEffectiveTimeElement/>
                            <selectedtrigger><!-- Inserted here, from application-parameters --></selectedtrigger>
                            <triggeredEffectiveTime/>
                            <acknowledged/>
                        </notifications>
                        <redirectedNotifications>
                            <notifyActorType/>
                            <notifyActor/>
                            <actionType/>
                            <action/>
                            <resetEffectiveTime/>
                            <acknowledge/>
                        </redirectedNotifications>
                    </redirectNotifications>

                    <managePatientAccess>
                        <status/>
                        <patientDatabaseStorageLocation/>
                        <patientDatabaseApplicationLocation/>
                        <specialtyIRI/>
                        <composition id="" displayName="" selected="false"/>
                        <patientCompositionSet>
                            <!-- composition elements are inserted here -->
                        </patientCompositionSet>
                        <compositionCount/>
                        <selectedCompositionCount/>
                        <patientSessionCount/>
                    </managePatientAccess>

                    <testWebService>
                        <selectedService/>
                    </testWebService>

                    <processPatientList>
                        <headerRows/>
                        <patientIdLength/>
                        <careTeamId/>
                        <patientList type="importedPatientList" count="" display="show"/>
                        <patientList type="hasRecordPatientList" count="" display="show"/>
                        <patientList type="noRecordPatientList" count="" display="show"/>
                        <patientList type="careTeamPatientList" count="" display="hidden"/>
                    </processPatientList>
                </control>
            </xf:instance>

            <!-- Control instance bindings -->
            <xf:bind nodeset="xxf:instance('control-instance')">
                <xf:bind nodeset="manageInformationModel/showOntologyDetails" type="xs:boolean"/>
                <xf:bind nodeset="importLanguagePack/overwriteVariants" type="xs:boolean"/>
                <xf:bind nodeset="manageInformationModel/editLanguagePack" type="xs:boolean"/>
                <xf:bind nodeset="importInformationModel/mergeCommonModel" type="xs:boolean"/>
                <xf:bind nodeset="importInformationModel/mergeExistingModel" type="xs:boolean"/>
                <xf:bind nodeset="importInformationModel/rebuildDirectories" type="xs:boolean"/>
                <xf:bind nodeset="browsePhysicalDatabases/showBTUs" type="xs:boolean"/>
                <xf:bind nodeset="manageDirectory/editElementDisplayName" type="xs:boolean"/>
                <xf:bind nodeset="manageUsers/editAccount" type="xs:boolean"/>
                <xf:bind nodeset="manageUsers/showPassword" type="xs:boolean"/>
                <xf:bind nodeset="generateTestData/numberOfRecords" type="xs:integer"/>
                <xf:bind nodeset="generateTestData/reportProgress" type="xs:boolean"/>
                <xf:bind nodeset="generateTestData/setBirthTime" type="xs:boolean"/>
                <xf:bind nodeset="manageSchedule/displayDate" type="xs:date"/>
                <xf:bind nodeset="manageSchedule/excludedDates/date/@value" type="xs:date"/>
                <xf:bind nodeset="manageSchedule/monthlySchedule/week/day/@exclude"
                    type="xs:boolean"/>
                <xf:bind nodeset="redirectNotifications/notifications/acknowledged"
                    type="xs:boolean"/>
                <xf:bind nodeset="redirectNotifications/notifications/effectiveTime/@from"
                    type="xs:date"/>
                <xf:bind nodeset="redirectNotifications/notifications/effectiveTime/@to"
                    type="xs:date"/>
                <xf:bind nodeset="redirectNotifications/notifications/authorTime/@from"
                    type="xs:date"/>
                <xf:bind nodeset="redirectNotifications/notifications/authorTime/@to" type="xs:date"/>
                <xf:bind nodeset="redirectNotifications/redirectedNotifications/resetEffectiveTime"
                    type="xs:boolean"/>
                <xf:bind nodeset="redirectNotifications/redirectedNotifications/acknowledge"
                    type="xs:boolean"/>
                <xf:bind nodeset="managePatientAccess/patientCompositionSet/composition/@selected"
                    type="xs:boolean"/>
                <xf:bind nodeset="managedParameters/edit" type="xs:boolean"/>
                <xf:bind nodeset="inspectSpreadsheet/spreadsheetInfo/@viewSheet" type="xs:boolean"/>
                <xf:bind nodeset="inspectSpreadsheet/spreadsheetInfo/@exportHeaders"
                    type="xs:boolean"/>
                <xf:bind nodeset="importRecords/recordImportMap/@showMap" type="xs:boolean"/>

                <xf:bind nodeset="createClinic/clinicSchedule/bookingHorizon/startDate/@value"
                    type="xs:date"/>
                <xf:bind nodeset="createClinic/clinicSchedule/bookingHorizon/horizon/@value"
                    type="xs:integer"/>
                <xf:bind nodeset="createClinic/clinicSchedule/bookingHorizon/rollingHorizon/@value"
                    type="xs:boolean"/>
                <xf:bind nodeset="createClinic/clinicSchedule/schedulePattern/*/*/@selected"
                    type="xs:boolean"/>

            </xf:bind>


            <!-- ===
                 Manage system icons
                 manageSystemIcons        
                ============================================================ -->

            <!-- Application defined action to reset the system icons
            -->
            <xf:action ev:event="reset-manageSystemIcons">
                <!-- Load the iconList -->
                <xf:dispatch name="load-system-icons" target="systemParameters-model"/>
            </xf:action>


            <!-- Application defined action to reload the system icons from disk
            -->
            <xf:action ev:event="reload-systemIcons">
                <xf:dispatch name="initialize-system-icons" target="systemParameters-model"/>
            </xf:action>


            <!-- Application defined action to save the system icons to xmlstore
            -->
            <xf:action ev:event="save-systemIcons"> </xf:action>



            <!-- ===Generating Test Data ===============================
                 generateTestData
                 Loading test data sets and generating random numbers and Ids
                 ======================================================== -->

            <!-- Instance for the test record -->
            <xf:instance id="test-record-instance">
                <records/>
            </xf:instance>

            <!-- Directories for test data names -->
            <xf:instance id="familyNames-instance"
                src="oxf:/apps/ehr/resources/testData/familyNames.xml"/>
            <xf:instance id="maleGivenNames-instance"
                src="oxf:/apps/ehr/resources/testData/maleGivenNames.xml"/>
            <xf:instance id="femaleGivenNames-instance"
                src="oxf:/apps/ehr/resources/testData/femaleGivenNames.xml"/>
            <xf:instance id="neutralGivenNames-instance"
                src="oxf:/apps/ehr/resources/testData/neutralGivenNames.xml"/>

            <!-- Application defined action to set the baseDate and incrementDuration.
                 The baseDate is the minimum setting for the birthDate, based on the maximumAge input by the user (ages are relative to the current date)
                 The incrementDuration is the age range (as a duration) divided by the randomNumberBase.
                 Then to create a random birthDate to give a patient between minimumAge and maximumAge:
                    Generate a random number (between 1 and randomNumberBase)
                    Add that number of incrementDuration to the baseDate
            -->
            <xf:action ev:event="setBaseDate">
                <xf:setvalue ref="xxf:instance('control-instance')/generateTestData/baseDate"
                    value="xs:date(current-date() - xs:yearMonthDuration(12 * xs:yearMonthDuration(xxf:instance('control-instance')/generateTestData/monthDuration) * (xxf:instance('control-instance')/generateTestData/maximumAge + 1)) + xs:dayTimeDuration(xxf:instance('control-instance')/generateTestData/dayDuration))"/>
                <xxf:variable name="minAgeDate"
                    select="xs:date(current-date() - xs:yearMonthDuration(12 * xs:yearMonthDuration(xxf:instance('control-instance')/generateTestData/monthDuration) * xxf:instance('control-instance')/generateTestData/minimumAge))"/>
                <xf:setvalue
                    ref="xxf:instance('control-instance')/generateTestData/incrementDuration"
                    value="xs:dayTimeDuration(xs:date($minAgeDate) - xs:date(xxf:instance('control-instance')/generateTestData/baseDate)) div xxf:instance('control-instance')/generateTestData/randomNumberBase"
                />
            </xf:action>

            <!-- Application defined action to set the gender values from the information model.
                 Get gender element from patient registration configuration.
                 Get set of values for the gender element from the information model dictionary 
                 That dictionary must be for the model that contains the registration events/elements
                 Set up gender values in the control-instance generateTestData/genderValueSet.
                 Uses the template generateTestData/genderValue
            -->
            <xf:action ev:event="setGenderValueSet">

                <!-- Gender element - should be enumeratedValue (TBD - allow for enumeratedClass, enumeratedDirectory) -->
                <xxf:variable name="administrativeGenderCodeElementIRI"
                    select="xxf:instance('application-parameters-instance')/patientRegistration/administrativeGenderCode/@element"/>
                <!-- Set of gender values -->
                <xxf:variable name="genderValues"
                    select="xxf:instance('dictionary-instance')/iso-13606:elementCollection/iso-13606:element[@root=$administrativeGenderCodeElementIRI]/iso-13606:data"/>

                <!-- Set genderValues in control-instance.
                     Blank value is set from template in view-parameters -->
                <xxf:variable name="genderValueTemplate"
                    select="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/generateTestData/genderValue"/>
                <xf:delete
                    nodeset="xxf:instance('control-instance')/generateTestData/genderValueSet/*"/>
                <xf:insert
                    context="xxf:instance('control-instance')/generateTestData/genderValueSet"
                    origin="$genderValueTemplate"/>

                <!-- Other values are from the data dictionary.
                     The percentage for each category is set evenly -->
                <xxf:variable name="categoryPercentage"
                    select="if (count($genderValues) gt 0) then floor(100 div count($genderValues)) else 0"/>
                <xf:action xxf:iterate="$genderValues">
                    <xxf:variable name="genderValue" select="."/>
                    <xf:insert
                        context="xxf:instance('control-instance')/generateTestData/genderValueSet"
                        nodeset="genderValue" origin="$genderValueTemplate" at="last()"
                        position="after"/>
                    <xxf:variable name="genderValueOption"
                        select="xxf:instance('control-instance')/generateTestData/genderValueSet/genderValue[last()]"/>
                    <xf:setvalue ref="$genderValueOption/@value" value="$genderValue/@value"/>
                    <xf:setvalue ref="$genderValueOption/@displayName"
                        value="$genderValue/@displayName"/>
                    <xf:setvalue ref="$genderValueOption/@percentage" value="$categoryPercentage"/>
                </xf:action>
                <!-- Adjust final percentage so that they add to 100 -->
                <xxf:variable name="percentageAdjustment"
                    select="100 - sum(xxf:instance('control-instance')/generateTestData/genderValueSet/genderValue[@percentage castable as xs:integer]/@percentage)"/>
                <xf:setvalue
                    ref="xxf:instance('control-instance')/generateTestData/genderValueSet/genderValue[last()]/@percentage"
                    value="if (. castable as xs:integer) then xs:integer(.)+ $percentageAdjustment else $percentageAdjustment"
                />
            </xf:action>


            <!-- Application defined action to verify genderValue percentages.
                 Invoked when the genderValue (passed as a parameter) is set.
                 Checks the sum of all genderValue percentages.
                    If 100% or less then 100% then just set status.
                    Until 2022-11-22
                    If greater than 100% then reduce the first non-zero percentages, not the genderValue parameter   
                    No longer doing this, since its very annoying!
            -->
            <xf:action ev:event="verifyGenderPercentages">
                <xxf:variable name="genderValue" select="event('genderValue')"/>

                <!-- Only use genderValues with percentage properly set -->
                <xxf:variable name="genderValueSet"
                    select="xxf:instance('control-instance')/generateTestData/genderValueSet/genderValue[@percentage castable as xs:integer]"/>
                <xxf:variable name="genderValuePercentageSum"
                    select="sum($genderValueSet/@percentage)"/>

                <!-- Reduce some non-zero percentages if sum is greater than 100% 
                     Until 2022-11-22 -->
                <!--
                <xxf:variable name="adjustableGenderValueSet" select="$genderValueSet[@value!=$genderValue/@value][xs:integer(@percentage) gt 0]"/>
                <xf:action if="xs:integer($genderValuePercentageSum) gt 100" xxf:iterate="$adjustableGenderValueSet">
                    <xxf:variable name="adjustableValue" select="."/>
                    <xxf:variable name="adjustedPercentageSum" select="sum($genderValueSet/@percentage)"/>
                    <xxf:variable name="adjustment" select="$adjustedPercentageSum - 100"/>
                    <xxf:variable name="adjustedValue" select="$adjustableValue/@percentage - $adjustment"/>

                    <xf:setvalue ref="$adjustableValue/@percentage" value="if ($adjustedValue gt 0) then $adjustedValue else 0"/>
                </xf:action>
                -->

                <!-- Set importStatus (button to generate test records is only displayed when importStatus = 'ready'.
                     genderValuePercentageSum will have been adjusted down if greater than 100% -->
                <xf:setvalue ref="xxf:instance('control-instance')/importStatus"
                    value="if (xs:integer($genderValuePercentageSum) eq 100) then 'ready' else 'loaded'"/>

            </xf:action>

            <!-- Application defined action to set the numberOfRecords for each genderValue.
                 Invoked when any genderValue is set.
                 Sets numberOfRecords to 0 for all genderValues with percentages that are non-integer
                 Sets numberOfRecords of all other genderValues to their percentage of the overall numberOfRecords
            -->
            <xf:action ev:event="setGenderRecords">
                <xxf:variable name="numberOfRecords"
                    select="xxf:instance('control-instance')/generateTestData/numberOfRecords"/>

                <!-- Set non-integer percentages to zero record count -->
                <xxf:variable name="zeroedGenderValueSet"
                    select="xxf:instance('control-instance')/generateTestData/genderValueSet/genderValue[not(@percentage castable as xs:integer)]"/>
                <xf:action xxf:iterate="$zeroedGenderValueSet">
                    <xf:setvalue ref="@numberOfRecords" value="0"/>
                </xf:action>

                <!-- Set numberOfRecords for valid percentages -->
                <xxf:variable name="genderValueSet"
                    select="xxf:instance('control-instance')/generateTestData/genderValueSet/genderValue[@percentage castable as xs:integer]"/>
                <xf:action xxf:iterate="$genderValueSet">
                    <xxf:variable name="genderValue" select="."/>
                    <xf:setvalue ref="$genderValue/@numberOfRecords"
                        value="floor((xs:integer($genderValue/@percentage) div 100) * xs:integer($numberOfRecords))"
                    />
                </xf:action>

                <!-- If genderValue percentages total 100%, then genderValue numberOfRecords must total $numberOfRecords.
                     Adjustment should always be positive, since percentatge of $numberOfRecords were rounded down for all genderValues.
                     Make adjustment to the genderValue with largest percentage -->
                <xxf:variable name="percentageTotal"
                    select="sum(xxf:instance('control-instance')/generateTestData/genderValueSet/genderValue[@percentage castable as xs:integer]/@percentage)"/>
                <xxf:variable name="maxPercentage"
                    select="max(xxf:instance('control-instance')/generateTestData/genderValueSet/genderValue[@percentage castable as xs:integer]/@percentage)"/>

                <xxf:variable name="adjustment"
                    select="if ($percentageTotal eq 100) then xs:integer($numberOfRecords) - sum(xxf:instance('control-instance')/generateTestData/genderValueSet/genderValue[@numberOfRecords castable as xs:integer]/@numberOfRecords) else 0"/>
                <xf:setvalue ref="($genderValueSet[@percentage=$maxPercentage])[1]/@numberOfRecords"
                    value="xs:integer(.) + xs:integer($adjustment)"/>
            </xf:action>


            <!-- Application defined action to set the default CDA Header for test data -->
            <xf:action ev:event="setDefaultCDAHeader">
                <xf:delete nodeset="xxf:instance('control-instance')/generateTestData/cdaHeader"/>
                <xf:insert context="xxf:instance('control-instance')/generateTestData"
                    origin="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/generateTestData/cdaHeader"
                />
            </xf:action>

            <!-- Application defined action to generate a random number from the current-dateTime
                The randomString from the current-dateTime, of the form 2014-06-30T19:03:28.047+01:00 
                Timezone can be Z or +/- HH:MM
                Just take the first 23 characters which will strip the timezone and leave milliseconds as the last three characters.
                Except that the milliseconds may not use all three decimal places, so the resulting string may be between 20 and 23 characters
                Then remove the characters -T:.+Z using translate to give the randomString
                
                The scrambledString uses the hmac xpath function to encrypt the randomString, using the seedKey.
                Small variations in the randomString will create larger and unpredicatable variations in the scambledString
                
                randomNumberString is a string made from concatenating the codepoints of scrambledString
                so will be castable to an integer, but may be very large (possibly too large)
                
                The randomNumber gets the last randomNumberSize characters of randomNumberString and may include leading zeros
                The random number set for ongoing use is usually 1-999 (determined by randomNumberSize=3)   
                
                The identifierRandomSuffix is a string of identifierRandomSuffixLength integers, formed from the randomNumberString               
                -->
            <xf:action ev:event="generateRandomNumber">
                <!-- Random string is generated from the current dateTime, which will be most random in the milliseconds -->
                <xxf:variable name="randomString"
                    select="xs:string(translate(substring(xs:string(current-dateTime()),1,23),'0123456789-T:.+Z','0123456789'))"/>

                <!-- The scrambled string creates bigger variations for small differences in the random string -->
                <xxf:variable name="scrambledString"
                    select="hmac($randomString,reverse($randomString), 'MD5', 'hex')"/>

                <!-- Get the sequence of codepoints (integers) for the scrambledString -->
                <xxf:variable name="randomNumberSequence"
                    select="string-to-codepoints($scrambledString)"/>

                <!-- Get the sequence of strings for the integers -->
                <xxf:variable name="randomNumberStringSequence"
                    select="for $i in $randomNumberSequence return xs:string($i)"/>

                <!-- Join the randomNumberStringSequence to get the randomNumberString -->
                <xxf:variable name="randomNumberString"
                    select="string-join($randomNumberStringSequence,'')"/>


                <xxf:variable name="randomNumberBaseSize"
                    select="string-length(xxf:instance('control-instance')/generateTestData/randomNumberBase)"/>
                <xf:setvalue
                    ref="xxf:instance('control-instance')/generateTestData/randomNumberSize"
                    value="$randomNumberBaseSize - 1"/>
                <xxf:variable name="randomNumber"
                    select="xs:integer(substring($randomNumberString, string-length($randomNumberString) - $randomNumberBaseSize, xxf:instance('control-instance')/generateTestData/randomNumberSize))"/>
                <xf:setvalue ref="xxf:instance('control-instance')/generateTestData/randomNumber"
                    value="$randomNumber"/>
                <xf:setvalue
                    ref="xxf:instance('control-instance')/generateTestData/identifierRandomSuffix"
                    value="substring($randomNumberString,1,xxf:instance('control-instance')/generateTestData/identifierRandomSuffixLength)"
                />
            </xf:action>


            <!-- Application defined action to generate a random CDA Header.
                 Selections from names use the count of the number of names (C)
                 If the randomNumber is R and the base of the randomNumberBase is B, then the selection = ceiling(C*R/B)
                 ceiling rounds up to the nearest integer
                 
                 e.g. randomNumberBase of 1000 generates randomNumber between 1 and 999
                      selecting from a count of 4 names gives 4/1000 of the random number = 0.something up to R=250, 1.something 250 - 500, etc
                 -->
            <xf:action ev:event="set-cdaHeader">
                <xxf:variable name="cdaHeader" select="event('cdaHeader')"/>
                <xxf:variable name="genderValue" select="event('genderValue')"/>
                <xxf:variable name="count" select="event('count')"/>

                <!-- patientId -->
                <xf:dispatch name="generateRandomNumber" target="main-model"/>
                <xxf:variable name="countString" select="xs:string($count)"/>
                <xxf:variable name="countStringLength" select="string-length($countString)"/>

                <xxf:variable name="idPrefix"
                    select="concat(xxf:instance('control-instance')/generateTestData/identifierPrefix,$countString)"/>
                <xxf:variable name="idPrefixLength" select="string-length($idPrefix)"/>

                <xxf:variable name="suffixLength"
                    select="xxf:instance('control-instance')/generateTestData/identifierLength - $idPrefixLength"/>
                <xf:setvalue ref="$cdaHeader/id"
                    value="concat($idPrefix,substring(xxf:instance('control-instance')/generateTestData/identifierRandomSuffix,1,$suffixLength))"/>

                <!-- prefix (is gender-specific) -->
                <xf:setvalue ref="$cdaHeader/prefix" value="$genderValue/@prefix"/>

                <!-- given name (is gender-specific) 
                     select randomly, between 1 and givenNamesCount -->
                <xf:setvalue ref="$cdaHeader/given" value="''"/>
                <xf:action if="$genderValue/@givenName != ''">
                    <xf:dispatch name="generateRandomNumber" target="main-model"/>

                    <xxf:variable name="givenNames" select="xxf:instance($genderValue/@givenName)"/>
                    <xxf:variable name="givenNamesCount" select="count($givenNames/name)"/>
                    <xxf:variable name="givenNamesSelection"
                        select="ceiling((xs:integer(xxf:instance('control-instance')/generateTestData/randomNumber) * $givenNamesCount) div xs:integer(xxf:instance('control-instance')/generateTestData/randomNumberBase))"/>
                    <xf:setvalue ref="$cdaHeader/given"
                        value="$givenNames/name[position()=$givenNamesSelection]"/>
                </xf:action>

                <!-- family name 
                     select randomly, between familyNamesCount and 1 -->
                <xf:dispatch name="generateRandomNumber" target="main-model"/>
                <xxf:variable name="familyNamesCount"
                    select="count(xxf:instance('familyNames-instance')/name)"/>
                <xxf:variable name="familyNamesSelection"
                    select="ceiling((xs:integer(xxf:instance('control-instance')/generateTestData/randomNumber) * $familyNamesCount) div xs:integer(xxf:instance('control-instance')/generateTestData/randomNumberBase))"/>
                <xf:setvalue ref="$cdaHeader/family"
                    value="xxf:instance('familyNames-instance')/name[position()=$familyNamesSelection]"/>

                <!-- birthTime -->
                <xxf:variable name="incrementDuration"
                    select="xs:integer(xxf:instance('control-instance')/generateTestData/randomNumber) * xs:dayTimeDuration(xxf:instance('control-instance')/generateTestData/incrementDuration)"/>
                <xf:setvalue ref="$cdaHeader/birthTime"
                    value="if (xxf:instance('control-instance')/generateTestData/setBirthTime = true()) then substring(xs:string(xs:date(xxf:instance('control-instance')/generateTestData/baseDate) + xs:dayTimeDuration($incrementDuration)),1,10) else xxf:instance('control-instance')/generateTestData/templateBirthTime"/>

                <!-- administrativeGenderCode -->
                <xf:setvalue ref="$cdaHeader/administrativeGenderCode" value="$genderValue/@value"/>
            </xf:action>


            <!-- Application defined action to set the CDA Header elements in the record set template.
                 The import-instance contains the set of CDA documents
                 Need to set the CDA header and any entry/elements recorded in the body of the documents
                 The values to set have already been set up in generateTestData/cdaHeader
                 If the birthTime is set, then any dates in the template must be adjusted vs the previous birthTime in the template (templateBirthTime)
            -->
            <xf:action ev:event="set-TestRecordCDAHeaderComponents">
                <xxf:variable name="cdaHeader" select="event('cdaHeader')"/>

                <!-- CDA Headers -->
                <xf:action xxf:iterate="xxf:instance('test-record-instance')//cda:patientRole">
                    <xf:setvalue ref="cda:id/@extension" value="$cdaHeader/id"/>

                    <xf:setvalue ref="cda:patient/cda:name/cda:prefix" value="$cdaHeader/prefix"/>
                    <xf:setvalue ref="cda:patient/cda:name/cda:given" value="$cdaHeader/given"/>
                    <xf:setvalue ref="cda:patient/cda:name/cda:family" value="$cdaHeader/family"/>

                    <xf:setvalue ref="cda:patient/cda:administrativeGenderCode/@code"
                        value="$cdaHeader/administrativeGenderCode"/>
                    <xf:setvalue ref="cda:patient/cda:administrativeGenderCode/@displayName"
                        value="$cdaHeader/administrativeGenderCode"/>
                    <xf:setvalue ref="cda:patient/cda:administrativeGenderCode/@codeSystem"
                        value="'cityEHR'"/>

                    <!-- If not setting birthTime then cdaHeader/birthTime has been set to the date originally imported (set as templateBirthTime, and never changes) -->
                    <xf:setvalue ref="cda:patient/cda:birthTime/@value" value="$cdaHeader/birthTime"
                    />
                </xf:action>

                <!-- patientId -->
                <xxf:variable name="patientIdEntryIRI"
                    select="xxf:instance('application-parameters-instance')/patientRegistration/id/@entry"/>
                <xxf:variable name="patientIdElementIRI"
                    select="xxf:instance('application-parameters-instance')/patientRegistration/id/@element"/>
                <xf:action
                    xxf:iterate="xxf:instance('test-record-instance')/descendant::cda:observation[cda:id/@extension=$patientIdEntryIRI]/descendant::cda:value[@extension=$patientIdElementIRI]">
                    <xf:setvalue ref="./@value" value="$cdaHeader/id"/>
                </xf:action>
                <!-- prefix -->
                <xxf:variable name="prefixEntryIRI"
                    select="xxf:instance('application-parameters-instance')/patientRegistration/prefix/@entry"/>
                <xxf:variable name="prefixElementIRI"
                    select="xxf:instance('application-parameters-instance')/patientRegistration/prefix/@element"/>
                <xf:action
                    xxf:iterate="xxf:instance('test-record-instance')/descendant::cda:observation[cda:id/@extension=$prefixEntryIRI]/descendant::cda:value[@extension=$prefixElementIRI]">
                    <xf:setvalue ref="./@value" value="$cdaHeader/prefix"/>
                    <xf:setvalue ref="./@displayName" value="$cdaHeader/prefix"/>
                </xf:action>
                <!-- family -->
                <xxf:variable name="familyEntryIRI"
                    select="xxf:instance('application-parameters-instance')/patientRegistration/family/@entry"/>
                <xxf:variable name="familyElementIRI"
                    select="xxf:instance('application-parameters-instance')/patientRegistration/family/@element"/>
                <xf:action
                    xxf:iterate="xxf:instance('test-record-instance')/descendant::cda:observation[cda:id/@extension=$familyEntryIRI]/descendant::cda:value[@extension=$familyElementIRI]">
                    <xf:setvalue ref="./@value" value="$cdaHeader/family"/>
                    <xf:setvalue ref="./@displayName" value="$cdaHeader/family"/>
                </xf:action>
                <!-- given -->
                <xxf:variable name="givenEntryIRI"
                    select="xxf:instance('application-parameters-instance')/patientRegistration/given/@entry"/>
                <xxf:variable name="givenElementIRI"
                    select="xxf:instance('application-parameters-instance')/patientRegistration/given/@element"/>
                <xf:action
                    xxf:iterate="xxf:instance('test-record-instance')/descendant::cda:observation[cda:id/@extension=$givenEntryIRI]/descendant::cda:value[@extension=$givenElementIRI]">
                    <xf:setvalue ref="./@value" value="$cdaHeader/given"/>
                    <xf:setvalue ref="./@displayName" value="$cdaHeader/given"/>
                </xf:action>
                <!-- administrativeGenderCode -->
                <xxf:variable name="administrativeGenderCodeEntryIRI"
                    select="xxf:instance('application-parameters-instance')/patientRegistration/administrativeGenderCode/@entry"/>
                <xxf:variable name="administrativeGenderCodeElementIRI"
                    select="xxf:instance('application-parameters-instance')/patientRegistration/administrativeGenderCode/@element"/>
                <xf:action
                    xxf:iterate="xxf:instance('test-record-instance')/descendant::cda:observation[cda:id/@extension=$administrativeGenderCodeEntryIRI]/descendant::cda:value[@extension=$administrativeGenderCodeElementIRI]">
                    <xf:setvalue ref="./@value" value="$cdaHeader/administrativeGenderCode"/>
                    <xf:setvalue ref="./@displayName" value="$cdaHeader/administrativeGenderCode"/>
                </xf:action>

                <!-- Adjust dates, based on the birthTime set in the cdaHeader
                     All xs:date and xs:dateTime elements in the record are shifted by a proportion of the offset between the templateBirthTime and the random birthTime 
                     Need to be careful, because if the random birthTime is more recent than the templateBirthTime, a simple offset adjustment will create dates into the future.
                     So need to get the proportional offset of the date
                     This will include the element for the birthTime itself in the registration entries, which when adjusted should remain unchanged -->
                <xf:action
                    if="xxf:instance('control-instance')/generateTestData/setBirthTime='true'">
                    <!-- birthTime and templateBirthTime -->
                    <xxf:variable name="birthTime" select="$cdaHeader/birthTime"/>
                    <xxf:variable name="templateBirthTime"
                        select="xxf:instance('control-instance')/generateTestData/templateBirthTime"/>
                    <!-- Ages (in days) for birthTime and templateBirthTime -->
                    <xxf:variable name="age"
                        select="days-from-duration(current-date() - xs:date($cdaHeader/birthTime))"/>
                    <xxf:variable name="templateAge"
                        select="days-from-duration(current-date() - xs:date(xxf:instance('control-instance')/generateTestData/templateBirthTime))"/>
                    <xxf:variable name="ageRatio" select="$age div $templateAge"/>
                    <!-- Adjust effectiveTime of compositions -->
                    <xf:action
                        xxf:iterate="xxf:instance('test-record-instance')/descendant::cda:ClinicalDocument/cda:effectiveTime">
                        <xf:dispatch name="adjustDate" target="main-model">
                            <xxf:context name="date" select="./@value"/>
                            <xxf:context name="baseDate" select="$birthTime"/>
                            <xxf:context name="ratio" select="$ageRatio"/>
                        </xf:dispatch>
                    </xf:action>
                    <!-- Adjust element values that are of type xs:date or xs:dateTime -->
                    <xf:action
                        xxf:iterate="xxf:instance('test-record-instance')/descendant::cda:value[@xsi:type=('xs:date','xs:dateTime')]">
                        <xf:dispatch name="adjustDate" target="main-model">
                            <xxf:context name="date" select="./@value"/>
                            <xxf:context name="baseDate" select="$birthTime"/>
                            <xxf:context name="ratio" select="$ageRatio"/>
                        </xf:dispatch>
                        <xf:setvalue ref="./@displayName" value="''"/>
                    </xf:action>
                </xf:action>
            </xf:action>


            <!-- Application defined action to adjust a date/dateTime 
                 The date (date or dateTime) is offset from the baseDate (always a date) by the ratio (a double)
            -->
            <xf:action ev:event="adjustDate">
                <xxf:variable name="date" select="event('date')"/>
                <xxf:variable name="baseDate" select="event('baseDate')"/>
                <xxf:variable name="ratio" select="event('ratio')"/>

                <!-- Must have a valid baseDate -->
                <xf:action if="$baseDate castable as xs:date">
                    <xxf:variable name="baseDateTime" select="concat($baseDate,'T00:00:00')"/>

                    <!-- Get the duration of date from baseDate -->
                    <xf:variable name="durationFromBase"
                        select="if ($date castable as xs:dateTime) then  xs:dateTime($date) - xs:dateTime($baseDateTime) else if ($date castable as xs:date) then xs:date($date) - xs:date($baseDate) else ''"/>

                    <!-- Adjust the duration using the ratio, if durationFromBase is valid -->
                    <xf:variable name="adjustedDurationFromBase"
                        select="if ($durationFromBase castable as xs:dayTimeDuration) then xs:dayTimeDuration($durationFromBase) * $ratio else ''"/>

                    <!-- Reset the date, using the adjusted duration.
                             Date is set as xs:date or xs:dateTime -->
                    <xf:setvalue ref="$date"
                        value="if (. castable as xs:date and $adjustedDurationFromBase castable as xs:dayTimeDuration) then xs:date($baseDate) + xs:dayTimeDuration($adjustedDurationFromBase) 
                        else if (. castable as xs:dateTime and $adjustedDurationFromBase castable as xs:dayTimeDuration) then xs:dateTime($baseDateTime) + xs:dayTimeDuration($adjustedDurationFromBase) else ''"/>

                </xf:action>

            </xf:action>


            <!-- Application defined action to generate test data.
                 Called when user presses the button after the parameters have been set.
                 
                 The number of records to be generated (by gender) have been set in generateTestData/genderValueSet
                 First set up the cdaHeaderSet for the number of records to be generated.
                 Then invoke run-process for generate-test-data
            -->
            <xf:action ev:event="generate-test-data">
                <!-- Set the base date and increment for random date generation. -->
                <xf:dispatch name="setBaseDate" target="main-model"/>

                <!-- Generate the cdaHeaderSet for the selected number of records for each gender -->
                <xf:delete
                    nodeset="xxf:instance('control-instance')/generateTestData/cdaHeaderSet/*"/>
                <xxf:variable name="cdaHeaderTemplate"
                    select="xxf:instance('control-instance')/generateTestData/cdaHeader"/>

                <xxf:variable name="genderValueSet"
                    select="xxf:instance('control-instance')/generateTestData/genderValueSet/genderValue[@numberOfRecords castable as xs:integer and xs:integer(@numberOfRecords) gt 0]"/>
                <xf:action xxf:iterate="$genderValueSet">
                    <xxf:variable name="genderValue" select="."/>
                    <!-- Create one cdaHeader each of the @numberOfRecords.
                         Then set the parameters -->
                    <xf:action xxf:iterate="1 to xs:integer($genderValue/@numberOfRecords)">
                        <xxf:variable name="count" select="."/>

                        <xf:insert
                            context="xxf:instance('control-instance')/generateTestData/cdaHeaderSet"
                            nodeset="cdaHeader" origin="$cdaHeaderTemplate" at="last()"
                            position="after"/>
                        <xxf:variable name="cdaHeader"
                            select="xxf:instance('control-instance')/generateTestData/cdaHeaderSet/cdaHeader[last()]"/>

                        <xf:dispatch name="set-cdaHeader" target="main-model">
                            <xxf:context name="cdaHeader" select="$cdaHeader"/>
                            <xxf:context name="genderValue" select="$genderValue"/>
                            <xxf:context name="count" select="$count"/>
                        </xf:dispatch>
                    </xf:action>
                </xf:action>

                <!-- Run the process to generate test data -->
                <xf:dispatch name="run-process" target="process-model">
                    <xxf:context name="processName" select="'generate-test-data'"/>
                    <xxf:context name="contextSet"
                        select="xxf:instance('control-instance')/generateTestData/cdaHeaderSet/cdaHeader"/>
                    <xxf:context name="completionActionModel" select="main-model"/>
                    <xxf:context name="completionActionName" select="generate-test-data-completed"/>
                </xf:dispatch>

            </xf:action>


            <!-- Application defined action to generate a single test record.
                 Invoked through run-process for generate-test-data.
                 Once for each of the cdaHeader elements set up in generateTestData/cdaHeaderSet.
                 The cdaHeader is passed as the .context parameter by run-process
                 
                 Steps to generate a test data record.
                      Set up test-record-instance with the template uploaded to import-instance
                      Set header components in the test-record-instance (id, names, gender, birthDate)
                      Adjust dates in the test-record-instance
                      Import the set of cda documents for the record
            -->
            <xf:action ev:event="generate-test-record">
                <xxf:variable name="cdaHeader" select="event('context')"/>

                <!-- Record patientId in the process execution log -->
                <xf:dispatch name="log-processMessage" target="process-model">
                    <xxf:context name="message"
                        select="concat($cdaHeader/id,' / ',$cdaHeader/family)"/>
                </xf:dispatch>

                <!-- Copy template to the test-record -->
                <xf:insert nodeset="xxf:instance('test-record-instance')"
                    origin="xxf:instance('import-instance')"/>

                <!-- Set the patient id in the template EHR_Extract (import-RecordSet checks this matches cda:id in each ClinicalDocument) -->
                <xf:setvalue
                    ref="xxf:instance('test-record-instance')/descendant-or-self::iso-13606:EHR_Extract[1]/@patientId"
                    value="$cdaHeader/id"/>

                <!-- Set header components in the test record 
                     Includes adjustment of dates in the template record
                         -->
                <xf:dispatch name="set-TestRecordCDAHeaderComponents" target="main-model">
                    <xxf:context name="cdaHeader" select="$cdaHeader"/>
                </xf:dispatch>

                <!-- Import the test-record
                     The timestamp is set to the current-dataTime and so should be unique for each record generated
                     Timestamp format replaces ':' and '+' in standard time format with - and * 
                     setCompositionId is set to 'generate' (actually can be anything other than 'preserve' so that compositionId is reset -->
                <xxf:variable name="timeStamp"
                    select="replace(replace(string(current-dateTime()),':','-'),'\+','*')"/>
                <xf:dispatch name="import-RecordSet" target="main-model">
                    <xxf:context name="record-set" select="xxf:instance('test-record-instance')"/>
                    <xxf:context name="identifierPrefix" select="$timeStamp"/>
                    <xxf:context name="setCompositionId" select="'generate'"/>
                    <xxf:context name="status"
                        select="xxf:instance('control-instance')/generateTestData/status"/>
                </xf:dispatch>

                <!-- Log a message, if there was an error -->
                <xf:action if="xxf:instance('control-instance')/generateTestData/status != ''">
                    <xf:dispatch name="log-processMessage" target="process-model">
                        <xxf:context name="message"
                            select="concat($cdaHeader/id,' / ',xxf:instance('control-instance')/generateTestData/status)"
                        />
                    </xf:dispatch>
                </xf:action>

            </xf:action>


            <!-- Application defined action invoked when generate-test-data process is completed
            -->
            <xf:action ev:event="generate-test-data-completed">
                <!-- Set the status -->
                <xf:setvalue ref="xxf:instance('control-instance')/importStatus" value="'generated'"
                />
            </xf:action>


            <!-- ===Managing Directories ===============================
                 manageDirectory
                 Use actions defined in directory-model
                 ======================================================== -->

            <!-- Application defined action to rebuild all directories for the selected specialty.                
                 The list of directories for the specialty is in directoryList-instance.
                 -->
            <xf:action ev:event="rebuild-directories">

                <!-- Rebuild all directories for the current application/specialty/languageCode -->
                <xf:dispatch name="rebuild-directories" target="application-model">
                    <xxf:context name="applicationIRI"
                        select="xxf:instance('control-instance')/managedApplication/applicationIRI"/>
                    <xxf:context name="dictionary-instance"
                        select="xxf:instance('dictionary-instance')"/>
                    <xxf:context name="directoryList-instance"
                        select="xxf:instance('directoryList-instance')"/>
                    <xxf:context name="languageCode"
                        select="xxf:instance('control-instance')/manageDirectory/languageCode"/>
                </xf:dispatch>

            </xf:action>


            <!-- ===Importing Directories =====================================
                 importDirectory
                 Uses actions defined in directory-model and application-model
                 ============================================================== -->

            <!-- Application defined action to set the directory for the selected specialty.
                
                 First checks that the applicationIRI is set correctly.
                 Then that the specialityIRI and languageCode are defined for the application.
                 
                 Finally checks whether the directory is defined in the specialty.

                 If all checks are good, then set the directory in the importDirectory control.
                 If not, then set the status message. -->
            <xf:action ev:event="set-directoryForSpecialty">
                <xxf:variable name="applicationIRI" select="event('applicationIRI')"/>
                <xxf:variable name="specialtyIRI" select="event('specialtyIRI')"/>
                <xxf:variable name="directoryIRI" select="event('directoryIRI')"/>
                <xxf:variable name="languageCode" select="event('languageCode')"/>

                <!--
                <xf:message ref="concat($applicationIRI,' / ',$specialtyIRI,' / ',$directoryIRI,' / ',$languageCode)"/>
-->

                <!-- Clear directory from control -->
                <xf:delete nodeset="xxf:instance('control-instance')/importDirectory/directory"/>

                <!-- No directory - just set message -->
                <xf:action if="$directoryIRI = ''">
                    <xf:setvalue
                        ref="xxf:instance('control-instance')/importDirectory/statusMessage"
                        value="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/statusMessage/message[@processingProgress='badDirectoryFormat']"
                    />
                </xf:action>

                <!-- Set the directory, if it exists for the specialty -->
                <xf:action if="$directoryIRI != ''">

                    <!-- Set up specialty dictionary in dictionary-instance.
                         And the corresponding directoryList -->
                    <xf:dispatch name="load-dictionary" target="dictionary-model">
                        <xxf:context name="specialtyIRI" select="$specialtyIRI"/>
                    </xf:dispatch>
                    <xf:dispatch name="set-directoryList" target="application-model">
                        <xxf:context name="dictionary-instance"
                            select="xxf:instance('dictionary-instance')"/>
                        <xxf:context name="directoryList-instance"
                            select="xxf:instance('directoryList-instance')"/>
                    </xf:dispatch>

                    <!-- Set directory element in importDirectory control -->
                    <xxf:variable name="directory"
                        select="xxf:instance('directoryList-instance')/directory[@root=$directoryIRI]"/>

                    <xf:action if="exists($directory)">
                        <xf:insert context="xxf:instance('control-instance')/importDirectory"
                            origin="$directory"/>
                        <xf:setvalue
                            ref="xxf:instance('control-instance')/importDirectory/statusMessage"
                            value="''"/>
                    </xf:action>

                    <xf:action if="not(exists($directory))">
                        <!--
                        <xf:insert context="xxf:instance('control-instance')/importDirectory" origin="$directory"/>
                        -->
                        <xf:setvalue
                            ref="xxf:instance('control-instance')/importDirectory/statusMessage"
                            value="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/statusMessage/message[@processingProgress='directoryNotDefined']"
                        />
                    </xf:action>

                </xf:action>
            </xf:action>


            <!-- === XQuery of the database Using the DAL ===============
                 databaseAccessLayer
                 These ones for ad hoc input of queries by the admin user.
                 Uses the logicalDatabase, defined for the selected system (ehr or patientstore)
                 ======================================================== -->
            <!-- Query the database 
                 Limit to 1000 results so that we don't get a blow up -->
            <xf:instance id="query-instance">
                <exist:query start="1" max="1000">
                    <exist:text/>
                </exist:query>
            </xf:instance>
            <xf:instance id="response-instance">
                <exist:result/>
            </xf:instance>
            <xf:instance id="write-instance">
                <istance/>
            </xf:instance>

            <!-- Application defined action to reset the DAL results -->
            <xf:action ev:event="reset-DALResults">
                <!-- Query report -->
                <xf:setvalue
                    ref="xxf:instance('control-instance')/databaseAccessLayer/queryReport/@displayName"
                    value="''"/>
                <xf:setvalue
                    ref="xxf:instance('control-instance')/databaseAccessLayer/queryReport/@start"
                    value="''"/>
                <xf:setvalue
                    ref="xxf:instance('control-instance')/databaseAccessLayer/queryReport/@end"
                    value="''"/>
                <xf:setvalue
                    ref="xxf:instance('control-instance')/databaseAccessLayer/queryReport/@duration"
                    value="''"/>
                <!-- Clear response instance -->
                <xf:insert nodeset="xxf:instance('response-instance')"
                    origin="xxf:instance('control-instance')/databaseAccessLayer/cityEHR:empty"/>
                <!-- Reset the status -->
                <xf:setvalue ref="xxf:instance('control-instance')/databaseAccessLayer/status"
                    value="''"/>
            </xf:action>

            <!-- Application defined action to reset the xquery -->
            <xf:action ev:event="reset-xquery">
                <!-- Reset the DAL results -->
                <xf:dispatch name="reset-DALResults" target="main-model"/>
                <!-- Reset query text -->
                <xf:setvalue
                    ref="xxf:instance('control-instance')/databaseAccessLayer/queryDocument"
                    value="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/databaseAccessLayer/defaultQueryDocument"
                />
            </xf:action>

            <!-- Application defined action to set the database location for selected application -->
            <xf:action ev:event="set-databaseLocation">
                <xxf:variable name="applicationIRI" select="event('applicationIRI')"/>
                <xxf:variable name="applicationId"
                    select="replace(substring($applicationIRI,2),':','-')"/>

                <xf:setvalue
                    ref="xxf:instance('control-instance')/databaseAccessLayer/databaseLocation"
                    value="if ($applicationIRI='') then '' else concat('/xmlstore/applications/',$applicationId)"/>

            </xf:action>

            <!-- Application defined action run the DAL operation
                 Query, read, write, delete and clear (the cache) -->
            <xf:action ev:event="run-DAL-operation">
                <!-- The DAL operation selected by the user -->
                <xxf:variable name="databaseOperation"
                    select="xxf:instance('control-instance')/databaseAccessLayer/databaseOperation/@value"/>

                <!-- Get system from managedDatabase -->
                <xxf:variable name="system"
                    select="xxf:instance('control-instance')/managedDatabase/system"/>
                <!-- The databaseLocation set by the user may or may not have the leading '/' (which required).
                     So set a separate storageLocation for the DAL operation.
                     (Note that the reset-DALResults is triggered if databaseLocation is changed directly, so don't want to do that. -->
                <xf:setvalue
                    ref="xxf:instance('control-instance')/databaseAccessLayer/storageLocation"
                    value="if (starts-with(xxf:instance('control-instance')/databaseAccessLayer/databaseLocation,'/')) then xxf:instance('control-instance')/databaseAccessLayer/databaseLocation else concat('/',xxf:instance('control-instance')/databaseAccessLayer/databaseLocation)"/>
                <xxf:variable name="storageLocation"
                    select="xxf:instance('control-instance')/databaseAccessLayer/storageLocation"/>

                <!-- Query operation.
                     The query is run across the logicalDatabase, so will aggregate results if necessary -->
                <xf:action if="$databaseOperation = 'query'">
                    <!-- Reset the DAL results -->
                    <xf:dispatch name="reset-DALResults" target="main-model"/>

                    <!-- Start the timer -->
                    <xf:setvalue
                        ref="xxf:instance('control-instance')/databaseAccessLayer/queryReport/@start"
                        value="current-dateTime()"/>

                    <xf:dispatch name="dal-query" target="databaseAccessLayer-model">
                        <xxf:context name="system" select="$system"/>
                        <xxf:context name="storageLocation" select="$storageLocation"/>
                        <xxf:context name="query"
                            select="xxf:instance('control-instance')/databaseAccessLayer/queryDocument"/>
                        <xxf:context name="response" select="xxf:instance('response-instance')"/>
                        <xxf:context name="status"
                            select="xxf:instance('control-instance')/databaseAccessLayer/status"/>
                    </xf:dispatch>

                    <!-- Set the status - returns '' if dal-query was successful -->
                    <xf:setvalue ref="xxf:instance('control-instance')/databaseAccessLayer/status"
                        value="if (.='') then 'dal-query-success' else ."/>

                    <!-- Stop the timer -->
                    <xf:setvalue
                        ref="xxf:instance('control-instance')/databaseAccessLayer/queryReport/@end"
                        value="current-dateTime()"/>
                    <xf:setvalue
                        ref="xxf:instance('control-instance')/databaseAccessLayer/queryReport/@duration"
                        value="xs:duration(xs:dateTime(../@end) - xs:dateTime(../@start))"/>
                </xf:action>

                <!-- Read operation -->
                <xf:action if="$databaseOperation = 'read'">
                    <xf:dispatch name="dal-read" target="databaseAccessLayer-model">
                        <xxf:context name="system" select="$system"/>
                        <xxf:context name="storageLocation" select="$storageLocation"/>
                        <xxf:context name="resource" select="xxf:instance('response-instance')"/>
                        <xxf:context name="status"
                            select="xxf:instance('control-instance')/databaseAccessLayer/status"/>
                    </xf:dispatch>

                    <!-- Set the status - returns '' if dal-read was successful -->
                    <xf:setvalue ref="xxf:instance('control-instance')/databaseAccessLayer/status"
                        value="if (.='') then 'dal-read-success' else ."/>
                </xf:action>

                <!-- Write operation -->
                <xf:action
                    if="xxf:instance('control-instance')/databaseAccessLayer/databaseOperation/@value = 'write'">

                    <!-- Check to see if collection already exists at the databaseLocation -->
                    <xf:dispatch name="collection-exists" target="databaseAccessLayer-model">
                        <xxf:context name="system" select="'ehr'"/>
                        <xxf:context name="storageLocation" select="$storageLocation"/>
                        <xxf:context name="result"
                            select="xxf:instance('control-instance')/databaseAccessLayer/status"/>
                    </xf:dispatch>
                    <xf:setvalue ref="xxf:instance('control-instance')/databaseAccessLayer/status"
                        value="if (.='true') then 'collection-already-exists' else ."/>

                    <!-- No collection, so check for resource -->
                    <xf:action
                        if="xxf:instance('control-instance')/databaseAccessLayer/status='false'">
                        <xf:dispatch name="resource-exists" target="databaseAccessLayer-model">
                            <xxf:context name="system" select="'ehr'"/>
                            <xxf:context name="storageLocation" select="$storageLocation"/>
                            <xxf:context name="result"
                                select="xxf:instance('control-instance')/databaseAccessLayer/status"
                            />
                        </xf:dispatch>
                        <xf:setvalue
                            ref="xxf:instance('control-instance')/databaseAccessLayer/status"
                            value="if (.='true') then 'resource-already-exists' else ."/>
                    </xf:action>

                    <!-- Can only write document if collection or resource don't already exist. -->
                    <xf:action
                        if="xxf:instance('control-instance')/databaseAccessLayer/status='false'">
                        <xf:insert nodeset="xxf:instance('write-instance')"
                            origin="saxon:parse(xxf:instance('control-instance')/databaseAccessLayer/writeDocument)"/>
                        <xf:dispatch name="dal-write" target="databaseAccessLayer-model">
                            <xxf:context name="system" select="$system"/>
                            <xxf:context name="storageLocation" select="$storageLocation"/>
                            <xxf:context name="resource" select="xxf:instance('write-instance')"/>
                            <xxf:context name="status"
                                select="xxf:instance('control-instance')/databaseAccessLayer/status"
                            />
                        </xf:dispatch>
                    </xf:action>

                    <!-- Set the status - returns '' if dal-write was successful -->
                    <xf:setvalue ref="xxf:instance('control-instance')/databaseAccessLayer/status"
                        value="if (.='') then 'dal-write-success' else ."/>

                </xf:action>

                <!-- Delete query - requires confirmation. -->
                <xf:action
                    if="xxf:instance('control-instance')/databaseAccessLayer/databaseOperation/@value = 'delete'">
                    <!-- Check to see if collection exists at the databaseLocation -->
                    <xf:dispatch name="collection-exists" target="databaseAccessLayer-model">
                        <xxf:context name="system" select="'ehr'"/>
                        <xxf:context name="storageLocation" select="$storageLocation"/>
                        <xxf:context name="result"
                            select="xxf:instance('control-instance')/databaseAccessLayer/status"/>
                    </xf:dispatch>
                    <xf:setvalue ref="xxf:instance('control-instance')/databaseAccessLayer/status"
                        value="if (.='true') then 'collection-exists' else ."/>

                    <!-- No collection, so check for resource -->
                    <xf:action
                        if="xxf:instance('control-instance')/databaseAccessLayer/status='false'">
                        <xf:dispatch name="resource-exists" target="databaseAccessLayer-model">
                            <xxf:context name="system" select="'ehr'"/>
                            <xxf:context name="storageLocation" select="$storageLocation"/>
                            <xxf:context name="result"
                                select="xxf:instance('control-instance')/databaseAccessLayer/status"
                            />
                        </xf:dispatch>
                        <xf:setvalue
                            ref="xxf:instance('control-instance')/databaseAccessLayer/status"
                            value="if (.='true') then 'resource-exists' else ."/>
                    </xf:action>

                    <!-- Must have specified a collection or resource in order to delete.
                         User needs to confirm -->
                    <xf:action
                        if="xxf:instance('control-instance')/databaseAccessLayer/status!='false'">
                        <xf:setvalue
                            ref="xxf:instance('view-parameters-instance')/staticConfirmationDialogue/dialogue[@id='runDeleteQuery']/dynamicMessage/message"
                            value="$storageLocation"/>

                        <xf:dispatch name="confirm-action" target="pageNavigation-model">
                            <xxf:context name="action" select="'runDeleteQuery'"/>
                            <xxf:context name="messageSet" select="($storageLocation)"/>
                        </xf:dispatch>
                    </xf:action>

                    <!-- No resource specified -->
                    <xf:action
                        if="xxf:instance('control-instance')/databaseAccessLayer/status='false'">
                        <xf:setvalue
                            ref="xxf:instance('control-instance')/databaseAccessLayer/status"
                            value="'path-not-valid'"/>
                    </xf:action>
                </xf:action>

                <!-- Delete (clear) cache query -->
                <xf:action
                    if="xxf:instance('control-instance')/databaseAccessLayer/databaseOperation = 'clear'">
                    <xf:setvalue
                        ref="xxf:instance('control-instance')/databaseAccessLayer/storageLocation"
                        value="concat('/xmlstore/applications/',xxf:instance('view-parameters-instance')/applicationId,'/systemConfiguration/',xxf:instance('view-parameters-instance')/specialtyId,'/cache/')"/>
                    <xf:dispatch name="dal-delete" target="databaseAccessLayer-model">
                        <xxf:context name="system" select="'ehr'"/>
                        <xxf:context name="storageLocation"
                            select="xxf:instance('control-instance')/databaseAccessLayer/storageLocation"/>
                        <xxf:context name="status"
                            select="xxf:instance('control-instance')/databaseAccessLayer/status"/>
                    </xf:dispatch>
                </xf:action>
            </xf:action>


            <!-- Application defined action to invoke dal-delete.
                 Only after confirmation by user. -->
            <xf:action ev:event="invoke-dal-delete">
                <xf:dispatch name="dal-delete" target="databaseAccessLayer-model">
                    <xxf:context name="system"
                        select="xxf:instance('control-instance')/managedDatabase/system"/>
                    <xxf:context name="storageLocation"
                        select="xxf:instance('control-instance')/databaseAccessLayer/storageLocation"/>
                    <xxf:context name="status"
                        select="xxf:instance('control-instance')/databaseAccessLayer/status"/>
                </xf:dispatch>

                <!-- Set the status - returns '' if dal-delete was successful -->
                <xf:setvalue ref="xxf:instance('control-instance')/databaseAccessLayer/status"
                    value="if (.='') then 'dal-delete-success' else ."/>
            </xf:action>


            <!-- Application defined action to perform action on query results.
                 Called after confirmation by user.
                 Actions are listed in view-parameters   processingAction/option
                 The user has selected the action to perform in xxf:instance('control-instance')/databaseAccessLayer/processingAction/@value
            -->
            <xf:action ev:event="performResultsAction">
                <xxf:variable name="action"
                    select="xxf:instance('control-instance')/databaseAccessLayer/processingAction/@value"/>

                <!-- reallocate-compositions
                     Iterate through the resources.
                     Get the handle and load the resource
                     Get the patientId from the resource.
                     Check that the handle contains the patientId
                     If not, insert /patientId/ before the last componsent of the path
                     Write the resource to the new path with patientId
                     Remove the resource from its original location. -->
                <xf:action if="$action = 'reallocate-compositions'">
                    <xf:action xxf:iterate="xxf:instance('response-instance')/resource">
                        <xxf:variable name="resourceHandle" select="."/>

                        <!-- Load the resource to import-instance -->
                        <xxf:variable name="resourceStorageObject"
                            select="concat(xxf:instance('view-parameters-instance')/databaseLocation,$resourceHandle)"/>
                        <xf:setvalue ref="xxf:instance('control-instance')/storageObject"
                            value="$resourceStorageObject"/>
                        <xf:send submission="load-import-instance-submission"/>

                        <!-- Get patientId from the resource.
                             The resource must be a CDA document with the patientId set - otherwise can't process it -->
                        <xxf:variable name="patientId"
                            select="xxf:instance('import-instance')//cda:patientRole/cda:id/@extension"/>
                        <xxf:variable name="compositionId"
                            select="(xxf:instance('import-instance')//cda:id)[1]/@extension"/>
                        <xf:action if="$patientId != '' and $compositionId!=''">

                            <!-- The storageObject should be of the form   .../informationType/compositionId
                                 Processing to change this to .../informationType/patientId/compositionId -->
                            <xxf:variable name="resourceStorageObjectComponents"
                                select="reverse(tokenize($resourceStorageObject,'/'))"/>
                            <xxf:variable name="resourceStorageObjectName"
                                select="$resourceStorageObjectComponents[1]"/>
                            <xxf:variable name="informationTypeList"
                                select="('data','records','archive')"/>

                            <!-- Process if storageObject is of correct form -->
                            <xf:action
                                if="not($resourceStorageObjectComponents=$patientId) and contains($resourceStorageObjectName,$compositionId) and $resourceStorageObjectComponents[2]=$informationTypeList">

                                <!-- Insert the patientId into the resourceStorageObject handle -->
                                <xxf:variable name="patientCompositionHandle"
                                    select="concat($patientId,'/',$compositionId)"/>
                                <xxf:variable name="patientResourceStorageObject"
                                    select="replace($resourceStorageObject,$resourceStorageObjectName,$patientCompositionHandle)"/>

                                <!-- Call the import-instance-submission to import patientResourceStorageObject.
                                     Will set control-instance/importStatus to 'imported' if successful -->

                                <xf:setvalue ref="xxf:instance('control-instance')/storageObject"
                                    value="$patientResourceStorageObject"/>
                                <xf:send submission="import-instance-submission"/>

                                <!-- Call the delete-resource-submission to remove resourceStorageObject.
                                     This could go horribly wrong if the storageObject is not set correctly.
                                     (The load-import-instance-submission should have raised an error above in this case, but make sure again here)
                                     So make sure the compositionId and informationType are set properly before calling -->
                                <xf:action
                                    if="xxf:instance('control-instance')/importStatus = 'imported'">
                                    <xf:setvalue
                                        ref="xxf:instance('control-instance')/storageObject"
                                        value="$resourceStorageObject"/>
                                    <xxf:variable name="storageObjectComponents"
                                        select="reverse(tokenize(xxf:instance('control-instance')/storageObject,'/'))"/>
                                    <xxf:variable name="locationCheck"
                                        select="if ($informationTypeList=$storageObjectComponents[2] and $resourceStorageObjectName=$storageObjectComponents[1]) then true() else false()"/>
                                    <xf:action if="$locationCheck">
                                        <xf:send submission="delete-resource-submission"/>
                                    </xf:action>
                                    <xf:action if="not($locationCheck)">
                                        <xf:setvalue
                                            ref="xxf:instance('view-parameters-instance')/systemError"
                                            value="xxf:instance('view-parameters-instance')/systemErrorList/systemError[@type='failedToRemoveSourceRecord']"/>
                                        <xf:setvalue
                                            ref="xxf:instance('control-instance')/manageRecords/status"
                                            value="'error'"/>
                                    </xf:action>
                                </xf:action>
                            </xf:action>
                        </xf:action>
                    </xf:action>

                </xf:action>

                <!-- fix-age-elements
                    Iterate through the resources.
                    Get the handle and load the resource
                    Get entries for ('#ISO-13606:Entry:AgeAtCast','#ISO-13606:Entry:AgeAtClinic')
                    Changes elements that are now of type 'age' -->
                <xf:action if="$action = 'fix-age-elements'">
                    <xf:action xxf:iterate="xxf:instance('response-instance')/resource">
                        <xxf:variable name="resourceHandle" select="."/>

                        <!-- Load the resource to import-instance -->
                        <xxf:variable name="resourceStorageObject"
                            select="concat(xxf:instance('view-parameters-instance')/databaseLocation,$resourceHandle)"/>
                        <xf:setvalue ref="xxf:instance('control-instance')/storageObject"
                            value="$resourceStorageObject"/>
                        <xf:send submission="load-import-instance-submission"/>

                        <xxf:variable name="birthTime"
                            select="xxf:instance('import-instance')//cda:patient/cda:birthTime/@value"/>

                        <!-- ageAtCast -->
                        <xxf:variable name="ageAtCastEntry"
                            select="xxf:instance('import-instance')//cda:observation[cda:id/@extension='#ISO-13606:Entry:AgeAtCast']"/>
                        <xf:action if="exists($ageAtCastEntry)">
                            <xxf:variable name="castDate"
                                select="xxf:instance('import-instance')//cda:observation[cda:id/@extension='#ISO-13606:Entry:CastDate']/cda:value[@extension='#ISO-13606:Element:BaseTime']/@value"/>
                            <xxf:variable name="age"
                                select="if ($birthTime castable as xs:date and $castDate castable as xs:date) then xs:date($castDate) - xs:date($birthTime) else ''"/>

                            <xf:delete nodeset="$ageAtCastEntry/cda:value[position() gt 1]"/>
                            <xxf:variable name="ageAtCastValue"
                                select="$ageAtCastEntry/cda:value[1]"/>

                            <xf:setvalue ref="$ageAtCastValue/@root"
                                value="'#ISO-13606:Element:AgeAtCast'"/>
                            <xf:setvalue ref="$ageAtCastValue/@extension"
                                value="'#ISO-13606:Element:AgeAtCast'"/>
                            <xf:setvalue ref="$ageAtCastValue/@cityEHR:elementType"
                                value="'#CityEHR:ElementProperty:age'"/>
                            <xf:setvalue ref="$ageAtCastValue/@xsi:type"
                                value="'xs:dayTimeDuration'"/>
                            <xf:setvalue ref="$ageAtCastValue/@cityEHR:calculatedValue" value="''"/>
                            <xf:setvalue ref="$ageAtCastValue/@value" value="$age"/>
                            <xf:dispatch name="set-ageDisplayName"
                                target="patientDemographics-model">
                                <xxf:context name="birthTime" select="$birthTime"/>
                                <xxf:context name="value" select="$age"/>
                                <xxf:context name="displayName"
                                    select="$ageAtCastValue/@displayName"/>
                            </xf:dispatch>
                        </xf:action>

                        <!-- ageAtClinic -->
                        <xxf:variable name="ageAtClinicEntry"
                            select="xxf:instance('import-instance')//cda:observation[cda:id/@extension='#ISO-13606:Entry:AgeAtClinic']"/>
                        <xf:action if="exists($ageAtClinicEntry)">
                            <xxf:variable name="clinicDate"
                                select="xxf:instance('import-instance')//cda:observation[cda:id/@extension='#ISO-13606:Entry:ClinicDate']/cda:value[@extension='#ISO-13606:Element:BaseTime']/@value"/>
                            <xxf:variable name="age"
                                select="if ($birthTime castable as xs:date and $clinicDate castable as xs:date) then xs:date($clinicDate) - xs:date($birthTime) else ''"/>

                            <xf:delete nodeset="$ageAtClinicEntry/cda:value[position() gt 1]"/>
                            <xxf:variable name="ageAtClinicValue"
                                select="$ageAtClinicEntry/cda:value[1]"/>

                            <xf:setvalue ref="$ageAtClinicValue/@root"
                                value="'#ISO-13606:Element:AgeAtClinic'"/>
                            <xf:setvalue ref="$ageAtClinicValue/@extension"
                                value="'#ISO-13606:Element:AgeAtClinic'"/>
                            <xf:setvalue ref="$ageAtClinicValue/@cityEHR:elementType"
                                value="'#CityEHR:ElementProperty:age'"/>
                            <xf:setvalue ref="$ageAtClinicValue/@xsi:type"
                                value="'xs:dayTimeDuration'"/>
                            <xf:setvalue ref="$ageAtClinicValue/@cityEHR:calculatedValue" value="''"/>
                            <xf:setvalue ref="$ageAtClinicValue/@value" value="$age"/>
                            <xf:dispatch name="set-ageDisplayName"
                                target="patientDemographics-model">
                                <xxf:context name="birthTime" select="$birthTime"/>
                                <xxf:context name="value" select="$age"/>
                                <xxf:context name="displayName"
                                    select="$ageAtClinicValue/@displayName"/>
                            </xf:dispatch>
                        </xf:action>

                        <!-- All fixed, so save the import instance -->
                        <xf:send submission="import-instance-submission"/>
                    </xf:action>
                </xf:action>


                <!-- fix-missing-demographics
                    Iterate through the resources.
                    Get the handle and load the resource
                    Check that the document type is #CityEHR:Form:registration and that the hospitalnumber/hospitalnumberstring is empty
                    Then set the values of all entries in the storeddemographics section to the values that they should have been calculated from in the PatientDetails entry
                    Save the resource in the original location
                -->
                <xf:action if="$action = 'fix-missing-demographics'">
                    <xf:action xxf:iterate="xxf:instance('response-instance')/resource[1]">
                        <xxf:variable name="resourceHandle" select="."/>

                        <!-- Load the resource to import-instance -->
                        <xxf:variable name="resourceStorageObject"
                            select="concat(xxf:instance('view-parameters-instance')/databaseLocation,$resourceHandle)"/>
                        <xf:setvalue ref="xxf:instance('control-instance')/storageObject"
                            value="$resourceStorageObject"/>
                        <xf:send submission="load-import-instance-submission"/>

                        <!-- Demographics need to be replaced if hospitalnumber/hospitalnumberstring is blank
                             and there is a PatientDetails entry (there won't be one for hospitalnumberstring found in alisaed entries in letters -->

                        <xf:action
                            if="exists(xxf:instance('import-instance')//cda:observation[cda:id/@extension='#ISO-13606:Entry:hospitalnumber']/cda:value[@extension='#ISO-13606:Element:hospitalnumberstring'][@value=''])
                            and exists(xxf:instance('import-instance')//cda:patientRole/cda:id[@extension=''])">

                            <!-- hospitalnumber.
                                 This has also appeared (a mistake) on letters, but can be replaced from the cda header -->
                            <xxf:variable name="hospitalnumber"
                                select="xxf:instance('import-instance')//cda:observation[cda:id/@extension='#ISO-13606:Entry:hospitalnumber']"/>
                            <xf:action if="exists($hospitalnumber)">
                                <xxf:variable name="newValue"
                                    select="if (xxf:instance('import-instance')//cda:patientRole/cda:id/@extension !='') then xxf:instance('import-instance')//cda:patientRole/cda:id/@extension else xxf:instance('import-instance')//cda:observation[cda:id/@extension='#ISO-13606:Entry:PatientDetails']/descendant::cda:value[@extension='#ISO-13606:Element:HospitalNumber']/@value"/>
                                <xf:setvalue
                                    ref="$hospitalnumber//cda:value[@extension='#ISO-13606:Element:hospitalnumberstring']/@value"
                                    value="if (. = '') then $newValue else ."/>
                            </xf:action>

                            <!-- nhsnumber -->
                            <xxf:variable name="nhsnumber"
                                select="xxf:instance('import-instance')//cda:observation[cda:id/@extension='#ISO-13606:Entry:nhsnumber']"/>

                            <xf:action if="exists($nhsnumber)">
                                <xxf:variable name="newValue"
                                    select="xxf:instance('import-instance')//cda:observation[cda:id/@extension='#ISO-13606:Entry:PatientDetails']/descendant::cda:value[@extension='#ISO-13606:Element:NHSNumber']/@value"/>
                                <xf:setvalue
                                    ref="$nhsnumber//cda:value[@extension='#ISO-13606:Element:nhsnumber']/@value"
                                    value="if (. = '') then $newValue else ."/>
                            </xf:action>

                            <!-- overseas -->
                            <xxf:variable name="overseas"
                                select="xxf:instance('import-instance')//cda:observation[cda:id/@extension='#ISO-13606:Entry:overseas']"/>
                            <xf:action if="exists($overseas)">
                                <xxf:variable name="newValue"
                                    select="xxf:instance('import-instance')//cda:observation[cda:id/@extension='#ISO-13606:Entry:PatientDetails']/descendant::cda:value[@extension='#ISO-13606:Element:Overseas']/@value"/>
                                <xf:setvalue
                                    ref="$overseas//cda:value[@extension='#ISO-13606:Element:Boolean']/@value"
                                    value="if (. = '') then $newValue else ."/>
                            </xf:action>

                            <!-- gender -->
                            <xxf:variable name="gender"
                                select="xxf:instance('import-instance')//cda:observation[cda:id/@extension='#ISO-13606:Entry:gender']"/>
                            <xf:action if="exists($gender)">
                                <xxf:variable name="newValue"
                                    select="xxf:instance('import-instance')//cda:observation[cda:id/@extension='#ISO-13606:Entry:PatientDetails']/descendant::cda:value[@extension='#ISO-13606:Element:Gender']/@value"/>
                                <xf:setvalue
                                    ref="$gender//cda:value[@extension='#ISO-13606:Element:gender']/@value"
                                    value="if (. = '') then $newValue else ."/>
                            </xf:action>

                            <!-- title -->
                            <xxf:variable name="title"
                                select="xxf:instance('import-instance')//cda:observation[cda:id/@extension='#ISO-13606:Entry:title']"/>
                            <xf:action if="exists($title)">
                                <xxf:variable name="newValue"
                                    select="xxf:instance('import-instance')//cda:observation[cda:id/@extension='#ISO-13606:Entry:PatientDetails']/descendant::cda:value[@extension='#ISO-13606:Element:Title']/@value"/>
                                <xf:setvalue
                                    ref="$title//cda:value[@extension='#ISO-13606:Element:title']/@value"
                                    value="if (. = '') then $newValue else ."/>
                            </xf:action>

                            <!-- surname -->
                            <xxf:variable name="surname"
                                select="xxf:instance('import-instance')//cda:observation[cda:id/@extension='#ISO-13606:Entry:surname']"/>
                            <xf:action if="exists($surname)">
                                <xxf:variable name="newValue"
                                    select="xxf:instance('import-instance')//cda:observation[cda:id/@extension='#ISO-13606:Entry:PatientDetails']/descendant::cda:value[@extension='#ISO-13606:Element:Surname']/@value"/>
                                <xf:setvalue
                                    ref="$surname//cda:value[@extension='#ISO-13606:Element:String']/@value"
                                    value="if (. = '') then $newValue else ."/>
                            </xf:action>

                            <!-- forename -->
                            <xxf:variable name="forename"
                                select="xxf:instance('import-instance')//cda:observation[cda:id/@extension='#ISO-13606:Entry:forename']"/>
                            <xf:action if="exists($forename)">
                                <xxf:variable name="newValue"
                                    select="xxf:instance('import-instance')//cda:observation[cda:id/@extension='#ISO-13606:Entry:PatientDetails']/descendant::cda:value[@extension='#ISO-13606:Element:Forename']/@value"/>
                                <xf:setvalue
                                    ref="$forename//cda:value[@extension='#ISO-13606:Element:String']/@value"
                                    value="if (. = '') then $newValue else ."/>
                            </xf:action>

                            <!-- middlename -->
                            <xxf:variable name="middlename"
                                select="xxf:instance('import-instance')//cda:observation[cda:id/@extension='#ISO-13606:Entry:middlename']"/>
                            <xf:action if="exists($middlename)">
                                <xxf:variable name="newValue"
                                    select="xxf:instance('import-instance')//cda:observation[cda:id/@extension='#ISO-13606:Entry:PatientDetails']/descendant::cda:value[@extension='#ISO-13606:Element:Middlename']/@value"/>
                                <xf:setvalue
                                    ref="$middlename//cda:value[@extension='#ISO-13606:Element:String']/@value"
                                    value="if (. = '') then $newValue else ."/>
                            </xf:action>

                            <!-- dateofbirth -->
                            <xxf:variable name="dateofbirth"
                                select="xxf:instance('import-instance')//cda:observation[cda:id/@extension='#ISO-13606:Entry:dateofbirth']"/>
                            <xf:action if="exists($dateofbirth)">
                                <xxf:variable name="newValue"
                                    select="xxf:instance('import-instance')//cda:observation[cda:id/@extension='#ISO-13606:Entry:PatientDetails']/descendant::cda:value[@extension='#ISO-13606:Element:DateOfBirth']/@value"/>
                                <xf:setvalue
                                    ref="$dateofbirth//cda:value[@extension='#ISO-13606:Element:Date']/@value"
                                    value="if (. = '') then $newValue else ."/>
                            </xf:action>

                            <!-- died -->
                            <xxf:variable name="died"
                                select="xxf:instance('import-instance')//cda:observation[cda:id/@extension='#ISO-13606:Entry:died']"/>
                            <xf:action if="exists($died)">
                                <xxf:variable name="newValue"
                                    select="xxf:instance('import-instance')//cda:observation[cda:id/@extension='#ISO-13606:Entry:PatientDetails']/descendant::cda:value[@extension='#ISO-13606:Element:Deceased']/@value"/>
                                <xf:setvalue
                                    ref="$died//cda:value[@extension='#ISO-13606:Element:Boolean']/@value"
                                    value="if (. = '') then $newValue else ."/>
                            </xf:action>

                            <!-- ethnicgroup -->
                            <xxf:variable name="ethnicgroup"
                                select="xxf:instance('import-instance')//cda:observation[cda:id/@extension='#ISO-13606:Entry:ethnicgroup']"/>
                            <xf:action if="exists($ethnicgroup)">
                                <xxf:variable name="newValue"
                                    select="xxf:instance('import-instance')//cda:observation[cda:id/@extension='#ISO-13606:Entry:PatientDetails']/descendant::cda:value[@extension='#ISO-13606:Element:EthnicOrigin']/@value"/>
                                <xf:setvalue
                                    ref="$ethnicgroup//cda:value[@extension='#ISO-13606:Element:ethnicity']/@value"
                                    value="if (. = '') then $newValue else ."/>
                            </xf:action>

                            <!-- carehome -->
                            <xxf:variable name="carehome"
                                select="xxf:instance('import-instance')//cda:observation[cda:id/@extension='#ISO-13606:Entry:carehome']"/>
                            <xf:action if="exists($carehome)">
                                <xxf:variable name="newValue"
                                    select="xxf:instance('import-instance')//cda:observation[cda:id/@extension='#ISO-13606:Entry:PatientDetails']/descendant::cda:value[@extension='#ISO-13606:Element:CareHome']/@value"/>
                                <xf:setvalue
                                    ref="$carehome//cda:value[@extension='#ISO-13606:Element:Boolean']/@value"
                                    value="if (. = '') then $newValue else ."/>
                            </xf:action>

                            <!-- discharge -->
                            <xxf:variable name="discharge"
                                select="xxf:instance('import-instance')//cda:observation[cda:id/@extension='#ISO-13606:Entry:discharge']"/>
                            <xf:action if="exists($discharge)">
                                <xxf:variable name="newValue1"
                                    select="xxf:instance('import-instance')//cda:observation[cda:id/@extension='#ISO-13606:Entry:PatientDetails']/descendant::cda:value[@extension='#ISO-13606:Element:Discharged']/@value"/>
                                <xf:setvalue
                                    ref="$discharge//cda:value[@extension='#ISO-13606:Element:Boolean']/@value"
                                    value="if (. = '') then $newValue1 else ."/>
                                <xxf:variable name="newValue2"
                                    select="xxf:instance('import-instance')//cda:observation[cda:id/@extension='#ISO-13606:Entry:PatientDetails']/descendant::cda:value[@extension='#ISO-13606:Element:DischargeDate']/@value"/>
                                <xf:setvalue
                                    ref="$discharge//cda:value[@extension='#ISO-13606:Element:Date']/@value"
                                    value="if (. = '') then $newValue2 else ."/>
                                <xxf:variable name="newValue3"
                                    select="xxf:instance('import-instance')//cda:observation[cda:id/@extension='#ISO-13606:Entry:PatientDetails']/descendant::cda:value[@extension='#ISO-13606:Element:DischargeComment']/@value"/>
                                <xf:setvalue
                                    ref="$discharge//cda:value[@extension='#ISO-13606:Element:String']/@value"
                                    value="if (. = '') then $newValue3 else ."/>
                            </xf:action>

                            <!-- patientaddress -->
                            <xxf:variable name="patientaddress"
                                select="xxf:instance('import-instance')//cda:observation[cda:id/@extension='#ISO-13606:Entry:patientaddress']"/>
                            <xf:action if="exists($patientaddress)">
                                <xxf:variable name="newValue1"
                                    select="xxf:instance('import-instance')//cda:observation[cda:id/@extension='#ISO-13606:Entry:PatientDetails']/descendant::cda:value[@extension='#ISO-13606:Element:Address']/@value"/>
                                <xf:setvalue
                                    ref="$patientaddress//cda:value[@extension='#ISO-13606:Element:address']/@value"
                                    value="if (. = '') then $newValue1 else ."/>
                                <xxf:variable name="newValue2"
                                    select="xxf:instance('import-instance')//cda:observation[cda:id/@extension='#ISO-13606:Entry:PatientDetails']/descendant::cda:value[@extension='#ISO-13606:Element:TownCity']/@value"/>
                                <xf:setvalue
                                    ref="$patientaddress//cda:value[@extension='#ISO-13606:Element:towncity']/@value"
                                    value="if (. = '') then $newValue2 else ."/>
                                <xxf:variable name="newValue3"
                                    select="xxf:instance('import-instance')//cda:observation[cda:id/@extension='#ISO-13606:Entry:PatientDetails']/descendant::cda:value[@extension='#ISO-13606:Element:Postcode']/@value"/>
                                <xf:setvalue
                                    ref="$patientaddress//cda:value[@extension='#ISO-13606:Element:postcode']/@value"
                                    value="if (. = '') then $newValue3 else ."/>
                            </xf:action>

                            <!-- patientgpcodes -->
                            <xxf:variable name="patientgpcodes"
                                select="xxf:instance('import-instance')//cda:observation[cda:id/@extension='#ISO-13606:Entry:patientaddress']"/>
                            <xf:action if="exists($patientgpcodes)">
                                <xxf:variable name="newValue1"
                                    select="xxf:instance('import-instance')//cda:observation[cda:id/@extension='#ISO-13606:Entry:PatientDetails']/descendant::cda:value[@extension='#ISO-13606:Element:GMCCode']/@value"/>
                                <xf:setvalue
                                    ref="$patientgpcodes//cda:value[@extension='#ISO-13606:Element:patientgpcode']/@value"
                                    value="if (. = '') then $newValue1 else ."/>
                                <xxf:variable name="newValue2"
                                    select="xxf:instance('import-instance')//cda:observation[cda:id/@extension='#ISO-13606:Entry:PatientDetails']/descendant::cda:value[@extension='#ISO-13606:Element:GPPracticeCode']/@value"/>
                                <xf:setvalue
                                    ref="$patientgpcodes//cda:value[@extension='#ISO-13606:Element:patientgppracticecode']/@value"
                                    value="if (. = '') then $newValue2 else ."/>
                            </xf:action>

                            <!-- All fixed, so save the import instance -->
                            <xf:send submission="import-instance-submission"/>

                        </xf:action>
                    </xf:action>

                </xf:action>
            </xf:action>

            <!-- Application defined action to view the results of the query.
                 Stores the results in the xmlCache and then loads page as per view in browsePhysicalDatabases
            -->
            <xf:action ev:event="view-queryResults">
                <xxf:variable name="title"
                    select="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/databaseAccessLayer/viewResultsLabel"/>

                <!-- Display in viewXML dialog -->
                <xf:dispatch name="display-formatted-xml" target="pageNavigation-model">
                    <xxf:context name="title" select="$title"/>
                    <xxf:context name="displayXML" select="xxf:instance('response-instance')"/>
                </xf:dispatch>
            </xf:action>

            <!-- Application defined action to export the results of the query.
                 Results are in response-instance
                 Stores the results in the xmlCache and then exports this to a zip file
            -->
            <xf:action ev:event="export-queryResults">
                <xf:dispatch name="export-xmlCache" target="pageNavigation-model">
                    <xxf:context name="export-instance" select="xxf:instance('response-instance')"/>
                    <xxf:context name="exportName" select="'queryResults'"/>
                    <xxf:context name="exportType" select="'xml'"/>
                </xf:dispatch>
            </xf:action>



            <!-- ===Manage Information Models === 
                 manageInformationModel ***jc
                 ================================= -->

            <!-- Application defined action to reset for manageInformationModel.
                 This happens when the manageInformationModel task is first selected, on delete-managedSpecialty or on import-shippedResourcesComplete
            -->
            <xf:action ev:event="reset-manageInformationModel">
                <xxf:variable name="applicationId"
                    select="xxf:instance('control-instance')/managedApplication/applicationId"/>

                <!-- Load list of information models -->
                <xf:dispatch name="get-informationModelList" target="application-model">
                    <xxf:context name="applicationId" select="$applicationId"/>
                    <xxf:context name="status" select="xxf:instance('control-instance')/status"/>
                </xf:dispatch>

                <!-- If previousAdminTask was importInformationModel, then show the imported model -->
                <xf:action
                    if="xxf:instance('control-instance')/adminTask/previousAdminTask = 'importInformationModel'">

                    <xxf:variable name="specialtyIRI"
                        select="xxf:instance('control-instance')/importInformationModel/specialtyIRI"/>
                    <xxf:variable name="modelIRI"
                        select="xxf:instance('control-instance')/importInformationModel/modelIRI"/>

                    <!-- Set the informationModelResource - this will trigger setting of specialtyIRI, modelIRI and load of the model -->
                    <xf:setvalue
                        ref="xxf:instance('control-instance')/manageInformationModel/informationModelResource"
                        value="xxf:instance('informationModelList-instance')/informationModel[specialtyIRI=$specialtyIRI][modelIRI=$modelIRI]/handle"
                    />
                </xf:action>

                <!-- Otherwise reset the model parameters 
                     No specialtyIRI means that the summary of all models is displayed -->
                <xf:action
                    if="not(xxf:instance('control-instance')/adminTask/previousAdminTask = 'importInformationModel')">
                    <xf:setvalue
                        ref="xxf:instance('control-instance')/manageInformationModel/specialtyIRI"
                        value="''"/>
                    <xf:setvalue
                        ref="xxf:instance('control-instance')/manageInformationModel/modelIRI"
                        value="''"/>
                    <!-- Reset for the specialty -->
                    <xf:dispatch name="resetSpecialty-manageInformationModel" target="main-model"/>
                    <xf:setvalue
                        ref="xxf:instance('control-instance')/manageInformationModel/informationModelResource"
                        value="''"/>
                </xf:action>

                <!-- Set exportExtract -->
                <xf:setvalue
                    ref="xxf:instance('control-instance')/manageInformationModel/exportExtract"
                    value="''"/>

                <!-- Set exportFormat -->
                <xf:setvalue
                    ref="xxf:instance('control-instance')/manageInformationModel/exportFormat"
                    value="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/manageInformationModel/exportFormat/option[1]/@value"/>

                <!-- Set language pack -->
                <xxf:variable name="option"
                    select="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/managedLanguagePack/exportFormat/option[1]"/>
                <xf:setvalue ref="xxf:instance('control-instance')/managedLanguagePack/exportFormat"
                    value="$option/@value"/>
                <xf:setvalue
                    ref="xxf:instance('control-instance')/managedLanguagePack/transformationXSL"
                    value="$option/@transformationXSL"/>

            </xf:action>


            <!-- Application defined action to load an information model.
                 informationModelResource, specialtyIRI, modelIRI and informationModelType are set from the informationModelList-instance
                 Loads OWL ontology, dictionary and generates views for browsing
                 The information model is loaded to resource-instance
                 The specialtyIRI and classIRI must match the specialtyIRI, modelIRI and informationModelType already set
                 And the language must be the baseLanguage for the applcation
            -->
            <xf:action ev:event="load-informationModel">

                <!-- Load the information model into the resource-instance -->
                <xf:dispatch name="dal-read" target="databaseAccessLayer-model">
                    <xxf:context name="system" select="'ehr'"/>
                    <xxf:context name="physicalClusterNode" select="''"/>
                    <xxf:context name="storageLocation"
                        select="xxf:instance('control-instance')/manageInformationModel/informationModelResource"/>
                    <xxf:context name="resource" select="xxf:instance('resource-instance')"/>
                    <xxf:context name="status"
                        select="xxf:instance('control-instance')/manageInformationModel/status"/>
                </xf:dispatch>

                <!-- Set the language.
                     baseLanguage is the base language for the application (that was used to develop the ontology)
                     modelBaseLanguageCode is the language (if any) for the ontology - must be the baseLanguage
                     language is selected by the user as the language for language packs, so is set initially to the baseLanguage -->
                <xxf:variable name="baseLanguageCode"
                    select="xxf:instance('control-instance')/managedApplication/baseLanguage/@code"/>
                <xxf:variable name="modelBaseLanguageCode"
                    select="if (exists(xxf:instance('resource-instance')/owl:DataPropertyAssertion[owl:DataProperty/@IRI='#hasBaseLanguage'][1]/owl:Literal)) then xxf:instance('resource-instance')/owl:DataPropertyAssertion[owl:DataProperty/@IRI='#hasBaseLanguage'][1]/owl:Literal else $baseLanguageCode"/>

                <!-- Set baseLanguage and language (they are the same when model is first loaded)  -->
                <xxf:variable name="supportedLanguageList"
                    select="xxf:instance('application-parameters-instance')/languagePacks/language/lower-case(@code)"/>
                <xf:setvalue
                    ref="xxf:instance('control-instance')/manageInformationModel/baseLanguage/@code"
                    value="lower-case($baseLanguageCode)"/>
                <xf:setvalue
                    ref="xxf:instance('control-instance')/manageInformationModel/baseLanguage/@displayName"
                    value="if ($baseLanguageCode = $supportedLanguageList) then xxf:instance('application-parameters-instance')/languagePacks/language[lower-case(@code)=$baseLanguageCode]/@displayName else $baseLanguageCode"/>

                <xf:setvalue
                    ref="xxf:instance('control-instance')/manageInformationModel/language/@code"
                    value="lower-case($baseLanguageCode)"/>
                <xf:setvalue
                    ref="xxf:instance('control-instance')/manageInformationModel/language/@displayName"
                    value="if ($baseLanguageCode = $supportedLanguageList) then xxf:instance('application-parameters-instance')/languagePacks/language[lower-case(@code)=$baseLanguageCode]/@displayName else $baseLanguageCode"/>

                <!-- Generate the termFilterCharacterSet
                     This is the set of first letters for terms in the information model ontology -->
                <xxf:variable name="termIRIList"
                    select="xxf:instance('resource-instance')/owl:ClassAssertion[owl:Class/@IRI='#CityEHR:Term']/owl:NamedIndividual/@IRI"/>
                <xxf:variable name="termCharacters"
                    select="$termIRIList/upper-case(substring(substring-after(.,'#CityEHR:Term:'),1,1))"/>
                <xxf:variable name="initialCharacters" select="distinct-values($termCharacters)"/>
                <xf:setvalue
                    ref="xxf:instance('control-instance')/manageInformationModel/termFilterCharacterSet"
                    value="string-join($initialCharacters,xxf:instance('view-parameters-instance')/resultSeparator)"/>
                <xf:setvalue
                    ref="xxf:instance('control-instance')/manageInformationModel/termFilterText"
                    value="$initialCharacters[1]"/>

                <!-- Set the information model classIRI (first one only, just in case) -->
                <xf:setvalue ref="xxf:instance('control-instance')/manageInformationModel/classIRI"
                    value="if (exists(xxf:instance('resource-instance')/owl:SubClassOf[owl:Class[2]/@IRI='#CityEHR:Class']/owl:Class[1]/@IRI)) then xxf:instance('resource-instance')/owl:SubClassOf[owl:Class[2]/@IRI='#CityEHR:Class']/owl:Class[1]/@IRI[1] else ''"/>

                <!-- Set the specialtyIRI  (first one only, just in case) -->
                <xf:setvalue
                    ref="xxf:instance('control-instance')/manageInformationModel/specialtyIRI"
                    value="if (exists(xxf:instance('resource-instance')/owl:SubClassOf[owl:Class[2]/@IRI='#ISO-13606:Folder']/owl:Class[1]/@IRI)) then xxf:instance('resource-instance')/owl:SubClassOf[owl:Class[2]/@IRI='#ISO-13606:Folder']/owl:Class[1]/@IRI[1] else ''"/>

                <!-- Set the modelIRI.
                     Its either the classIRI or the specialtyIRI -->
                <xf:setvalue ref="xxf:instance('control-instance')/manageInformationModel/modelIRI"
                    value="if (xxf:instance('control-instance')/manageInformationModel/informationModelType = 'Class') then xxf:instance('control-instance')/manageInformationModel/classIRI else xxf:instance('control-instance')/manageInformationModel/specialtyIRI"/>

                <!-- Load the dictionary for the model (specialty or class).
                     Dictionary is loaded to dictionary-instance -->
                <xf:dispatch name="load-dictionary" target="dictionary-model">
                    <xxf:context name="specialtyIRI"
                        select="xxf:instance('control-instance')/manageInformationModel/specialtyIRI"/>
                    <xxf:context name="dictionaryIRI"
                        select="xxf:instance('control-instance')/manageInformationModel/modelIRI"/>
                </xf:dispatch>

                <!-- Set the termFilterComposition for language packs -->
                <xxf:variable name="firstComposition"
                    select="xxf:instance('dictionary-instance')/iso-13606:folderCollection/iso-13606:folder[1]/iso-13606:composition[1]"/>
                <xf:setvalue
                    ref="xxf:instance('control-instance')/manageInformationModel/termFilterComposition"
                    value="$firstComposition/@code"/>
                <xf:dispatch name="get-compositionTerms" target="main-model">
                    <xxf:context name="compositionIRI"
                        select="xxf:instance('control-instance')/manageInformationModel/termFilterComposition"
                    />
                </xf:dispatch>

                <!-- Create ISO-13606 model if this is a Specialty model -->
                <xf:action
                    if="xxf:instance('control-instance')/manageInformationModel/informationModelType='Specialty'">
                    <!-- Run transform to create ISO-13606 model from the information model (ontology) -->
                    <xf:delete nodeset="xxf:instance('ISO-13606-instance')/*"/>
                    <xxf:variable name="xsltPipeline"
                        select="concat(xxf:instance('view-parameters-instance')/appPath, '/pipelines/convertOWL2ISO13606Model.xpl')"/>
                    <xf:insert context="xxf:instance('ISO-13606-instance')"
                        origin="xxf:call-xpl($xsltPipeline, 'instance', xxf:instance('resource-instance'), 'data')"
                    />
                </xf:action>

                <!-- Set the ontology view selection.
                     Get the first option from the list for this information model type.
                     This option is an element with a value (the selection) and attributes, including the type of the view -->
                <xxf:variable name="selectedOption"
                    select="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/ontologyView/options[@type=xxf:instance('control-instance')/manageInformationModel/informationModelType]/option[1]"/>
                <xf:setvalue
                    ref="xxf:instance('control-instance')/manageInformationModel/ontologyView"
                    value="$selectedOption"/>
                <xf:setvalue
                    ref="xxf:instance('control-instance')/manageInformationModel/informationModelDisplayType"
                    value="$selectedOption/@type"/>

                <xxf:variable name="informationModelDisplayType" select="$selectedOption/@type"/>

                <!-- Run transformation to formatted model (ontology) -->
                <xf:action if="$informationModelDisplayType='nodeList'">
                    <xf:setvalue
                        ref="xxf:instance('control-instance')/enumeratedClassSelection/selectedNode"
                        value=""/>
                    <xf:delete
                        nodeset="xxf:instance('control-instance')/enumeratedClassSelection/suppDataSet/*"/>
                    <!-- Run transformation to create node list from the information model (ontology) -->
                    <xf:setvalue ref="xxf:instance('view-parameters-instance')/informationModelType"
                        value="$selectedOption/informationModelType"/>
                    <xf:setvalue
                        ref="xxf:instance('view-parameters-instance')/informationModelDisplay"
                        value="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/ontologyView/options[@type=$selectedOption/informationModelType]/option[@type='nodeList'][1]"/>
                    <xxf:variable name="xsltPipeline"
                        select="concat(xxf:instance('view-parameters-instance')/appPath, '/pipelines/convertOWL2NodeDisplay.xpl')"/>
                    <xf:insert nodeset="xxf:instance('html-instance')"
                        origin="xxf:call-xpl($xsltPipeline, ('instance','parameters'),  (xxf:instance('resource-instance'),xxf:instance('view-parameters-instance')) , 'data')"
                    />
                </xf:action>
            </xf:action>


            <!-- Application defined action to export an information model.
                 The format is passed as a parameter.
                 The information model must already be set in manageInformationModel/modelIRI
                 and loaded to the resource-instance and ISO-13606-instance
            -->
            <xf:action ev:event="export-informationModel">
                <xxf:variable name="exportExtract" select="event('exportExtract')"/>
                <xxf:variable name="exportFormat" select="event('exportFormat')"/>

                <!-- Export uses modelId -->
                <xxf:variable name="modelId"
                    select="replace(substring(xxf:instance('control-instance')/manageInformationModel/modelIRI,2),':','-')"/>

                <!-- Only export if a model is selected -->
                <xf:action if="$modelId!=''">
                    <!-- Export ontology.
                     The information model OWL/XML is already loaded to resource-instance 
                     Call cityEHRExportResource pipeline to return zip file to browser -->
                    <xf:action if="$exportFormat='ontology'">
                        <!-- Extract the specified composition model is exportExtract us set -->
                        <xf:action if="$exportExtract!=''">
                            <xf:dispatch name="extract-ontology" target="main-model">
                                <xxf:context name="ontology-instance"
                                    select="xxf:instance('resource-instance')"/>
                                <xxf:context name="exportExtract" select="$exportExtract"/>
                                <xxf:context name="export-instance"
                                    select="xxf:instance('resource-instance')"/>
                            </xf:dispatch>
                        </xf:action>

                        <xf:dispatch name="export-xmlCache" target="pageNavigation-model">
                            <xxf:context name="export-instance"
                                select="xxf:instance('resource-instance')"/>
                            <xxf:context name="exportName" select="$modelId"/>
                            <xxf:context name="exportType" select="'owl'"/>
                        </xf:dispatch>
                    </xf:action>


                    <!-- Export ISO-13606 XML
                     The information model is ISO-13606 format XML is already loaded to ISO-13606-instance
                     Call cityEHRExportResource pipeline to return zip file to browser -->
                    <xf:action if="$exportFormat='ISO-13606'">
                        <xf:dispatch name="export-xmlCache" target="pageNavigation-model">
                            <xxf:context name="export-instance"
                                select="xxf:instance('ISO-13606-instance')"/>
                            <xxf:context name="exportName" select="$modelId"/>
                            <xxf:context name="exportType" select="'owl'"/>
                        </xf:dispatch>

                    </xf:action>

                    <!-- Export Mind Map
                     The information model OWL/XML is already loaded to resource-instance 
                     Convert OWL/XML information model to a mindmap in mindMap-instance
                     Call cityEHRExportResource pipeline to return zip file to browser -->
                    <xf:action if="$exportFormat='mindmap'">
                        <!-- Export through xml-cache, transforming using OWL2MindMap -->
                        <xf:dispatch name="export-xmlCache" target="pageNavigation-model">
                            <xxf:context name="export-instance"
                                select="xxf:instance('resource-instance')"/>
                            <xxf:context name="exportName" select="$modelId"/>
                            <xxf:context name="exportType" select="'mm'"/>
                            <xxf:context name="transformationXSL" select="'OWL2MindMap'"/>
                        </xf:dispatch>
                    </xf:action>

                    <!-- Export Spreadsheet.
                     The information model OWL/XML is already loaded to resource-instance 
                     Convert OWL/XML information model to a spreadsheet and export to the browser
                     This is done through the cityEHRExportResourceAsODFSpreadsheet pipeline
                -->
                    <xf:action if="$exportFormat='spreadsheet'">
                        <xf:message
                            ref="concat(xxf:instance('view-parameters-instance')/versionNumber/@notSupportedMessage,xxf:instance('view-parameters-instance')/versionNumber/@version)"/>
                        <!--
                                        <xxf:variable name="informationModelType"
                                            select="xxf:instance('control-instance')/manageInformationModel/informationModelType"/>
                                        <xxf:variable name="resourceHandle"
                                            select="concat(xxf:instance('view-parameters-instance')/databaseLocation,xxf:instance('control-instance')/manageInformationModel/informationModelResource)"/>
                                        <xxf:variable name="externalId" select="'ods'"/>
                                        <xxf:variable name="transformationXSL" select="'OWL2ODFSpreadsheet.xsl'"/>
                                        <xxf:variable name="templateURL"
                                            select="xxf:instance('view-parameters-instance')/informationModelSpreadsheetTemplateURL[@type=$informationModelType][@format='odf-spreadsheet']"/>
                                        <xf:setvalue ref="xxf:instance('view-parameters-instance')/gotoPage"
                                            value="concat(./@home,'cityEHRExportResourceAsODFSpreadsheet/','?resourceHandle=',$resourceHandle,'&amp;externalId=',$externalId,'&amp;templateURL=',$templateURL,'&amp;transformationXSL=',$transformationXSL)"/>
                                        <xf:load resource="{xxf:instance('view-parameters-instance')/gotoPage}" xxf:show-progress="false"
                                        />
                                        -->
                    </xf:action>
                </xf:action>
            </xf:action>


            <!-- Application defined action to create extract of an information model.
                 The extract composition is passed as a parameter exportExtract
                 Builds the extract in working-ontology-instance and then transfers to the specific export instance
            -->
            <!-- Instance for the test record -->
            <xf:instance id="working-ontology-instance">
                <Ontology/>
            </xf:instance>

            <xf:action ev:event="extract-ontology">
                <xxf:variable name="ontology-instance" select="event('ontology-instance')"/>
                <xxf:variable name="exportExtract" select="event('exportExtract')"/>
                <xxf:variable name="export-instance" select="event('export-instance')"/>

                <!-- Set up the working-ontology-instance -->
                <xf:dispatch name="dal-readStaticResource" target="databaseAccessLayer-model">
                    <xxf:context name="staticResourceLocation" select="'/templates/ontology.xml'"/>
                    <xxf:context name="resource" select="xxf:instance('working-ontology-instance')"/>
                    <xxf:context name="status" select="xxf:instance('control-instance')/status"/>
                </xf:dispatch>

                <!-- Get all assertions involving the exportExtract as a NamedIndividual -->
                <xxf:variable name="exportExtractIndividualSet"
                    select="$ontology-instance/*[owl:NamedIndividual/@IRI=$exportExtract]"/>

                <!-- Write namedIndividuals to the ontology extract -->
                <xf:action xxf:iterate="$exportExtractIndividualSet">
                    <xxf:variable name="exportExtractIndividual" select="."/>

                    <xf:insert context="xxf:instance('working-ontology-instance')" nodeset="*"
                        origin="$exportExtractIndividual" at="last()" position="after"/>
                </xf:action>

                <!-- Return the working ontology -->
                <xf:insert nodeset="$export-instance"
                    origin="xxf:instance('working-ontology-instance')"/>

            </xf:action>

            <!-- Application defined action to reset the specialty for manageInformationModel task -->
            <xf:action ev:event="resetSpecialty-manageInformationModel">
                <!-- Load list of language packs - not needed -->
                <!--
                <xf:dispatch name="get-languagePackList" target="application-model">
                    <xxf:context name="applicationId" select="xxf:instance('control-instance')/manageInformationModel/applicationId"/>
                    <xxf:context name="status" select="xxf:instance('control-instance')/status"/>
                </xf:dispatch>
                -->

                <!-- Clear out the resource-instance.
                     But not if a model has already been selected 
                     (this prevents reset here when the specialty is set for a model that was just selected)-->
                <xf:action
                    if="xxf:instance('control-instance')/manageInformationModel/modelSelected=''">
                    <xf:setvalue
                        ref="xxf:instance('control-instance')/manageInformationModel/informationModelResource"
                        value="''"/>
                    <xf:setvalue
                        ref="xxf:instance('control-instance')/manageInformationModel/informationModelType"
                        value="''"/>
                    <xf:setvalue
                        ref="xxf:instance('control-instance')/manageInformationModel/modelIRI"
                        value="''"/>
                    <xf:delete nodeset="xxf:instance('resource-instance')/*"/>
                </xf:action>

                <!-- Set options for displaying terms -->
                <xxf:variable name="filterOptions"
                    select="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/manageInformationModel/filter/option"/>
                <xxf:variable name="sortOrderOptions"
                    select="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/managedLanguagePack/sortOrder/option"/>
                <xf:setvalue
                    ref="xxf:instance('control-instance')/manageInformationModel/termFilter"
                    value="$filterOptions[1]/@value"/>
                <xf:setvalue
                    ref="xxf:instance('control-instance')/manageInformationModel/termFilterText"
                    value="''"/>
                <xf:setvalue
                    ref="xxf:instance('control-instance')/manageInformationModel/termSortOrder"
                    value="$sortOrderOptions[1]/@value"/>

                <!-- Clear process execution parameters, in case apply-languagePack has previously been invoked -->
                <xf:dispatch name="clear-processExecutionParameters" target="process-model"/>

                <!-- Set showOntologyDetails, editLanguagePack and showLanguagePack -->
                <xf:setvalue
                    ref="xxf:instance('control-instance')/manageInformationModel/showOntologyDetails"
                    value="true()"/>
                <xf:setvalue
                    ref="xxf:instance('control-instance')/manageInformationModel/showLanguagePack"
                    value="false()"/>
                <xf:setvalue
                    ref="xxf:instance('control-instance')/manageInformationModel/editLanguagePack"
                    value="false()"/>

                <!-- Reset modelSelected flag -->
                <xf:setvalue
                    ref="xxf:instance('control-instance')/manageInformationModel/modelSelected"
                    value="''"/>

            </xf:action>

            <!-- Application defined action to reload the shipped models for the application in manageInformationModel task.
                 Invoke import-shippedResources with scope of 'informationModels' -->
            <xf:action ev:event="reload-shippedInformationModels">
                <xf:dispatch name="import-shippedResources" target="main-model">
                    <xxf:context name="scope" select="'informationModels'"/>
                </xf:dispatch>
            </xf:action>

            <!-- Application defined action to reload the shipped resources for the application in manageInformationModel task.
                 Invoke import-shippedResources with scope of 'applicationResources' -->
            <xf:action ev:event="reload-shippedResources">
                <xf:dispatch name="import-shippedResources" target="main-model">
                    <xxf:context name="scope" select="'applicationResources'"/>
                </xf:dispatch>
            </xf:action>


            <!-- Application defined action to import the shipped models for the application 
                 Invoked from reload-shippedInformationModels (with scope of informationModels)
                 and from reload-shippedResources (with scope of applicationResources) 
                 Sets up working-application-parameters then invokes import-shippedResources from application-model -->
            <xf:action ev:event="import-shippedResources">
                <xxf:variable name="scope" select="event('scope')"/>
                <xxf:variable name="applicationIRI"
                    select="xxf:instance('control-instance')/managedApplication/applicationIRI"/>

                <!-- Set up working-application-parameters - required by import-shippedResources.
                     These should already be set for the managed application, but just in case -->
                <xf:dispatch name="load-working-application-parameters"
                    target="configurationManagement-model">
                    <xxf:context name="applicationIRI" select="$applicationIRI"/>
                    <xxf:context name="status"
                        select="xxf:instance('control-instance')/managedApplication/applicationParametersStatus"
                    />
                </xf:dispatch>

                <!-- Run process to import shipped resources for the application.
                     Limit the scope to informationModels, applicationResources or full -->
                <xf:dispatch name="import-shippedResources" target="application-model">
                    <xxf:context name="applicationIRI" select="$applicationIRI"/>
                    <xxf:context name="scope" select="$scope"/>
                    <xxf:context name="completionActionModel" select="'main-model'"/>
                    <xxf:context name="completionActionName"
                        select="'import-shippedResourcesComplete'"/>
                </xf:dispatch>

            </xf:action>


            <!-- Application defined action invoked after completion of the import-shippedResources process. 
                 If the import was successful then invoke reset-manageInformationModel 
                 Otherwise display an error message -->
            <xf:action ev:event="import-shippedResourcesComplete">

                <!-- Get the process status after running import-shippedResources -->
                <xf:dispatch name="get-processStatus" target="process-model">
                    <xxf:context name="status" select="xxf:instance('control-instance')/status"/>
                </xf:dispatch>

                <!-- import-shippedResources completed successfully -->
                <xf:action if="xxf:instance('control-instance')/status='completed'">
                    <xf:dispatch name="reset-manageInformationModel" target="main-model"/>
                </xf:action>

                <!-- There was an error in import-shippedResources -->
                <xf:action if="not(xxf:instance('control-instance')/status='completed')">
                    <xf:setvalue ref="xxf:instance('view-parameters-instance')/systemError"
                        value="concat(xxf:instance('view-parameters-instance')/systemErrorList/systemError[@type='failedImportShippedResources'],' / ',xxf:instance('control-instance')/status)"
                    />
                </xf:action>

            </xf:action>





            <!-- Application defined action to delete a specialty with its information models and system configuration.
                 This is only called after the user has confirmed.
                  -->
            <xf:action ev:event="delete-managedSpecialty">
                <!-- reset the processing messages -->
                <xf:delete nodeset="xxf:instance('control-instance')/statusMessage/entryList/entry"/>
                <!-- Get the specialtyId -->
                <xxf:variable name="specialtyId"
                    select="xxf:instance('control-instance')/manageInformationModel/specialtyId"/>
                <!-- Delete the specialty -->
                <xf:dispatch name="delete-specialty" target="application-model">
                    <xxf:context name="applicationId"
                        select="xxf:instance('control-instance')/managedApplication/applicationId"/>
                    <xxf:context name="specialtyId" select="$specialtyId"/>
                    <xxf:context name="status"
                        select="xxf:instance('control-instance')/manageInformationModel/status"/>
                </xf:dispatch>
                <!-- Reset the manageInformationModel task -->
                <xf:dispatch name="reset-manageInformationModel" target="main-model"/>
            </xf:action>


            <!-- Application defined action get the set of terms used in a composition.
                 Uses the information model stored in resource-instance and dictionary in dictionary-instance
                 Sets the terms as a string of IRIs in manageInformationModel/compositionTermSet.

                 Terms are found from the ontology axioms:
                 
                     <ObjectPropertyAssertion>
                        <ObjectProperty IRI="#hasDisplayName"/>
                        <NamedIndividual IRI="#CityEHR:Form:BaseRegistration"/>
                        <NamedIndividual IRI="#CityEHR:Term:PatientRegistration"/>
                     </ObjectPropertyAssertion>
            -->
            <xf:action ev:event="get-compositionTerms">
                <xxf:variable name="compositionIRI" select="event('compositionIRI')"/>

                <!-- Clear the compositionTermSet -->
                <xf:setvalue
                    ref="xxf:instance('control-instance')/manageInformationModel/compositionTermSet"
                    value="''"/>

                <!-- Get displayName terms for the composition -->
                <xxf:variable name="compositionTermIRI"
                    select="xxf:instance('resource-instance')/owl:ObjectPropertyAssertion[owl:ObjectProperty/@IRI='#hasDisplayName'][owl:NamedIndividual/@IRI=$compositionIRI]/owl:NamedIndividual[2]/@IRI"/>

                <!-- Get displayName terms for the composition sections -->
                <xxf:variable name="sectionIRI"
                    select="xxf:instance('resource-instance')/owl:ObjectPropertyAssertion[owl:ObjectProperty/@IRI='#hasContent'][owl:NamedIndividual/@IRI=$compositionIRI]/owl:NamedIndividual[2]/@IRI"/>
                <xxf:variable name="sectionTermIRI"
                    select="xxf:instance('resource-instance')/owl:ObjectPropertyAssertion[owl:ObjectProperty/@IRI='#hasDisplayName'][owl:NamedIndividual/@IRI=$sectionIRI]/owl:NamedIndividual[2]/@IRI"/>

                <!-- Get displayName terms for the composition entries -->
                <xxf:variable name="entryIRI"
                    select="xxf:instance('resource-instance')/owl:ObjectPropertyAssertion[owl:ObjectProperty/@IRI='#hasContent'][owl:NamedIndividual/@IRI=$sectionIRI]/owl:NamedIndividual[2]/@IRI"/>
                <xxf:variable name="entryTermIRI"
                    select="xxf:instance('resource-instance')/owl:ObjectPropertyAssertion[owl:ObjectProperty/@IRI='#hasDisplayName'][owl:NamedIndividual/@IRI=$entryIRI]/owl:NamedIndividual[2]/@IRI"/>

                <!-- Get displayName terms for the composition clusters and elements -->
                <xxf:variable name="clusterElementIRI"
                    select="xxf:instance('resource-instance')/owl:ObjectPropertyAssertion[owl:ObjectProperty/@IRI='#hasContent'][owl:NamedIndividual/@IRI=$entryIRI]/owl:NamedIndividual[2]/@IRI"/>
                <xxf:variable name="clusterElementTermIRI"
                    select="xxf:instance('resource-instance')/owl:ObjectPropertyAssertion[owl:ObjectProperty/@IRI='#hasDisplayName'][owl:NamedIndividual/@IRI=$clusterElementIRI]/owl:NamedIndividual[2]/@IRI"/>

                <!-- Get displayName terms for the composition element values -->
                <xxf:variable name="elementValueIRI"
                    select="xxf:instance('resource-instance')/owl:ObjectPropertyAssertion[owl:ObjectProperty/@IRI='#hasValue'][owl:NamedIndividual/@IRI=$clusterElementIRI]/owl:NamedIndividual[2]/@IRI"/>
                <xxf:variable name="elementValueTermIRI"
                    select="distinct-values(xxf:instance('resource-instance')/owl:ObjectPropertyAssertion[owl:ObjectProperty/@IRI='#hasDisplayName'][owl:NamedIndividual/@IRI=$elementValueIRI]/owl:NamedIndividual[2]/@IRI)"/>

                <!-- Set the compositionTermSet -->
                <xxf:variable name="compositionTermSet"
                    select="$compositionTermIRI | $sectionTermIRI | $entryTermIRI | $clusterElementTermIRI | $elementValueIRI"/>
                <xf:setvalue
                    ref="xxf:instance('control-instance')/manageInformationModel/compositionTermSet"
                    value="string-join($compositionTermSet,xxf:instance('view-parameters-instance')/resultSeparator)"/>

            </xf:action>


            <!-- Application defined action to load the language pack for the currently selected type/language.
                 The types of languagePack are informationModel, application-parameters and directory
                 Check whether the language pack already exists in the xmlstore
                 If it exists, then load it
                 If not, then generate it, save and load.
                 -->
            <xf:action ev:event="load-languagePack">
                <!-- Check whether language pack exists -->
                <xf:dispatch name="modelLanguagePack-exists" target="application-model">
                    <xxf:context name="applicationIRI"
                        select="xxf:instance('control-instance')/managedApplication/applicationIRI"/>
                    <xxf:context name="languageCode"
                        select="xxf:instance('control-instance')/manageInformationModel/language/@code"/>
                    <xxf:context name="status"
                        select="xxf:instance('control-instance')/manageInformationModel/languagePackExists"
                    />
                </xf:dispatch>

                <!-- languagePack exists - load from the database and find unused translations -->
                <xf:action
                    if="xxf:instance('control-instance')/manageInformationModel/languagePackExists='true'">
                    <!-- Load the language pack -->
                    <xf:dispatch name="load-modelLanguagePack" target="application-model">
                        <xxf:context name="applicationIRI"
                            select="xxf:instance('control-instance')/managedApplication/applicationIRI"/>
                        <xxf:context name="languageCode"
                            select="xxf:instance('control-instance')/manageInformationModel/language/@code"/>
                        <xxf:context name="languagePack-instance"
                            select="xxf:instance('languagePack-instance')"/>
                        <xxf:context name="status"
                            select="xxf:instance('control-instance')/manageInformationModel/status"
                        />
                    </xf:dispatch>

                    <!-- Generate the unused language pack term literals -->

                </xf:action>

                <!-- No language pack exists - generate and save it -->
                <xf:action
                    if="not(xxf:instance('control-instance')/manageInformationModel/languagePackExists='true')">
                    <!-- Generate language pack -->
                    <xf:dispatch name="generate-modelLanguagePack" target="application-model">
                        <xxf:context name="applicationIRI"
                            select="xxf:instance('control-instance')/managedApplication/applicationIRI"/>
                        <xxf:context name="informationModelList-instance"
                            select="xxf:instance('informationModelList-instance')"/>
                        <xxf:context name="languageCode"
                            select="xxf:instance('control-instance')/manageInformationModel/language/@code"/>
                        <xxf:context name="baseLanguageCode"
                            select="xxf:instance('control-instance')/manageInformationModel/baseLanguage/@code"/>
                        <xxf:context name="languagePack-instance"
                            select="xxf:instance('languagePack-instance')"/>
                        <xxf:context name="status"
                            select="xxf:instance('control-instance')/manageInformationModel/status"
                        />
                    </xf:dispatch>

                    <!-- Save the language pack -->
                    <xf:dispatch name="save-modelLanguagePack" target="application-model">
                        <xxf:context name="applicationIRI"
                            select="xxf:instance('control-instance')/managedApplication/applicationIRI"/>
                        <xxf:context name="languageCode"
                            select="xxf:instance('control-instance')/manageInformationModel/language/@code"/>
                        <xxf:context name="languagePack-instance"
                            select="xxf:instance('languagePack-instance')"/>
                        <xxf:context name="status"
                            select="xxf:instance('control-instance')/manageInformationModel/status"
                        />
                    </xf:dispatch>
                </xf:action>

                <!-- Reset the editStatus -->
                <xf:setvalue
                    ref="xxf:instance('control-instance')/manageInformationModel/editStatus"
                    value="''"/>

            </xf:action>


            <!-- Application defined action to save the language pack
                 Information model is in resource-instance
                 Language pack is in languagePack-instance.
                 Only literals in the resource instance can be editied in the languagePack.
                 So just check these and set the xml:lang attribute if changed
                 Save and then reset the editStatus
                 -->
            <xf:action ev:event="save-languagePack">
                <xxf:variable name="languageCode"
                    select="xxf:instance('control-instance')/manageInformationModel/language/@code"/>
                <xxf:variable name="baseLanguageCode"
                    select="xxf:instance('control-instance')/manageInformationModel/baseLanguage/@code"/>

                <!-- Set the language code on all literals.
                     Not needed - these are set whenever edited -->
                <!--
                <xxf:variable name="termIRIList"
                    select="xxf:instance('resource-instance')/owl:ClassAssertion[owl:Class/@IRI='#CityEHR:Term']/owl:NamedIndividual/@IRI"/>

                <xf:action xxf:iterate="$termIRIList">
                    <xxf:variable name="termIRI" select="."/>
                    <xxf:variable name="baseLanguageLiteral"
                        select="(xxf:instance('resource-instance')/owl:DataPropertyAssertion[owl:DataProperty/@IRI='#hasValue'][owl:NamedIndividual/@IRI=$termIRI]/owl:Literal)[1]"/>
                    <xxf:variable name="languagePackLiteral"
                        select="(xxf:instance('languagePack-instance')/owl:DataPropertyAssertion[owl:DataProperty/@IRI='#hasValue'][owl:NamedIndividual/@IRI=$termIRI]/owl:Literal)[1]"/>

                    <xf:setvalue ref="$languagePackLiteral/@xml:lang"
                        value="if ($languagePackLiteral != $baseLanguageLiteral) then $languageCode else $baseLanguageCode"/>
                </xf:action>
                -->

                <!-- Save the language pack -->
                <xf:dispatch name="save-modelLanguagePack" target="application-model">
                    <xxf:context name="applicationIRI"
                        select="xxf:instance('control-instance')/managedApplication/applicationIRI"/>
                    <xxf:context name="languageCode" select="$languageCode"/>
                    <xxf:context name="languagePack-instance"
                        select="xxf:instance('languagePack-instance')"/>
                    <xxf:context name="status"
                        select="xxf:instance('control-instance')/manageInformationModel/status"/>
                </xf:dispatch>

                <!-- Reset the editStatus -->
                <xf:setvalue
                    ref="xxf:instance('control-instance')/manageInformationModel/editStatus"
                    value="''"/>

            </xf:action>



            <!-- Application defined action to export the language pack for the currently selected model/language. 
                 The language pack is in languagePack-instance - there is only one language pack for the application
                 Covering all specialty and class information models.
                 But for export, just generate the terms in the current model, which is stored in resource-instance
                 -->
            <xf:action ev:event="export-languagePack">
                <!-- First save the language pack, if necessary (check editStatus) -->
                <xf:action
                    if="xxf:instance('control-instance')/manageInformationModel/editStatus != ''">
                    <xf:dispatch name="save-languagePack" target="main-model"/>
                </xf:action>

                <!-- Generate the language pack for export in workingLanguagePack-instance.
                     This has terms from the current information model in the base langiage (resource-instance)
                     And any translated terms from the languagePack-instance -->
                <xf:dispatch name="generate-exportLanguagePack" target="application-model">
                    <xxf:context name="applicationIRI"
                        select="xxf:instance('control-instance')/managedApplication/applicationIRI"/>
                    <xxf:context name="languageCode"
                        select="xxf:instance('control-instance')/manageInformationModel/language/@code"/>
                    <xxf:context name="baseLanguageCode"
                        select="xxf:instance('control-instance')/manageInformationModel/baseLanguage/@code"/>
                    <xxf:context name="informationModel-instance"
                        select="xxf:instance('resource-instance')"/>
                    <xxf:context name="languagePack-instance"
                        select="xxf:instance('languagePack-instance')"/>
                </xf:dispatch>

                <!-- Export (and transform) via the xmlcache -->
                <xf:dispatch name="export-xmlCache" target="pageNavigation-model">
                    <xxf:context name="export-instance"
                        select="xxf:instance('workingLanguagePack-instance')"/>
                    <xxf:context name="exportName" select="'languagePack'"/>
                    <xxf:context name="exportType" select="'xml'"/>
                    <xxf:context name="transformationXSL"
                        select="xxf:instance('control-instance')/managedLanguagePack/transformationXSL"
                    />
                </xf:dispatch>
            </xf:action>


            <!-- Application defined action to import a language pack. 
                 The language pack has been uploaded to import-instance
                 And has been found to be one of three types:
                    informationModel
                    application-parameters
                    system-parameters
            -->
            <xf:action ev:event="import-language-pack">

                <!-- Save the language pack for the informationModel
                     The applicationIRI and languageCode have already been checked 
                     Extract details from import-instance.
                     Remove assertions from language pack that are not in the target language.
                     Import to xml store -->
                <xf:action
                    if="xxf:instance('control-instance')/importLanguagePack/type='informationModel'">
                    <xf:dispatch name="save-modelLanguagePack" target="application-model">
                        <xxf:context name="applicationIRI"
                            select="xxf:instance('control-instance')/managedApplication/applicationIRI"/>
                        <xxf:context name="languageCode"
                            select="xxf:instance('control-instance')/importLanguagePack/languageCode"/>
                        <xxf:context name="languagePack-instance"
                            select="xxf:instance('import-instance')"/>
                        <xxf:context name="status"
                            select="xxf:instance('control-instance')/importLanguagePack/status"/>
                    </xf:dispatch>
                </xf:action>

                <!-- Merge and save the language pack for the application-parameters
                     Note that there is no applicationIRI set in the language Pack, so its possible to import for the wrong application.
                     But the effect of this is just to add redundant terms to the pack when its merged -->
                <xf:action
                    if="xxf:instance('control-instance')/importLanguagePack/type='application-parameters'">
                    <!-- Load the application-parameters language pack for the managed application -->
                    <xf:dispatch name="load-parametersLanguagePack" target="main-model">
                        <xxf:context name="adminTask" select="'manageApplicationParameters'"/>
                    </xf:dispatch>

                    <!-- Merge the imported language pack with the stored language pack -->
                    <xf:dispatch name="merge-parametersLanguagePack" target="manageParameters-model">
                        <xxf:context name="baseLanguageCode"
                            select="xxf:instance('control-instance')/managedApplication/baseLanguage/@code"/>
                        <xxf:context name="storedLanguagePack-instance"
                            select="xxf:instance('parameterslanguagePack-instance')"/>
                        <xxf:context name="importedLanguagePack-instance"
                            select="xxf:instance('import-instance')"/>
                        <xxf:context name="status"
                            select="xxf:instance('control-instance')/managedParameters/status"/>
                    </xf:dispatch>

                    <!-- Save the application-parameters language pack -->
                    <xf:dispatch name="save-parametersLanguagePack" target="main-model">
                        <xxf:context name="adminTask" select="'manageApplicationParameters'"/>
                    </xf:dispatch>
                </xf:action>


                <!-- Merge and save the language pack for the system-parameters -->
                <xf:action
                    if="xxf:instance('control-instance')/importLanguagePack/type='system-parameters'">
                    <!-- Load the application-parameters language pack for the managed application -->
                    <xf:dispatch name="load-parametersLanguagePack" target="main-model">
                        <xxf:context name="adminTask" select="'manageSystemParameters'"/>
                    </xf:dispatch>

                    <!-- Merge the imported language pack with the stored language pack -->
                    <xf:dispatch name="merge-parametersLanguagePack" target="manageParameters-model">
                        <xxf:context name="baseLanguageCode"
                            select="xxf:instance('control-instance')/managedApplication/baseLanguage/@code"/>
                        <xxf:context name="storedLanguagePack-instance"
                            select="xxf:instance('parameterslanguagePack-instance')"/>
                        <xxf:context name="importedLanguagePack-instance"
                            select="xxf:instance('import-instance')"/>
                        <xxf:context name="status"
                            select="xxf:instance('control-instance')/managedParameters/status"/>
                    </xf:dispatch>

                    <!-- Save the application-parameters language pack -->
                    <xf:dispatch name="save-parametersLanguagePack" target="main-model">
                        <xxf:context name="adminTask" select="'manageSystemParameters'"/>
                    </xf:dispatch>


                </xf:action>

            </xf:action>

            <!-- Application defined action to apply the language pack for the currently selected language.
                 Language pack is in languagePack-instance.
                 The language pack is applied to every information model in the application.
            -->
            <xf:action ev:event="apply-languagePack">
                <!-- Hide the language pack while the apply-languagePack process runs -->
                <xf:setvalue
                    ref="xxf:instance('control-instance')/manageInformationModel/showLanguagePack"
                    value="false()"/>

                <!-- Parameters set for managedApplication -->
                <xxf:variable name="applicationIRI"
                    select="xxf:instance('control-instance')/managedApplication/applicationIRI"/>
                <xxf:variable name="commonModelIRI"
                    select="xxf:instance('control-instance')/managedApplication/commonModelIRI"/>
                <xxf:variable name="baseLanguageCode"
                    select="xxf:instance('control-instance')/managedApplication/baseLanguage/@code"/>
                <xxf:variable name="languageCode"
                    select="lower-case(xxf:instance('control-instance')/manageInformationModel/language/@code)"/>

                <!-- First save the language pack, if necessary (check editStatus) -->
                <xf:action
                    if="xxf:instance('control-instance')/manageInformationModel/editStatus != ''">
                    <xf:dispatch name="save-languagePack" target="main-model"/>
                </xf:action>

                <!-- Apply the language pack -->
                <xf:dispatch name="apply-languagePack" target="application-model">
                    <xxf:context name="applicationIRI" select="$applicationIRI"/>
                    <xxf:context name="commonModelIRI" select="$commonModelIRI"/>
                    <xxf:context name="informationModelList-instance"
                        select="xxf:instance('informationModelList-instance')"/>
                    <xxf:context name="baseLanguageCode" select="$baseLanguageCode"/>
                    <xxf:context name="languageCode" select="$languageCode"/>
                    <xxf:context name="languagePack-instance"
                        select="xxf:instance('languagePack-instance')"/>
                    <xxf:context name="status"
                        select="xxf:instance('control-instance')/manageInformationModel/status"/>
                </xf:dispatch>

                <!-- Set system error message -->
                <xf:setvalue ref="xxf:instance('view-parameters-instance')/systemError"
                    value="xxf:instance('control-instance')/manageInformationModel/status"/>
            </xf:action>


            <!-- Application defined action to apply the language pack for the currently selected language.
                 Language pack is in languagePack-instance.
                 The language pack is applied to every information model in the application.
            -->
            <xf:action ev:event="show-termContext">
                <xxf:variable name="termIRI" select="event('termIRI')"/>

                <!-- Display term context dialog -->
                <xxf:show ev:event="DOMActivate" dialog="termContextDialog"/>
            </xf:action>


            <!-- === Manage Media in Information Models === 
                  manageMedia
                  
                  Media are stored for the application in the systemConfiguration/media collection
                  The name of the mediaFile is the concatentation of the elementId and the value, such as
                        advicegraphic-xxx-alcoholgraphic    where -xxx- is the mediaFilenameSeparator
                        
                  So it is possible that the same mediaFile is shared across different specialty dictionaries
                 ======================================= -->


            <!-- Application defined action to reload shipped media from disk -->
            <xf:action ev:event="reload-shippedMedia">
                <!-- Reload the media -->
                <xf:dispatch name="reload-shippedMedia" target="application-model"/>

                <!-- All done, so reset the manageMedia task, to show updates -->
                <xf:dispatch name="reset-manageMedia" target="main-model"/>

            </xf:action>


            <!-- Application defined action to reset the manageMedia task -->
            <xf:action ev:event="reset-manageMedia">

                <!-- Set specialtyIRI - manageMedia uses specialty in manageInformationModel-->
                <xf:setvalue
                    ref="xxf:instance('control-instance')/manageInformationModel/specialtyIRI"
                    value="if (.='') then xxf:instance('control-instance')/managedApplication/defaultSpecialtyIRI else ."/>

                <!-- Reset for the specialty -->
                <xf:dispatch name="resetSpecialty-manageMedia" target="main-model"/>

            </xf:action>


            <!-- Application defined action to reset the specialty for manageMedia task -->
            <xf:action ev:event="resetSpecialty-manageMedia">
                <!-- Load the dictionary for the specialty 
                     Dictionary is loaded to dictionary-instance -->
                <xf:dispatch name="load-dictionary" target="dictionary-model">
                    <xxf:context name="applicationRI"
                        select="xxf:instance('control-instance')/managedApplication/applicationIRI"/>
                    <xxf:context name="specialtyIRI"
                        select="xxf:instance('control-instance')/manageInformationModel/specialtyIRI"
                    />
                </xf:dispatch>

                <!-- Load the directory elements for the specialty.
                     These are loaded to directoryElements-instance -->
                <xf:dispatch name="load-directoryElementsForDictionary" target="directory-model">
                    <xxf:context name="specialtyIRI"
                        select="xxf:instance('control-instance')/manageInformationModel/specialtyIRI"/>
                    <xxf:context name="dictionary-instance"
                        select="xxf:instance('dictionary-instance')"/>
                </xf:dispatch>

                <!-- Load the media for the dictionary (to storedMediaList-instance)-->
                <xf:dispatch name="load-dictionaryMedia" target="application-model">
                    <xxf:context name="applicationRI"
                        select="xxf:instance('control-instance')/managedApplication/applicationIRI"/>
                    <xxf:context name="specialtyIRI"
                        select="xxf:instance('control-instance')/manageInformationModel/specialtyIRI"/>
                    <xxf:context name="dictionary-instance"
                        select="xxf:instance('dictionary-instance')"/>
                    <xxf:context name="directoryElements-instance"
                        select="xxf:instance('directoryElements-instance')"/>
                </xf:dispatch>

                <!-- Reset the entryIRI -->
                <xf:setvalue ref="xxf:instance('control-instance')/manageMedia/entryIRI" value="''"/>

            </xf:action>

            <!-- Application defined action to save the storedMediaList.
                 Iterate through the list and save each mediaFile -->
            <xf:action ev:event="save-storedMediaList">
                <xxf:variable name="applicationIRI"
                    select="xxf:instance('control-instance')/managedApplication/applicationIRI"/>
                <!-- Iterate through the list of stored mediaFile -->
                <xf:action xxf:iterate="xxf:instance('storedMediaList-instance')/*">
                    <xxf:variable name="mediaFile" select="."/>
                    <!--  Save the mediaFile to the database -->
                    <xf:dispatch name="save-mediaFile" target="application-model">
                        <xxf:context name="mediaFile" select="$mediaFile"/>
                        <xxf:context name="applicationIRI" select="$applicationIRI"/>
                        <xxf:context name="status" select="xxf:instance('control-instance')/status"
                        />
                    </xf:dispatch>

                </xf:action>
            </xf:action>


            <!-- === Manage Image Maps in Information Models === 
                  manageImageMaps 
                 ======================================= -->

            <!-- Application defined action to reset the manageImageMaps task -->
            <xf:action ev:event="reset-manageImageMaps">
                <!-- Set specialtyIRI - manageMedia uses specialty in manageInformationModel-->
                <xf:setvalue
                    ref="xxf:instance('control-instance')/manageInformationModel/specialtyIRI"
                    value="if (.='') then xxf:instance('control-instance')/managedApplication/defaultSpecialtyIRI else ."/>

                <!-- Reset for the specialty -->
                <xf:dispatch name="resetSpecialty-manageImageMaps" target="main-model"/>

            </xf:action>

            <!-- Application defined action to reset the specialty for manageImageMaps task -->
            <xf:action ev:event="resetSpecialty-manageImageMaps">
                <!-- Load the dictionary for the specialty 
                     Dictionary is loaded to dictionary-instance -->
                <xf:dispatch name="load-dictionary" target="dictionary-model">
                    <xxf:context name="applicationRI"
                        select="xxf:instance('control-instance')/managedApplication/applicationIRI"/>
                    <xxf:context name="specialtyIRI"
                        select="xxf:instance('control-instance')/manageInformationModel/specialtyIRI"
                    />
                </xf:dispatch>

                <!-- The list of image maps defined in the specialty dictionary.
                     The image map is associated with the root, not the extension.
                     This means that the same entry (extension) can be rendered in different ways (imageMap, Form, etc) 
                     or associated with multiple image maps through different root ids -->
                <xxf:variable name="dictionaryImageMapList"
                    select="xxf:instance('dictionary-instance')/iso-13606:entryCollection/iso-13606:entry[contains(@cityEHR:rendition,'ImageMap')]"/>
                <xxf:variable name="entryIRIList"
                    select="$dictionaryImageMapList/cda:component/cda:observation/cda:id/@root"/>

                <!-- Get the list of image maps for the specialty.
                     This creates a complete list, even if the image maps have not been stored (yet) in the xmlstore.
                     the list is in imageMapFileList-instance -->
                <xf:dispatch name="get-imageMapFileList" target="application-model">
                    <xxf:context name="applicationId"
                        select="xxf:instance('control-instance')/managedApplication/applicationId"/>
                    <xxf:context name="entryIRIList" select="$entryIRIList"/>
                </xf:dispatch>

                <!-- Set edit status -->
                <xf:setvalue ref="xxf:instance('control-instance')/manageImageMaps/editStatus"
                    value="''"/>

            </xf:action>


            <!-- Application defined action to view the selected image map.
                 The image map is svg within the imageMapFile in imageMapFileList-instance -->
            <xf:action ev:event="view-imageMap">
                <xxf:variable name="entryId" select="event('entryId')"/>
                <xxf:variable name="imageMap"
                    select="xxf:instance('imageMapFileList-instance')//svg:svg[@id=$entryId]"/>

                <!-- Display SVG in viewXML dialog -->
                <xf:dispatch name="display-formatted-xml" target="pageNavigation-model">
                    <xxf:context name="title"
                        select="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/manageImageMaps/viewImageMapTitle"/>
                    <xxf:context name="displayXML" select="$imageMap"/>
                </xf:dispatch>
            </xf:action>


            <!-- Application defined action to reload shipped image maps from disk -->
            <xf:action ev:event="reload-shippedImageMaps">
                <!-- Reload the media -->
                <xf:dispatch name="reload-shippedImageMaps" target="application-model">
                    <xxf:context name="applicationRI"
                        select="xxf:instance('control-instance')/managedApplication/applicationIRI"
                    />
                </xf:dispatch>

                <!-- All done, so reset the manageImageMaps task, to show updates -->
                <xf:dispatch name="reset-manageImageMaps" target="main-model"/>

            </xf:action>


            <!-- === Manage Letter Templates in Information Models === 
                  manageLetterTemplates
                  
                  Actions to handle letter templates are defined in:
                            
                    dictionaryModel - storedLetterTemplateList-instance, letterTemplate-instance, letterTemplateBinary-instance
                                      get-storedLetterTemplateList, load-letterTemplateContent
                                      
                    applicationModel - 
                 ======================================= -->

            <!-- Application defined action to reset the manageLetterTemplates task -->
            <xf:action ev:event="reset-manageLetterTemplates">

                <!-- Load the dictionary for the specialty 
                     Dictionary is loaded to dictionary-instance.
                     Only needed if the dictionary is not already loaded for this specialty -->
                <xf:dispatch name="load-dictionary" target="dictionary-model">
                    <xxf:context name="applicationRI"
                        select="xxf:instance('control-instance')/managedApplication/applicationIRI"/>
                    <xxf:context name="specialtyIRI"
                        select="xxf:instance('control-instance')/manageLetterTemplates/specialtyIRI"
                    />
                </xf:dispatch>

                <!-- Load the letterTemplateList -->

            </xf:action>

            <!-- Application defined action to reset the associateLetterTemplates template.
                 The templateId has been set in manageLetterTemplates/letterTemplateId as selected by the user
                 
                 Loads the letterTemplate, with its content, to the import-instance
                 -->
            <xf:action ev:event="reset-letterTemplate">
                <xxf:variable name="letterTemplateId" select="event('letterTemplateId')"/>

                <!-- Set the letterTemplate -->
                <xxf:variable name="letterTemplateList"
                    select="xxf:instance('storedLetterTemplateList-instance')/letterTemplate"/>
                <xxf:variable name="selectedLetterTemplate"
                    select="$letterTemplateList[@value=$letterTemplateId]"/>

                <xf:delete nodeset="xxf:instance('import-instance')/*"/>

                <!-- If the letterTemplate exists, then load content and extract variables -->
                <xf:action if="exists($selectedLetterTemplate)">

                    <!-- Load the letterTemplate content.
                         The content is loaded to letterTemplate/letterTemplateFile-->
                    <xxf:variable name="applicationIRI"
                        select="xxf:instance('control-instance')/manageApplicationParameters/applicationIRI"/>
                    <xf:dispatch name="load-letterTemplateContent" target="dictionary-model">
                        <xxf:context name="letterTemplate" select="$selectedLetterTemplate"/>
                        <xxf:context name="applicationIRI" select="$applicationIRI"/>
                    </xf:dispatch>

                    <!-- Set in letterTemplateBinary-instance -->
                    <xf:setvalue ref="xxf:instance('letterTemplateBinary-instance')"
                        value="$selectedLetterTemplate/letterTemplateFile"/>

                    <!--  Run pipeline to extract variables from the template.
                          Returns a <letterTemplateVariables> element -->
                    <xxf:variable name="xsltPipeline"
                        select="concat(xxf:instance('view-parameters-instance')/appPath, '/pipelines/extractTemplateVariables.xpl')"/>
                    <xf:insert nodeset="xxf:instance('resource-instance')"
                        origin="xxf:call-xpl($xsltPipeline, 'instance',  xxf:instance('letterTemplateBinary-instance'), 'data')"/>

                    <xf:delete nodeset="$selectedLetterTemplate/letterTemplateVariables"/>
                    <xf:insert context="$selectedLetterTemplate"
                        origin="xxf:instance('resource-instance')"/>

                </xf:action>

            </xf:action>


            <!-- Application defined action to reset the associateLetterTemplates task.
                 Invoked when the task first loads and also after delete-letterTemplate
                 -->
            <xf:action ev:event="reset-associateLetterTemplates">
                <!-- Reload the letterTemplateList.
                     This will eliminate any templates added, but not loaded -->
                <xf:dispatch name="get-storedLetterTemplateList" target="dictionary-model">
                    <xxf:context name="applicationIRI"
                        select="xxf:instance('view-parameters-instance')/applicationIRI"/>
                </xf:dispatch>

                <xxf:variable name="letterTemplateList"
                    select="xxf:instance('storedLetterTemplateList-instance')/letterTemplate"/>
                <xxf:variable name="firstLetterTemplate" select="$letterTemplateList[1]"/>
                <xxf:variable name="selectedLetterTemplate"
                    select="$letterTemplateList[@value=xxf:instance('control-instance')/manageLetterTemplates/letterTemplateId]"/>

                <!-- Set manageLetterTemplates/letterTemplateId -->
                <xf:setvalue
                    ref="xxf:instance('control-instance')/manageLetterTemplates/letterTemplateId"
                    value="if (exists($selectedLetterTemplate)) then . else if (exists($firstLetterTemplate)) then $firstLetterTemplate/@value else ."/>

                <!-- Reset the letterTemplate (is then stored in import-instance) -->
                <xf:dispatch name="reset-letterTemplate" target="main-model">
                    <xxf:context name="letterTemplateId"
                        select="xxf:instance('control-instance')/manageLetterTemplates/letterTemplateId"
                    />
                </xf:dispatch>
            </xf:action>


            <!-- Application defined action to delete a letterTemplate from the xmlstore
                 After confirmation from the user-->
            <xf:action ev:event="delete-letterTemplate">
                <!-- Delete the letterTemplate .
                     The template is defnined by letterTemplateId-->
                <xxf:variable name="applicationIRI"
                    select="xxf:instance('control-instance')/manageApplicationParameters/applicationIRI"/>
                <xf:dispatch name="delete-letterTemplate" target="application-model">
                    <xxf:context name="letterTemplateId"
                        select="xxf:instance('control-instance')/manageLetterTemplates/letterTemplateId"/>
                    <xxf:context name="applicationIRI" select="$applicationIRI"/>
                </xf:dispatch>

                <!-- Now reset the  associateLetterTemplates task -->
                <xf:dispatch name="reset-associateLetterTemplates" target="main-model"/>

            </xf:action>


            <!-- === Manage Local Information Models === 
                 manageLocalInformationModel
                 ======================================= -->



            <!-- ===Uploading and importing cityEHR resources to the XML Store === 
                 Used for several different tasks
                 ================================================================== -->
            <!-- Instance to hold uploaded file -->
            <xf:instance id="file-instance">
                <upload xmlns="">
                    <file>
                        <filename/>
                        <mediatype/>
                        <size/>
                        <content/>
                        <convertedContent/>
                    </file>
                </upload>
            </xf:instance>
            <xf:bind nodeset="xxf:instance('file-instance')">
                <xf:bind nodeset="file/content" type="xs:anyURI"/>
            </xf:bind>


            <!-- Instance to hold imported xml -->
            <xf:instance id="import-instance">
                <import xmlns=""/>
            </xf:instance>
            <!-- Instance to hold XML for storage -->
            <xf:instance id="storage-instance">
                <store/>
            </xf:instance>
            <!-- Instance to hold ISO-13606 Model -->
            <xf:instance id="ISO-13606-instance">
                <model/>
            </xf:instance>
            <!-- Instance to hold mind map Model -->
            <xf:instance id="mindMap-instance">
                <map/>
            </xf:instance>
            <!-- Instance to hold imported resource -->
            <xf:instance id="resource-instance">
                <resource/>
            </xf:instance>
            <!-- Instance to hold resource to merge-->
            <xf:instance id="merge-instance">
                <merge/>
            </xf:instance>
            <!-- Instance to hold merged ontology-->
            <xf:instance id="merged-instance">
                <resource/>
            </xf:instance>
            <!-- Template instance for viewDefinition -->
            <xf:instance id="viewDefinition-instance">
                <viewDefinition xmlns="">
                    <viewId/>
                    <displayName/>
                    <rank/>
                    <type/>
                    <compositionId/>
                </viewDefinition>
            </xf:instance>

            <!-- Application defined action to transfer uploaded file to import-instance.
                 The cityEHRGetUploadedData pipeline handles zip (which can be ODF or MS spreadsheet), text or XML
                 Three spreadsheet formats - ODF .ods, MS .xslx and MS 2003 XML are transformed to standard cityEHR database XML in the pipeline.              
            -->
            <xf:action ev:event="import-uploaded-file">
                <!-- Run pipeline to get the uploaded XML -->
                <xf:setvalue ref="xxf:instance('view-parameters-instance')/sourceHandle"
                    value="xxf:instance('file-instance')/file/content"/>
                <xxf:variable name="pipeline"
                    select="concat(xxf:instance('view-parameters-instance')/appPath,'/pipelines/cityEHRGetUploadedData.xpl')"/>

                <xf:insert nodeset="xxf:instance('import-instance')"
                    origin="xxf:call-xpl($pipeline, 'parameters', xxf:instance('view-parameters-instance'), 'data')"/>

                <!--
                <xf:insert nodeset="xxf:instance('import-instance')"
                    origin="xxf:call-xpl($pipeline, ('instance','view-parameters'), (xxf:instance('view-parameters-instance'),xxf:instance('view-parameters-instance')), 'data')"/>               
-->
                <!-- This pipeline always returns XML - of the form exceptions/exception if there is an exception (or error)
                     Found a recognised XML input file in the data, so can be further processed -->
                <xf:action if="exists(xxf:instance('import-instance')[name(.)!='exceptions'])">
                    <xf:dispatch name="validate-import-instance" target="main-model"/>
                </xf:action>
                <!-- No recognised XML input file in the data.
                     Includes the case where this wasn't a zip file or an XML file, so the processor threw an exception.
                     Look up the exception message in view-parameters or just display directly if it doesn't have an entry there -->
                <xf:action
                    if="exists(xxf:instance('import-instance')[name(.)='exceptions']/exception/message)">
                    <xxf:variable name="exceptionMessage"
                        select="xxf:instance('import-instance')/exception/message"/>
                    <xxf:variable name="processingMessage"
                        select="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/statusMessage/message[@processingProgress=$exceptionMessage]"/>
                    <xf:setvalue ref="xxf:instance('control-instance')/statusMessage/entry"
                        value="if (exists($processingMessage)) then $processingMessage else $exceptionMessage"/>
                    <xf:insert context="xxf:instance('control-instance')/statusMessage/entryList"
                        origin="xxf:instance('control-instance')/statusMessage/entry"/>
                    <xf:setvalue ref="xxf:instance('control-instance')/uploadStatus"
                        value="'failed'"/>
                    <xf:setvalue ref="xxf:instance('control-instance')/importStatus"
                        value="'waiting'"/>
                    <xf:setvalue ref="xxf:instance('control-instance')/importXMLRoot" value="''"/>
                </xf:action>
            </xf:action>


            <!-- Application defined action to validate the data submission
                 Is called only when a well formed XML file has been uploaded for import
                 Sets the uploadStatus and importStatus
                 -->
            <xf:action ev:event="validate-import-instance">
                <!-- Default is 'waiting' to import, gets reset to 'ready' if the import document is checked (below) and is OK -->
                <xf:setvalue ref="xxf:instance('control-instance')/importStatus" value="'waiting'"/>

                <!-- Set the processing status - uploaded -->
                <xf:setvalue ref="xxf:instance('control-instance')/statusMessage/entry"
                    value="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/loadedData"/>
                <xf:insert context="xxf:instance('control-instance')/statusMessage/entryList"
                    origin="xxf:instance('control-instance')/statusMessage/entry"/>
                <xf:setvalue ref="xxf:instance('control-instance')/uploadStatus" value="'loaded'"/>

                <!-- Set the XML root of the uploaded data file -->
                <xf:setvalue ref="xxf:instance('control-instance')/importXMLRoot"
                    value="xxf:instance('import-instance')/name(.)"/>
                <xf:setvalue ref="xxf:instance('control-instance')/statusMessage/entry"
                    value="concat(xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/statusMessage/message[@processingProgress='loadedXMLData'],xxf:instance('control-instance')/importXMLRoot)"/>
                <xf:insert context="xxf:instance('control-instance')/statusMessage/entryList"
                    origin="xxf:instance('control-instance')/statusMessage/entry"/>

                <!-- Returned a list of files from a zip -->
                <xf:action if="xxf:instance('control-instance')/importXMLRoot='files'">
                    <xf:setvalue ref="xxf:instance('control-instance')/statusMessage/entry"
                        value="concat(xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/statusMessage/message[@processingProgress='loadedZipManfest'],count(xxf:instance('import-instance')/file))"/>
                    <xf:insert context="xxf:instance('control-instance')/statusMessage/entryList"
                        origin="xxf:instance('control-instance')/statusMessage/entry"/>
                </xf:action>

                <!-- Transform uploaded file for information model, if required.
                     2019-04-25 Workbook is deprecated but retained for support of legacy OWL architecture (pre-2018)
                     Sets importStatus if successful -->
                <xf:action
                    if="xxf:instance('control-instance')/adminTask/adminTask='importInformationModel' and xxf:instance('control-instance')/importXMLRoot=('Workbook','database','graphml','map')">
                    <xf:dispatch name="transform-informationModel" target="main-model"/>
                </xf:action>

                <!-- Translate openEHR ADL, if required.
                     ADL is loaded as text file, so check for some basic format and create ontology model in translate-openEHRadl
                     Sets importStatus if successful -->
                <xf:action
                    if="xxf:instance('control-instance')/adminTask/adminTask='importInformationModel' and xxf:instance('control-instance')/importXMLRoot='document'">
                    <!-- Check basic ADL format before translating -->
                    <xxf:variable name="adlDocument" select="xxf:instance('import-instance')"/>
                    <!-- ADL must start with (optional) keyword flat and then one of specified keywords
                         Ignore Byte Order Mark, if necessary.
                         The BOM is unicode character U+FEFF, which in UTF8 encoding is &#xEF;&#xBB;&#xBF;
                         \s is whitespace -->
                    <xxf:variable name="basicADLFormat"
                        select="'^(&#xEF;&#xBB;&#xBF;)*\s*(flat)?\s*(archetype|template|template_overlay|operational_archetype)\s'"/>
                    <xxf:variable name="isADLFormat" select="matches($adlDocument,$basicADLFormat)"/>
                    <!-- Looks like ADL, so display message and translate it -->
                    <xf:action if="$isADLFormat=true()">
                        <xf:setvalue ref="xxf:instance('control-instance')/statusMessage/entry"
                            value="concat(xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/importInformationModel/supportedModelFormats/@displayName,' ',xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/importInformationModel/supportedModelFormats/format[@type='adl']/@displayName)"/>
                        <xf:insert
                            context="xxf:instance('control-instance')/statusMessage/entryList"
                            origin="xxf:instance('control-instance')/statusMessage/entry"/>
                        <xf:dispatch name="translate-openEHRadl" target="main-model"/>
                    </xf:action>
                    <!-- Not ADL -->
                    <xf:action if="$isADLFormat=false()">
                        <xf:setvalue ref="xxf:instance('control-instance')/statusMessage/entry"
                            value="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/statusMessage/message[@processingProgress='textFileNotADL']"/>
                        <xf:insert
                            context="xxf:instance('control-instance')/statusMessage/entryList"
                            origin="xxf:instance('control-instance')/statusMessage/entry"/>
                    </xf:action>
                </xf:action>

                <!-- Check ontology for information model - if it has errors, then can't import,
                     Note that the importXMLRoot may have been reset to Ontology in the transform-informationModel if a Workbook, graphml or map was loaded -->
                <xf:action
                    if="xxf:instance('control-instance')/adminTask/adminTask='importInformationModel' and xxf:instance('control-instance')/importXMLRoot='Ontology'">

                    <!-- Can only import for the managed application and the base language.
                         So extract these from the inport-instance and check before continuing -->

                    <xxf:variable name="managedApplicationIRI"
                        select="xxf:instance('control-instance')/managedApplication/applicationIRI"/>
                    <xxf:variable name="baseLanguageCode"
                        select="xxf:instance('control-instance')/managedApplication/baseLanguage/@code"/>

                    <!-- Extract information from the model -->
                    <xf:setvalue
                        ref="xxf:instance('control-instance')/importInformationModel/applicationIRI"
                        value="xxf:instance('import-instance')/owl:ClassAssertion[owl:Class/@IRI='#ISO-13606:EHR_Extract']/owl:NamedIndividual[1]/@IRI"/>
                    <xf:setvalue
                        ref="xxf:instance('control-instance')/importInformationModel/informationModelType"
                        value="if (exists(xxf:instance('import-instance')/owl:SubClassOf[owl:Class[2]/@IRI='#CityEHR:Class']/owl:Class[1]/@IRI)) then 'Class' else 'Specialty'"/>
                    <xf:setvalue
                        ref="xxf:instance('control-instance')/importInformationModel/specialtyIRI"
                        value="if (exists(xxf:instance('import-instance')/owl:SubClassOf[owl:Class[2]/@IRI='#ISO-13606:Folder']/owl:Class[1]/@IRI)) then xxf:instance('import-instance')/owl:SubClassOf[owl:Class[2]/@IRI='#ISO-13606:Folder']/owl:Class[1]/@IRI[1] else ''"/>
                    <xf:setvalue
                        ref="xxf:instance('control-instance')/importInformationModel/classIRI"
                        value="if (xxf:instance('control-instance')/importInformationModel/informationModelType='Class') then xxf:instance('import-instance')/owl:SubClassOf[owl:Class[2]/@IRI='#CityEHR:Class']/owl:Class[1]/@IRI else ''"/>
                    <xf:setvalue
                        ref="xxf:instance('control-instance')/importInformationModel/modelIRI"
                        value="if (xxf:instance('control-instance')/importInformationModel/classIRI != '') then xxf:instance('control-instance')/importInformationModel/classIRI else xxf:instance('control-instance')/importInformationModel/specialtyIRI"/>
                    <xf:setvalue
                        ref="xxf:instance('control-instance')/importInformationModel/baseLanguageCode"
                        value="if (exists(xxf:instance('import-instance')/owl:DataPropertyAssertion[owl:DataProperty/@IRI='#hasBaseLanguage'][1]/owl:Literal)) then xxf:instance('import-instance')/owl:DataPropertyAssertion[owl:DataProperty/@IRI='#hasBaseLanguage'][1]/lower-case(owl:Literal) else $baseLanguageCode"/>

                    <!-- Application and language match the managed application - can proceed -->
                    <xf:action
                        if="xxf:instance('control-instance')/importInformationModel/applicationIRI=$managedApplicationIRI and xxf:instance('control-instance')/importInformationModel/baseLanguageCode=$baseLanguageCode">
                        <!-- No errors - can import this model -->
                        <xf:action
                            if="not(exists(xxf:instance('import-instance')/owl:ClassAssertion/owl:Class[@IRI='#CityEHR:Error']))">
                            <!-- If this model has a common model already in xmlstore, then default is to merge, unless this is the common mode being loaded
                             The common model is found in the designated specialty (commonModelIRI)
                             The common model for a specialty has the same modelIRI as the commonModelIRI; 
                             The common model for a class has the same modelIRI as the classIRI -->
                            <!-- ModelIRI for common model and model being loaded -->
                            <xxf:variable name="commonModelModelIRI"
                                select="if (xxf:instance('control-instance')/importInformationModel/informationModelType = 'Class') then xxf:instance('control-instance')/importInformationModel/classIRI else xxf:instance('control-instance')/managedApplication/commonModelIRI"/>
                            <xxf:variable name="modelIRI"
                                select="if (xxf:instance('control-instance')/importInformationModel/informationModelType = 'Class') then xxf:instance('control-instance')/importInformationModel/classIRI else xxf:instance('control-instance')/importInformationModel/specialtyIRI"/>

                            <!-- If this model has an existing model -->
                            <xxf:variable name="hasExistingModel"
                                select="if (exists(xxf:instance('informationModelList-instance')/informationModel[specialtyIRI = xxf:instance('control-instance')/importInformationModel/specialtyIRI][modelIRI = $modelIRI])) then 'true' else 'false'"/>
                            <xf:setvalue
                                ref="xxf:instance('control-instance')/importInformationModel/hasExistingModel"
                                value="$hasExistingModel"/>
                            <!-- If this model is the common model -->
                            <xxf:variable name="isCommonModel"
                                select="if (xxf:instance('control-instance')/managedApplication/commonModelIRI != '' and (xxf:instance('control-instance')/importInformationModel/specialtyIRI = xxf:instance('control-instance')/managedApplication/commonModelIRI) and ($modelIRI = $commonModelModelIRI)) then 'true' else 'false'"/>
                            <xf:setvalue
                                ref="xxf:instance('control-instance')/importInformationModel/isCommonModel"
                                value="$isCommonModel"/>

                            <!-- If the common model exists (always false if this is the common model).
                             Common model may be for the specialty or class.
                             So its specialty must be the common model specialty and its modelIRI must match the -->
                            <xxf:variable name="hasCommonModel"
                                select="if ($isCommonModel!='true' and xxf:instance('control-instance')/managedApplication/commonModelIRI != '' and exists(xxf:instance('informationModelList-instance')/informationModel[specialtyIRI = xxf:instance('control-instance')/managedApplication/commonModelIRI][modelIRI = $commonModelModelIRI])) then 'true' else 'false'"/>
                            <xf:setvalue
                                ref="xxf:instance('control-instance')/importInformationModel/hasCommonModel"
                                value="$hasCommonModel"/>
                            <xf:setvalue
                                ref="xxf:instance('control-instance')/importInformationModel/mergeCommonModel"
                                value="if (xxf:instance('control-instance')/importInformationModel/specialtyIRI = xxf:instance('control-instance')/managedApplication/commonModelIRI) then 'false' else $hasCommonModel"/>
                            <!-- Default is not to merge -->
                            <xf:setvalue
                                ref="xxf:instance('control-instance')/importInformationModel/mergeExistingModel"
                                value="'false'"/>

                            <!-- Set importStatus - ready to import the model -->
                            <xf:setvalue ref="xxf:instance('control-instance')/importStatus"
                                value="'ready'"/>
                        </xf:action>

                        <!-- Errors - can't import this model -->
                        <xf:action
                            if="exists(xxf:instance('import-instance')/owl:ClassAssertion/owl:Class[@IRI='#CityEHR:Error'])">
                            <xf:setvalue ref="xxf:instance('control-instance')/statusMessage/entry"
                                value="concat(xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/statusMessage/message[@processingProgress='cannotImportInformationModel'],xxf:instance('control-instance')/importXMLRoot)"/>
                            <xf:insert
                                context="xxf:instance('control-instance')/statusMessage/entryList"
                                origin="xxf:instance('control-instance')/statusMessage/entry"/>
                        </xf:action>
                    </xf:action>

                    <!-- Bad applicationIRI -->
                    <xf:action
                        if="xxf:instance('control-instance')/importInformationModel/applicationIRI!=$managedApplicationIRI">
                        <xf:setvalue ref="xxf:instance('control-instance')/statusMessage/entry"
                            value="concat(xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/statusMessage/message[@processingProgress='importInformationModelBadApplication'],xxf:instance('control-instance')/importInformationModel/applicationIRI)"/>
                        <xf:insert
                            context="xxf:instance('control-instance')/statusMessage/entryList"
                            origin="xxf:instance('control-instance')/statusMessage/entry"/>
                    </xf:action>

                    <!-- Bad languageCode -->
                    <xf:action
                        if="xxf:instance('control-instance')/importInformationModel/baseLanguageCode!=$baseLanguageCode">
                        <xf:setvalue ref="xxf:instance('control-instance')/statusMessage/entry"
                            value="concat(xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/statusMessage/message[@processingProgress='importInformationModelBadLanguage'],xxf:instance('control-instance')/importInformationModel/baseLanguageCode)"/>
                        <xf:insert
                            context="xxf:instance('control-instance')/statusMessage/entryList"
                            origin="xxf:instance('control-instance')/statusMessage/entry"/>
                    </xf:action>
                </xf:action>

                <!-- Check format for Language Pack.
                     And extract details ready for saving to the database.
                     Can be an ontology for the informationModel language pack
                     or a parameter language pack -->
                <xf:action
                    if="xxf:instance('control-instance')/adminTask/adminTask='importLanguagePack'">
                    <!-- Language pack is in correct format for informationModel ontology -->
                    <xf:action
                        if="xxf:instance('control-instance')/importXMLRoot='Ontology'
                        and exists(xxf:instance('import-instance')/owl:DataPropertyAssertion[owl:DataProperty/@IRI='#hasLanguage'][1]/owl:Literal)
                        and exists(xxf:instance('import-instance')/owl:ClassAssertion[owl:Class/@IRI='#ISO-13606:EHR_Extract'][1]/owl:NamedIndividual)">

                        <!-- Extract application and languageCode -->
                        <xxf:variable name="applicationIRI"
                            select="xxf:instance('import-instance')/owl:ClassAssertion[owl:Class/@IRI='#ISO-13606:EHR_Extract']/owl:NamedIndividual[1]/@IRI"/>
                        <xxf:variable name="languageCode"
                            select="xxf:instance('import-instance')/owl:DataPropertyAssertion[owl:DataProperty/@IRI='#hasLanguage'][1]/owl:Literal"/>

                        <xf:action
                            if="$applicationIRI=xxf:instance('control-instance')/managedApplication/applicationIRI and $languageCode!=''">
                            <xf:setvalue
                                ref="xxf:instance('control-instance')/importLanguagePack/type"
                                value="'informationModel'"/>
                            <xf:setvalue
                                ref="xxf:instance('control-instance')/importLanguagePack/languageCode"
                                value="$languageCode"/>
                            <xf:setvalue ref="xxf:instance('control-instance')/importStatus"
                                value="'ready'"/>
                        </xf:action>
                    </xf:action>

                    <!-- Language pack is in correct format for system-parameters.
                         Defect can create document element of cityEHR:empty (so cater for that 2021-12-14) -->
                    <xf:action
                        if="xxf:instance('control-instance')/importXMLRoot=('languagePack','cityEHR:empty')
                        and (exists(xxf:instance('import-instance')/term/context[@path='parameters/dynamicParameters/language'])
                        or xxf:instance('import-instance')/@type='system-parameters')">

                        <xf:setvalue ref="xxf:instance('control-instance')/importLanguagePack/type"
                            value="'system-parameters'"/>
                        <xf:setvalue
                            ref="xxf:instance('control-instance')/importLanguagePack/languageCode"
                            value="xxf:instance('import-instance')/@type"/>
                        <xf:setvalue ref="xxf:instance('control-instance')/importStatus"
                            value="'ready'"/>
                    </xf:action>

                    <!-- Language pack is in correct format for application-parameters.-->
                    <xf:action
                        if="xxf:instance('control-instance')/importXMLRoot='languagePack'
                        and (exists(xxf:instance('import-instance')/term/context[@path='parameters/application/iso-13606:EHR_Extract'])
                        or xxf:instance('import-instance')/@type='application-parameters')">

                        <xf:setvalue ref="xxf:instance('control-instance')/importLanguagePack/type"
                            value="'application-parameters'"/>
                        <xf:setvalue
                            ref="xxf:instance('control-instance')/importLanguagePack/languageCode"
                            value="''"/>
                        <xf:setvalue ref="xxf:instance('control-instance')/importStatus"
                            value="'ready'"/>
                    </xf:action>

                    <!-- Language pack is not in correct format -->
                    <xf:action if="xxf:instance('control-instance')/importStatus!='ready'">
                        <xf:setvalue ref="xxf:instance('control-instance')/importLanguagePack/type"
                            value="'unknown-format'"/>
                        <xf:setvalue ref="xxf:instance('control-instance')/statusMessage/entry"
                            value="concat(xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/statusMessage/message[@processingProgress='cannotImportLanguagePack'],xxf:instance('control-instance')/importXMLRoot)"/>
                        <xf:insert
                            context="xxf:instance('control-instance')/statusMessage/entryList"
                            origin="xxf:instance('control-instance')/statusMessage/entry"/>
                    </xf:action>

                    <!-- Set statusMessage when language pack is in correct format -->
                    <xf:action if="xxf:instance('control-instance')/importStatus='ready'">
                        <xf:setvalue ref="xxf:instance('control-instance')/statusMessage/entry"
                            value="concat(xxf:instance('control-instance')/importLanguagePack/type,' / ',xxf:instance('control-instance')/importLanguagePack/languageCode,' / ',xxf:instance('control-instance')/importXMLRoot)"/>
                        <xf:insert
                            context="xxf:instance('control-instance')/statusMessage/entryList"
                            origin="xxf:instance('control-instance')/statusMessage/entry"/>
                    </xf:action>

                </xf:action>

                <!-- Check format of file for importDirectory.
                     Must contain iso-13606:EHR_Extract/iso-13606:entryCollection/iso-13606:entry/cda:component/cda:observation/cda:id/@root -->
                <xf:action
                    if="xxf:instance('control-instance')/adminTask/adminTask='importDirectory'">
                    <!-- Get entries or elements in the uploaded directory -->
                    <xxf:variable name="entryIRIList"
                        select="distinct-values(xxf:instance('import-instance')/iso-13606:entryCollection/iso-13606:entry/cda:component/cda:observation/cda:id/@root)"/>
                    <xxf:variable name="entryIRI"
                        select="if (count($entryIRIList) = 1) then $entryIRIList else ''"/>
                    <xxf:variable name="elementIRI"
                        select="if (exists(xxf:instance('import-instance')/iso-13606:elementCollection/iso-13606:element/@root)) then xxf:instance('import-instance')/iso-13606:elementCollection/iso-13606:element/@root else ''"/>

                    <!-- Set the directoryIRI of the uploaded directory ($entryIRI or $elementIRI) -->
                    <xf:setvalue ref="xxf:instance('control-instance')/importDirectory/directoryIRI"
                        value="if ($entryIRI!='') then $entryIRI else if ($elementIRI!='') then $elementIRI else ''"/>

                    <!-- Set the applicationIRI, specialtyIRI and languageCode of the uploaded directory -->
                    <xf:setvalue
                        ref="xxf:instance('control-instance')/importDirectory/applicationIRI"
                        value="xxf:instance('import-instance')/@cityEHR:applicationIRI"/>
                    <xf:setvalue ref="xxf:instance('control-instance')/importDirectory/specialtyIRI"
                        value="xxf:instance('import-instance')/@cityEHR:specialtyIRI"/>
                    <xf:setvalue ref="xxf:instance('control-instance')/importDirectory/languageCode"
                        value="lower-case(xxf:instance('import-instance')/@cityEHR:languageCode)"/>

                    <!-- Check the directory for import - find the directory definition in the model, if it exists
                         Includes case where directoryIRI is blank -->
                    <xf:dispatch name="set-directoryForSpecialty" target="main-model">
                        <xxf:context name="applicationIRI"
                            select="xxf:instance('control-instance')/importDirectory/applicationIRI"/>
                        <xxf:context name="specialtyIRI"
                            select="xxf:instance('control-instance')/importDirectory/specialtyIRI"/>
                        <xxf:context name="directoryIRI"
                            select="xxf:instance('control-instance')/importDirectory/directoryIRI"/>
                        <xxf:context name="languageCode"
                            select="xxf:instance('control-instance')/importDirectory/languageCode"/>
                    </xf:dispatch>

                    <!-- Directory was found for the specialty - set the import status -->
                    <xf:action
                        if="exists(xxf:instance('control-instance')/importDirectory/directory)">
                        <xf:setvalue ref="xxf:instance('control-instance')/importStatus"
                            value="'ready'"/>
                    </xf:action>
                </xf:action>

                <!-- Check format of template for generateTestData.
                     Must contain one, and only one, EHR_Extract 
                     EHR_Extract must contain cda:ClinicalDocument for registration document (there may be more than one of these specified in the parameters-instance) -->
                <xf:action
                    if="xxf:instance('control-instance')/adminTask/adminTask='generateTestData'">

                    <!-- Template must contain one EHR_Extract -->
                    <xxf:variable name="extractCount"
                        select="count(xxf:instance('import-instance')/descendant::iso-13606:EHR_Extract)"/>

                    <!-- One EHR_Extract, so OK to look for registration document -->
                    <xf:action if="$extractCount = 1">
                        <!-- EHR_Extract must contain at least one registration document -->
                        <xxf:variable name="registrationDocumentIRI"
                            select="xxf:instance('application-parameters-instance')/patientRegistration/registrationEvent/@composition"/>
                        <xxf:variable name="registrationDocument"
                            select="xxf:instance('import-instance')/descendant::cda:ClinicalDocument[cda:typeId/@extension=$registrationDocumentIRI][1]"/>
                        <!-- Registration document exists, so check birthTime (which must exist)
                             birthTime castable as xs:date or xs:dataTime - all is OK with the template and importStatus is ready.
                             Otherwise generate an error message -->
                        <xf:action if="exists($registrationDocument)">
                            <xf:setvalue
                                ref="xxf:instance('control-instance')/generateTestData/recordCount"
                                value="0"/>
                            <!-- Get birthTime from the template. -->
                            <xxf:variable name="birthTimeEntryIRI"
                                select="xxf:instance('application-parameters-instance')/patientRegistration/birthTime/@entry"/>
                            <xxf:variable name="birthTimeElementIRI"
                                select="xxf:instance('application-parameters-instance')/patientRegistration/birthTime/@element"/>
                            <xxf:variable name="templateBirthTime"
                                select="$registrationDocument/descendant::cda:observation[cda:id/@extension=$birthTimeEntryIRI]/descendant::cda:value[@extension=$birthTimeElementIRI]/@value[1]"/>

                            <!-- birthTime is OK if dateTime or date.
                                 The recorded birthTime is always a date for test data, so is cast to xs:date -->
                            <xf:action
                                if="$templateBirthTime castable as xs:dateTime or $templateBirthTime castable as xs:date">
                                <xf:setvalue
                                    ref="xxf:instance('control-instance')/generateTestData/templateBirthTime"
                                    value="substring($templateBirthTime,1,10)"/>
                                <xf:setvalue ref="xxf:instance('control-instance')/importStatus"
                                    value="'loaded'"/>
                                <xf:dispatch name="verifyGenderPercentages" target="main-model"/>
                            </xf:action>
                            <!-- birthTime not OK -->
                            <xf:action
                                if="not($templateBirthTime castable as xs:dateTime or $templateBirthTime castable as xs:date)">
                                <xf:setvalue
                                    ref="xxf:instance('control-instance')/statusMessage/entry"
                                    value="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/statusMessage/message[@processingProgress='noBirthTimeInTemplate']"/>
                                <xf:insert
                                    context="xxf:instance('control-instance')/statusMessage/entryList"
                                    origin="xxf:instance('control-instance')/statusMessage/entry"/>
                            </xf:action>
                        </xf:action>
                        <!-- No registration document, so can't generate test data -->
                        <xf:action if="not(exists($registrationDocument))">
                            <xf:setvalue ref="xxf:instance('control-instance')/statusMessage/entry"
                                value="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/statusMessage/message[@processingProgress='noRegDocInTemplate']"/>
                            <xf:insert
                                context="xxf:instance('control-instance')/statusMessage/entryList"
                                origin="xxf:instance('control-instance')/statusMessage/entry"/>
                        </xf:action>
                    </xf:action>

                    <!-- There isn't one EHR_Extract, so can't generate test data -->
                    <xf:action if="$extractCount != 1">
                        <xf:setvalue ref="xxf:instance('control-instance')/statusMessage/entry"
                            value="concat(xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/statusMessage/message[@processingProgress='noSingleExtractInTemplate'],$extractCount)"/>
                        <xf:insert
                            context="xxf:instance('control-instance')/statusMessage/entryList"
                            origin="xxf:instance('control-instance')/statusMessage/entry"/>
                    </xf:action>
                </xf:action>

                <!-- Transform uploaded file for patient list, if required -->
                <xf:action
                    if="xxf:instance('control-instance')/adminTask/adminTask='processPatientList'">
                    <!-- Spreadsheet was imported -->
                    <xf:action if="xxf:instance('control-instance')/importXMLRoot=('database')">
                        <xf:dispatch name="transform-patientList" target="main-model"/>
                    </xf:action>
                    <!-- XML data set was imported -->
                    <xf:action
                        if="exists(xxf:instance('import-instance')//patientInfo) and not(exists(xxf:instance('import-instance')//patient))">
                        <!-- Set up pipeline -->
                        <xxf:variable name="xsltPipeline"
                            select="concat(xxf:instance('view-parameters-instance')/appPath,'/pipelines/convertDataSet2PatientList.xpl')"/>
                        <!-- Replace root node of 'import-instance' with pipeline output -->
                        <xf:insert nodeset="xxf:instance('import-instance')"
                            origin="xxf:call-xpl($xsltPipeline, 'instance', xxf:instance('import-instance'), 'data')"
                        />
                    </xf:action>
                </xf:action>

                <!-- Check format of file for processPatientList.
                     Must have a root document containing a set of <patient id="K1476889"/>
                    -->
                <xf:action
                    if="xxf:instance('control-instance')/adminTask/adminTask='processPatientList'">
                    <!-- File must contain at least one patient element -->
                    <xxf:variable name="patientCount"
                        select="count(xxf:instance('import-instance')/patient[@id])"/>
                    <!-- There is at least one patient element -->
                    <xf:action if="$patientCount != 0">
                        <xf:setvalue ref="xxf:instance('control-instance')/importStatus"
                            value="'ready'"/>
                    </xf:action>
                    <!-- There aren't any patient elements (with id attribute set) -->
                    <xf:action if="$patientCount = 0">
                        <xf:setvalue ref="xxf:instance('control-instance')/statusMessage/entry"
                            value="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/statusMessage/message[@processingProgress='noPatientsInList']"/>
                        <xf:insert
                            context="xxf:instance('control-instance')/statusMessage/entryList"
                            origin="xxf:instance('control-instance')/statusMessage/entry"/>
                    </xf:action>
                </xf:action>

                <!-- Check format of file for importKnowledgeMap.
                     Must have a root document rdf:RDF containing a set of rdf:Description
                -->
                <xf:action
                    if="xxf:instance('control-instance')/adminTask/adminTask='importKnowledgeMap'">
                    <xf:setvalue ref="xxf:instance('control-instance')/importStatus"
                        value="if (exists(xxf:instance('import-instance')[name() = 'rdf:RDF']/rdf:Description)) then 'ready' else ."
                    />
                </xf:action>

                <!-- Check format of file for inspectSpreadsheet and importRecords
                     Note that this sets the spreadsheetFormat for inspectSpreadsheet
                     Must be cityEHR database format, transformed from a spreadsheet 
                     <spreadsheetFormat>database | invalid </spreadsheetFormat>
                -->
                <xf:action
                    if="xxf:instance('control-instance')/adminTask/adminTask=('inspectSpreadsheet','importRecords')">
                    <xf:setvalue
                        ref="xxf:instance('control-instance')/inspectSpreadsheet/spreadsheetFormat"
                        value="if (exists(xxf:instance('import-instance')[name(.)='database']/table)) then 'database'
                        else 'invalid'"/>

                    <!-- Set up for database -->
                    <xf:action
                        if="xxf:instance('control-instance')/inspectSpreadsheet/spreadsheetFormat='database'">
                        <xf:dispatch name="set-spreadsheetInfo" target="main-model"/>
                        <xf:setvalue ref="xxf:instance('control-instance')/importStatus"
                            value="'loaded'"/>
                    </xf:action>

                </xf:action>

                <!-- Check format of file for importRecords.
                     Must have a root document containing a set of cda:ClinicalDocument
                     or a root of iso-13606:EHR_Extract containing iso-13606:Composition
                     or be XML exported from MS Access
                     or be cityEHR database format, transformed from a spreadsheet 
                     <recordFormat>msAccess | xml | database | invalid </recordFormat>
                -->
                <xf:action if="xxf:instance('control-instance')/adminTask/adminTask='importRecords'">
                    <xf:setvalue ref="xxf:instance('control-instance')/importRecords/recordFormat"
                        value="if (exists(xxf:instance('import-instance')[name(.)='dataroot'])) then 'msAccess' 
                        else if (exists(xxf:instance('import-instance')/descendant-or-self::cda:ClinicalDocument)) then 'cda'
                        else if (exists(xxf:instance('import-instance')//iso-13606:Composition)) then 'iso-13606'
                        else if (exists(xxf:instance('import-instance')[name(.)='database']/table)) then 'database'
                        else 'invalid'"/>

                    <xf:message ref="xxf:instance('control-instance')/importRecords/recordFormat"/>

                    <!-- For msAccess and xml, the status is 'ready' to import (so display the Import button).
                         For database or invalid, then the import-instance is 'loaded' but not ready to import -->
                    <xf:setvalue ref="xxf:instance('control-instance')/importStatus"
                        value="if (xxf:instance('control-instance')/importRecords/recordFormat=('msAccess','cda')) then 'ready' else 'loaded'"/>

                    <!-- Set up for database.
                         Note that details of the database sheets, records and fields are recorded in inspectSpreadsheet -->
                    <xf:action
                        if="xxf:instance('control-instance')/importRecords/recordFormat='database'">
                        <!-- Set the effectiveTime for import.
                             This is on the first record of the (configuration) sheet with first field of 'effectiveTime' and second field castable as xs:dateTime -->
                        <xxf:variable name="effectiveTimeInput"
                            select="(xxf:instance('import-instance')/table/record[1][field[1]='effectiveTime']/field[2])[1]"/>
                        <xf:setvalue
                            ref="xxf:instance('control-instance')/importRecords/recordImportMap/@effectiveTime"
                            value="if ($effectiveTimeInput castable as xs:date) then concat($effectiveTimeInput,'T00:00:00') else if ($effectiveTimeInput castable as xs:dateTime) then $effectiveTimeInput else current-dateTime()"/>

                        <!-- Generate the recordImportMap using the spreadsheetInfo for the loaded spreadsheet.
                             The map is generated in recordImportMap-instance -->
                        <xf:dispatch name="generate-recordImportMap" target="main-model">
                            <xxf:context name="spreadsheetInfo"
                                select="xxf:instance('control-instance')/inspectSpreadsheet/spreadsheetInfo"
                            />
                        </xf:dispatch>

                        <!-- Set the generated (new) recordImportMap as the current map -->
                        <xf:delete
                            nodeset="xxf:instance('control-instance')/importRecords/recordImportMap"/>
                        <xf:insert context="xxf:instance('control-instance')/importRecords"
                            origin="xxf:instance('recordImportMap-instance')"/>
                    </xf:action>

                </xf:action>

                <!-- Check format of file for importCohortSearch.
                     Must have a root document containing a set of cohortSearch elements with id and origin set
                -->
                <xf:action
                    if="xxf:instance('control-instance')/adminTask/adminTask='importCohortSearch'">
                    <xf:setvalue ref="xxf:instance('control-instance')/importStatus"
                        value="if (exists(xxf:instance('import-instance')/cohortSearch[id!=''][origin!=''])) then 'ready' else ."
                    />
                </xf:action>

                <!-- Check format of file for importUsers.
                     Must have a root document containing a set of user elements with id set and cotaining credentials/userId
                -->
                <xf:action if="xxf:instance('control-instance')/adminTask/adminTask='importUsers'">
                    <xf:setvalue ref="xxf:instance('control-instance')/importStatus"
                        value="if (exists(xxf:instance('import-instance')/user[@id!=''][credentials/userId!=''])) then 'ready' else ."
                    />
                </xf:action>

                <!-- Check format of file for importCareTeams.
                     Must have a root document (careTeams) containing a set of careTeam elements with id set
                -->
                <xf:action
                    if="xxf:instance('control-instance')/adminTask/adminTask='importCareTeams'">
                    <xf:setvalue ref="xxf:instance('control-instance')/importStatus"
                        value="if (exists(xxf:instance('import-instance')/careTeam[@id!=''])) then 'ready' else ."
                    />
                </xf:action>
            </xf:action>


            <!-- Submission to store import instance to the xmlstore -->
            <xf:submission id="import-instance-submission" ref="xxf:instance('import-instance')"
                action="{xxf:instance('control-instance')/storageObject}" method="put"
                replace="none" f:url-type="resource" includenamespacesprefixes="">
                <xf:action ev:event="xforms-submit-done">
                    <xf:setvalue ref="xxf:instance('control-instance')/importStatus"
                        value="'imported'"/>
                </xf:action>
                <xf:action ev:event="xforms-submit-error">
                    <xf:setvalue ref="xxf:instance('control-instance')/importStatus"
                        value="'failed'"/>
                    <xf:setvalue ref="xxf:instance('control-instance')/statusMessage/entry"
                        value="concat(xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/statusMessage/message[@processingProgress='failedImportingResource'],xxf:instance('control-instance')/storageObject)"/>
                    <xf:insert context="xxf:instance('control-instance')/statusMessage/entryList"
                        origin="xxf:instance('control-instance')/statusMessage/entry"/>
                </xf:action>
            </xf:submission>

            <!-- Submission to load import-instance from xmlstore -->
            <xf:submission id="load-import-instance-submission" serialization="none"
                action="{xxf:instance('control-instance')/storageObject}" validate="false"
                method="get" replace="instance" instance="import-instance" f:url-type="resource">
                <xf:action ev:event="xforms-submit-done">
                    <!-- Not doing anything here -->
                </xf:action>
                <!-- Load fails if the storageObject doesn't exist.
                     Make sure import-instance is cleared, so that any further processing doesn't use previous instantiation -->
                <xf:action ev:event="xforms-submit-error">
                    <xf:delete nodeset="xxf:instance('import-instance')/*"/>
                </xf:action>
            </xf:submission>

            <!-- Submission to delete resource (Used when resources need to be replaced - uses the dummy delete-instance defined above) -->
            <xf:submission id="delete-resource-submission" ref="xxf:instance('delete-instance')"
                action="{xxf:instance('control-instance')/storageObject}" method="delete"
                replace="none" serialization="none">
                <xf:action ev:event="xforms-submit-error">
                    <xf:setvalue ref="xxf:instance('control-instance')/statusMessage/entry"
                        value="concat(xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/statusMessage/message[@processingProgress='failedDeleteCollection'],substring-after(xxf:instance('control-instance')/storageObject,'xmlstore'))"/>
                    <xf:insert context="xxf:instance('control-instance')/statusMessage/entryList"
                        origin="xxf:instance('control-instance')/statusMessage/entry"/>
                </xf:action>
            </xf:submission>


            <!-- === Scheduling =====================================
                 Actions for handling scheduling - uses actions defined in schedulingModel.xml
                 
                 manageSchedule
                 createClinic
                 manageClinic
                 
                 ============================================================== -->

            <!-- Application defined action to initialse the manageSchedule task -->
            <xf:action ev:event="initialise-manageSchedule">
                <!-- Set the displayDate -->
                <xf:setvalue ref="xxf:instance('control-instance')/manageSchedule/displayDate"
                    value="if (. castable as xs:date) then . else current-date()"/>

                <!-- Set the scheduleDate -->
                <xf:dispatch name="set-scheduleDate" target="main-model"/>

            </xf:action>

            <!-- Application defined action to set the scheduleDate.
                 Set the scheduleDate from the displayDate
                 If the scheduleDate changes then regenerate the schedule -->
            <xf:action ev:event=" set-scheduleDate">

                <!-- displayDate is of the standard form YYYY-MM-DD
                     Need to set the DD to 01 for the startDate -->
                <xf:variable name="monthString"
                    select="substring(xxf:instance('control-instance')/manageSchedule/displayDate,1,8)"/>
                <xf:variable name="newScheduleDate" select="concat($monthString,'01')"/>

                <xf:action
                    if="xxf:instance('control-instance')/manageSchedule/scheduleDate != $newScheduleDate">
                    <xf:setvalue ref="xxf:instance('control-instance')/manageSchedule/scheduleDate"
                        value="$newScheduleDate"/>

                    <xf:dispatch name="generate-schedule" target="scheduling-model">
                        <xxf:context name="schedule"
                            select="xxf:instance('control-instance')/manageSchedule/monthlySchedule"/>
                        <xxf:context name="scheduleDate"
                            select="xxf:instance('control-instance')/manageSchedule/scheduleDate"/>
                    </xf:dispatch>

                </xf:action>
            </xf:action>


            <!-- Application defined action to initialse the createClinic task -->
            <xf:action ev:event="initialise-createClinic">
                <!-- Set the status -->
                <xf:setvalue ref="xxf:instance('control-instance')/createClinic/status"
                    value="'waiting'"/>

                <!-- Set the creation date -->
                <xf:setvalue ref="xxf:instance('control-instance')/createClinic/createDate"
                    value="current-date()"/>

                <!-- Insert a new clinicSchedule from the template -->
                <xf:delete nodeset="xxf:instance('control-instance')/createClinic/clinicSchedule"/>
                <xf:insert context="xxf:instance('control-instance')/createClinic"
                    origin="xxf:instance('templateClinicSchedule-instance')"/>

            </xf:action>


            <!-- ===
                Handling spreadsheet as a database for
                inspectSpreadsheet and importRecords
                Information used for viewing and navigating the spreadsheet is stored in control-instance/inspectSpreadsheet
                === -->

            <!-- Application defined action to set the sheet information for a spreadsheet.
                 The spreadsheet is in import-instance and has already been checked that it is the correct database format
                 Set information for each sheet, in the form:
                    <tableInfo id="" recordCount="" fieldCount="" headerRecordCount="0"/>
                -->
            <xf:action ev:event="set-spreadsheetInfo">
                <!-- Clear spreadsheetInfo -->
                <xf:delete
                    nodeset="xxf:instance('control-instance')/inspectSpreadsheet/spreadsheetInfo/tableInfo"/>

                <!-- Set the activeTable -->
                <xf:setvalue
                    ref="xxf:instance('control-instance')/inspectSpreadsheet/spreadsheetInfo/@activeTableId"
                    value="xxf:instance('import-instance')/table[1]/@id"/>

                <!-- Set up info for each table (sheet) -->
                <xf:action xxf:iterate="xxf:instance('import-instance')/table">
                    <xxf:variable name="table" select="."/>

                    <!-- Create new tableInfo element -->
                    <xf:insert
                        context="xxf:instance('control-instance')/inspectSpreadsheet/spreadsheetInfo"
                        nodeset="*"
                        origin="xxf:instance('control-instance')/inspectSpreadsheet/tableInfo"
                        at="last()" position="after"/>
                    <xxf:variable name="tableInfo"
                        select="xxf:instance('control-instance')/inspectSpreadsheet/spreadsheetInfo/tableInfo[last()]"/>

                    <!-- Set tableInfo attributes -->
                    <xf:setvalue ref="$tableInfo/@id" value="$table/@id"/>
                    <xf:setvalue ref="$tableInfo/@recordCount" value="count($table/record)"/>
                    <xf:setvalue ref="$tableInfo/@fieldCount"
                        value="if ($tableInfo/@recordCount = 0) then 0 else max($table/record/count(field))"
                    />
                </xf:action>
            </xf:action>



            <!-- ===
                importRecords 
                Importing record sets 
                (Also uses some data and actions from inspectSpreadsheet)
                === -->

            <!-- Application defined action to import a record set as XML.
                 Iterate through HL7 CDA compositions in the record set 
                 This can be called when importing an individual HL7 CDA composition, a record set or when generating test data
                
                 Can be used to import records (#CityEHR:Form, etc) or notifications (#CityEHR:Notification)
                
                 When importing a record set that was previosuly exported from cityEHR it is contained in EHR_Extract
                 The EHR_Extract is of the form:
                
                <export>
                    <iso-13606:EHR_Extract patientId="XXXX">
                        <cda:ClinicalDocument>
                            ...
                        </cda:ClinicalDocument>
                             ...
                    </iso-13606:EHR_Extract>
                </export>
                -->
            <xf:action ev:event="import-RecordSet">
                <xxf:variable name="record-set" select="event('record-set')"/>
                <xxf:variable name="identifierPrefix" select="event('identifierPrefix')"/>
                <xxf:variable name="setCompositionId" select="event('setCompositionId')"/>
                <xxf:variable name="status" select="event('status')"/>

                <xf:setvalue ref="xxf:instance('control-instance')/importStatus" value="''"/>

                <!-- Iterate through the CDA documents in the record set (could be only one).
                         Check for each one that the cda:id matches the expected patientId, if the patientId exists
                         -->
                <xf:action xxf:iterate="$record-set/descendant-or-self::cda:ClinicalDocument">
                    <xxf:variable name="composition" select="."/>
                    <xxf:variable name="patientId"
                        select="$composition/cda:recordTarget/cda:patientRole/cda:id/@extension"/>
                    <xxf:variable name="patientRecord" select="ancestor::iso-13606:EHR_Extract"/>


                    <!-- Only import the document if its patient id matches the containing iso-13606:EHR_Extract.
                             or there is no containing iso-13606:EHR_Extract -->
                    <xf:action
                        if="not(exists($patientRecord)) or $patientId = $patientRecord/@patientId">
                        <xxf:variable name="importDocumentStartTime" select="current-time()"/>
                        <!-- Get the composition type -->
                        <xxf:variable name="compositionType"
                            select="$composition/cda:typeId/@extension"/>

                        <!-- Get CDA Header parameters from the composition.
                                 If the effectiveTime is not a valid dateTime or date then it is reset -->
                        <xxf:variable name="documentType"
                            select="$composition/cda:code/@displayName"/>
                        <xxf:variable name="compositionTypeId"
                            select="replace(replace($compositionType,':','-'),'#','')"/>
                        <xxf:variable name="effectiveTime"
                            select="if (exists($composition/cda:effectiveTime/@value) and ($composition/cda:effectiveTime/@value castable as xs:dateTime or $composition/cda:effectiveTime/@value castable as xs:date)) then $composition/cda:effectiveTime/@value else current-dateTime()"/>
                        <xf:setvalue ref="$composition/cda:effectiveTime/@value"
                            value="$effectiveTime"/>
                        <xxf:variable name="timeStamp"
                            select="replace(replace(string($effectiveTime),':','-'),'\+','*')"/>

                        <!-- Set the compositionId.
                                 Uses the identifierPrefix parameter, if passed - so that generated records can be given different compositionIds.
                                 If setCompositionId is 'preserve' then use the current compositionId, otherwise generate a new one -->
                        <xxf:variable name="prefix"
                            select="if ($identifierPrefix!='') then concat($identifierPrefix,xxf:instance('view-parameters-instance')/idSeparator) else ''"/>
                        <xxf:variable name="compositionId"
                            select="if ($setCompositionId='preserve') then $composition/cda:id/@extension else concat($prefix,$timeStamp,xxf:instance('view-parameters-instance')/idSeparator,$compositionTypeId,xxf:instance('view-parameters-instance')/idSeparator,xxf:instance('view-parameters-instance')/userId)"/>
                        <xf:setvalue ref="$composition/cda:id/@extension" value="$compositionId"/>

                        <!-- Records are imported for the current application -->
                        <xxf:variable name="applicationIRI"
                            select="xxf:instance('view-parameters-instance')/applicationIRI"/>
                        <xxf:variable name="applicationId"
                            select="replace(substring($applicationIRI,2),':','-')"/>

                        <!-- Set the storageLocation, dependant on whether record or notification -->
                        <xxf:variable name="compositionCollection"
                            select="if ($compositionType = '#CityEHR:Notification') then 'data' else 'records'"/>
                        <xxf:variable name="storageLocation"
                            select="concat('/xmlstore/applications/',$applicationId,'/',$compositionCollection,'/',$patientId,'/',$compositionId)"/>

                        <!-- Import the CDA document  -->
                        <xf:dispatch name="dal-write" target="databaseAccessLayer-model">
                            <xxf:context name="system" select="'ehr'"/>
                            <xxf:context name="storageLocation" select="$storageLocation"/>
                            <xxf:context name="resource" select="$composition"/>
                            <xxf:context name="status"
                                select="xxf:instance('control-instance')/status"/>
                        </xf:dispatch>

                        <!-- Return status if there was an error -->
                        <xf:action if="xxf:instance('control-instance')/status != ''">
                            <xf:setvalue ref="xxf:instance('control-instance')/importStatus"
                                value="if (.='') then xxf:instance('control-instance')/status else ."
                            />
                        </xf:action>

                    </xf:action>

                    <!-- Set error status if the document patient id does not match the containing iso-13606:EHR_Extract. -->
                    <xf:action
                        if="exists($patientRecord) and $patientId != $patientRecord/@patientId">
                        <xf:setvalue ref="xxf:instance('control-instance')/statusMessage/entry"
                            value="concat($statusMessageSet[@processingProgress='badCompositionId'],$patientId,'/',xxf:instance('control-instance')/importPatientId)"/>
                        <xf:insert
                            context="xxf:instance('control-instance')/statusMessage/entryList"
                            nodeset="entry"
                            origin="xxf:instance('control-instance')/statusMessage/entry"
                            at="last()" position="after"/>
                        <xf:setvalue ref="xxf:instance('control-instance')/importStatus"
                            value="if (.='') then 'badCompositionId' else ."/>
                    </xf:action>

                </xf:action>

                <!-- End of iteration through record set -->

                <!-- Set the return status -->
                <xf:setvalue ref="$status" value="xxf:instance('control-instance')/importStatus"/>
            </xf:action>


            <!-- Application defined action to import record set as cityEHR database.
                 The database was generated from a spreadsheet and is now in import-instance.
            
                 The database is of the form:
                 
                 <database>
                    <table>
                        <record>
                            <field/>
                            ...
                        </record>
                        ...
                    </table>
                    ...
                 </database>
            
               -->
            <xf:action ev:event="import-RecordSetFromDatabase">
                <!-- Check the format.
                     Three header rows are for Composition/Entry/Element -->
                <xf:message ref="'Importing from spreadsheet'"/>

            </xf:action>

            <!-- === Record import maps -->
            <xf:instance id="storedRecordImportMapListXQuery-instance"
                src="oxf:/apps/ehr/xquery/storedRecordImportMapListXQuery.xml"/>

            <!-- storedRecordImportMapList -->
            <xf:instance id="storedRecordImportMapList-instance">
                <list>
                    <recordImportMap/>
                </list>
            </xf:instance>

            <!-- Application defined action to get stored recordImportMaps.
                -->
            <xf:action ev:event="get-storedRecordImportMapList">
                <!-- Records are imported for the current application -->
                <xxf:variable name="applicationIRI"
                    select="xxf:instance('view-parameters-instance')/applicationIRI"/>
                <xxf:variable name="applicationId"
                    select="replace(substring($applicationIRI,2),':','-')"/>

                <xxf:variable name="mapLocation"
                    select="concat('/xmlstore/applications/',$applicationId,'/systemConfiguration/recordImportMaps')"/>

                <xf:dispatch name="dal-query" target="databaseAccessLayer-model">
                    <xxf:context name="system" select="'ehr'"/>
                    <xxf:context name="storageLocation" select="$mapLocation"/>
                    <xxf:context name="query"
                        select="xxf:instance('storedRecordImportMapListXQuery-instance')"/>
                    <xxf:context name="response"
                        select="xxf:instance('storedRecordImportMapList-instance')"/>
                    <xxf:context name="status" select="xxf:instance('control-instance')/status"/>
                </xf:dispatch>

            </xf:action>


            <!-- Application defined action to set the active table when records are imported from a spreadsheet.
                -->
            <xf:action ev:event="set-activeTable">
                <xxf:variable name="tableSet" select="event('tableSet')"/>
                <xxf:variable name="tableId" select="event('tableId')"/>

                <!-- Reset the patientId field -->
                <xf:setvalue
                    ref="xxf:instance('control-instance')/importRecords/recordImportMap/@patientIdField"
                    value="1"/>
                <!-- Set the count of records and fields per record of the active table -->
                <xxf:variable name="activeTable"
                    select="$tableSet[@id=xxf:instance('control-instance')/importRecords/recordImportMap/@activeTable]"/>
                <!-- Only use records that have something in them and have a valid (i.e. non-blank) patientId -->
                <xxf:variable name="activeRecords" select="$activeTable/record[field[1]!='']"/>
                <xf:setvalue
                    ref="xxf:instance('control-instance')/importRecords/activeTableRecordCount"
                    value="count($activeRecords)"/>
                <!-- Field count - don't assume that all records have the same number of fields.
                                                 The field count is only for the active records -->
                <xf:setvalue
                    ref="xxf:instance('control-instance')/importRecords/activeTableFieldCount"
                    value="max($activeRecords/count(field))"/>
            </xf:action>

            <!-- Load recordImportMap template from file -->
            <xf:instance id="recordImportMapTemplate-instance"
                src="oxf:/apps/ehr/resources/templates/recordImportMap.xml"/>

            <!-- recordImportMap instance -->
            <xf:instance id="recordImportMap-instance">
                <recordImportMap/>
            </xf:instance>

            <!-- storedecordImportMap instance -->
            <xf:instance id="storedRecordImportMap-instance">
                <recordImportMap/>
            </xf:instance>

            <!-- Application defined action to generate a recordImportMap
                 Creates the map in recordImportMap-instance 
                 Using details for the spreadsheet passed in tableInfo -->
            <xf:action ev:event="generate-recordImportMap">
                <xxf:variable name="spreadsheetInfo" select="event('spreadsheetInfo')"/>

                <xxf:variable name="recordImportMapTemplate"
                    select="xxf:instance('recordImportMapTemplate-instance')"/>
                <xxf:variable name="tableMapTemplate" select="$recordImportMapTemplate/tableMap[1]"/>
                <xxf:variable name="fieldMapTemplate" select="$tableMapTemplate/fieldMap[1]"/>

                <!-- First clear out the map, then iterate through tables and fields for the spreadsheet -->
                <xf:insert nodeset="xxf:instance('recordImportMap-instance')"
                    origin="xxf:instance('recordImportMapTemplate-instance')"/>
                <xf:delete nodeset="xxf:instance('recordImportMap-instance')/*"/>

                <!-- Set the specialtyIRI -->
                <xf:setvalue ref="xxf:instance('recordImportMap-instance')/@specialtyIRI"
                    value="xxf:instance('specialtyList-instance')/iso-13606:Folder[1]/@id"/>

                <!-- Iterate through tables, setting up the tableMap -->
                <xf:action xxf:iterate="$spreadsheetInfo/tableInfo">
                    <xxf:variable name="tableInfo" select="."/>

                    <xf:insert context="xxf:instance('recordImportMap-instance')" nodeset="*"
                        origin="$tableMapTemplate" at="last()" position="after"/>
                    <xxf:variable name="tableMap"
                        select="xxf:instance('recordImportMap-instance')/tableMap[last()]"/>

                    <xf:setvalue ref="$tableMap/@id" value="$tableInfo/@id"/>
                    <xf:delete nodeset="$tableMap/*"/>

                    <!-- Iterate through fields in the table, setting up the fieldMaps.
                         Need to find the maximum number of fields in any record that isn't blank -->
                    <xf:action xxf:iterate="1 to $tableInfo/@fieldCount">
                        <xxf:variable name="fieldNo" select="."/>
                        <xf:insert context="$tableMap" nodeset="fieldMap" origin="$fieldMapTemplate"
                            at="last()" position="after"/>
                        <xxf:variable name="fieldMap" select="$tableMap/fieldMap[last()]"/>
                        <xf:setvalue ref="$fieldMap/@fieldNo" value="$fieldNo"/>
                    </xf:action>
                </xf:action>

            </xf:action>

            <!-- Application defined action save a recordImportMap.
                 Can be either the recordImportMap-instance or the storedRecordImportMap-instance
                -->
            <xf:action ev:event="save-storedRecordImportMap">
                <xf:message ref="'Save recordImprtMap'"/>
            </xf:action>

            <!-- Application defined action to copy a recordImportMap.
                 With a stored map loaded, create a copy in the recordMap-instance
                 Invoke after the user has confirmed they want to overwrite the existing 
                -->
            <xf:action ev:event="copy-storedRecordImportMap">
                <xf:message ref="'Copy recordImprtMap'"/>
            </xf:action>

            <!-- Application defined action to delete a stored recordImportMap.
                 With a stored map loaded, delete it from the xmlstore
                 Invoked after the user has confirmed they want to delete the storedRecordImportMap
                -->
            <xf:action ev:event="delete-storedRecordImportMap">
                <xf:message ref="'Delete recordImprtMap'"/>
            </xf:action>


            <!-- Submission to load recordImportMap -->
            <xf:submission id="load-recordImportMap-submission" serialization="none"
                action="{xxf:instance('control-instance')/storageObject}" validate="false"
                method="get" replace="instance" instance="recordImportMap-instance"
                f:url-type="resource">
                <!-- Set recordImportMap in control instance -->
                <xf:action ev:event="xforms-submit-done">
                    <xf:delete
                        nodeset="xxf:instance('control-instance')/importRecords/recordImportMap"/>
                    <xf:insert context="xxf:instance('control-instance')/importRecords"
                        origin="xxf:instance('recordImportMap-instance')"/>
                    <!-- The feildMap template is set from the recordImportMap template, so isn't set again when loaidn a saved map -->
                </xf:action>
                <xf:action ev:event="xforms-submit-error">
                    <xf:setvalue ref="xxf:instance('control-instance')/status">failed</xf:setvalue>
                </xf:action>
            </xf:submission>

            <!-- Submission to save recordImportMap to xmlstore.
                 Saves to the location in  storageObject -->
            <xf:submission id="save-recordImportMap-submission"
                ref="xxf:instance('recordImportMap-instance')"
                action="{xxf:instance('control-instance')/storageObject}" method="put"
                replace="none" f:url-type="resource" includenamespacesprefixes="">
                <xf:action ev:event="xforms-submit-done">
                    <!-- TBD -->
                </xf:action>
                <xf:action ev:event="xforms-submit-error">
                    <!-- TBD -->
                </xf:action>
            </xf:submission>


            <!-- ===
                Fix compositions in the database
                fixCompositions
                ====== -->


            <!-- Application defined action to get the list of compositions for fixing.
                 Uses the following from manageRecords:
                 
                    patientCompositionsList-instance
                    patientCompositions-submission
                    
                  -->
            <xf:action ev:event="get-compositionListToFix">

                <!-- Get the set of compositions to fix.
                     Make sure whereClause is set to get the compositionIRI -->
                <xf:setvalue ref="xxf:instance('control-instance')/storageObject"
                    value="concat(xxf:instance('view-parameters-instance')/applicationDatabaseLocation,'/records')"/>

                <xxf:variable name="compositionIRI"
                    select="xxf:instance('control-instance')/fixCompositions/compositionIRI"/>

                <xf:setvalue
                    ref="xxf:instance('patientCompositionsListXQuery-instance')/whereClause"
                    value="concat('[descendant::cda:typeId/@extension =''',$compositionIRI,''']')"/>

                <xf:setvalue ref="xxf:instance('cda-query-instance')/exist:text"
                    value="xxf:instance('patientCompositionsListXQuery-instance')"/>

                <xf:send submission="patientCompositions-submission" target="main-model"/>

            </xf:action>


            <!-- Application defined action to fix the specified compositions.
               
            -->
            <xf:action ev:event="performFixComposition">

                <xf:action
                    xxf:iterate="xxf:instance('patientCompositionsList-instance')//composition">
                    <xxf:variable name="composition" select="."/>

                    <!-- Load composition to import-instance -->
                    <xf:setvalue ref="xxf:instance('control-instance')/storageObject"
                        value="concat(xxf:instance('view-parameters-instance')/databaseLocation,$composition/handle)"/>
                    <xf:send submission="load-import-instance-submission"/>

                    <!-- Get the source value -->
                    <xxf:variable name="sourceEntryIRI"
                        select="xxf:instance('control-instance')/fixCompositions/source/@entryIRI"/>
                    <xxf:variable name="sourceElementIRI"
                        select="xxf:instance('control-instance')/fixCompositions/source/@elementIRI"/>
                    <xxf:variable name="sourceValue"
                        select="xxf:instance('import-instance')/descendant::cda:observation[cda:id/@extension =$sourceEntryIRI]/descendant::cda:value[@extension=$sourceElementIRI]/@value"/>

                    <!-- Set all target values -->
                    <xxf:variable name="targetEntryIRI"
                        select="xxf:instance('control-instance')/fixCompositions/target/@entryIRI"/>
                    <xxf:variable name="targetElementIRI"
                        select="xxf:instance('control-instance')/fixCompositions/target/@elementIRI"/>

                    <xxf:variable name="targetValues"
                        select="if ($targetEntryIRI!='') then xxf:instance('import-instance')/descendant::cda:observation[cda:id/@extension =$targetEntryIRI]/descendant::cda:value[@extension=$targetElementIRI] else xxf:instance('import-instance')/descendant::cda:value[@extension=$targetElementIRI]"/>

                    <xf:action xxf:iterate="$targetValues">
                        <xxf:variable name="value" select="."/>
                        <xf:setvalue ref="$value/@value" value="$sourceValue"/>
                    </xf:action>


                    <!-- Save the composition in the xmlstore -->
                    <!-- Reset the composition displayName - should get this from the dictionary to do this properly -->
                    <xf:setvalue ref="xxf:instance('import-instance')/cda:code[1]/@displayName"
                        value="if (xxf:instance('import-instance')/cda:typeId[1]/@extension='#CityEHR:Form:PonsetiCasting') then 'Casting and Pirani' else ."/>
                    <xf:send submission="import-instance-submission"/>

                </xf:action>


            </xf:action>



            <!-- ===
                Code knowledge maps view and edit maps
                codeKnowledgeSources
                
                xquery
                ====== -->

            <!-- Load template from file -->
            <xf:instance id="knowledgeMapTemplate-instance"
                src="oxf:/apps/ehr/resources/templates/rdfKnowledgeMap.xml"/>

            <!-- Load the query from file -->
            <xf:instance id="getKnowledgeMapsXQuery-instance"
                src="oxf:/apps/ehr/xquery/getKnowledgeMapsXQuery.xml"/>

            <!-- Query instance for submission.
                 Strictly speaking don't need to do it this way-->
            <xf:instance id="knowledgeMap-query-instance">
                <exist:query start="1" max="-1">
                    <exist:text/>
                </exist:query>
            </xf:instance>

            <!-- Response instance  -->
            <xf:instance id="knowledgeMap-instance">
                <exist:result>
                    <rdf:RDF>
                        <!-- Gets replaced by query -->
                    </rdf:RDF>
                </exist:result>
            </xf:instance>

            <!-- Submission to get all knowledge map rdf:Description as one big map -->
            <xf:submission id="load-knowledgeMaps-submission"
                ref="xxf:instance('knowledgeMap-query-instance')"
                action="{xxf:instance('view-parameters-instance')/applicationDatabaseLocation}/knowledgeMaps"
                method="post" replace="instance" instance="knowledgeMap-instance">
                <xf:action ev:event="xforms-submit-done">
                    <!-- Not doing anything on success -->
                </xf:action>
                <xf:action ev:event="xforms-submit-error">
                    <xf:setvalue ref="xxf:instance('view-parameters-instance')/systemError"
                        value="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/failedKnowledgeMapQuery"/>
                    <xf:setvalue ref="xxf:instance('control-instance')/statusMessage/entry"
                        value="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/failedKnowledgeMapQuery"/>
                    <xf:insert context="xxf:instance('control-instance')/statusMessage/entryList"
                        origin="xxf:instance('control-instance')/statusMessage/entry"/>
                </xf:action>
            </xf:submission>

            <!-- Application defined action to get all knowledge maps for an application                
            -->
            <xf:action ev:event="load-knowledgeMaps">

                <!-- Getting all maps, so no conditions -->
                <xf:setvalue ref="xxf:instance('getKnowledgeMapsXQuery-instance')/whereClause"
                    value="''"/>

                <xf:setvalue ref="xxf:instance('knowledgeMap-query-instance')/exist:text"
                    value="xxf:instance('getKnowledgeMapsXQuery-instance')"/>

                <xf:send submission="load-knowledgeMaps-submission" target="main-model"/>

                <!-- Reset status -->
                <xf:setvalue ref="xxf:instance('control-instance')/codeKnowledgeSources/status"
                    value="''"/>
            </xf:action>


            <!-- Submission to save knowledge to xmlstore.
                Saves to the location in  storageObject -->
            <xf:submission id="save-knowledgeMaps-submission"
                ref="xxf:instance('knowledgeMap-instance')"
                action="{xxf:instance('control-instance')/storageObject}" method="put"
                replace="none" f:url-type="resource" includenamespacesprefixes="">
                <xf:action ev:event="xforms-submit-done">
                    <!-- TBD -->
                </xf:action>
                <xf:action ev:event="xforms-submit-error">
                    <!-- TBD -->
                </xf:action>
            </xf:submission>


            <!-- Application defined action to save all knowledge maps
                 Removes the maps from the database, then saves the loaded instance.
            -->
            <xf:action ev:event="save-knowledgeMaps">
                <!-- Delete the stored map -->
                <xf:setvalue ref="xxf:instance('control-instance')/storageObject"
                    value="concat(xxf:instance('view-parameters-instance')/applicationDatabaseLocation,'/knowledgeMaps')"/>
                <xf:send submission="delete-resource-submission"/>
                <!-- Save the loaded map -->
                <xxf:variable name="timeStamp"
                    select="substring(replace(replace(string(current-dateTime()),':','-'),'\+','*'),1,16)"/>
                <xf:setvalue ref="xxf:instance('control-instance')/storageObject"
                    value="concat(.,'/',$timeStamp)"/>
                <xf:send submission="save-knowledgeMaps-submission"/>

                <!-- Set status flag -->
                <xf:setvalue ref="xxf:instance('control-instance')/codeKnowledgeSources/status"
                    value="''"/>
            </xf:action>

            <!-- Application defined action to add a new knowledge map
                
            -->
            <xf:action ev:event="add-knowledgeMap">
                <xxf:variable name="newMapTemplate"
                    select="xxf:instance('knowledgeMapTemplate-instance')/rdf:Description[1]"/>
                <xf:insert context="xxf:instance('knowledgeMap-instance')/rdf:RDF"
                    origin="$newMapTemplate" nodeset="rdf:Description" at="1" position="before"/>
                <xxf:variable name="newMap"
                    select="xxf:instance('knowledgeMap-instance')/rdf:RDF/rdf:Description[1]"/>
                <xxf:variable name="codeSystem"
                    select="xxf:instance('control-instance')/codeKnowledgeSources/codeSystem"/>
                <xf:setvalue ref="$newMap/dc:subject/@rdf:datatype" value="$codeSystem"/>

                <!-- Set status flag -->
                <xf:setvalue ref="xxf:instance('control-instance')/codeKnowledgeSources/status"
                    value="'edited'"/>
            </xf:action>

            <!-- Application defined action to delete a new knowledge map component
                
            -->
            <xf:action ev:event="delete-selected-knowledgeMap">
                <xxf:variable name="position"
                    select="xxf:instance('control-instance')/codeKnowledgeSources/selectedMapIndex"/>
                <xf:action if="$position castable as xs:integer">
                    <xf:delete
                        nodeset="xxf:instance('knowledgeMap-instance')/rdf:RDF/rdf:Description[position()=$position]"
                    />
                </xf:action>

                <!-- Set status flag -->
                <xf:setvalue ref="xxf:instance('control-instance')/codeKnowledgeSources/status"
                    value="'edited'"/>
            </xf:action>

            <!-- Application defined action to export the knowledge map 
                 Save the knowledgeMap-instance as xml-cache
            -->
            <xf:action ev:event="export-knowledgeMap">
                <xf:dispatch name="export-xmlCache" target="pageNavigation-model">
                    <xxf:context name="export-instance"
                        select="xxf:instance('knowledgeMap-instance')"/>
                    <xxf:context name="exportName" select="'knowledgeMap'"/>
                    <xxf:context name="exportType" select="'xml'"/>
                </xf:dispatch>
            </xf:action>


            <!-- ===
                Importing information models 
                importInformationModel
                === -->

            <!-- Application defined action to transform information model to OWL/XML.
                
                The file has been uploaded to the file at xxf:instance('file-instance')/file/content
                Its content has been loaded to xxf:instance('import-instance')
                If the file is not an ontology then it needs to be converted to OWL/XML 
                
                 The uploaded model may be:
                      ODF spreadsheet (ods)
                      MS spreadsheet (xlsx)
                      MS Office XML 2003 spreadsheet
                      graphML file 
                      Mind map      
            -->
            <xf:action ev:event="transform-informationModel">

                <!-- 2019-04-25 Deprecated - just for debugging - MS Office XML 2003 format saved from ODF spreadsheet -->
                <xf:action if="xxf:instance('control-instance')/importXMLRoot='Workbook'">
                    <!-- Recognised format -->
                    <xf:setvalue ref="xxf:instance('control-instance')/statusMessage/entry"
                        value="concat(xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/importInformationModel/supportedModelFormats/@displayName,' ',xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/importInformationModel/supportedModelFormats/format[@type='msxml']/@displayName)"/>
                    <xf:insert context="xxf:instance('control-instance')/statusMessage/entryList"
                        origin="xxf:instance('control-instance')/statusMessage/entry"/>

                    <!-- Processing message -->
                    <xf:setvalue ref="xxf:instance('control-instance')/statusMessage/entry"
                        value="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/statusMessage/message[@processingProgress='convertingSpreadsheetToOWLXML']"/>
                    <xf:insert context="xxf:instance('control-instance')/statusMessage/entryList"
                        origin="xxf:instance('control-instance')/statusMessage/entry"/>

                    <!-- Set up pipeline -->
                    <xf:setvalue
                        ref="xxf:instance('control-instance')/manageInformationModel/informationModelType"
                        value="if (exists(xxf:instance('import-instance')/ss:Worksheet[@ss:Name='Class Hierarchy'])) then 'Class' else 'Specialty'"/>
                    <xxf:variable name="xsltPipeline"
                        select="concat(xxf:instance('view-parameters-instance')/appPath,'/pipelines/convertSpreadsheet2OWL.xpl')"/>
                    <!-- Replace root node of 'import-instance' with pipeline output -->
                    <xf:insert nodeset="xxf:instance('import-instance')"
                        origin="xxf:call-xpl($xsltPipeline, 'instance', xxf:instance('import-instance'), 'data')"
                    />
                </xf:action>

                <!-- ods, xlsx, MS 2003 XML format are transformed to cityEHR database format in the upload pipeline -->
                <xf:action if="xxf:instance('control-instance')/importXMLRoot='database'">
                    <!-- Recognised format -->
                    <xxf:variable name="source" select="xxf:instance('import-instance')/@source"/>
                    <xf:setvalue ref="xxf:instance('control-instance')/statusMessage/entry"
                        value="concat(xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/importInformationModel/supportedModelFormats/@displayName,' ',xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/importInformationModel/supportedModelFormats/format[@type=$source]/@displayName)"/>
                    <xf:insert context="xxf:instance('control-instance')/statusMessage/entryList"
                        origin="xxf:instance('control-instance')/statusMessage/entry"/>

                    <!-- Processing message -->
                    <xf:setvalue ref="xxf:instance('control-instance')/statusMessage/entry"
                        value="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/statusMessage/message[@processingProgress='convertingSpreadsheetToOWLXML']"/>
                    <xf:insert context="xxf:instance('control-instance')/statusMessage/entryList"
                        origin="xxf:instance('control-instance')/statusMessage/entry"/>

                    <!-- Set up pipeline
                         For class models, V2 format has a sheet for 'Class'  -->
                    <xf:setvalue
                        ref="xxf:instance('control-instance')/manageInformationModel/informationModelType"
                        value="if (exists(xxf:instance('import-instance')/table[@id='Class'])) then 'Class' else 'Specialty'"/>

                    <xxf:variable name="xsltPipeline"
                        select="concat(xxf:instance('view-parameters-instance')/appPath,'/pipelines/convertDatabase2OWL.xpl')"/>
                    <!-- Replace root node of 'import-instance' with pipeline output -->
                    <xf:insert nodeset="xxf:instance('import-instance')"
                        origin="xxf:call-xpl($xsltPipeline, 'instance', xxf:instance('import-instance'), 'data')"/>

                    <!-- Store in xmlCache for debugging -->
                    <xf:dispatch name="store-xmlCache" target="pageNavigation-model">
                        <xxf:context name="xml-instance" select="xxf:instance('import-instance')"/>
                    </xf:dispatch>
                </xf:action>

                <!-- GraphML Uploaded -->
                <xf:action if="xxf:instance('control-instance')/importXMLRoot='graphml'">
                    <!-- Recognised format -->
                    <xf:setvalue ref="xxf:instance('control-instance')/statusMessage/entry"
                        value="concat(xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/importInformationModel/supportedModelFormats/@displayName,' ',xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/importInformationModel/supportedModelFormats/format[@type='graphML']/@displayName)"/>
                    <xf:insert context="xxf:instance('control-instance')/statusMessage/entryList"
                        origin="xxf:instance('control-instance')/statusMessage/entry"/>

                    <!-- Processing message -->
                    <xf:setvalue ref="xxf:instance('control-instance')/statusMessage/entry"
                        value="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/statusMessage/message[@processingProgress='convertingGraphToOWLXML']"/>
                    <xf:insert context="xxf:instance('control-instance')/statusMessage/entryList"
                        origin="xxf:instance('control-instance')/statusMessage/entry"/>
                    <!-- Set up pipeline -->
                    <xxf:variable name="xsltPipeline"
                        select="concat(xxf:instance('view-parameters-instance')/appPath,'/pipelines/convertGraph2OWL.xpl')"/>
                    <!-- Replace root node of 'import-instance' with pipeline output -->
                    <xf:insert nodeset="xxf:instance('import-instance')"
                        origin="xxf:call-xpl($xsltPipeline, 'instance', xxf:instance('import-instance'), 'data')"
                    />
                </xf:action>

                <!-- Mind map Uploaded -->
                <xf:action if="xxf:instance('control-instance')/importXMLRoot='map'">
                    <!-- Recognised format -->
                    <xf:setvalue ref="xxf:instance('control-instance')/statusMessage/entry"
                        value="concat(xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/importInformationModel/supportedModelFormats/@displayName,' ',xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/importInformationModel/supportedModelFormats/format[@type='mindmap']/@displayName)"/>
                    <xf:insert context="xxf:instance('control-instance')/statusMessage/entryList"
                        origin="xxf:instance('control-instance')/statusMessage/entry"/>

                    <!-- Processing message -->
                    <xf:setvalue ref="xxf:instance('control-instance')/statusMessage/entry"
                        value="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/statusMessage/message[@processingProgress='convertingMindMaptoOWLXML']"/>
                    <xf:insert context="xxf:instance('control-instance')/statusMessage/entryList"
                        origin="xxf:instance('control-instance')/statusMessage/entry"/>
                    <!-- Set up pipeline -->
                    <xxf:variable name="xsltPipeline"
                        select="concat(xxf:instance('view-parameters-instance')/appPath,'/pipelines/convertMindMap2OWL.xpl')"/>
                    <!-- Replace root node of 'import-instance' with pipeline output -->
                    <xf:insert nodeset="xxf:instance('import-instance')"
                        origin="xxf:call-xpl($xsltPipeline, 'instance', xxf:instance('import-instance'), 'data')"
                    />
                </xf:action>

                <!-- Set processing status if an ontology was not created as a result of the transformation 
                     But not if the format is unsupported (its then not processed) -->
                <xf:action
                    if="xxf:instance('import-instance')[name(.)!='Ontology'] and xxf:instance('control-instance')/importStatus!='unsupported'">
                    <xf:setvalue ref="xxf:instance('control-instance')/statusMessage/entry"
                        value="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/statusMessage/message[@processingProgress='errorTransformingToOWLXML']"/>
                    <xf:insert context="xxf:instance('control-instance')/statusMessage/entryList"
                        origin="xxf:instance('control-instance')/statusMessage/entry"/>
                </xf:action>
                <!-- Set processing status if successful transformation (or no transformation was necessary)  -->
                <xf:action if="xxf:instance('import-instance')[name(.)='Ontology']">
                    <!-- Set importedFromFile annotation in the ontology -->
                    <xf:setvalue
                        ref="xxf:instance('import-instance')/owl:Annotation[owl:AnnotationProperty/@abbreviatedIRI='rdfs:importedFromFile']/owl:Literal"
                        value="xxf:instance('control-instance')/uploadedFileName"/>
                    <!-- Set the status message -->
                    <xf:setvalue ref="xxf:instance('control-instance')/statusMessage/entry"
                        value="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/statusMessage/message[@processingProgress='transformedToOWLXML']"/>
                    <xf:insert context="xxf:instance('control-instance')/statusMessage/entryList"
                        origin="xxf:instance('control-instance')/statusMessage/entry"/>
                    <!-- Reset the importXMLRoot -->
                    <xf:setvalue ref="xxf:instance('control-instance')/importXMLRoot"
                        value="xxf:instance('import-instance')/name(.)"/>
                </xf:action>
            </xf:action>


            <!-- Application defined action to translate openEHR ADL template to OWL/XML.
                
                The file has been uploaded to the file at xxf:instance('file-instance')/file/content
                Its content has been loaded to xxf:instance('import-instance')
                Text file has been identified and returned as content in a <document> element
                Before translate-openEHRadl is called, a basic check has already been made that this looks like ADL
                Send the ADL document to the translateOpenEHRadl pipeline to get resulting OWL/XML ontology.
                The pipeline runs a sequence of XSLT transformations, with the final target OWL/XML
                
                2017-11-20 ADL import not yet supported, so output message and skip rest of processing.
            -->
            <xf:action ev:event="translate-openEHRadl">
                <!-- Set message that format is not yet supported -->
                <xf:setvalue ref="xxf:instance('control-instance')/importStatus"
                    value="'unsupported'"/>
                <xf:setvalue ref="xxf:instance('control-instance')/statusMessage/entry"
                    value="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/statusMessage/message[@processingProgress='formatNotCurrentlySupported']"/>
                <xf:insert context="xxf:instance('control-instance')/statusMessage/entryList"
                    origin="xxf:instance('control-instance')/statusMessage/entry"/>

                <!-- Skip processing -->
                <xf:action if="false()">
                    <!-- Set up pipeline -->
                    <xxf:variable name="xsltPipeline"
                        select="concat(xxf:instance('view-parameters-instance')/appPath,'/pipelines/translateOpenEHRadl.xpl')"/>
                    <!-- Replace root node of 'import-instance' with pipeline output -->
                    <xf:insert nodeset="xxf:instance('import-instance')"
                        origin="xxf:call-xpl($xsltPipeline, 'instance', xxf:instance('import-instance'), 'data')"/>

                    <!-- For debugging - export the resulting information model -->
                    <!--
                <xf:dispatch name="export-xmlCache" target="pageNavigation-model">
                    <xxf:context name="export-instance" select="xxf:instance('import-instance')"/>
                    <xxf:context name="exportType" select="'informationModel'"/>
                </xf:dispatch>
                -->
                </xf:action>
            </xf:action>



            <!-- Application defined action invoked after completion of the import-informationModel process. 
                 If the import was successful then reset adminTask to manageInformationModel 
                 Otherwise display an error message -->
            <xf:action ev:event="import-informationModelComplete">

                <!-- Get the process status after running import-informationModel -->
                <xf:dispatch name="get-processStatus" target="process-model">
                    <xxf:context name="status" select="xxf:instance('control-instance')/status"/>
                </xf:dispatch>

                <!-- import-informationModel completed successfully -->
                <xf:action if="xxf:instance('control-instance')/status='completed'">
                    <!-- Reset editStatus (used in case user tries to move away during processing) -->
                    <xf:setvalue
                        ref="xxf:instance('control-instance')/importInformationModel/editStatus"
                        value="''"/>

                    <!-- Set new adminTask to manageInformationModel -->
                    <xf:dispatch name="set-adminTask" target="main-model">
                        <xxf:context name="adminTask" select="'manageInformationModel'"/>
                    </xf:dispatch>
                </xf:action>

                <!-- There was an error in import-informationModel -->
                <xf:action if="not(xxf:instance('control-instance')/status='completed')">
                    <xf:setvalue ref="xxf:instance('view-parameters-instance')/systemError"
                        value="concat(xxf:instance('view-parameters-instance')/systemErrorList/systemError[@type='failedImportInformationModel'],' / ',xxf:instance('control-instance')/status)"
                    />
                </xf:action>

            </xf:action>


            <!-- ===
                 managedApplication
                 Get details of an application - users, specialties, information models 
                 Used in 
                    importInformationModel
                    manageInformationModel
                    manageSystemParameters
                    manageApplicationParameters
                    
                    manageUsers
                    
                 Actions for handling applications are loaded in application-model
                 === -->

            <!-- Application defined action to set parameters for the managed application. -->
            <xf:action ev:event="set-managedApplication">
                <xxf:variable name="applicationIRI" select="event('applicationIRI')"/>
                <xxf:variable name="applicationId"
                    select="replace(substring($applicationIRI,2),':','-')"/>

                <!-- Set parameters for the managed application -->
                <xf:setvalue
                    ref="xxf:instance('control-instance')/managedApplication/applicationIRI"
                    value="$applicationIRI"/>
                <xf:setvalue ref="xxf:instance('control-instance')/managedApplication/applicationId"
                    value="$applicationId"/>
                <xf:setvalue
                    ref="xxf:instance('control-instance')/managedApplication/applicationStorageLocation"
                    value="concat(xxf:instance('view-parameters-instance')/storageLocation,'/applications/',xxf:instance('control-instance')/managedApplication/applicationId)"/>
                <xf:setvalue
                    ref="xxf:instance('control-instance')/managedApplication/applicationDatabaseLocation"
                    value="concat(xxf:instance('view-parameters-instance')/databaseLocation,xxf:instance('control-instance')/managedApplication/applicationStorageLocation)"/>

                <!-- Load specialty list (for the managed application).
                     This list is updated by two actions in application-model:
                        when a new specialty is imported (importInformationModel-save)
                        or when a specialty is deleted (delete-specialty) -->
                <xf:dispatch name="get-specialtyList" target="application-model">
                    <xxf:context name="applicationId" select="$applicationId"/>
                    <xxf:context name="status" select="xxf:instance('control-instance')/status"/>
                </xf:dispatch>


                <!-- Load the application parameters for the managed application - held in working-application-parameters-instance.
                     This also sets/clears the application images -->
                <xf:dispatch name="load-working-application-parameters"
                    target="configurationManagement-model">
                    <xxf:context name="applicationIRI" select="$applicationIRI"/>
                    <xxf:context name="status"
                        select="xxf:instance('control-instance')/managedApplication/applicationParametersStatus"
                    />
                </xf:dispatch>

                <!-- Set commonModelIRI for the managed application (from working-application-parameters-instance) -->
                <xxf:variable name="commonModelIRI"
                    select="xxf:instance('working-application-parameters-instance')/application/iso-13606:EHR_Extract/@commonModel"/>
                <xf:setvalue
                    ref="xxf:instance('control-instance')/managedApplication/commonModelIRI"
                    value="$commonModelIRI"/>
                <xf:setvalue ref="xxf:instance('control-instance')/managedApplication/commonModelId"
                    value="replace(substring(xxf:instance('control-instance')/managedApplication/commonModelIRI,2),':','-')"/>

                <!-- Set the defaultSpecialty for the managed application -->
                <xxf:variable name="defaultSpecialty"
                    select="xxf:instance('working-application-parameters-instance')/application/iso-13606:EHR_Extract/@defaultSpecialty"/>
                <xf:setvalue
                    ref="xxf:instance('control-instance')/managedApplication/defaultSpecialtyIRI"
                    value="$defaultSpecialty"/>
                <xf:setvalue
                    ref="xxf:instance('control-instance')/managedApplication/defaultSpecialtyId"
                    value="replace(substring(xxf:instance('control-instance')/managedApplication/defaultSpecialtyIRI,2),':','-')"/>

                <!-- Set baseLanguage code and displayName for the managed application (from working-application-parameters-instance) -->
                <xxf:variable name="baseLanguageCode"
                    select="xxf:instance('working-application-parameters-instance')/application/iso-13606:EHR_Extract/@baseLanguageCode"/>
                <xf:setvalue
                    ref="xxf:instance('control-instance')/managedApplication/baseLanguage/@code"
                    value="lower-case($baseLanguageCode)"/>

                <xxf:variable name="supportedLanguageList"
                    select="xxf:instance('working-application-parameters-instance')/languagePacks/language"/>
                <xxf:variable name="baseLanguageDisplayName"
                    select="if (exists($supportedLanguageList[lower-case(@code)=$baseLanguageCode])) then $supportedLanguageList[lower-case(@code)=$baseLanguageCode]/@displayName else $baseLanguageCode"/>
                <xf:setvalue
                    ref="xxf:instance('control-instance')/managedApplication/baseLanguage/@displayName"
                    value="lower-case($baseLanguageDisplayName)"/>

                <!-- Clear the processExecution controls -->
                <xf:dispatch name="clear-processExecutionParameters" target="process-model"/>



            </xf:action>


            <!-- ===
                Browse Database - browsePhysicalDatabases, browseLogicalDatabases 
                
                Uses the following parameters in control-instance/managedDatabase:  
                    system
                    logicalDatabase
                    physicalDatabase
                    physicalClusterNode - the database being browsed
                    
                    databaseLocation - the URL of the physicalClusterNode
                    storageLocation - the full path to the current collection
                    
                And in control-instance/browsePhysicalDatabases
                    node - the current node (collection or resource)
                    path - contains a set of collection type nodes, including the current node if it is a collection                
                    === -->


            <!-- Application defined action to set the managed system.
                 Invoked when the system changes (xforms-value-changed event). -->
            <xf:action ev:event="set-managed-system">
                <xxf:variable name="system"
                    select="xxf:instance('control-instance')/managedDatabase/system"/>

                <!-- The physicalClusterSet is all the physicalClusters deployed for the system.
                     primary physicalCluster is the first one marked as primary, or the first physicalCluster if none are marked as primary -->
                <xxf:variable name="physicalClusterSet"
                    select="xxf:instance('database-parameters-instance')/deployedDatabases/physicalCluster[@system=$system]"/>
                <xxf:variable name="primaryPhysicalCluster"
                    select="if (exists($physicalClusterSet[@primary='true'])) then $physicalClusterSet[@primary='true'][1] else $physicalClusterSet[1]"/>

                <!-- Set the physicalDatabase.
                     This will trigger xforms-value-changed -->
                <xf:setvalue ref="xxf:instance('control-instance')/managedDatabase/physicalDatabase"
                    value="$primaryPhysicalCluster/@id"/>
                <xf:setvalue ref="xxf:instance('control-instance')/managedDatabase/btuLocation"
                    value="$primaryPhysicalCluster/@btuLocation"/>

                <!-- Set the logicalDatabase associated with the system -->
                <xf:dispatch name="set-logicalDatabase" target="main-model"/>

            </xf:action>


            <!-- Application defined action to set the managed database.
                 Sets the system, which triggers other settings. -->
            <xf:action ev:event="set-managed-database">
                <xxf:variable name="adminTask"
                    select="xxf:instance('control-instance')/adminTask/adminTask"/>

                <!-- If system has already been set, then refresh the current collection, in case it has changed -->
                <xf:action if="xxf:instance('control-instance')/managedDatabase/system != ''">

                    <xf:action if="$adminTask = 'browseLogicalDatabases'">
                        <xf:dispatch name="setBrowseLogicalDatabasesNode" target="main-model">
                            <xxf:context name="node"
                                select="xxf:instance('control-instance')/browseLogicalDatabases/node"
                            />
                        </xf:dispatch>
                    </xf:action>

                    <xf:action if="$adminTask = 'browsePhysicalDatabases'">
                        <xf:dispatch name="setBrowsePhysicalDatabasesNode" target="main-model">
                            <xxf:context name="node"
                                select="xxf:instance('control-instance')/browsePhysicalDatabases/node"
                            />
                        </xf:dispatch>
                    </xf:action>
                </xf:action>

                <!-- Set system, if not already set.
                     Set to the first system defined in system-parameters (ehr)
                     This will trigger xforms-value-changed to set:
                            physicalDatabase
                            physicalClusterNode.
                     -->
                <xf:setvalue ref="xxf:instance('control-instance')/managedDatabase/system"
                    value="if (.='') then xxf:instance('system-parameters-instance')/coreParameters/databaseConfiguration/systemDatabases/database[1]/@system else ."/>

            </xf:action>


            <!-- Application defined action to set the physicalClusterNode.
                 Invoked after the physicalClusterNode (id) has been set in managedDatabase
                 Set the databaseURL, storageLocation.and version-->
            <xf:action ev:event="set-physicalClusterNode">
                <!-- Physical databases defined in database-parameters, associated with the selected system  -->
                <xxf:variable name="physicalClusterSet"
                    select="xxf:instance('database-parameters-instance')/deployedDatabases/physicalCluster[@system=xxf:instance('control-instance')/managedDatabase/system]"/>
                <!-- Physical database nodes defined in database-parameters, associated with the selected physicalDatabase -->
                <xxf:variable name="physicalClusterNodeSet"
                    select="$physicalClusterSet[@id=xxf:instance('control-instance')/managedDatabase/physicalDatabase]/node"/>
                <!-- The database node defined by selected physicalClusterNode -->
                <xxf:variable name="physicalClusterNode"
                    select="$physicalClusterNodeSet[@id=xxf:instance('control-instance')/managedDatabase/physicalClusterNode]"/>

                <!-- Set the databaseURL and databaseHandle -->
                <xf:setvalue ref="xxf:instance('control-instance')/managedDatabase/databaseURL"
                    value="$physicalClusterNode/@databaseURL"/>
                <xf:setvalue
                    ref="xxf:instance('control-instance')/browsePhysicalDatabases/databaseHandle"
                    value="$physicalClusterNode/@btuLocation"/>
                <xf:setvalue ref="xxf:instance('control-instance')/managedDatabase/databaseVersion"
                    value="$physicalClusterNode/@databaseVersion"/>

                <!-- Reset the current node to the collection in databaseHandle -->
                <xf:dispatch name="set-collectionNode" target="main-model"/>

                <!-- Reset the collection list -->
                <xf:dispatch name="get-collectionList" target="main-model">
                    <xxf:context name="collectionNode"
                        select="xxf:instance('control-instance')/browsePhysicalDatabases/node"/>
                </xf:dispatch>

            </xf:action>


            <!-- Application defined action to set the logicalDatabase.
                 Invoked after the system has been set in set-managed-system
                 Set the databaseURL, storageLocation.and version-->
            <xf:action ev:event="set-logicalDatabase">
                <xxf:variable name="system"
                    select="xxf:instance('control-instance')/managedDatabase/system"/>

                <!-- Set the logicalDatabaseLocation for managedDatabase and databaseLocation for browseLogicalDatabases -->
                <xxf:variable name="systemDatabase"
                    select="xxf:instance('system-parameters-instance')/coreParameters/databaseConfiguration/systemDatabases/database[@system=$system]"/>
                <xxf:variable name="logicalDatabase"
                    select="xxf:instance('system-parameters-instance')/coreParameters/databaseConfiguration/logicalDatabases/database[@id=$systemDatabase/@logicalDatabase]"/>
                <xxf:variable name="logicalDatabaseLocation"
                    select="$logicalDatabase/@logicalDatabaseLocation"/>
                <xf:setvalue
                    ref="xxf:instance('control-instance')/managedDatabase/logicalDatabaseLocation"
                    value="$logicalDatabaseLocation"/>

                <!-- Set the root node for browseLogicalDatabases nodeHierarchy -->
                <xf:setvalue
                    ref="xxf:instance('control-instance')/browseLogicalDatabases/node/@path"
                    value="''"/>
                <xf:setvalue
                    ref="xxf:instance('control-instance')/browseLogicalDatabases/node/@name"
                    value="substring-after($logicalDatabaseLocation,'/')"/>
                <xf:setvalue
                    ref="xxf:instance('control-instance')/browseLogicalDatabases/node/@type"
                    value="'collection'"/>

                <!-- Set the node hierarchy browseLogicalDatabases -->
                <xf:delete
                    nodeset="xxf:instance('control-instance')/browseLogicalDatabases/nodeHierarchy/*"/>
                <xf:insert
                    context="xxf:instance('control-instance')/browseLogicalDatabases/nodeHierarchy"
                    origin="xxf:instance('control-instance')/browseLogicalDatabases/node"/>

                <!-- Create the first level of nodes in the hierarchy -->
                <xf:dispatch name="get-collectionList" target="main-model">
                    <xxf:context name="collectionNode"
                        select="xxf:instance('control-instance')/browseLogicalDatabases/nodeHierarchy/node"
                    />
                </xf:dispatch>
                <xf:action xxf:iterate="xxf:instance('collectionList-instance')/node">
                    <xxf:variable name="node" select="."/>
                    <xf:setvalue ref="$node/@path"
                        value="substring-after(.,$logicalDatabaseLocation)"/>
                    <xf:insert
                        context="xxf:instance('control-instance')/browseLogicalDatabases/nodeHierarchy/node"
                        origin="$node"/>
                </xf:action>

                <!-- Load the next level of the nodeHierarchy.
                     Which is done by invoking setBrowseLogicalDatabasesNode for the node -->
                <xf:dispatch name="setBrowseLogicalDatabasesNode" target="main-model">
                    <xxf:context name="node"
                        select="xxf:instance('control-instance')/browseLogicalDatabases/nodeHierarchy/node"
                    />
                </xf:dispatch>

            </xf:action>

            <!-- Application defined action to set the current node in browseLogicalDatabases.
                 This happens when the user selects a new node in the logical database browser.
                 The node path has already been set for the current node -->
            <xf:action ev:event="setBrowseLogicalDatabasesNode">
                <xxf:variable name="node" select="event('node')"/>
                <xxf:variable name="nodePath" select="$node/@path"/>
                <xxf:variable name="logicalDatabaseLocation"
                    select="xxf:instance('control-instance')/managedDatabase/logicalDatabaseLocation"/>

                <!-- Get the node in the nodeHierarchy -->
                <xxf:variable name="nodeHierarchy"
                    select="xxf:instance('control-instance')/browseLogicalDatabases/nodeHierarchy"/>
                <xxf:variable name="nodeInHierarchy"
                    select="$nodeHierarchy/descendant::node[@path=$nodePath][1]"/>

                <!-- Set attributes for the node in browseLogicalDatabases - don't need lastModified -->
                <xf:setvalue
                    ref="xxf:instance('control-instance')/browseLogicalDatabases/node/@name"
                    value="$nodeInHierarchy/@name"/>
                <xf:setvalue
                    ref="xxf:instance('control-instance')/browseLogicalDatabases/node/@type"
                    value="$nodeInHierarchy/@type"/>
                <xf:setvalue
                    ref="xxf:instance('control-instance')/browseLogicalDatabases/node/@size"
                    value="$nodeInHierarchy/@size"/>

                <!-- Load the child nodes.
                     But only if they don't already exist-->
                <xf:action xxf:iterate="$nodeInHierarchy/node">
                    <xxf:variable name="childNode" select="."/>
                    <xf:action if="$childNode/@type='collection'">
                        <!-- Get the child nodes from the database -->
                        <xf:dispatch name="get-collectionList" target="main-model">
                            <xxf:context name="collectionNode" select="$childNode"/>
                        </xf:dispatch>
                        <!-- Insert next level of child nodes into the nodeHierarchy.
                             The path for a node in the nodeHierarchy is relative to the logicalDatabaseLocation -->
                        <xf:action xxf:iterate="xxf:instance('collectionList-instance')/node">
                            <xxf:variable name="grandchildNode" select="."/>
                            <xxf:variable name="grandchildPath"
                                select="substring-after($grandchildNode/@path,$logicalDatabaseLocation)"/>
                            <xf:setvalue ref="$grandchildNode/@path" value="$grandchildPath"/>
                            <xf:action if="not(exists($childNode/node[@path=$grandchildPath]))">
                                <xf:insert context="$childNode" origin="$grandchildNode"/>
                            </xf:action>
                        </xf:action>
                    </xf:action>
                </xf:action>

            </xf:action>



            <!-- Get list of contents in a collection for browse or manifest-->
            <xf:instance id="collectionList-instance">
                <exist:result/>
            </xf:instance>



            <!-- Application defined action to get collection contents.
                 Used for browsePhysicalDatabases and browseLogicalDatabases
                 The system is defined for the managedDatabase
                 Invokes the get-collectionContents action in databaseAccessLayer -->
            <xf:action ev:event="get-collectionList">
                <xxf:variable name="collectionNode" select="event('collectionNode')"/>
                <xxf:variable name="adminTask"
                    select="xxf:instance('control-instance')/adminTask/adminTask"/>

                <!-- storageLocation depends on browsePhysicalDatabases or browseLogicalDatabases
                     Note that for browsePhysicalDatabases its the databaseHandle (full path)
                     for browseLogicalDatabases is the databaseLocation (relative to the logicalDatabaseLocation) -->
                <xxf:variable name="storageLocation" select="$collectionNode/@path"/>

                <!-- Use the physicalClusterNode if browsing the physical database -->
                <xxf:variable name="physicalClusterNode"
                    select="if ($adminTask='browsePhysicalDatabases') then xxf:instance('control-instance')/managedDatabase/physicalClusterNode else ''"/>

                <!-- Invoke action from databaseAccessLayer -->
                <xf:dispatch name="get-collectionContents" target="databaseAccessLayer-model">
                    <xxf:context name="system"
                        select="xxf:instance('control-instance')/managedDatabase/system"/>
                    <xxf:context name="storageLocation" select="$storageLocation"/>
                    <xxf:context name="physicalClusterNode" select="$physicalClusterNode"/>
                    <xxf:context name="collectionContents"
                        select="xxf:instance('collectionList-instance')"/>
                    <xxf:context name="status"
                        select="xxf:instance('control-instance')/managedDatabase/status"/>
                </xf:dispatch>

                <!-- If there was a problem with the databaseAccessLayer then set status -->
                <xf:setvalue
                    ref="xxf:instance('control-instance')/managedDatabase/databaseAccessible"
                    value="if (xxf:instance('control-instance')/managedDatabase/status = '') then true() else false()"/>

            </xf:action>


            <!-- Submission to  load resource from the xmlstore into the browserResource instance.
                 Only used to verify before deleting the resource -->
            <xf:instance id="browserResource-instance">
                <instance>Will get replaced by the instance loaded from xmlstore</instance>
            </xf:instance>
            <xf:submission id="load-browserResource-submission" serialization="none"
                action="{xxf:instance('control-instance')/storageObject}" validate="false"
                method="get" replace="instance" instance="browserResource-instance"
                f:url-type="resource">
                <xf:action ev:event="xforms-submit-done">
                    <xf:setvalue ref="xxf:instance('control-instance')/status">success</xf:setvalue>
                </xf:action>
                <xf:action ev:event="xforms-submit-error">
                    <xf:setvalue ref="xxf:instance('control-instance')/status">failed</xf:setvalue>
                </xf:action>
            </xf:submission>

            <!-- Application defined action to set node to the current collection.
                 The current collection is the last name in the storageLocation path -->
            <xf:action ev:event="set-collectionNode">
                <xf:setvalue
                    ref="xxf:instance('control-instance')/browsePhysicalDatabases/node/@path"
                    value="xxf:instance('control-instance')/browsePhysicalDatabases/databaseHandle"/>
                <xxf:variable name="path"
                    select="tokenize(xxf:instance('control-instance')/browsePhysicalDatabases/databaseHandle,'/')"/>
                <xf:setvalue
                    ref="xxf:instance('control-instance')/browsePhysicalDatabases/node/@name"
                    value="if (empty($path)) then '' else $path[last()]"/>
                <xf:setvalue
                    ref="xxf:instance('control-instance')/browsePhysicalDatabases/node/@type"
                    value="'collection'"/>
            </xf:action>

            <!-- Application defined action to set the current node in browsePhysicalDatabases.
                 This happens when the user selects a new node in the physical database browser.
                 The node passed is the node selected from collectionList-instance -->
            <xf:action ev:event="setBrowsePhysicalDatabasesNode">
                <xxf:variable name="node" select="event('node')"/>

                <!-- Set attributes for the node - don't need lastModified -->
                <xf:setvalue
                    ref="xxf:instance('control-instance')/browsePhysicalDatabases/node/@name"
                    value="$node/@name"/>
                <xf:setvalue
                    ref="xxf:instance('control-instance')/browsePhysicalDatabases/node/@path"
                    value="$node/@path"/>
                <xf:setvalue
                    ref="xxf:instance('control-instance')/browsePhysicalDatabases/node/@type"
                    value="$node/@type"/>
                <xf:setvalue
                    ref="xxf:instance('control-instance')/browsePhysicalDatabases/node/@size"
                    value="$node/@size"/>

                <!-- If node is a collection, then reset the databaseHandle and reload its contents -->
                <xf:action
                    if="xxf:instance('control-instance')/browsePhysicalDatabases/node/@type='collection'">
                    <!-- databaseHandle is the path of the node -->
                    <xf:setvalue
                        ref="xxf:instance('control-instance')/browsePhysicalDatabases/databaseHandle"
                        value="$node/@path"/>
                    <!-- Refresh collection list -->
                    <xf:dispatch name="get-collectionList" target="main-model">
                        <xxf:context name="collectionNode"
                            select="xxf:instance('control-instance')/browsePhysicalDatabases/node"/>
                    </xf:dispatch>
                </xf:action>

                <!-- If node is a resource, then load it directly to the browser until 2016-12-09
                     Now just display button to view, rather than load directly when selected -->
                <xf:action
                    if="xxf:instance('control-instance')/browsePhysicalDatabases/node/@type='resource'">
                    <!-- Not doing anything here now -->
                </xf:action>

                <!-- Clear the database manifest (if generated for a specific node, so no longer valid) -->
                <xf:delete nodeset="xxf:instance('manifest-instance')/*"/>

            </xf:action>

            <!-- Application defined action to navigate back in the path of nodes.
                 This happens when the user selects the back button in the xmlstore browser.
                 The current node may be a collection or a resource
                 Removes the last node in the path and resets current node and storageLocation.
                 Cannot navigate back from the root node, which is defined as the first node in the path
                 (i.e. cannot delete the last node and leave the path empty) -->
            <xf:action ev:event="undoBrowsePhysicalDatabasesPath">
                <!-- Remove the last node in the path.
                     But only if there is more than one node in the path.
                     databaseHandle starts with '/' so first token is always blank -->
                <xxf:variable name="pathNodes"
                    select="tokenize(xxf:instance('control-instance')/browsePhysicalDatabases/databaseHandle,'/')"/>
                <xxf:variable name="newPathNodes"
                    select="if (count($pathNodes) gt 2) then $pathNodes[position() != last()] else $pathNodes"/>
                <!-- Reset databaseHandle -->
                <xf:setvalue
                    ref="xxf:instance('control-instance')/browsePhysicalDatabases/databaseHandle"
                    value="string-join($newPathNodes,'/')"/>
                <!-- Reset the current node to the collection in databaseHandle -->
                <xf:dispatch name="set-collectionNode" target="main-model"/>
                <!-- Reset the collection list -->
                <xf:dispatch name="get-collectionList" target="main-model">
                    <xxf:context name="collectionNode"
                        select="xxf:instance('control-instance')/browsePhysicalDatabases/node"/>
                </xf:dispatch>
            </xf:action>

            <!-- Application defined action to delete the selected resource.
                 This is only called after the user has confirmed.
                 Can only delete if the current node is a resource, not a collection
                 Rather than delete the resource, should move it to the archive. TBD
                 But for now, we are going to delete it, so be careful -->
            <xf:action ev:event="delete-resource">
                <xxf:variable name="adminTask"
                    select="xxf:instance('control-instance')/adminTask/adminTask"/>

                <!-- The current node depends on whether task is browsePhysicalDatabases or browseLogicalDatabases -->
                <xxf:variable name="node"
                    select="if ($adminTask='browsePhysicalDatabases') then xxf:instance('control-instance')/browsePhysicalDatabases/node else xxf:instance('control-instance')/browseLogicalDatabases/node"/>

                <xxf:variable name="system"
                    select="xxf:instance('control-instance')/managedDatabase/system"/>

                <!-- Can only view if the node is a resource -->
                <xf:action if="$node/@type='resource' and $node/@path!=''">

                    <!-- Use the physicalClusterNode if browsing the physical database -->
                    <xxf:variable name="physicalClusterNode"
                        select="if ($adminTask='browsePhysicalDatabases') then xxf:instance('control-instance')/managedDatabase/physicalClusterNode else ''"/>

                    <!-- Delete the node -->
                    <xf:dispatch name="dal-delete" target="databaseAccessLayer-model">
                        <xxf:context name="system"
                            select="xxf:instance('control-instance')/managedDatabase/system"/>
                        <xxf:context name="physicalClusterNode" select="$physicalClusterNode"/>
                        <xxf:context name="storageLocation" select="$node/@path"/>
                        <xxf:context name="status"
                            select="xxf:instance('control-instance')/managedDatabase/status"/>
                    </xf:dispatch>

                    <!-- Reset the current node (which will always be a collection after the previous node has been deleted) -->
                    <xf:dispatch name="set-collectionNode" target="main-model"/>

                    <!-- Reset collection list -->
                    <xf:dispatch name="get-collectionList" target="main-model">
                        <xxf:context name="collectionNode"
                            select="xxf:instance('control-instance')/browsePhysicalDatabases/node"/>
                    </xf:dispatch>

                </xf:action>

            </xf:action>


            <!-- Application defined action to view the selected resource from the database browser.
                 Used for browsePhysicalDatabases and browseLogicalDatabases
                 Loads the XML document in a new tab.
                 Can only view if the current node is a resource, not a collection,
                 -->
            <xf:action ev:event="view-resource">
                <xxf:variable name="node" select="event('node')"/>
                <xxf:variable name="system"
                    select="xxf:instance('control-instance')/managedDatabase/system"/>

                <!-- Can only view if the node is a resource -->
                <xf:action if="$node/@type='resource' and $node/@path!=''">
                    <!-- Use the physicalClusterNode if browsing the physical database -->
                    <xxf:variable name="adminTask"
                        select="xxf:instance('control-instance')/adminTask/adminTask"/>
                    <xxf:variable name="physicalClusterNode"
                        select="if ($adminTask='browsePhysicalDatabases') then xxf:instance('control-instance')/managedDatabase/physicalClusterNode else ''"/>

                    <!-- Read to resource-instance -->
                    <xf:dispatch name="dal-read" target="databaseAccessLayer-model">
                        <xxf:context name="system"
                            select="xxf:instance('control-instance')/managedDatabase/system"/>
                        <xxf:context name="physicalClusterNode" select="$physicalClusterNode"/>
                        <xxf:context name="storageLocation" select="$node/@path"/>
                        <xxf:context name="resource" select="xxf:instance('resource-instance')"/>
                        <xxf:context name="status"
                            select="xxf:instance('control-instance')/managedDatabase/status"/>
                    </xf:dispatch>

                    <!-- Display in viewXML dialog -->
                    <xf:dispatch name="display-formatted-xml" target="pageNavigation-model">
                        <xxf:context name="title" select="$node/@name"/>
                        <xxf:context name="displayXML" select="xxf:instance('resource-instance')"/>
                    </xf:dispatch>


                    <!-- Invoke action from databaseAccessLayer.
                         This one loads in a new tab but displays the database username/apssword in the URL, so not using it. -->
                    <!--
                    <xf:dispatch name="dal-load" target="databaseAccessLayer-model">
                        <xxf:context name="system" select="xxf:instance('control-instance')/managedDatabase/system"/>
                        <xxf:context name="storageLocation" select="$storageLocation"/>
                        <xxf:context name="physicalClusterNode" select="$physicalClusterNode"/>
                        <xxf:context name="status" select="xxf:instance('control-instance')/managedDatabase/status"/>
                    </xf:dispatch>
                    -->

                </xf:action>
            </xf:action>


            <!-- Application defined action to export the selected resource from the database browser.
                 Used for browsePhysicalDatabases and browseLogicalDatabases
                 Zipped and downloaded to browser.
                 Can only export if the current node is a resource, not a collection,
                 -->
            <xf:action ev:event="export-resource">
                <xxf:variable name="node" select="event('node')"/>
                <xxf:variable name="system"
                    select="xxf:instance('control-instance')/managedDatabase/system"/>

                <!-- Can only view if the node is a resource -->
                <xf:action if="$node/@type='resource' and $node/@path!=''"> -> <!-- Use the physicalClusterNode if browsing the physical database -->
                    <xxf:variable name="adminTask"
                        select="xxf:instance('control-instance')/adminTask/adminTask"/>
                    <xxf:variable name="physicalClusterNode"
                        select="if ($adminTask='browsePhysicalDatabases') then xxf:instance('control-instance')/managedDatabase/physicalClusterNode else ''"/>
                    <!-- Read to resource-instance -->
                    <xf:dispatch name="dal-read" target="databaseAccessLayer-model">
                        <xxf:context name="system"
                            select="xxf:instance('control-instance')/managedDatabase/system"/>
                        <xxf:context name="physicalClusterNode" select="$physicalClusterNode"/>
                        <xxf:context name="storageLocation" select="$node/@path"/>
                        <xxf:context name="resource" select="xxf:instance('resource-instance')"/>
                        <xxf:context name="status"
                            select="xxf:instance('control-instance')/managedDatabase/status"/>
                    </xf:dispatch>
                    <!-- Export the resource-instance -->
                    <xf:dispatch name="export-xmlCache" target="pageNavigation-model">
                        <xxf:context name="export-instance"
                            select="xxf:instance('resource-instance')"/>
                        <xxf:context name="exportName" select="$node/@name"/>
                        <xxf:context name="exportType" select="'xml'"/>
                    </xf:dispatch>
                </xf:action>
            </xf:action>


            <!-- Result from cityEHRBackUpDatabase -->
            <xf:instance id="backup-instance">
                <instance>Will get replaced by the results from the pipeline</instance>
            </xf:instance>

            <!-- Application defined action to back up the selected database.
                 This one calls the cityEHRBackUpDatabase pipeline to perform the backup using eXist extension functions
                 This is only called after the user has confirmed.
                 Currently only works with xmlstore and auditLog -->
            <xf:action ev:event="backup-database">
                <!-- Check that the xmlstore specification exists for the root -->
                <xxf:variable name="activeXMLstore"
                    select="xxf:instance('system-parameters-instance')/coreParameters/databaseConfiguration/activeDatabases/xmlstore[@system=xxf:instance('view-parameters-instance')/backupPipeline/databaseRoot]"/>
                <xxf:variable name="xmlstore"
                    select="xxf:instance('system-parameters-instance')/coreParameters/databaseConfiguration/installedDatabases/xmlstore[@value=$activeXMLstore/@value]"/>
                <!-- If parameters were found for the selected database -->
                <xf:action if="exists($xmlstore)">
                    <!-- Set backupPipeline parameters -->
                    <xf:setvalue
                        ref="xxf:instance('view-parameters-instance')/backupPipeline/databaseRoot"
                        value="xxf:instance('control-instance')/browsePhysicalDatabases/activeDatabase"/>
                    <xf:setvalue
                        ref="xxf:instance('view-parameters-instance')/backupPipeline/storageLocation"
                        value="$activeXMLstore/@storageLocation"/>
                    <!-- Call backup pipeline -->
                    <xxf:variable name="xsltPipeline"
                        select="concat(xxf:instance('view-parameters-instance')/appPath,'/pipelines/cityEHRBackUpDatabase.xpl')"/>
                    <!-- Replace root node of 'backup-instance' with pipeline output -->
                    <xf:insert nodeset="xxf:instance('backup-instance')"
                        origin="xxf:call-xpl($xsltPipeline, 'instance', xxf:instance('view-parameters-instance'), 'data')"/>
                    <xf:setvalue ref="xxf:instance('view-parameters-instance')/systemError"
                        value="if (exists(xxf:instance('backup-instance')/exception)) then xxf:instance('view-parameters-instance')/systemErrorList/systemError[@type='failedDatabaseBackupPipeline'] else ''"
                    />
                </xf:action>
            </xf:action>

            <!-- Application defined action to generate the database manifest.
                 This is only invoked after the user has confirmed. -->
            <xf:action ev:event="generate-manifest">
                <xf:dispatch name="generate-databaseManifest" target="databaseAccessLayer-model">
                    <xxf:context name="system"
                        select="xxf:instance('control-instance')/managedDatabase/system"/>
                    <xxf:context name="node"
                        select="xxf:instance('control-instance')/browsePhysicalDatabases/node"/>
                </xf:dispatch>
            </xf:action>

            <!-- Application defined action to export the database manifest. -->
            <xf:action ev:event="export-manifest">
                <xf:dispatch name="export-xmlCache" target="pageNavigation-model">
                    <xxf:context name="export-instance" select="xxf:instance('manifest-instance')"/>
                    <xxf:context name="exportName" select="'manifest'"/>
                    <xxf:context name="exportType" select="'xml'"/>
                </xf:dispatch>
            </xf:action>


            <!-- Application defined action to back up the databasefrom the manifest.
                 This one calls the cityEHRBackUpDatabaseFromManifest pipeline to perform the backup from the manifest
                 This is only invoked after the user has confirmed. -->
            <xf:action ev:event="backup-database-from-manifest">

                <!-- Store the manifest-instance to xmlcache.
                     Sets the resourceHandle to the xmlcache -->
                <xf:dispatch name="store-xmlCache" target="pageNavigation-model">
                    <xxf:context name="xml-instance" select="xxf:instance('manifest-instance')"/>
                </xf:dispatch>

                <!-- Set the externalId -->
                <xf:dispatch name="set-externalId" target="pageNavigation-model">
                    <xxf:context name="type" select="'database'"/>
                    <xxf:context name="externalId"
                        select="xxf:instance('view-parameters-instance')/externalId"/>
                </xf:dispatch>

                <xf:dispatch name="load-cityEHR-page" target="pageNavigation-model">
                    <xxf:context name="page" select="'cityEHRBackUpDatabaseFromManifest'"/>
                </xf:dispatch>

            </xf:action>




            <!-- Application defined action to reindex the current database node.
                 Can only be used when adminTask is browsePhysicalDatabases
                 Invoked after user has confirmed in reindexDatabase confirmation dialog
                 The current node (in browsePhysicalDatabases) must be a collection -->
            <xf:action ev:event="reindex-database">
                <!-- Check that current task is browsePhysicalDatabases -->
                <xf:action
                    if="xxf:instance('control-instance')/adminTask/adminTask='browsePhysicalDatabases'">
                    <!-- Use the physicalClusterNode and current node when browsing the physical database -->
                    <xxf:variable name="physicalClusterNode"
                        select="xxf:instance('control-instance')/managedDatabase/physicalClusterNode"/>
                    <xxf:variable name="node"
                        select="xxf:instance('control-instance')/browsePhysicalDatabases/node"/>

                    <!-- Only reindex if node is a collection -->
                    <xf:action if="$node/@type='collection' and $node/@path!=''">

                        <!-- Invoke reindex-database action from databaseAccessLayer -->
                        <xf:dispatch name="reindex-database" target="databaseAccessLayer-model">
                            <xxf:context name="system"
                                select="xxf:instance('control-instance')/managedDatabase/system"/>
                            <xxf:context name="collectionLocation" select="$node/@path"/>
                            <xxf:context name="physicalClusterNode" select="$physicalClusterNode"/>
                            <xxf:context name="status"
                                select="xxf:instance('control-instance')/managedDatabase/status"/>
                        </xf:dispatch>

                        <!-- Display warning if there was an error -->
                        <xf:action if="xxf:instance('control-instance')/managedDatabase/status!=''">
                            <xf:setvalue ref="xxf:instance('view-parameters-instance')/systemError"
                                value="concat(xxf:instance('view-parameters-instance')/systemErrorList/systemError[@type='errorReindexingDatabase'],xxf:instance('control-instance')/managedDatabase/status)"/>
                            <xf:dispatch name="confirm-action" target="pageNavigation-model">
                                <xxf:context name="action" select="'errorReindexingDatabase'"/>
                                <xxf:context name="messageSet"
                                    select="xxf:instance('control-instance')/managedDatabase/status"
                                />
                            </xf:dispatch>
                        </xf:action>
                    </xf:action>
                </xf:action>
            </xf:action>


            <!-- ===
                Purge Patient Records 
                purgeRecords
                === -->
            <!-- Get list of patient to purge -->
            <xf:instance id="purgePatientList-instance">
                <exist:result>Will get replaced by the list of patients</exist:result>
            </xf:instance>
            <!-- Load the queries from file -->
            <xf:instance id="purgePatientListXQuery-instance"
                src="oxf:/apps/ehr/xquery/purgePatientListXQuery.xml"/>

            <!-- Submission to get list of collections that are children of the current collection -->
            <xf:submission id="purgePatientList-submission"
                ref="xxf:instance('purgePatientListXQuery-instance')"
                action="{xxf:instance('view-parameters-instance')/applicationDatabaseLocation}/records"
                method="post" replace="instance" instance="purgePatientList-instance">
                <xf:action ev:event="xforms-submit-done">
                    <!-- TBD -->
                </xf:action>
                <xf:action ev:event="xforms-submit-error">
                    <!-- TBD -->
                </xf:action>
            </xf:submission>

            <!-- Application defined action to get list of patients to purge === -->
            <xf:action ev:event="getPatientPurgeList">
                <xf:send submission="purgePatientList-submission" target="main-model"/>
            </xf:action>

            <!-- Application defined action to purge patients from xmlstore === -->
            <xf:action ev:event="purgePatients">
                <xf:action xxf:iterate="xxf:instance('purgePatientList-instance')/patient">
                    <xxf:variable name="patientId" select="data(.)"/>
                    <xf:action if="$patientId != ''">
                        <xf:setvalue ref="xxf:instance('control-instance')/storageObject"
                            value="concat(xxf:instance('view-parameters-instance')/applicationDatabaseLocation,'/records/',$patientId)"/>
                        <xf:send submission="delete-resource-submission"/>
                    </xf:action>
                </xf:action>
                <!-- Finally re-run the purgePatientList submission to refrsh the list of patients to purge (should now be empty) -->
                <xf:send submission="purgePatientList-submission" target="main-model"/>
            </xf:action>

            <!-- Application defined action to purge a patient from the xmlstore.
                 Increments the counter of patients and then removes the designated patient from the list.
                 Then 'presses' the button to step onto the next patient === -->
            <xf:action ev:event="purgeSinglePatient">
                <!-- Simulate pressing the button again. -->
                <xxf:script>document.getElementById("purgePatients-step").click();</xxf:script>
            </xf:action>


            <!-- ===
                Manage system parameters
                manageSystemParameters
                === -->
            <!-- Actions are in systemParametersModel.xml -->


            <!-- ===
                Manage application paramters (as stored in application-parameters for each application)
                manageApplicationParameters
                
                Parameters are loaded to working-application-parameters-instance (the current session is using application-parameters-instance)
                Parameters can be displayed for any application and edited for the current application.
                === -->

            <!-- Application defined action to set the managed application parameters.
                 Calls queries to get the counts of users, specialties, information models records and compositions for the application.
                 Does not set any of the lists (userList, specialtyList, etc) -->
            <xf:action ev:event="set-manageApplicationParameters">
                <xxf:variable name="applicationIRI"
                    select="xxf:instance('control-instance')/manageApplicationParameters/applicationIRI"/>
                <xxf:variable name="applicationId"
                    select="replace(substring($applicationIRI,2),':','-')"/>

                <!-- Load the application parameters for the selected application - held in working-application-parameters-instance. -->
                <xf:dispatch name="load-working-application-parameters"
                    target="configurationManagement-model">
                    <xxf:context name="applicationIRI" select="$applicationIRI"/>
                    <xxf:context name="status"
                        select="xxf:instance('control-instance')/managedApplication/applicationParametersStatus"
                    />
                </xf:dispatch>

                <!-- If this is the managed application, then load the language pack -->
                <xf:action
                    if="$applicationIRI = xxf:instance('control-instance')/managedApplication/applicationIRI">
                    <xf:dispatch name="load-parametersLanguagePack" target="main-model">
                        <xxf:context name="adminTask" select="'manageApplicationParameters'"/>
                    </xf:dispatch>
                </xf:action>

                <!-- User count -->
                <xxf:variable name="userResourceFilter"
                    select="concat('[applications/iso-13606:EHR_Extract/@id=''',$applicationIRI,''']')"/>
                <xf:dispatch name="resource-count" target="databaseAccessLayer-model">
                    <xxf:context name="system" select="'ehr'"/>
                    <xxf:context name="resourceLocation" select="'/xmlstore/users'"/>
                    <xxf:context name="resourceFilter" select="$userResourceFilter"/>
                    <xxf:context name="count"
                        select="xxf:instance('control-instance')/manageApplicationParameters/userCount"
                    />
                </xf:dispatch>

                <xxf:variable name="informationModelLocation"
                    select="concat('/xmlstore/applications/',$applicationId,'/informationModel')"/>

                <!-- Specialty count -->
                <xf:dispatch name="collection-count" target="databaseAccessLayer-model">
                    <xxf:context name="system" select="'ehr'"/>
                    <xxf:context name="collectionLocation" select="$informationModelLocation"/>
                    <xxf:context name="count"
                        select="xxf:instance('control-instance')/manageApplicationParameters/specialtyCount"
                    />
                </xf:dispatch>

                <!-- Information model count -->
                <xf:dispatch name="resource-count" target="databaseAccessLayer-model">
                    <xxf:context name="system" select="'ehr'"/>
                    <xxf:context name="resourceLocation" select="$informationModelLocation"/>
                    <xxf:context name="resourceFilter" select="''"/>
                    <xxf:context name="count"
                        select="xxf:instance('control-instance')/manageApplicationParameters/informationModelCount"
                    />
                </xf:dispatch>

                <xxf:variable name="recordsLocation"
                    select="concat('/xmlstore/applications/',$applicationId,'/records')"/>

                <!-- Patient record count -->
                <xf:dispatch name="collection-count" target="databaseAccessLayer-model">
                    <xxf:context name="system" select="'ehr'"/>
                    <xxf:context name="collectionLocation" select="$recordsLocation"/>
                    <xxf:context name="count"
                        select="xxf:instance('control-instance')/manageApplicationParameters/recordCount"
                    />
                </xf:dispatch>

                <!-- Composition count -->
                <xf:dispatch name="resource-count" target="databaseAccessLayer-model">
                    <xxf:context name="system" select="'ehr'"/>
                    <xxf:context name="resourceLocation" select="$recordsLocation"/>
                    <xxf:context name="resourceFilter" select="''"/>
                    <xxf:context name="count"
                        select="xxf:instance('control-instance')/manageApplicationParameters/compositionCount"
                    />
                </xf:dispatch>

                <!-- Selection and status for editing -->
                <xf:setvalue ref="xxf:instance('control-instance')/managedParameters/edit"
                    value="false()"/>
                <xf:setvalue ref="xxf:instance('control-instance')/managedParameters/editType"
                    value="''"/>
            </xf:action>


            <!-- ===
                Manage language packs for system and application parameters
                    manageSystemParameters
                    manageApplicationParameters         
                ============================================================ -->

            <!-- Language variant for the parameters instance -->
            <xf:instance id="variant-parameters-instance">
                <parameters/>
            </xf:instance>

            <!-- Language pack for the managed parameters -->
            <xf:instance id="parameterslanguagePack-instance">
                <languagePack/>
            </xf:instance>

            <!-- Application defined action to load the language pack for the managed parameters.
                 There is only one language pack, containing all supported languages.
                 Loaded to parameterslanguagePack-instance -->
            <xf:action ev:event="load-parametersLanguagePack">
                <xxf:variable name="adminTask" select="event('adminTask')"/>

                <xxf:variable name="applicationId"
                    select="xxf:instance('control-instance')/managedApplication/applicationId"/>
                <xxf:variable name="baseLanguageCode"
                    select="xxf:instance('control-instance')/managedParameters/baseLanguage/@code"/>
                <xxf:variable name="languageCode"
                    select="xxf:instance('control-instance')/managedParameters/language/@code"/>

                <!-- Set the language pack location in the database.
                     Depends on the adminTask - manageSystemParameters or manageApplicationParameters -->
                <xxf:variable name="languagePackLocation"
                    select="if ($adminTask='manageSystemParameters') then '/xmlstore/system/languagePack/system-parameters' else if ($adminTask='manageApplicationParameters') then concat('/xmlstore/applications/',$applicationId,'/languagePack/application-parameters') else ''"/>

                <!-- Check whether languagePack exists -->
                <xf:dispatch name="resource-exists" target="databaseAccessLayer-model">
                    <xxf:context name="system" select="'ehr'"/>
                    <xxf:context name="storageLocation" select="$languagePackLocation"/>
                    <xxf:context name="result"
                        select="xxf:instance('control-instance')/managedParameters/languagePackExists"
                    />
                </xf:dispatch>

                <!-- languagePack exists - load from the database and update for the selected language.
                     This is done each time, since its quite quick and the language pack may have been edited in the base language (?) -->
                <xf:action
                    if="xxf:instance('control-instance')/managedParameters/languagePackExists='true'">
                    <!-- Read language pack from the database -->
                    <xf:dispatch name="dal-read" target="databaseAccessLayer-model">
                        <xxf:context name="system" select="'ehr'"/>
                        <xxf:context name="storageLocation" select="$languagePackLocation"/>
                        <xxf:context name="resource"
                            select="xxf:instance('parameterslanguagePack-instance')"/>
                        <xxf:context name="status"
                            select="xxf:instance('managedParameters-instance')/status"/>
                    </xf:dispatch>

                    <!-- Update for the current language -->
                    <xf:dispatch name="update-parametersLanguagePack"
                        target="manageParameters-model">
                        <xxf:context name="baseLanguageCode" select="$baseLanguageCode"/>
                        <xxf:context name="languageCode" select="$languageCode"/>
                        <xxf:context name="languagePack-instance"
                            select="xxf:instance('parameterslanguagePack-instance')"/>
                        <xxf:context name="status"
                            select="xxf:instance('control-instance')/managedParameters/status"/>
                    </xf:dispatch>

                    <!-- Generate the unused language pack term literals -->

                </xf:action>

                <!-- No language pack exists - generate it.
                     Note that this is only to be used temporarily - 
                     The language pack should be created when the original parameters were first saved to the database -->
                <xf:action
                    if="not(xxf:instance('control-instance')/managedParameters/languagePackExists='true')">

                    <!-- Generate language pack -->
                    <xf:dispatch name="generate-parametersLanguagePack"
                        target="manageParameters-model">
                        <xxf:context name="parameters-instance"
                            select="xxf:instance('managed-parameters-instance')"/>
                        <xxf:context name="baseLanguageCode" select="$baseLanguageCode"/>
                        <xxf:context name="languagePack-instance"
                            select="xxf:instance('parameterslanguagePack-instance')"/>
                        <xxf:context name="status"
                            select="xxf:instance('control-instance')/managedParameters/status"/>
                    </xf:dispatch>

                    <!-- Save the language pack -->
                    <!-- Write language pack to the database -->
                    <xf:dispatch name="dal-write" target="databaseAccessLayer-model">
                        <xxf:context name="system" select="'ehr'"/>
                        <xxf:context name="storageLocation" select="$languagePackLocation"/>
                        <xxf:context name="resource"
                            select="xxf:instance('parameterslanguagePack-instance')"/>
                        <xxf:context name="status"
                            select="xxf:instance('control-instance')/managedParameters/status"/>
                    </xf:dispatch>
                </xf:action>

                <!-- Reset the editStatus -->
                <xf:setvalue ref="xxf:instance('control-instance')/managedParameters/editStatus"
                    value="''"/>
            </xf:action>

            <!-- Application defined action to save the language pack for the managed parameters.
                 There is only one language pack, containing all supported languages/
                 Held in parameterslanguagePack-instance -->
            <xf:action ev:event="save-parametersLanguagePack">
                <xxf:variable name="adminTask" select="event('adminTask')"/>
                <xxf:variable name="applicationId"
                    select="xxf:instance('control-instance')/managedApplication/applicationId"/>

                <!-- Set the language pack location in the database.
                     Depends on the task - manageSystemParameters or manageApplicationParameters -->
                <xxf:variable name="languagePackLocation"
                    select="if ($adminTask='manageSystemParameters') then '/xmlstore/system/languagePack/system-parameters' else if ($adminTask='manageApplicationParameters') then concat('/xmlstore/applications/',$applicationId,'/languagePack/application-parameters') else ''"/>

                <!-- Write language pack to the database -->
                <xf:dispatch name="dal-write" target="databaseAccessLayer-model">
                    <xxf:context name="system" select="'ehr'"/>
                    <xxf:context name="storageLocation" select="$languagePackLocation"/>
                    <xxf:context name="resource"
                        select="xxf:instance('parameterslanguagePack-instance')"/>
                    <xxf:context name="status"
                        select="xxf:instance('control-instance')/managedParameters/status"/>
                </xf:dispatch>

                <!-- Reset the editStatus -->
                <xf:setvalue ref="xxf:instance('control-instance')/managedParameters/editStatus"
                    value="''"/>
            </xf:action>


            <!-- Application defined action to export the language pack for the managed parameters.
                 There is only one language pack, containing all supported languages.
                 the transformationXSL has been set for the exportFormat -->
            <xf:action ev:event="export-parametersLanguagePack">
                <xf:message
                    ref="xxf:instance('control-instance')/managedLanguagePack/transformationXSL"/>
                <xf:dispatch name="export-xmlCache" target="pageNavigation-model">
                    <xxf:context name="export-instance"
                        select="xxf:instance('parameterslanguagePack-instance')"/>
                    <xxf:context name="exportName" select="'parametersLanguagePack'"/>
                    <xxf:context name="exportType" select="'xml'"/>
                    <xxf:context name="transformationXSL"
                        select="xxf:instance('control-instance')/managedLanguagePack/transformationXSL"
                    />
                </xf:dispatch>
            </xf:action>


            <!-- Application defined action to apply the language pack for the managed parameters.
                 There is only one language pack, containing all supported languages.
                 The language pack is applied to generate the parameters for the specified language -->
            <xf:action ev:event="apply-parametersLanguagePack">
                <xxf:variable name="adminTask" select="event('adminTask')"/>
                <xxf:variable name="applicationId"
                    select="xxf:instance('control-instance')/managedApplication/applicationId"/>

                <xxf:variable name="baseLanguageCode"
                    select=" xxf:instance('control-instance')/managedParameters/baseLanguage/@code"/>
                <xxf:variable name="languageCode"
                    select="xxf:instance('control-instance')/managedParameters/language/@code"/>

                <!-- Save the language pack, if necessary -->
                <xf:action if="xxf:instance('control-instance')/managedParameters/editStatus!=''">
                    <xf:dispatch name="save-parametersLanguagePack" target="main-model">
                        <xxf:context name="adminTask"
                            select="xxf:instance('control-instance')/adminTask/adminTask"/>
                    </xf:dispatch>
                </xf:action>

                <!-- Apply language pack -->
                <xf:dispatch name="apply-parametersLanguagePack" target="manageParameters-model">
                    <xxf:context name="parameters-instance"
                        select="xxf:instance('managed-parameters-instance')"/>
                    <xxf:context name="baseLanguageCode" select="$baseLanguageCode"/>
                    <xxf:context name="languageCode" select="$languageCode"/>
                    <xxf:context name="languagePack-instance"
                        select="xxf:instance('parameterslanguagePack-instance')"/>
                    <xxf:context name="variant-parameters-instance"
                        select="xxf:instance('variant-parameters-instance')"/>
                    <xxf:context name="status"
                        select="xxf:instance('control-instance')/managedParameters/status"/>
                </xf:dispatch>

                <!-- Save the variant-parameters-instance -->
                <xxf:variable name="variantParametersLocation"
                    select="if ($adminTask='manageSystemParameters') then concat('/xmlstore/system/variants/',$languageCode,'/system-parameters') else if ($adminTask='manageApplicationParameters') then concat('/xmlstore/applications/',$applicationId,'/variants/',$languageCode,'/systemConfiguration/application-parameters') else ''"/>

                <xf:dispatch name="dal-write" target="databaseAccessLayer-model">
                    <xxf:context name="system" select="'ehr'"/>
                    <xxf:context name="storageLocation" select="$variantParametersLocation"/>
                    <xxf:context name="resource"
                        select="xxf:instance('variant-parameters-instance')"/>
                    <xxf:context name="status"
                        select="xxf:instance('control-instance')/managedParameters/status"/>
                </xf:dispatch>
            </xf:action>



            <!-- ===
                Wizard to create new application
                newApplicationWizard
                === -->

            <!-- Application defined action to reset the wizard. -->
            <xf:action ev:event="reset-newApplicationWizard">
                <!-- Get the list of shipped applications.
                         The list is created in shippedApplicationList-instance -->
                <xf:dispatch name="get-shippedApplicationList" target="application-model"/>

                <!-- Clear the processExecution controls -->
                <xf:dispatch name="clear-processExecutionParameters" target="process-model"/>

                <!-- Clear the application Id -->
                <xf:setvalue
                    ref="xxf:instance('control-instance')/newApplicationWizard/applicationIdBase"
                    value="''"/>

                <!-- Clear the application IRI -->
                <xf:setvalue
                    ref="xxf:instance('control-instance')/newApplicationWizard/applicationIRI"
                    value="''"/>

                <!-- Reset the status -->
                <xf:setvalue ref="xxf:instance('control-instance')/newApplicationWizard/status"
                    value="'waiting'"/>
            </xf:action>


            <!-- Application defined action to check the Id for a new application.
                 The Id is entered by the user:
                    If the Id already exists for an application, then set status to 'applicationExists'.
                    If the Id doesn't already exist, load the application configuration.
                    This either loads the default configuration or if a configuration for the application was shipped with the cityEHR installation then that is loaded
            -->
            <xf:action ev:event="check-applicationId">
                <xxf:variable name="applicationIdBase"
                    select="xxf:instance('control-instance')/newApplicationWizard/applicationIdBase"/>
                <xxf:variable name="applicationIRI"
                    select="concat('#ISO-13606:EHR_Extract:',$applicationIdBase)"/>
                <xxf:variable name="applicationId"
                    select="replace(substring($applicationIRI,2),':','-')"/>

                <!-- Set applicationIRI in control instance -->
                <xf:setvalue
                    ref="xxf:instance('control-instance')/newApplicationWizard/applicationIRI"
                    value="$applicationIRI"/>

                <!-- Application already exists -->
                <xf:action
                    if="$applicationIRI=xxf:instance('applicationList-instance')/iso-13606:EHR_Extract/@id">
                    <xf:setvalue ref="xxf:instance('control-instance')/newApplicationWizard/status"
                        value="'applicationExists'"/>
                </xf:action>

                <!-- Application doesn't already exist.
                     Load configuration to working-application-parameters-instance.
                     Set applicationIRI (id) and displayName
                     If a configuration was found on disk (i.e. shipped with this cityEHR installation) then these are loaded, otherwise use the default -->
                <xf:action
                    if="not($applicationIRI=xxf:instance('applicationList-instance')/iso-13606:EHR_Extract/@id)">
                    <!-- Load configuration to working-application-parameters-instance,
                         As part of this action, if applications parameters are found on disk for the application
                         they will have been used to create working-application-configuration-instance -->
                    <xf:dispatch name="load-working-application-parameters"
                        target="configurationManagement-model">
                        <xxf:context name="applicationIRI" select="$applicationIRI"/>
                        <xxf:context name="status"
                            select="xxf:instance('control-instance')/newApplicationWizard/status"/>
                    </xf:dispatch>

                    <!-- If the parameters were loaded, then set up for editing in managed-parameters-instance -->
                    <xf:action
                        if="xxf:instance('control-instance')/newApplicationWizard/status='application-parameters-built'">
                        <!-- Set to edit the working application parameters.
                             Note that the editMode for set-managed-parameters is newApp or '' (blank) -->
                        <xf:dispatch name="set-managed-parameters" target="manageParameters-model">
                            <xxf:context name="parameters-instance"
                                select="xxf:instance('working-application-parameters-instance')"/>
                            <xxf:context name="editMode" select="'newApp'"/>
                        </xf:dispatch>
                    </xf:action>
                </xf:action>

            </xf:action>


            <!-- Application defined action to create a new application.
                 Set the status
                 Transfer managed-parameters (that have been edited by the user) to working-application-parameters
                 Invoke create-applicaion in appliction-model
                 which sets up and runs the create-application process as defined in view-parameters. -->
            <xf:action ev:event="create-application">
                <!-- Reset the status -->
                <xf:setvalue ref="xxf:instance('control-instance')/newApplicationWizard/status"
                    value="'creating-application'"/>

                <!-- Transfer managed-parameters -->
                <xf:insert nodeset="xxf:instance('working-application-parameters-instance')"
                    origin="xxf:instance('managed-parameters-instance')"/>

                <!-- Set up and invoke create-application process -->
                <xf:dispatch name="create-application" target="application-model">
                    <xxf:context name="applicationIRI"
                        select="xxf:instance('control-instance')/newApplicationWizard/applicationIRI"/>
                    <xxf:context name="completionActionModel" select="'main-model'"/>
                    <xxf:context name="completionActionName" select="'completed-create-application'"
                    />
                </xf:dispatch>

            </xf:action>

            <!-- Application defined action invoked when proecss to create a new application has completed -->
            <xf:action ev:event="completed-create-application">
                <!-- Reset the status -->
                <xf:setvalue ref="xxf:instance('control-instance')/newApplicationWizard/status"
                    value="'completed-create-application'"/>
            </xf:action>


            <!-- Application defined action to run the wizard.
                 Set first step, if needed.
                 Perform current step.
                 Set next step, if there is one.
                 If there is a next step, click newApplicationWizard-step
                 This triggers xforms-value-changed in hidden input to run-newApplicationWizard again -->
            <xf:action ev:event="run-newApplicationWizard">
                <!-- Set the first step, if the current step doesn't exisst -->
                <xf:action
                    if="not(exists(xxf:instance('control-instance')/newApplicationWizard/step))">
                    <!-- Get the first step for the wizard -->
                    <xxf:variable name="firstStep"
                        select="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/newApplicationWizard/wizardSteps/step[1]"/>
                    <xf:insert context="xxf:instance('control-instance')/newApplicationWizard"
                        origin="$firstStep"/>
                </xf:action>

                <!-- Get current step -->
                <xxf:variable name="currentStep"
                    select="xxf:instance('control-instance')/newApplicationWizard/step"/>

                <!-- Only continue if current step exists (it should) -->
                <xf:action if="exists($currentStep)">

                    <!-- Perform the action -->
                    <xf:dispatch name="{$currentStep/@action}" target="main-model"/>

                    <!-- Record completion of current step -->
                    <xf:insert
                        context="xxf:instance('control-instance')/newApplicationWizard/completedSteps"
                        nodeset="step" origin="$currentStep" at="last()" position="after"/>

                    <!-- Set next step -->
                    <xxf:variable name="nextStep"
                        select="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/newApplicationWizard/wizardSteps/step[@action=$currentStep/@action]/following-sibling::step[1]"/>

                    <!-- There is no next step - wizard is done -->
                    <xf:action if="not (exists($nextStep))">
                        <xf:setvalue
                            ref="xxf:instance('control-instance')/newApplicationWizard/status"
                            value="'complete'"/>
                    </xf:action>

                    <!-- Next step exists - run it -->
                    <xf:action if="exists($nextStep)">
                        <!-- Set next step as current -->
                        <xf:delete
                            nodeset="xxf:instance('control-instance')/newApplicationWizard/step"/>
                        <xf:insert context="xxf:instance('control-instance')/newApplicationWizard"
                            origin="$nextStep"/>

                        <!-- Simulate pressing the button again. -->
                        <xxf:script>document.getElementById("newApplicationWizard-step").click();</xxf:script>
                    </xf:action>
                </xf:action>
            </xf:action>


            <!-- Application defined action to store application-parameters
                 -->
            <xf:action ev:event="newAppWizard-storeConfiguration">
                <xf:dispatch name="store-application-configuration"
                    target="configurationManagement-model"/>
            </xf:action>


            <!-- Application defined action to copy (import) media in default configuration
                -->
            <xf:action ev:event="newAppWizard-copyMedia">
                <!-- Save images specified in the configuration file -->
                <xf:dispatch name="save-application-images" target="configurationManagement-model"/>

                <xf:setvalue
                    ref="xxf:instance('control-instance')/newApplicationWizard/step/@displayName"
                    value="concat(.,xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/newApplicationWizard/wizardSteps/@notSupported)"
                />
            </xf:action>

            <!-- Application defined action to import information model
                 -->
            <xf:action ev:event="newAppWizard-importInformationModel">
                <xf:setvalue
                    ref="xxf:instance('control-instance')/newApplicationWizard/step/@displayName"
                    value="concat(.,xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/newApplicationWizard/wizardSteps/@notSupported)"
                />
            </xf:action>

            <!-- Application defined action to set user permission.
                 Set the new application in the profile of the current user,
                 And then save it.
                 -->
            <xf:action ev:event="newAppWizard-setUserPermissions">
                <!-- Load managedUser - this is the same as the current user in user-instance -->
                <xf:dispatch name="get-current-user" target="main-model"/>
                <xf:dispatch name="load-managed-user" target="main-model"/>

                <!-- Set the new application for the current user.
                    But only if it isn't already on the list (Very unlikely, but could happen if an application was removed) -->
                <xxf:variable name="applicationIRI"
                    select="xxf:instance('control-instance')/newApplicationWizard/applicationIRI"/>

                <xf:action
                    if="not(xxf:instance('managedUser-instance')/applications/iso-13606:EHR_Extract/@id=$applicationIRI)">
                    <xf:insert
                        nodeset="xxf:instance('managedUser-instance')/applications/iso-13606:EHR_Extract"
                        at="last()" position="after"/>
                    <xf:setvalue
                        ref="xxf:instance('managedUser-instance')/applications/iso-13606:EHR_Extract[last()]/@id"
                        value="$applicationIRI"/>

                    <!-- Save the (managed) user -->
                    <xf:send submission="save-managedUser-details-submission" target="main-model"/>
                </xf:action>

            </xf:action>


            <!-- ===
                Manage Patient Records
                Merge, Unmerge, Archive, Unarchive
                manageRecords
                
                Actions are invoked when user selects or inputs:
                
                adminTask='manageRecords' (set-adminTask)
                manageRecords/operation
                manageRecords/subOperation
                manageRecords/source/patientId
                manageRecords/target/patientId
                manageRecords/target/source
                
                retrieve-record invoked when user sets patientId for source or target or selects a merge event for unmerge
                verify-records invoked from retrieve-record and ahen user selects a composition or the subOperation.
                reset-record invoked from set-adminTask, retrieve-record or when user enters new sourceId, operation or suboperation
                    - clears the source or target records in manageRecords
                
                === -->

            <!-- Query to get list of compositions for a patient.
                 Also used in compositionMainModel (redefined there - could refactor?) -->
            <xf:instance id="patientCompositionsListXQuery-instance"
                src="oxf:/apps/ehr/xquery/patientCompositionsListXQuery.xml"/>
            <xf:instance id="cda-query-instance">
                <exist:query start="1" max="-1">
                    <exist:text/>
                </exist:query>
            </xf:instance>
            <!-- List of compositions for a patient - also used for fixCompositions -->
            <xf:instance id="patientCompositionsList-instance">
                <patientCompositions/>
            </xf:instance>
            <!-- List of compositions for the source record (used for unmerge, fixComposition) -->
            <xf:instance id="sourceCompositionsList-instance">
                <patientCompositions/>
            </xf:instance>
            <!-- List of compositions for the target record (used for unmerge) -->
            <xf:instance id="targetCompositionsList-instance">
                <patientCompositions/>
            </xf:instance>

            <!-- Bindings so that compsoitions can be selected with checkbox -->
            <xf:bind nodeset="xxf:instance('patientCompositionsList-instance')/composition/selected"
                type="xs:boolean"/>
            <xf:bind nodeset="xxf:instance('sourceCompositionsList-instance')/composition/selected"
                type="xs:boolean"/>
            <xf:bind nodeset="xxf:instance('targetCompositionsList-instance')/composition/selected"
                type="xs:boolean"/>

            <!-- Submission to get list of compositions at the specified storageObject location -->
            <xf:submission id="patientCompositions-submission"
                ref="xxf:instance('cda-query-instance')"
                action="{xxf:instance('control-instance')/storageObject}" method="post"
                replace="instance" instance="patientCompositionsList-instance">
                <xf:action ev:event="xforms-submit-done">
                    <!-- Clear system error on success (allows for retry if this fails, which it does sometimes, for some reason -->
                    <xf:setvalue ref="xxf:instance('control-instance')/manageRecords/status"
                        value="'waiting'"/>
                    <xf:setvalue ref="xxf:instance('view-parameters-instance')/systemError"
                        value="''"/>
                </xf:action>
                <xf:action ev:event="xforms-submit-error">
                    <!-- Set status to record error -->
                    <xf:setvalue ref="xxf:instance('control-instance')/manageRecords/status"
                        value="'error'"/>
                    <xf:setvalue ref="xxf:instance('view-parameters-instance')/systemError"
                        value="xxf:instance('view-parameters-instance')/systemErrorList/systemError[@type='failedpatientCompositionsSubmission']"
                    />
                </xf:action>
            </xf:submission>

            <!-- Application defined action to get the list of compositions for the specified patientId.
                 The list is put in patientCompositionsList-instance
                 informationType is either 'records', 'data' or archive -->
            <xf:action ev:event="get-compositionList">
                <xxf:variable name="patientId" select="event('patientId')"/>
                <xxf:variable name="informationType" select="event('informationType')"/>
                <xxf:variable name="source" select="event('source')"/>

                <xxf:variable name="patientRecordLocation"
                    select="concat(xxf:instance('view-parameters-instance')/applicationDatabaseLocation,'/',$informationType,'/',$patientId)"/>
                <!-- Get the set of compositions for the patient.
                     Make sure whereClause is blank so that all compositions are found -->
                <xf:setvalue ref="xxf:instance('control-instance')/storageObject"
                    value="$patientRecordLocation"/>
                <xf:setvalue
                    ref="xxf:instance('patientCompositionsListXQuery-instance')/whereClause"
                    value="''"/>

                <!-- Restrict to source, if specified (used during the unmerge or unarchive processes) -->
                <xf:setvalue
                    ref="xxf:instance('patientCompositionsListXQuery-instance')/whereClause"
                    value="if ($source='') then '' else concat('[descendant::cda:serviceEvent/cda:id/@extension=''',$source,''']')"/>

                <xf:setvalue ref="xxf:instance('cda-query-instance')/exist:text"
                    value="xxf:instance('patientCompositionsListXQuery-instance')"/>

                <xf:send submission="patientCompositions-submission" target="main-model"/>
            </xf:action>

            <!-- Submission to load the manageRecords template into manageRecords-template-instance.
                 Uses the same template for all manageRecords operations.
                 Once the template is loaded, set
                    CDA Header
                    serviceEvent
                    cda:entry that records the operation
                 The serviceEvent in manageRecords-template-instance is inserted into every composition touched by the operation.    
                 When the operation has been completed the manageRecords-template-instance is stored in the record:
                    For merge, unmerge, unarchive it is stored in the target record
                    For archive it is stored in the source record
                 -->
            <xf:instance id="manageRecords-template-instance">
                <cda:ClinicalDocument xmlns="urn:hl7-org:v3">
                    <!-- Template content loaded from templates/manageRecordsCDA.xml -->
                </cda:ClinicalDocument>
            </xf:instance>
            <xf:submission id="load-manageRecordsTemplate-submission"
                resource="{xxf:instance('view-parameters-instance')/staticFileURL}/templates/manageRecordsCDA.xml"
                method="get" replace="instance" instance="manageRecords-template-instance"
                serialization="none">
                <!-- Set the CDA Header, based on the manageRecords operation.
                     Note that patient demographics in the header are set when the template is transfered to import-instance, prior to storing
                     And entry with details of the managerecords operation -->
                <xf:action ev:event="xforms-submit-done">
                    <xxf:variable name="operation"
                        select="xxf:instance('control-instance')/manageRecords/operation"/>
                    <xxf:variable name="sourceId"
                        select="xxf:instance('control-instance')/manageRecords/source/patientId"/>
                    <xxf:variable name="targetId"
                        select="xxf:instance('control-instance')/manageRecords/target/patientId"/>

                    <!-- Get system composition for the current operation -->
                    <xxf:variable name="systemComposition"
                        select="xxf:instance('view-parameters-instance')/systemCompositions/composition[@operation = $operation]"/>

                    <!-- Set composition type -->
                    <xf:setvalue
                        ref="xxf:instance('manageRecords-template-instance')/cda:typeId/@extension"
                        value="$systemComposition/@compositionIRI"/>
                    <xxf:variable name="compositionTypeRootIRI"
                        select="xxf:instance('manageRecords-template-instance')/cda:typeId/@root"/>
                    <xxf:variable name="compositionTypeRootId"
                        select="replace(replace($compositionTypeRootIRI,':','-'),'#','')"/>

                    <!-- Set composition displayName -->
                    <xf:setvalue
                        ref="xxf:instance('manageRecords-template-instance')/cda:code/@displayName"
                        value="$systemComposition/@displayName"/>

                    <!-- Set effectiveTime .
                         The manageRecords/effectiveTime was set when the user triggered the manageRecords operstion. -->
                    <xxf:variable name="effectiveTime"
                        select="xxf:instance('control-instance')/manageRecords/effectiveTime"/>
                    <xf:setvalue
                        ref="xxf:instance('manageRecords-template-instance')/cda:effectiveTime/@value"
                        value="$effectiveTime"/>

                    <!-- Set the timeStamp and compositionId -->
                    <xxf:variable name="timeStamp"
                        select="replace(replace(string($effectiveTime),':','-'),'\+','*')"/>
                    <xxf:variable name="compositionId"
                        select="concat($timeStamp,xxf:instance('view-parameters-instance')/idSeparator,$compositionTypeRootId,xxf:instance('view-parameters-instance')/idSeparator,xxf:instance('view-parameters-instance')/userId)"/>
                    <xf:setvalue
                        ref="xxf:instance('manageRecords-template-instance')/cda:id/@extension"
                        value="$compositionId"/>

                    <!-- Set author details -->
                    <xf:dispatch name="set-author-details" target="main-model">
                        <xxf:context name="composition"
                            select="xxf:instance('manageRecords-template-instance')"/>
                    </xf:dispatch>

                    <!-- Set details of the serviceEvent.
                         Records:
                         target                          cda:typeId/@root
                         operation type (IRI)            cda:typeId/@extension
                         operation                       cda:code/@code
                         operation displayName           cda:code/@displayName
                         effectiveTime                   cda:effectiveTime/@value
                         source                          cda:id/@root
                         compositionId (of the event)    cda:id/@extension
.
                         This is then inserted into every composition touched by the operation, 
                         to record its association with the manageRecords event. -->
                    <xxf:variable name="templateServiceEvent"
                        select="xxf:instance('manageRecords-template-instance')/descendant::cda:serviceEvent[1]"/>
                    <xf:setvalue ref="$templateServiceEvent/cda:typeId/@root" value="$targetId"/>
                    <xf:setvalue ref="$templateServiceEvent/cda:typeId/@extension"
                        value="$systemComposition/@compositionIRI"/>

                    <xf:setvalue ref="$templateServiceEvent/cda:code/@code" value="$operation"/>
                    <xf:setvalue ref="$templateServiceEvent/cda:code/@displayName"
                        value="if ($operation=('merge','unmerge')) then concat($systemComposition/@displayName,' ',$sourceId,' / ',$targetId) else concat($systemComposition/@displayName,' ',$sourceId)"/>

                    <xf:setvalue ref="$templateServiceEvent/cda:effectiveTime/@value"
                        value="$effectiveTime"/>
                    <xf:setvalue ref="$templateServiceEvent/cda:id/@root" value="$sourceId"/>
                    <xf:setvalue ref="$templateServiceEvent/cda:id/@extension"
                        value="$compositionId"/>


                    <!-- Set details of the manageRecords event in the cda:entry (should be the only cda:entry in the template) -->
                    <xxf:variable name="manageRecordsEntry"
                        select="xxf:instance('manageRecords-template-instance')//cda:entry[descendant::cda:id/@extension='#ISO-13606:Entry:CityEHR:ManageRecords']"/>
                    <xf:setvalue ref="$manageRecordsEntry/descendant::cda:id/@extension"
                        value="$systemComposition/@compositionIRI"/>
                    <xf:setvalue ref="$manageRecordsEntry/descendant::cda:code/@displayName"
                        value="$systemComposition/@displayName"/>
                    <xf:setvalue
                        ref="$manageRecordsEntry/descendant::cda:value[@extension='#ISO-13606:Element:CityEHR:Source']/@value"
                        value="xxf:instance('control-instance')/manageRecords/source/patientId"/>
                    <xf:setvalue
                        ref="$manageRecordsEntry/descendant::cda:value[@extension='#ISO-13606:Element:CityEHR:Target']/@value"
                        value="xxf:instance('control-instance')/manageRecords/target/patientId"/>
                    <xf:setvalue
                        ref="$manageRecordsEntry/descendant::cda:value[@extension='#ISO-13606:Element:CityEHR:EffectiveTime']/@value"
                        value="$effectiveTime"/>
                </xf:action>
                <xf:action ev:event="xforms-submit-error">
                    <!-- Set status to record error -->
                    <xf:setvalue ref="xxf:instance('control-instance')/manageRecords/status"
                        value="'error'"/>
                    <xf:setvalue ref="xxf:instance('view-parameters-instance')/systemError"
                        value="xxf:instance('view-parameters-instance')/systemErrorList/systemError[@type='failedLoadMergeTemplateSubmission']"
                    />
                </xf:action>
            </xf:submission>

            <!-- Get the latest cda:entry (used to get entry with the patientId) -->
            <xf:instance id="getLatestEntryXQuery-instance"
                src="oxf:/apps/ehr/xquery/getLatestEntryXQuery.xml"/>
            <xf:instance id="latestEntry-instance">
                <eventValues/>
            </xf:instance>

            <!-- Submission to get recorded values for a specified entry.
                 Entry is found in the records collection for the patient specified in 
                 Returns recorded entries with most recent first, or is empty if the entry has never been recorded -->
            <xf:submission id="getLatestEntry-submission" ref="xxf:instance('cda-query-instance')"
                action="{xxf:instance('control-instance')/storageObject}" method="post"
                replace="instance" instance="latestEntry-instance">
                <xf:action ev:event="xforms-submit-done">
                    <xf:setvalue ref="xxf:instance('control-instance')/status">success</xf:setvalue>
                </xf:action>
                <xf:action ev:event="xforms-submit-error">
                    <xf:setvalue ref="xxf:instance('control-instance')/status">failed</xf:setvalue>
                    <xf:setvalue ref="xxf:instance('view-parameters-instance')/systemError"
                        value="xxf:instance('view-parameters-instance')/systemErrorList/systemError[@type='failedGetLatestEntry']"
                    />
                </xf:action>
            </xf:submission>

            <!-- Application defined action to retrieve the patientId entry for the source.
                 Entries are returned in latestEntry-instance -->
            <xf:action ev:event="retrieve-entry">
                <xxf:variable name="patientId" select="event('patientId')"/>
                <xxf:variable name="informationType" select="event('informationType')"/>
                <xxf:variable name="entryIRI" select="event('entryIRI')"/>

                <!-- Set up query parameters -->
                <xf:setvalue ref="xxf:instance('getLatestEntryXQuery-instance')/entryIRI"
                    value="$entryIRI"/>
                <xf:setvalue ref="xxf:instance('getLatestEntryXQuery-instance')/evaluationContext"
                    value="''"/>
                <xf:setvalue ref="xxf:instance('cda-query-instance')/exist:text"
                    value="xxf:instance('getLatestEntryXQuery-instance')"/>
                <!-- Set up storageObject - uses source/patientId -->
                <xf:setvalue ref="xxf:instance('control-instance')/storageObject"
                    value="concat(xxf:instance('view-parameters-instance')/applicationDatabaseLocation,'/',$informationType,'/',$patientId)"/>
                <xf:send submission="getLatestEntry-submission"/>
            </xf:action>


            <!-- Application defined action to retrieve the patient demographics (source or target) from the xmlstore.
                 The record to set (source or target) is passed as $record
                 $record/patientId as aleady been set
                 The patientId to retrieve is passed as $patientId (same as $record/patientId except when retrieving target for unmerge
                 The source is the source when retrieving target for unmerge, otherwise blank
                 The informationType (records or archive) defines the location of the record for retrieval
                 Runs query to get the patient demographics.
                 Sets, or clears, the cdaHeader in $record
                 Loads compositions to sourceCompositionsList or targetCompositionsList.
                 Then sets the status as waiting | loaded | notFound
                 Then calls verify-records to check the overall status of the merge operation.
            
                 When invoked for merge, the $patientId (for source or target) has been entered by the user.
                 
                 When invoked for unmerge, to find the source
                    sourceCompositionsList is all the compositions in the source
                    selected compositions from this list are included in the unmerge
                 
                 When invoked for unmerge, to find the target
                    source/patientId and $patientId are the current id of the patient, 
                    target/patientId is the id of the original merged source
                    and source is the compositionIRI of the original source of the merge
                    targetCompositionsList is all compositions in the source that originated in the source of the merge 
                    
                 When invoked for archive, to find the target:
                    target/patientId is same as source/patientId
                
                Setting compositionList
                    For archive/unarchive source, compositions from the archive, but only if subOperation is composition.
                               
                 -->
            <xf:action ev:event="retrieve-record">
                <xxf:variable name="record" select="event('record')"/>
                <xxf:variable name="patientId" select="event('patientId')"/>
                <xxf:variable name="source" select="event('source')"/>

                <!-- Only if the $record/patientId is set.
                Can be called with blank id after serviceEvent is reset to blank in unmerge -->
                <xf:action if="$record/patientId !=''">

                    <xxf:variable name="recordType" select="$record/name()"/>
                    <xxf:variable name="operation"
                        select="xxf:instance('control-instance')/manageRecords/operation"/>

                    <xxf:variable name="sourceId"
                        select="xxf:instance('control-instance')/manageRecords/source/patientId"/>
                    <xxf:variable name="targetId"
                        select="xxf:instance('control-instance')/manageRecords/target/patientId"/>

                    <!-- informationType is 'records' except for retrieving:
                         target for archive
                         source for unarchive
                     -->
                    <xxf:variable name="informationType"
                        select="if (($operation='archive' and $recordType='target') or ($operation='unarchive' and $recordType='source')) then 'archive' else 'records'"/>

                    <!-- Reset status message -->
                    <xf:delete
                        nodeset="xxf:instance('control-instance')/statusMessage/entryList/entry"/>

                    <!-- Reset the record (source or target).
                     Sets the $record/status to its default
                     Don't want to reset the patientId, so pass $record/patientId
                     Or source, so pass $source -->
                    <xf:dispatch name="reset-record" target="main-model">
                        <xxf:context name="record" select="$record"/>
                        <xxf:context name="patientId" select="$record/patientId"/>
                        <xxf:context name="source" select="$source"/>
                    </xf:dispatch>

                    <!-- Check status before retrieving record -->
                    <xf:setvalue ref="$record/status"
                        value="if ($patientId = '') then 'invalid' else ."/>
                    <xf:setvalue ref="$record/status"
                        value="if ($operation='merge' and $sourceId = $targetId) then 'sameRecords' else ."/>

                    <!-- Only retrieve record if status has not been changed -->
                    <xf:action if="$record/status = $record/status/@default">
                        <!-- Run query to get patient demographics.
                         The results are put in patient-instance -->
                        <xf:dispatch name="get-patient-demographics"
                            target="patientDemographics-model">
                            <xxf:context name="patientId" select="$patientId"/>
                            <xxf:context name="source" select="$source"/>
                            <xxf:context name="informationType" select="$informationType"/>
                        </xf:dispatch>

                        <!-- Set the patient demographics for patient-instance.
                         The patientId is now the $record/patientId (which is different from %patientId when retrieving target for unmerge).
                         Note that set-patient-demographics checks that its $patientId parameter matches the patient id found in get-patient-demographics.
                         It will fail with a system error if there is no match, so only do this if some demographics were found -->
                        <xf:action if="exists(xxf:instance('patient-instance')/*)">
                            <xf:dispatch name="set-patient-demographics"
                                target="patientDemographics-model">
                                <xxf:context name="patientId" select="$record/patientId"/>
                            </xf:dispatch>
                        </xf:action>

                        <!-- Get the list of compositions in patientCompositionsList -->
                        <xf:dispatch name="get-compositionList" target="main-model">
                            <xxf:context name="patientId" select="$patientId"/>
                            <xxf:context name="informationType" select="$informationType"/>
                            <xxf:context name="source" select="$source"/>
                        </xf:dispatch>

                        <!-- Transfer to compositionsList for source or target -->
                        <xxf:variable name="compositionsList"
                            select="if ($recordType='source') then xxf:instance('sourceCompositionsList-instance') else xxf:instance('targetCompositionsList-instance')"/>
                        <xf:insert nodeset="$compositionsList"
                            origin="xxf:instance('patientCompositionsList-instance')"/>

                        <!-- If the record was loaded 
                             The patient id of the loaded record must match the id in the record passed (source or target)  -->
                        <xf:action
                            if="xxf:instance('patient-instance')/cdaheader/id = $record/patientId">
                            <!-- Set the cdaHeader for the record (source or target) -->
                            <xf:dispatch name="set-recordHeader" target="main-model">
                                <xxf:context name="record" select="$record"/>
                            </xf:dispatch>

                            <!-- Merge operation.
                                 Set the compositionCount to the number of compositions in the record. -->
                            <xf:action if="$operation='merge'">
                                <xf:setvalue ref="$record/compositionCount"
                                    value="count(xxf:instance('patientCompositionsList-instance')/*)"
                                />
                            </xf:action>

                            <!-- Unmerge operation, source.
                            If retrieving the source, set the list of merge points so that the user can select the unmerge point.
                            In this case the status is verified once the merge point has been set
                            If the source does not exist, then clear the composition list -->
                            <xf:action if="$operation='unmerge' and $recordType='source'">
                                <!-- Set the list of merge points.
                                 These are the serviceEvent elements for the merge compositions.
                                 Will be cleared if mergeCompositionList is empty -->
                                <xxf:variable name="mergeCompositionList"
                                    select="xxf:instance('patientCompositionsList-instance')/composition[code='#CityEHR:Merge']"/>
                                <xf:dispatch name="set-serviceEventList" target="main-model">
                                    <xxf:context name="compositionList"
                                        select="$mergeCompositionList"/>
                                </xf:dispatch>

                                <!-- Set the source merge event for the target.
                                 This triggers the value-changed event on target/source which invokes retrieve-record for the target.
                                  -->
                                <xxf:variable name="serviceEvent"
                                    select="xxf:instance('control-instance')/manageRecords/serviceEventList/cda:serviceEvent[1]"/>

                                <!-- If the merge points were found successfully, set the first in the list.
                                 Triggers the value-changed event on target/source -->
                                <xf:action if="exists($serviceEvent)">
                                    <!-- The source is the @extension on the serviceEvent for the merge. -->
                                    <xf:setvalue
                                        ref="xxf:instance('control-instance')/manageRecords/target/source"
                                        value="$serviceEvent/cda:id/@extension"/>
                                </xf:action>

                                <!-- If there are no merge points, then reset the target record -->
                                <xf:action if="not(exists($serviceEvent))">
                                    <xf:dispatch name="reset-record" target="main-model">
                                        <xxf:context name="record"
                                            select="xxf:instance('control-instance')/manageRecords/target"/>
                                        <xxf:context name="patientId" select="''"/>
                                        <xxf:context name="source" select="''"/>
                                    </xf:dispatch>
                                </xf:action>

                            </xf:action>


                            <!-- Unmerge operation, target. -->
                            <xf:action if="$operation='unmerge' and $recordType='target'">
                                <!-- Not doing anything here -->
                            </xf:action>

                            <!-- Archive operation, source.
                                 Set the archive subOperation -->
                            <xf:action if="$operation = 'archive' and $recordType='source'">
                                <!-- Setting the subOperation will trigger its value-changed event (verify-records) -->
                                <xf:setvalue
                                    ref="xxf:instance('control-instance')/manageRecords/subOperation"
                                    value="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/manageRecords/archiveOperation/option[1]/@value"/>
                                <!-- Set patientId of the target -->
                                <xf:setvalue
                                    ref="xxf:instance('control-instance')/manageRecords/target/patientId"
                                    value="$sourceId"/>
                            </xf:action>

                            <!-- Unarchive, source
                                 Set the archive operation (subOperation).
                                 Since the record was found (in the archive) the subOperation must be set to 'record'
                                 patientId of the target must match the source. -->
                            <xf:action if="$operation = 'unarchive' and $recordType='source'">
                                <!-- Setting the subOperation will trigger its value-changed event (verify-records) -->
                                <xf:setvalue
                                    ref="xxf:instance('control-instance')/manageRecords/subOperation"
                                    value="'record'"/>
                                <!-- Set patientId of the target -->
                                <xf:setvalue
                                    ref="xxf:instance('control-instance')/manageRecords/target/patientId"
                                    value="$sourceId"/>
                            </xf:action>

                            <!-- Set the status for the record to loaded -->
                            <xf:setvalue ref="$record/status" value="'loaded'"/>
                        </xf:action>

                        <!-- The record was not loaded.
                             The patient id of the loaded record does not match the id in the record passed (source or target) -->
                        <xf:action
                            if="not(xxf:instance('patient-instance')/cdaheader/id = $record/patientId)">
                            <!-- Set the status to notFound -->
                            <xf:setvalue ref="$record/status" value="'notFound'"/>

                            <!-- Unarchive, source
                                 Set the archive operation (subOperation).
                                 Since the record was not found (in the archive) the subOperation must be set to 'composition'
                                 sourceCompositionsList may have contents, even though no registration events are in the archive.
                                 patientId of the target must match the source.-->
                            <xf:action if="$operation = 'unarchive' and $recordType='source'">

                                <!-- Set up sourceCompositionsList -->
                                <xf:insert nodeset="xxf:instance('sourceCompositionsList-instance')"
                                    origin="xxf:instance('patientCompositionsList-instance')"/>

                                <!-- Setting the subOperation will trigger its value-changed event -->
                                <xf:setvalue
                                    ref="xxf:instance('control-instance')/manageRecords/subOperation"
                                    value="'composition'"/>

                                <!-- Set patientId of the target -->
                                <xf:setvalue
                                    ref="xxf:instance('control-instance')/manageRecords/target/patientId"
                                    value="$sourceId"/>

                                <!-- Retrieve record for the target (recursive) -->
                                <xf:dispatch name="retrieve-record" target="main-model">
                                    <xxf:context name="record"
                                        select="xxf:instance('control-instance')/manageRecords/target"/>
                                    <xxf:context name="patientId"
                                        select="xxf:instance('control-instance')/manageRecords/target/patientId"/>
                                    <xxf:context name="source" select="''"/>
                                </xf:dispatch>

                            </xf:action>

                            <!-- Merge, target
                             Check that the patientId is valid - if not, set status to invalid.
                             The check for invalid patientId is done here, after the attempt to load the record.
                             This in case the pattern for invalid identifiers is changed (so records with invalid ids can still be retrieved).
                             A bad identifier can cause the get-patient-demographics submission to fail, which shows a system error message, but that's OK  -->
                            <xf:action if="$operation = 'merge' and $recordType='target'">
                                <xxf:variable name="patientRegistration"
                                    select="xxf:instance('application-parameters-instance')/patientRegistration"/>
                                <xxf:variable name="validIdentifier"
                                    select="if ( not(exists($patientRegistration/id/@deprecatedCharacters)) or (exists($patientRegistration/id/@deprecatedCharacters) and not(string-to-codepoints($patientRegistration/id/@deprecatedCharacters) = string-to-codepoints($record/patientId)))) then true() else false()"/>
                                <xf:setvalue ref="$record/status"
                                    value="if ($validIdentifier) then 'notFound' else 'invalid'"/>
                            </xf:action>
                        </xf:action>
                    </xf:action>

                    <!-- Setting record when blank patientId is passed.
                     This happens when subOperation or compositions are selected in archive. -->
                    <xf:action if="$patientId = ''"> </xf:action>

                    <!-- Now set the status of the overall process -->
                    <xf:dispatch name="verify-records" target="main-model"/>
                </xf:action>
            </xf:action>

            <!-- Application defined action to set the cdaHeader for a record (source or target).
                 The record is in manageRecords/source or manageRecords/target of control-instance
                 The CDA header has been loaded into patient-instance -->
            <xf:action ev:event="set-recordHeader">
                <xxf:variable name="record" select="event('record')"/>
                <xxf:variable name="recordHeader" select="$record/cdaHeader"/>
                <!-- Iterate through the cdaHeader elements -->
                <xf:action xxf:iterate="xxf:instance('patient-instance')/cdaheader/*">
                    <xxf:variable name="cdaHeaderElement" select="."/>
                    <xxf:variable name="cdaHeaderElementName" select="$cdaHeaderElement/name()"/>
                    <xf:setvalue ref="$recordHeader/*[name()=$cdaHeaderElementName]"
                        value="$cdaHeaderElement"/>
                </xf:action>
            </xf:action>

            <!-- Application defined action to set the cdaHeader for the record in import-instance.
                 The CDA header has been set (manageRecords/source/cdaheader or manageRecords/target/cdaheader) using set-recordHeader -->
            <xf:action ev:event="set-importRecordHeader">
                <xxf:variable name="cdaHeader" select="event('cdaHeader')"/>
                <!-- CDA Header is set in the patientRole element -->
                <xxf:variable name="patientRole"
                    select="xxf:instance('import-instance')//cda:patientRole[1]"/>
                <!-- Set the standard cda header elements -->
                <xf:setvalue ref="$patientRole/cda:id/@extension" value="$cdaHeader/id"/>
                <xf:setvalue ref="$patientRole/cda:patient/cda:name/cda:given"
                    value="$cdaHeader/given"/>
                <xf:setvalue ref="$patientRole/cda:patient/cda:name/cda:family"
                    value="$cdaHeader/family"/>
                <xf:setvalue ref="$patientRole/cda:patient/cda:administrativeGenderCode/@code"
                    value="$cdaHeader/administrativeGenderCode"/>
                <xf:setvalue
                    ref="$patientRole/cda:patient/cda:administrativeGenderCode/@displayName"
                    value="$cdaHeader/administrativeGenderCode"/>
                <xf:setvalue ref="$patientRole/cda:patient/cda:birthTime/@value"
                    value="$cdaHeader/birthTime"/>
            </xf:action>

            <!-- Application defined action to synchronize the target and source headers -->
            <xf:action ev:event="synchronize-recordHeaders">
                <xxf:variable name="sourceHeader"
                    select="xxf:instance('control-instance')/manageRecords/source/cdaHeader"/>
                <xxf:variable name="targetHeader"
                    select="xxf:instance('control-instance')/manageRecords/target/cdaHeader"/>
                <!-- Iterate through the source header elements -->
                <xf:action xxf:iterate="$sourceHeader/*">
                    <xxf:variable name="sourceHeaderElement" select="."/>
                    <xxf:variable name="sourceHeaderElementName"
                        select="$sourceHeaderElement/name()"/>
                    <xf:setvalue ref="$targetHeader/*[name()=$sourceHeaderElementName]"
                        value="$sourceHeaderElement"/>
                </xf:action>
                <!-- But target record id must not be changed -->
                <xf:setvalue ref="$targetHeader/id"
                    value="xxf:instance('control-instance')/manageRecords/target/patientId"/>
            </xf:action>

            <!-- Application defined action to clear the cdaHeader for a record (source or target).
                 All elements are set to '' -->
            <xf:action ev:event="clear-record-header">
                <xxf:variable name="record" select="event('record')"/>
                <xxf:variable name="recordHeader" select="$record/cdaHeader"/>
                <!-- Iterate through the cdaHeader elements -->
                <xf:action xxf:iterate="$recordHeader/*">
                    <xf:setvalue ref="." value="''"/>
                </xf:action>
            </xf:action>

            <!-- Application defined action to reset the record (source or target).
                 Clears all elements, but resets the patientId if it was passed as a parameter.
                 Clears the record header as part of the action.
                 Clears the compositionsList (sourceCompositionsList or targetCompositionsList) -->
            <xf:action ev:event="reset-record">
                <xxf:variable name="record" select="event('record')"/>
                <xxf:variable name="patientId" select="event('patientId')"/>
                <xxf:variable name="source" select="event('source')"/>

                <!-- Reset status message and any system errors -->
                <xf:delete nodeset="xxf:instance('control-instance')/statusMessage/entryList/entry"/>
                <xf:setvalue ref="xxf:instance('view-parameters-instance')/systemError" value="''"/>

                <!-- Record type only needed for clearing compositionsList -->
                <xxf:variable name="recordType" select="$record/name()"/>

                <!-- Iterate through the top-level elements, except patientId -->
                <xf:action xxf:iterate="$record/*[not(name() = ('patientId','source'))]">
                    <xf:setvalue ref="." value="''"/>
                </xf:action>

                <!-- Reset patientId -->
                <xf:setvalue ref="$record/patientId" value="$patientId"/>

                <!-- Reset source -->
                <xf:setvalue ref="$record/source" value="$source"/>

                <!-- Reset status -->
                <xf:setvalue ref="$record/status" value="./@default"/>

                <!-- Reset cdaheader -->
                <xxf:variable name="recordHeader" select="$record/cdaHeader"/>
                <!-- Iterate through the cdaHeader elements -->
                <xf:action xxf:iterate="$recordHeader/cdaheader/*">
                    <xf:setvalue ref="." value="''"/>
                </xf:action>

                <!-- Clear the compositionsList (sourceCompositionsList or targetCompositionsList) -->
                <xxf:variable name="compositionsList"
                    select="if ($recordType='source') then xxf:instance('sourceCompositionsList-instance') else xxf:instance('targetCompositionsList-instance')"/>
                <xf:delete nodeset="$compositionsList/*"/>

            </xf:action>

            <!-- Application defined action to set the author details in the CDA Header using details of current user.
                 This uses the user details that have been set up in user-instance.
                 Copy of action in compositionMainModel (should be refactored?) -->
            <xf:action ev:event="set-author-details">
                <xxf:variable name="composition" select="event('composition')"/>
                <xxf:variable name="compositionAuthor" select="$composition//cda:author[1]"/>
                <!-- Time the composition was published -->
                <xf:setvalue ref="$compositionAuthor/cda:time/@value" value="current-dateTime()"/>
                <!-- User id (root is the application, extension is the userIRI -->
                <xf:setvalue ref="$compositionAuthor/cda:assignedAuthor/cda:id/@root"
                    value="xxf:instance('view-parameters-instance')/applicationIRI"/>
                <xf:setvalue ref="$compositionAuthor/cda:assignedAuthor/cda:id/@extension"
                    value="xxf:instance('user-instance')/@id"/>
                <!-- User name -->
                <xf:setvalue ref="$compositionAuthor/cda:assignedAuthor/cda:assignedPerson/cda:name"
                    value="xxf:instance('user-instance')/credentials/username"/>
            </xf:action>

            <!-- Application defined action to set the serviceEventList for merge events.
                The compositionList passed is the list of compositions of type #CityEHR:Merge
                Load each composition is the list and insert the serviceEvent element in the serviceEventList.
                The serviceEvent id must have @root that is different from the current patient (so that unmerged compositions are not used)
                And the @extension must match the compositionIRI (so that only one serviceEvent is returned for each merge operation)
            -->
            <xf:action ev:event="set-serviceEventList">
                <xxf:variable name="compositionList" select="event('compositionList')"/>

                <!-- Clear the serviceEventList -->
                <xf:delete
                    nodeset="xxf:instance('control-instance')/manageRecords/serviceEventList/*"/>

                <!-- Iterate through the compositionList, load and insert serviceEvent -->
                <xf:action xxf:iterate="$compositionList">
                    <xxf:variable name="mergeComposition" select="."/>
                    <xxf:variable name="source" select="$mergeComposition/compositionIRI"/>
                    <xxf:variable name="mergeCompositionHandle" select="$mergeComposition/handle"/>
                    <xxf:variable name="mergeCompositionPatientId"
                        select="$mergeComposition/patientId"/>
                    <!-- Load merge composition to import-instance -->
                    <xf:setvalue ref="xxf:instance('control-instance')/storageObject"
                        value="concat(xxf:instance('view-parameters-instance')/databaseLocation,$mergeCompositionHandle)"/>
                    <xf:send submission="load-import-instance-submission"/>
                    <!-- The serviceEvent of the merge operation has the same id as the merge composition.
                        So find this and insert into serviceEventList.
                        But first get the effectiveTime of the merge composition and insert into the serviceEvent.
                        This is so that we can get the time of the merge event when it is selected  
                        (needed to get the list of compositions added to the record after the merge)
                    -->
                    <xxf:variable name="serviceEvent"
                        select="xxf:instance('import-instance')//cda:serviceEvent[cda:id/@extension=$source][cda:id/@root!=$mergeCompositionPatientId]"/>
                    <xxf:variable name="effectiveTime"
                        select="xxf:instance('import-instance')//cda:effectiveTime[1]"/>
                    <xf:action if="exists($serviceEvent)">
                        <xf:insert context="$serviceEvent" origin="$effectiveTime"/>
                        <xf:insert
                            context="xxf:instance('control-instance')/manageRecords/serviceEventList"
                            origin="$serviceEvent"/>
                    </xf:action>
                </xf:action>
            </xf:action>


            <!-- Application defined action to transfer composition from sourceId to targetId or sourceInformationType to targetInformationType.
                 For merge, unmerge the transfer is between source and target in the same informationType (records, data, archive)
                 For archive, unarchive the transfer is between informationType (records, data, archive) for the same patientId
                 Loads the source to import-instance
                 Sets the CDA Header to the target header (targetHeader has already been set up)
                 Inserts the serviceEvent to record the operation
                 Sets the target location and stores import-instance.
                 Removes the source composition
                 If anything goes wrong, sets manageRecords/status to 'error'
            -->
            <xf:action ev:event="transfer-composition">
                <xxf:variable name="sourceHandle" select="event('sourceHandle')"/>
                <xxf:variable name="sourceId" select="event('sourceId')"/>
                <xxf:variable name="sourceInformationType" select="event('sourceInformationType')"/>
                <xxf:variable name="targetId" select="event('targetId')"/>
                <xxf:variable name="targetInformationType" select="event('targetInformationType')"/>
                <xxf:variable name="targetHeader" select="event('targetHeader')"/>
                <xxf:variable name="templateDocumentationOf"
                    select="event('templateDocumentationOf')"/>

                <!-- Set up templateServiceEvent -->
                <xxf:variable name="templateServiceEvent"
                    select="$templateDocumentationOf/cda:serviceEvent[1]"/>

                <!-- Check for errors -->
                <xf:setvalue ref="xxf:instance('control-instance')/manageRecords/status"
                    value="if (exists($templateServiceEvent) and $sourceHandle!='' and $sourceId!='' and $targetId!='' and $sourceInformationType!='' and $targetInformationType!='') then . else 'error'"/>

                <!-- Set up source and target storageObject.
                     The sourceHandle has the pattern  ...../sourceInformationType/sourceId/compositionId -->
                <xxf:variable name="sourceStorageObject"
                    select="concat(xxf:instance('view-parameters-instance')/databaseLocation,$sourceHandle)"/>
                <xxf:variable name="sourceLocation"
                    select="concat('/',$sourceInformationType,'/',$sourceId,'/')"/>
                <xxf:variable name="targetLocation"
                    select="concat('/',$targetInformationType,'/',$targetId,'/')"/>
                <xxf:variable name="targetStorageObject"
                    select="replace($sourceStorageObject,$sourceLocation,$targetLocation)"/>

                <!-- Copy source to target (if there are no errors) -->
                <xf:action if="xxf:instance('control-instance')/manageRecords/status != 'error'">
                    <!-- Load composition to import-instance -->
                    <xf:setvalue ref="xxf:instance('control-instance')/storageObject"
                        value="$sourceStorageObject"/>
                    <xf:send submission="load-import-instance-submission"/>

                    <!-- If sourceId and targetId are different, reset CDA header of import-instance to target record header.
                     This only happens on merge/unmerge
                     The targetHeader was set before being passed as a parameter  -->
                    <xf:action if="$sourceId != $targetId">
                        <xf:dispatch name="set-importRecordHeader" target="main-model">
                            <xxf:context name="cdaHeader" select="$targetHeader"/>
                        </xf:dispatch>
                    </xf:action>

                    <!-- Set documentationOf in import-instance to record the source of the merged document.
                    The import-instance may already contain one or more cda:serviceEvent or may be missing documentationOf
                    Or the element from the template may already have been used to record an event in a care pathway or an annotation.
                    So insert the template from manageRecords-template-instance -->
                    <!-- documentationOf exists so insert serviceEvent -->
                    <xf:action if="exists(xxf:instance('import-instance')//cda:documentationOf)">
                        <xf:insert
                            nodeset="xxf:instance('import-instance')//cda:documentationOf/cda:serviceEvent"
                            origin="$templateServiceEvent" at="1" position="before"/>
                    </xf:action>

                    <!-- documentationOf does not exist so insert template (which includes the serviceEvent) before first component.
                    Note that the import-instance may contain cda:ClinicalDocument as its root element or as a child of form-definition.
                    So need to jiggle the xpath to get the right place to insert the documentationOf -->
                    <xf:action
                        if="not(exists(xxf:instance('import-instance')//cda:documentationOf))">
                        <xxf:variable name="structuredBodyComponent"
                            select="xxf:instance('import-instance')//cda:component[cda:structuredBody]"/>
                        <xxf:variable name="ClinicalDocument" select="$structuredBodyComponent/.."/>
                        <xf:insert context="$ClinicalDocument" nodeset="cda:component"
                            origin="$templateDocumentationOf" at="1" position="before"/>
                    </xf:action>

                    <!-- Save composition to target -->
                    <xf:setvalue ref="xxf:instance('control-instance')/storageObject"
                        value="$targetStorageObject"/>
                    <xf:send submission="import-instance-submission"/>

                </xf:action>

                <!-- Now remove the source composition, but only if there wasn't an error. -->
                <xf:setvalue ref="xxf:instance('control-instance')/manageRecords/status"
                    value="if (xxf:instance('control-instance')/importStatus='imported') then . else 'error'"/>
                <xf:action if="xxf:instance('control-instance')/manageRecords/status !='error'">
                    <!-- Set the storage object for the source -->
                    <xf:setvalue ref="xxf:instance('control-instance')/storageObject"
                        value="$sourceStorageObject"/>
                    <!-- Call the delete-resource-submission.
                         This could go horribly wrong if the storageObject is not set correctly.
                         (The load-import-instance-submission should have raised an error above in this case, but make sure again here)
                         So make sure the sourceId and informationType are set properly before calling -->
                    <xxf:variable name="storageObjectComponents"
                        select="reverse(tokenize(xxf:instance('control-instance')/storageObject,'/'))"/>
                    <xxf:variable name="locationCheck"
                        select="if ($sourceInformationType=$storageObjectComponents[3] and $sourceId!='' and $sourceId=$storageObjectComponents[2]) then true() else false()"/>
                    <xf:action if="$locationCheck">
                        <xf:send submission="delete-resource-submission"/>
                    </xf:action>
                    <xf:action if="not($locationCheck)">
                        <xf:setvalue ref="xxf:instance('view-parameters-instance')/systemError"
                            value="xxf:instance('view-parameters-instance')/systemErrorList/systemError[@type='failedToRemoveSourceRecord']"/>
                        <xf:setvalue ref="xxf:instance('control-instance')/manageRecords/status"
                            value="'error'"/>
                    </xf:action>
                </xf:action>

            </xf:action>


            <!-- Application defined action to remove record collections.
                 This is done after a record has been merged, completely (subOperation='record') unmerged, archived or unarchived.
                 The $informationTypeList contains all locations after merge and unmerge (records,data,archive), 
                    (records,data) after archive 
                    or (archive) after unarchive -->
            <xf:action ev:event="remove-record-collections">
                <xxf:variable name="informationTypeList" select="event('informationTypeList')"/>
                <xxf:variable name="patientId" select="event('patientId')"/>

                <!-- Iterate through the informationTypeList
                     Sets manageRecords/status to 'error' if something goes wrong.
                     So stop the iteration if it does -->
                <xf:action xxf:iterate="$informationTypeList"
                    if="xxf:instance('control-instance')/manageRecords/status !='error'">
                    <xxf:variable name="informationType" select="."/>
                    <!-- Set the storage object for the source -->
                    <xf:setvalue ref="xxf:instance('control-instance')/storageObject"
                        value="concat(xxf:instance('view-parameters-instance')/applicationDatabaseLocation,'/',$informationType,'/',$patientId)"/>
                    <!-- Call the delete-resource-submission.
                    This could go horribly wrong if the storageObject is not set correctly.
                    So make sure the sourceId and informationType are set properly before calling -->
                    <xxf:variable name="storageObjectComponents"
                        select="reverse(tokenize(xxf:instance('control-instance')/storageObject,'/'))"/>
                    <xxf:variable name="locationCheck"
                        select="if ($informationType!='' and $informationType=$storageObjectComponents[2] and $patientId!='' and $patientId=$storageObjectComponents[1]) then true() else false()"/>
                    <xf:action if="$locationCheck">
                        <xf:send submission="delete-resource-submission"/>
                    </xf:action>
                    <xf:action if="not($locationCheck)">
                        <xf:setvalue ref="xxf:instance('view-parameters-instance')/systemError"
                            value="xxf:instance('view-parameters-instance')/systemErrorList/systemError[@type='failedToRemoveSourceRecord']"/>
                        <xf:setvalue ref="xxf:instance('control-instance')/manageRecords/status"
                            value="'error'"/>
                    </xf:action>
                </xf:action>
            </xf:action>

            <!-- Application defined action to verify the status of the manageRecords operation.
                 Called from retrieve-record and when compositions are selected/deselected in unmerge/archive/unarchive
                 Sets the compositionCount for target in unmerge and for source in archive/unarchive
                 Sets manageRecords/status to unverified | verified 
                 Based on manageRecords/source/status and manageRecords/target/status which can be waiting | loaded | notFound
                 The verification process depends on the selected operation.
                 The operation can be performed once the status has been set to verified.
                 -->
            <xf:action ev:event="verify-records">
                <xxf:variable name="sourceStatus"
                    select="xxf:instance('control-instance')/manageRecords/source/status"/>
                <xxf:variable name="targetStatus"
                    select="xxf:instance('control-instance')/manageRecords/target/status"/>

                <xxf:variable name="operation"
                    select="xxf:instance('control-instance')/manageRecords/operation"/>
                <xxf:variable name="subOperation"
                    select="xxf:instance('control-instance')/manageRecords/subOperation"/>

                <!-- Default is unverified -->
                <xf:setvalue ref="xxf:instance('control-instance')/manageRecords/status"
                    value="./@default"/>

                <!-- Merge operation.
                     To merge, either soure and target demographics must match (a real merge)
                     or the target must not exist (the source is renumbered to the new (target) patientId -->
                <xf:action if="$operation='merge'">
                    <!-- If target does not exist (but has a valid id), then any loaded source can be merged (actually renumbered), so status is 'verified'  -->
                    <xf:setvalue ref="xxf:instance('control-instance')/manageRecords/status"
                        value="if ($targetStatus='notFound' and $sourceStatus='loaded') then 'verified' else ."/>
                    <!-- If source does not exist, then any loaded target is already merged, so status is 'processed'  -->
                    <xf:setvalue ref="xxf:instance('control-instance')/manageRecords/status"
                        value="if ($targetStatus='loaded' and $sourceStatus='notFound') then 'processed' else ."/>
                    <!-- If source and target exist, then status is 'verified' unless any of the demographics do not match  -->
                    <xf:action if="$targetStatus='loaded' and $sourceStatus='loaded'">
                        <xf:setvalue ref="xxf:instance('control-instance')/manageRecords/status"
                            value="'verified'"/>
                        <xxf:variable name="sourceHeader"
                            select="xxf:instance('control-instance')/manageRecords/source/cdaHeader"/>
                        <xxf:variable name="targetHeader"
                            select="xxf:instance('control-instance')/manageRecords/target/cdaHeader"/>
                        <!-- To verify the cdaHeader, iterate through all items with a @matched attritbute -->
                        <xf:action xxf:iterate="$sourceHeader/*[@matched]">
                            <xxf:variable name="sourceCdaHeaderElement" select="."/>
                            <xxf:variable name="cdaHeaderElementName"
                                select="$sourceCdaHeaderElement/name()"/>
                            <xf:setvalue ref="xxf:instance('control-instance')/manageRecords/status"
                                value="if ($targetHeader/*[name()=$cdaHeaderElementName] = $sourceCdaHeaderElement) then . else ./@default"
                            />
                        </xf:action>
                    </xf:action>
                </xf:action>

                <!-- Unmerge operation.
                     Check that there will be registration events remaining in the source after the unmerge
                     If not, then the subOperation must be 'record' (i.e. all compositions must be included in the unmerge), otherwise 'composition'
                     When subOperation is 'composition', additional source compositions (added after the merge) can be selected for the unmerge  -->
                <xf:action if="$operation='unmerge'">

                    <!-- targetCompositionsList has compositions to be unmerged, sourceCompositionsList has all compositions in the source -->
                    <xxf:variable name="targetCompositionsList"
                        select="xxf:instance('targetCompositionsList-instance')/composition"/>
                    <xxf:variable name="sourceCompositionsList"
                        select="xxf:instance('sourceCompositionsList-instance')/composition"/>

                    <!-- Check source after unmerge - must contain registration event(s).
                         Count number of registration compositions in the source and target (unmerged) record.
                         If they are the same then all compositions from the source must be unmerged.
                         (This will be the case after a renumbering, with no subsequent merge) -->
                    <xxf:variable name="registrationDocumentIRI"
                        select="xxf:instance('application-parameters-instance')/patientRegistration/registrationEvent/@composition"/>
                    <xxf:variable name="sourceRegistrationCount"
                        select="count($sourceCompositionsList[code=$registrationDocumentIRI])"/>
                    <xxf:variable name="targetRegistrationCount"
                        select="count($targetCompositionsList[code=$registrationDocumentIRI])"/>
                    <xf:setvalue ref="xxf:instance('control-instance')/manageRecords/subOperation"
                        value="if ($sourceRegistrationCount = $targetRegistrationCount) then 'record' else 'composition'"/>

                    <!-- Reset compositionCount -->
                    <xxf:variable name="selectedCompositionCount"
                        select="count($sourceCompositionsList[selected='true'])"/>
                    <xxf:variable name="targetCompositionCount"
                        select="if ($subOperation='record') then count($sourceCompositionsList) else count($targetCompositionsList) + $selectedCompositionCount"/>
                    <xf:setvalue
                        ref="xxf:instance('control-instance')/manageRecords/source/compositionCount"
                        value="count($sourceCompositionsList) - $targetCompositionCount"/>
                    <xf:setvalue
                        ref="xxf:instance('control-instance')/manageRecords/target/compositionCount"
                        value="$targetCompositionCount"/>

                    <!-- Set status - verified if source and target loaded, and there are compositions to unmerge -->
                    <xf:setvalue ref="xxf:instance('control-instance')/manageRecords/status"
                        value="if ($targetStatus='loaded' and $sourceStatus='loaded' and $targetCompositionCount gt 0) then 'verified' else @default"
                    />
                </xf:action>

                <!-- Archive operation.
                     Verified if source is loaded and
                        subOperation is 'record'
                        Or subOperation is 'composition', any compositions are selected for archive
                        -->
                <xf:action if="$operation='archive'">
                    <!-- Set compositionCount of selected compositions -->
                    <xxf:variable name="compositionCount"
                        select="if ($subOperation='record') then count(xxf:instance('sourceCompositionsList-instance')/composition) else count(xxf:instance('sourceCompositionsList-instance')/composition[selected='true'])"/>
                    <xf:setvalue
                        ref="xxf:instance('control-instance')/manageRecords/source/compositionCount"
                        value="$compositionCount"/>
                    <xf:setvalue ref="xxf:instance('control-instance')/manageRecords/status"
                        value="if ($sourceStatus='loaded' and ($subOperation='record' or ($subOperation='composition' and $compositionCount castable as xs:integer and $compositionCount gt 0))) then 'verified' else ./@default"
                    />
                </xf:action>

                <!-- Unarchive operation.
                     Can unarchive entire record if it has been loaded or individual compositions if they have been selected. -->
                <xf:action if="$operation='unarchive'">
                    <xf:setvalue ref="xxf:instance('control-instance')/manageRecords/status"
                        value="if (($sourceStatus='loaded' and $subOperation='record') or ($subOperation='composition' and exists(xxf:instance('sourceCompositionsList-instance')/composition[selected='true']))) then 'verified' else ./@default"
                    />
                </xf:action>
            </xf:action>

            <!-- Application defined action to merge source and target records. 
                 The source record for a patient is split between the following collections in applicationDatabaseLocation
                    records - move each composition to target, with CDA header changed and source recorded                   
                    data - move each composition to target, with CDA header changed and source recorded
                    
                 In addition, store a new composition in the target which records the merge event.
                 
                 Then if all went OK, delete the source patient
            -->
            <xf:action ev:event="merge-records">
                <!-- Source and target patient ids -->
                <xxf:variable name="sourceId"
                    select="xxf:instance('control-instance')/manageRecords/source/patientId"/>
                <xxf:variable name="targetId"
                    select="xxf:instance('control-instance')/manageRecords/target/patientId"/>

                <!-- Set targetHeader if target was not found (i.e. this will be a new record) -->
                <xf:action
                    if="xxf:instance('control-instance')/manageRecords/target/status='notFound'">
                    <xf:dispatch name="synchronize-recordHeaders" target="main-model"/>
                </xf:action>
                <xxf:variable name="targetHeader"
                    select="xxf:instance('control-instance')/manageRecords/target/cdaHeader"/>

                <!-- Get the template manageRecordsCDA document.
                     This is placed in manageRecords-template-instance
                     This is insantiated and written to the target collection at the end of the merge process.
                     Also used as the source for the cda:documentationOf and cda:serviceEvent elements -->
                <xf:send submission="load-manageRecordsTemplate-submission"/>
                <xxf:variable name="templateCompositionId"
                    select="xxf:instance('manageRecords-template-instance')/cda:id[1]/@extension"/>
                <xxf:variable name="templateDocumentationOf"
                    select="xxf:instance('manageRecords-template-instance')/cda:documentationOf[1]"/>

                <!-- Check for errors -->
                <xf:setvalue ref="xxf:instance('control-instance')/manageRecords/status"
                    value="if ($templateCompositionId!='' and $sourceId!='' and $targetId!='') then . else 'error'"/>

                <!-- Set the locations for the source record.
                     At version 1.5 these are records, annotations, data.
                     From version 1.6 refactored so that annotations are stored in the records collection -->
                <xxf:variable name="informationTypeList"
                    select="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/manageRecords/informationType/type"/>

                <!-- Can only continue with merge if there is no error -->
                <xf:action if="xxf:instance('control-instance')/manageRecords/status !='error'">
                    <!-- Compositions are copied from source to target.
                         The compositions come from the $informationTypeList (records, data, archive) in the source record.
                         Note that source records which have been archived are included in the merge with the target (20117-11-20 - may want to review this)
                         So iterate through these three locations in order to cover the entire record.
                    -->
                    <xf:action xxf:iterate="$informationTypeList">
                        <xxf:variable name="informationType" select="."/>
                        <!-- Get the set of compositions for the source record.
                             List is returned in patientCompositionsList-instance.
                             For merge we want all the records, so source is set tbe be blank -->
                        <xf:dispatch name="get-compositionList" target="main-model">
                            <xxf:context name="patientId" select="$sourceId"/>
                            <xxf:context name="informationType" select="$informationType"/>
                            <xxf:context name="source" select="''"/>
                        </xf:dispatch>

                        <!-- Iterate through source record compositions.
                         But not if there was an error
                         Load to import-instance.
                         Reset the CDA header to the target
                         Record the source patientId and source compositionIRI in the cda:documentationOf element.
                         Save import-instance to the target record. -->
                        <xf:action
                            if="xxf:instance('control-instance')/manageRecords/status !='error'"
                            xxf:iterate="xxf:instance('patientCompositionsList-instance')/composition">
                            <xxf:variable name="composition" select="."/>
                            <xxf:variable name="sourceHandle" select="$composition/handle"/>

                            <xf:dispatch name="transfer-composition" target="main-model">
                                <xxf:context name="sourceHandle" select="$sourceHandle"/>
                                <xxf:context name="sourceId" select="$sourceId"/>
                                <xxf:context name="sourceInformationType" select="$informationType"/>
                                <xxf:context name="targetId" select="$targetId"/>
                                <xxf:context name="targetInformationType" select="$informationType"/>
                                <xxf:context name="targetHeader" select="$targetHeader"/>
                                <xxf:context name="templateDocumentationOf"
                                    select="$templateDocumentationOf"/>
                            </xf:dispatch>
                        </xf:action>
                    </xf:action>
                    <!-- Finished iteration through records, data, archive -->

                    <!-- Import the merge CDA composition.
                         But only if there isn't an error
                         manageRecords-template-instance was set up when the template was loaded
                         Now store in the target record - targetId and templateCompositionId must both be set (otherwise error will be set above). -->
                    <xf:action if="xxf:instance('control-instance')/manageRecords/status !='error'">
                        <!-- Put mergeTemplate into import-instance -->
                        <xf:insert nodeset="xxf:instance('import-instance')"
                            origin="xxf:instance('manageRecords-template-instance')"/>

                        <!-- Set the cda header patient information using target header -->
                        <xf:dispatch name="set-importRecordHeader" target="main-model">
                            <xxf:context name="cdaHeader" select="$targetHeader"/>
                        </xf:dispatch>

                        <!-- Get the latest entry that holds the patientId of the target.
                             Get the entry from the target (which now has merged source/target compositions) and then set the target patientId
                             This is needed when a record is renumbered (so that the patientId is updated for demographics searches).
                             and also for merge of two records, since the source may have a more recent entry with patientId than the target.
                             Need to insert the whole entry so that any other elements in the entry are preserved.
                        -->
                        <!-- Get entry with patientId -->
                        <xxf:variable name="patientIdEntryIRI"
                            select="xxf:instance('application-parameters-instance')/patientRegistration/id/@entry"/>
                        <xxf:variable name="patientIdElementIRI"
                            select="xxf:instance('application-parameters-instance')/patientRegistration/id/@element"/>
                        <xf:dispatch name="retrieve-entry" target="main-model">
                            <xxf:context name="patientId" select="$targetId"/>
                            <xxf:context name="informationType" select="'records'"/>
                            <xxf:context name="entryIRI" select="$patientIdEntryIRI"/>
                        </xf:dispatch>

                        <!-- Set the patientId to the targetId,
                             then insert into the merge CDA composition.
                             But only if the cda:entry was found -->
                        <xxf:variable name="patientIdEntry"
                            select="xxf:instance('latestEntry-instance')/cda:entry[1]"/>
                        <xf:setvalue ref="xxf:instance('control-instance')/manageRecords/status"
                            value="if (exists($patientIdEntry)) then . else 'error'"/>
                        <xf:action
                            if="xxf:instance('control-instance')/manageRecords/status !='error'">
                            <xf:setvalue
                                ref="$patientIdEntry/descendant::cda:value[@extension=$patientIdElementIRI]/@value"
                                value="$targetId"/>
                            <xf:insert
                                nodeset="xxf:instance('import-instance')/descendant::cda:entry"
                                origin="$patientIdEntry"/>

                            <!-- Store merge CDA composition to the target record -->
                            <xf:setvalue ref="xxf:instance('control-instance')/storageObject"
                                value="concat(xxf:instance('view-parameters-instance')/applicationDatabaseLocation,'/records/',$targetId,'/',$templateCompositionId)"/>
                            <xf:send submission="import-instance-submission"/>
                        </xf:action>
                    </xf:action>

                    <!-- Remove the source record.
                         Only if no errors so far
                         Delete the collections for the sourceId in $informationTypeList (records, data)
                    -->
                    <xf:action if="xxf:instance('control-instance')/manageRecords/status !='error'">
                        <xf:dispatch name="remove-record-collections" target="main-model">
                            <xxf:context name="informationTypeList" select="$informationTypeList"/>
                            <xxf:context name="patientId" select="$sourceId"/>
                        </xf:dispatch>
                    </xf:action>

                    <!-- Finished the merge operation, so set the status -->
                    <xf:setvalue ref="xxf:instance('control-instance')/manageRecords/status"
                        value="if (.!='error') then 'processed' else ."/>
                    <!-- Report the result -->
                    <xxf:variable name="resultDescription"
                        select="if (xxf:instance('control-instance')/manageRecords/status = 'processed') then xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/statusMessage/message[@processingProgress='mergedRecords'] else xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/statusMessage/message[@processingProgress='failedMergedRecords']"/>
                    <xf:setvalue ref="xxf:instance('control-instance')/statusMessage/entry"
                        value="concat($resultDescription,$sourceId,' / ',$targetId)"/>
                    <xf:insert context="xxf:instance('control-instance')/statusMessage/entryList"
                        origin="xxf:instance('control-instance')/statusMessage/entry"/>

                    <!-- Clear the source and target patientIds.
                         The value-changed event will then clear the records -->
                    <xf:action>
                        <xf:setvalue
                            ref="xxf:instance('control-instance')/manageRecords/source/patientId"
                            value="''"/>
                        <xf:setvalue
                            ref="xxf:instance('control-instance')/manageRecords/target/patientId"
                            value="''"/>
                    </xf:action>
                </xf:action>
            </xf:action>

            <!-- Application defined action to unmerge source record. 
                 The source record is stored in records, data, archive.
                 Iterate through all compositions with serviceEvent id/@extension of the specified source
                 Read composition, set patientId, remove serviceEvent and store in target location
                 Then remove the source composition
            -->
            <xf:action ev:event="unmerge-records">
                <!-- Source and target patient ids -->
                <xxf:variable name="sourceId"
                    select="xxf:instance('control-instance')/manageRecords/source/patientId"/>
                <xxf:variable name="targetId"
                    select="xxf:instance('control-instance')/manageRecords/target/patientId"/>

                <!-- Merge service event.
                     If subOperation is 'record' then all compositions must be moved from the source, so source is blank.
                     But if subOperation is 'composition' then only compositions from the source of the merge are moved
                -->
                <xxf:variable name="subOperation"
                    select="xxf:instance('control-instance')/manageRecords/subOperation"/>
                <xxf:variable name="source"
                    select="if ($subOperation='composition') then xxf:instance('control-instance')/manageRecords/target/source else ''"/>

                <!-- Target and source cda header -->
                <xxf:variable name="targetHeader"
                    select="xxf:instance('control-instance')/manageRecords/target/cdaHeader"/>
                <xxf:variable name="sourceHeader"
                    select="xxf:instance('control-instance')/manageRecords/source/cdaHeader"/>

                <!-- Get the template manageRecordsCDA document.
                    This is placed in manageRecords-template-instance
                    This is insantiated and written to the target collection at the end of the unmerge process.
                    Also used as the source for the cda:documentationOf and cda:serviceEvent elements -->
                <xf:send submission="load-manageRecordsTemplate-submission"/>
                <xxf:variable name="templateCompositionId"
                    select="xxf:instance('manageRecords-template-instance')/cda:id[1]/@extension"/>
                <xxf:variable name="templateDocumentationOf"
                    select="xxf:instance('manageRecords-template-instance')/cda:documentationOf[1]"/>

                <!-- Location of record to unmerge - records, data, archive -->
                <xxf:variable name="informationTypeList"
                    select="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/manageRecords/informationType/type"/>

                <!-- Can only continue with unmerge if there is no error -->
                <xf:action if="xxf:instance('control-instance')/manageRecords/status !='error'">
                    <!-- Compositions are copied from source to target.
                        The compositions come from the $informationTypeList (records, data, archive) in the source record.
                        Note that source records which have been archived are included in the merge with the target (20117-11-20 - may want to review this)
                        So iterate through these three locations in order to cover the entire record.
                    -->
                    <xf:action xxf:iterate="$informationTypeList">
                        <xxf:variable name="informationType" select="."/>
                        <!-- Get the set of compositions for the source record.
                             List is returned in patientCompositionsList-instance.
                             For unmerge we want the records from the original merged source -->
                        <xf:dispatch name="get-compositionList" target="main-model">
                            <xxf:context name="patientId" select="$sourceId"/>
                            <xxf:context name="informationType" select="$informationType"/>
                            <xxf:context name="source" select="$source"/>
                        </xf:dispatch>

                        <!-- Iterate through source record compositions.
                             But not if there was an error
                             Load to import-instance.
                             Reset the CDA header to the target (actually, this should already be correctly set from the original source)
                             Record the source patientId and source compositionIRI in the cda:documentationOf element.
                             Save import-instance to the target record. -->
                        <xf:action
                            if="xxf:instance('control-instance')/manageRecords/status !='error'"
                            xxf:iterate="xxf:instance('patientCompositionsList-instance')/composition">
                            <xxf:variable name="composition" select="."/>
                            <xxf:variable name="sourceHandle" select="$composition/handle"/>

                            <xf:dispatch name="transfer-composition" target="main-model">
                                <xxf:context name="sourceHandle" select="$sourceHandle"/>
                                <xxf:context name="sourceId" select="$sourceId"/>
                                <xxf:context name="sourceInformationType" select="$informationType"/>
                                <xxf:context name="targetId" select="$targetId"/>
                                <xxf:context name="targetInformationType" select="$informationType"/>
                                <xxf:context name="targetHeader" select="$targetHeader"/>
                                <xxf:context name="templateDocumentationOf"
                                    select="$templateDocumentationOf"/>
                            </xf:dispatch>

                        </xf:action>
                    </xf:action>
                    <!-- Finished iteration through records, data, archive -->

                    <!-- If subOperation is 'composition'
                         Now move any new compositions (since the merge event) that were selected by the user.
                    -->
                    <xf:action
                        if="$subOperation='composition' and xxf:instance('control-instance')/manageRecords/status !='error'">
                        <xxf:variable name="sourceCompositionsList"
                            select="xxf:instance('sourceCompositionsList-instance')/composition[selected='true']"/>
                        <xxf:variable name="informationType" select="'records'"/>

                        <!-- Iterate through the selected compositions, moving to the unmerged record,
                            Only need to move compositions from informationType of 'records'-->
                        <xf:action xxf:iterate="$sourceCompositionsList">
                            <xxf:variable name="composition" select="."/>
                            <xxf:variable name="sourceHandle" select="$composition/handle"/>

                            <xf:dispatch name="transfer-composition" target="main-model">
                                <xxf:context name="sourceHandle" select="$sourceHandle"/>
                                <xxf:context name="sourceId" select="$sourceId"/>
                                <xxf:context name="sourceInformationType" select="$informationType"/>
                                <xxf:context name="targetId" select="$targetId"/>
                                <xxf:context name="targetInformationType" select="$informationType"/>
                                <xxf:context name="targetHeader" select="$targetHeader"/>
                                <xxf:context name="templateDocumentationOf"
                                    select="$templateDocumentationOf"/>
                            </xf:dispatch>

                        </xf:action>
                    </xf:action>

                    <!-- If subOperation is 'record'
                         Remove all collections for the source.
                         -->
                    <xf:action
                        if="$subOperation='record' and xxf:instance('control-instance')/manageRecords/status !='error'">
                        <xf:dispatch name="remove-record-collections" target="main-model">
                            <xxf:context name="informationTypeList" select="$informationTypeList"/>
                            <xxf:context name="patientId" select="$sourceId"/>
                        </xf:dispatch>
                    </xf:action>


                    <!-- Import the unmerge CDA composition.
                          But only if there isn't an error
                         manageRecords-template-instance was set up when the template was loaded
                         
                         Now store in the target record - targetId and templateCompositionId must both be set (otherwise error will be set above).                   
                         Also, for 'composition' type unmerge, store in the (remaining) source record. -->
                    <xf:action if="xxf:instance('control-instance')/manageRecords/status !='error'">
                        <!-- Put mergeTemplate into import-instance -->
                        <xf:insert nodeset="xxf:instance('import-instance')"
                            origin="xxf:instance('manageRecords-template-instance')"/>

                        <!-- For 'composition' type unmerge, store in the source record -->
                        <xf:action if="$subOperation='composition'">
                            <!-- Set the cda header patient information using source header -->
                            <xf:dispatch name="set-importRecordHeader" target="main-model">
                                <xxf:context name="cdaHeader" select="$sourceHeader"/>
                            </xf:dispatch>
                            <!-- Store unmerge CDA composition to the source record -->
                            <xf:setvalue ref="xxf:instance('control-instance')/storageObject"
                                value="concat(xxf:instance('view-parameters-instance')/applicationDatabaseLocation,'/records/',$sourceId,'/',$templateCompositionId)"/>
                            <xf:send submission="import-instance-submission"/>
                        </xf:action>

                        <!-- Store in the target record.
                             Add entry to return patientId to the original source, -->
                        <xf:action>
                            <!-- Set the cda header patient information using target header -->
                            <xf:dispatch name="set-importRecordHeader" target="main-model">
                                <xxf:context name="cdaHeader" select="$targetHeader"/>
                            </xf:dispatch>

                            <!-- Get entry with patientId -->
                            <xxf:variable name="patientIdEntryIRI"
                                select="xxf:instance('application-parameters-instance')/patientRegistration/id/@entry"/>
                            <xxf:variable name="patientIdElementIRI"
                                select="xxf:instance('application-parameters-instance')/patientRegistration/id/@element"/>
                            <xf:dispatch name="retrieve-entry" target="main-model">
                                <xxf:context name="patientId" select="$targetId"/>
                                <xxf:context name="informationType" select="'records'"/>
                                <xxf:context name="entryIRI" select="$patientIdEntryIRI"/>
                            </xf:dispatch>

                            <!-- Set the patientId to the targetId,
                                 then insert into the merge CDA composition.
                                 But only if the cda:entry was found -->
                            <xxf:variable name="patientIdEntry"
                                select="xxf:instance('latestEntry-instance')/cda:entry[1]"/>
                            <xf:setvalue ref="xxf:instance('control-instance')/manageRecords/status"
                                value="if (exists($patientIdEntry)) then . else 'error'"/>
                            <xf:action
                                if="xxf:instance('control-instance')/manageRecords/status !='error'">
                                <xf:setvalue
                                    ref="$patientIdEntry/descendant::cda:value[@extension=$patientIdElementIRI]/@value"
                                    value="$targetId"/>
                                <xf:insert
                                    nodeset="xxf:instance('import-instance')/descendant::cda:entry"
                                    origin="$patientIdEntry"/>

                                <!-- Store unmerge CDA composition to the target record -->
                                <xf:setvalue ref="xxf:instance('control-instance')/storageObject"
                                    value="concat(xxf:instance('view-parameters-instance')/applicationDatabaseLocation,'/records/',$targetId,'/',$templateCompositionId)"/>
                                <xf:send submission="import-instance-submission"/>
                            </xf:action>
                        </xf:action>
                    </xf:action>

                    <!-- Finished the unmerge operation, so set the status -->
                    <xf:setvalue ref="xxf:instance('control-instance')/manageRecords/status"
                        value="if (.!='error') then 'processed' else ."/>
                    <!-- Report the result -->
                    <xxf:variable name="resultDescription"
                        select="if (xxf:instance('control-instance')/manageRecords/status = 'processed') then xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/statusMessage/message[@processingProgress='unmergedRecords'] else xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/statusMessage/message[@processingProgress='failedUnmergedRecords']"/>
                    <xf:setvalue ref="xxf:instance('control-instance')/statusMessage/entry"
                        value="concat($resultDescription,$sourceId,' / ',$targetId)"/>
                    <xf:insert context="xxf:instance('control-instance')/statusMessage/entryList"
                        origin="xxf:instance('control-instance')/statusMessage/entry"/>

                    <!-- Clear the source and target patientIds.
                         The value-changed event will then clear the records -->
                    <xf:action>
                        <xf:setvalue
                            ref="xxf:instance('control-instance')/manageRecords/source/patientId"
                            value="''"/>
                        <xf:setvalue
                            ref="xxf:instance('control-instance')/manageRecords/target/patientId"
                            value="''"/>
                    </xf:action>
                </xf:action>

            </xf:action>

            <!-- Application defined action to archive source record (or selected compositions).
                 Only records are archived (not data).
                 If the full record is being archived then all compositions in progress (stored in data collection) are removed
                 Iterates through the composition set to be archived, loads composition, sets the serviceEvent and writes to archive.
                 Then for full archive, deletes the patient collection from records and data
                 Or for selected archive (composition), deletes each selected composition from records/patientId
                 Stores the archive composition to record the operation:
                    For full record archive stores the archive composition in the target (archive)
                    For selected arhive (composition) stores one archive composition in the source for each composition archived. 
                 Note that 'registration' events cannot be archived selectively, because that would change (or remove entirely) the patient demographics
            -->
            <xf:action ev:event="archive-record">
                <!-- patient id for archive -->
                <xxf:variable name="patientId"
                    select="xxf:instance('control-instance')/manageRecords/source/patientId"/>

                <!-- subOperation - record or composition -->
                <xxf:variable name="subOperation"
                    select="xxf:instance('control-instance')/manageRecords/subOperation"/>

                <!-- sourceHeader -->
                <xxf:variable name="sourceHeader"
                    select="xxf:instance('control-instance')/manageRecords/source/cdaHeader"/>

                <!-- patientId must be set to archive -->
                <xf:action if="$patientId != ''">

                    <!-- Get the template manageRecordsCDA document to use for 'record' subOperation.
                         This is placed in manageRecords-template-instance
                         This is insantiated and written to the target collection at the end of the archive process (.
                         Also used as the source for the cda:documentationOf and cda:serviceEvent elements -->
                    <xf:send submission="load-manageRecordsTemplate-submission"/>

                    <!-- compositionsList to archive.
                         If subOperation is composition then the list of selected compositions in sourceCompositionsList.
                         If subOperation is record then all compositions in sourceCompositionsList.
                        -->
                    <xxf:variable name="compositionsList"
                        select="if ($subOperation='record') then xxf:instance('sourceCompositionsList-instance')/composition else xxf:instance('sourceCompositionsList-instance')/composition[selected='true']"/>

                    <!-- Iterate through source record compositions to be archived.
                         But not if there was an error
                         Load to import-instance.
                         Reset the CDA header to the target
                         Record the source patientId and source compositionIRI in the cda:documentationOf element.
                         Save import-instance to the target record. 
                         If subOperation is 'composition' load template operation CDA and store in source record-->

                    <xf:action if="xxf:instance('control-instance')/manageRecords/status !='error'"
                        xxf:iterate="$compositionsList">
                        <xxf:variable name="composition" select="."/>
                        <xxf:variable name="sourceHandle" select="$composition/handle"/>
                        <xxf:variable name="sourceCompositionId"
                            select="$composition/compositionIRI"/>
                        <xxf:variable name="sourceCompositionDisplayName"
                            select="$composition/displayName"/>

                        <!-- If subOperation is 'composition' then reset the manageRecords template.
                             Reset the compositionId so that it is unique for the composition being archived.
                             Reset the serviceEvent for the new compositionId
                             Set the cda:entry recording the archive of the composition -->
                        <xf:action if="$subOperation='composition'">
                            <!-- Reset compositionId -->
                            <xxf:variable name="manageRecordsCompositionId"
                                select="concat(xxf:instance('manageRecords-template-instance')/cda:id/@extension,'-',$sourceCompositionId)"/>
                            <xf:setvalue
                                ref="xxf:instance('manageRecords-template-instance')/cda:id/@extension"
                                value="$manageRecordsCompositionId"/>

                            <!-- Reset serviceEvent -->
                            <xxf:variable name="templateServiceEvent"
                                select="xxf:instance('manageRecords-template-instance')/descendant::cda:serviceEvent[1]"/>
                            <xf:setvalue ref="$templateServiceEvent/cda:code/@displayName"
                                value="concat(xxf:instance('manageRecords-template-instance')/cda:code/@displayName,' ',$sourceCompositionDisplayName)"/>
                            <xf:setvalue ref="$templateServiceEvent/cda:id/@extension"
                                value="$manageRecordsCompositionId"/>

                            <!-- Reset details of the manageRecords event in the cda:entry (should be the only cda:entry in the template)
                                 The root of the id is #ISO-13606:Entry:CityEHR:ManageRecords, the extension should have been set to #CityEHR:Archive 
                                 Get the system composition for the 'archive' operation to determine the extension -->
                            <xxf:variable name="systemCompositionIRI"
                                select="xxf:instance('view-parameters-instance')/systemCompositions/composition[@operation = 'archive']/@compositionIRI"/>
                            <xxf:variable name="manageRecordsEntry"
                                select="xxf:instance('manageRecords-template-instance')//cda:entry[descendant::cda:id/@extension=$systemCompositionIRI]"/>
                            <xf:action if="exists($manageRecordsEntry)">
                                <xf:setvalue
                                    ref="$manageRecordsEntry/descendant::cda:value[@extension='#ISO-13606:Element:CityEHR:Source']/@value"
                                    value="$sourceCompositionId"/>
                                <xf:setvalue
                                    ref="$manageRecordsEntry/descendant::cda:value[@extension='#ISO-13606:Element:CityEHR:Target']/@value"
                                    value="xxf:instance('control-instance')/manageRecords/target/patientId"
                                />
                            </xf:action>
                        </xf:action>

                        <!-- These are found here, in case they have been reset for the 'composition' subOperation -->
                        <xxf:variable name="templateCompositionId"
                            select="xxf:instance('manageRecords-template-instance')/cda:id[1]/@extension"/>
                        <xxf:variable name="templateDocumentationOf"
                            select="xxf:instance('manageRecords-template-instance')/cda:documentationOf[1]"/>

                        <xf:dispatch name="transfer-composition" target="main-model">
                            <xxf:context name="sourceHandle" select="$sourceHandle"/>
                            <xxf:context name="sourceId" select="$patientId"/>
                            <xxf:context name="sourceInformationType" select="'records'"/>
                            <xxf:context name="targetId" select="$patientId"/>
                            <xxf:context name="targetInformationType" select="'archive'"/>
                            <xxf:context name="targetHeader" select="$sourceHeader"/>
                            <xxf:context name="templateDocumentationOf"
                                select="$templateDocumentationOf"/>
                        </xf:dispatch>

                        <!-- If subOperation is 'composition', store archive CDA composition in source record -->
                        <xf:action
                            if="$subOperation='composition' and xxf:instance('control-instance')/manageRecords/status !='error'">
                            <!-- Put manageRecords into import-instance -->
                            <xf:insert nodeset="xxf:instance('import-instance')"
                                origin="xxf:instance('manageRecords-template-instance')"/>

                            <!-- Set the cda header patient information using source header -->
                            <xf:dispatch name="set-importRecordHeader" target="main-model">
                                <xxf:context name="cdaHeader" select="$sourceHeader"/>
                            </xf:dispatch>

                            <!-- Store manageRecords CDA composition to the source record -->
                            <xf:setvalue ref="xxf:instance('control-instance')/storageObject"
                                value="concat(xxf:instance('view-parameters-instance')/applicationDatabaseLocation,'/records/',$patientId,'/',$templateCompositionId)"/>
                            <xf:send submission="import-instance-submission"/>

                        </xf:action>
                    </xf:action>

                    <!-- If subOperation is 'record' and there are no errors so far
                         Remove the records and data collections for the patient.
                         Store manageRecords CDA composition to the target record
                         -->
                    <xf:action
                        if="$subOperation='record' and xxf:instance('control-instance')/manageRecords/status !='error'">
                        <!-- Remove collections from the source -->
                        <xxf:variable name="informationTypeList" select="('records','data')"/>
                        <xf:dispatch name="remove-record-collections" target="main-model">
                            <xxf:context name="informationTypeList" select="$informationTypeList"/>
                            <xxf:context name="patientId" select="$patientId"/>
                        </xf:dispatch>

                        <!-- Store manageRecords CDA composition to the target (archive) record -->
                        <xxf:variable name="templateCompositionId"
                            select="xxf:instance('manageRecords-template-instance')/cda:id[1]/@extension"/>
                        <xf:setvalue ref="xxf:instance('control-instance')/storageObject"
                            value="concat(xxf:instance('view-parameters-instance')/applicationDatabaseLocation,'/archive/',$patientId,'/',$templateCompositionId)"/>
                        <xf:send submission="import-instance-submission"/>
                    </xf:action>

                </xf:action>

                <!-- Finished the archive operation, so set the status -->
                <xf:setvalue ref="xxf:instance('control-instance')/manageRecords/status"
                    value="if (.!='error') then 'processed' else ."/>
                <!-- Report the result -->
                <xxf:variable name="resultDescription"
                    select="if (xxf:instance('control-instance')/manageRecords/status = 'processed' and $subOperation='record') then xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/statusMessage/message[@processingProgress='archivedRecord'] else if (xxf:instance('control-instance')/manageRecords/status = 'processed' and $subOperation='composition') then xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/statusMessage/message[@processingProgress='archivedRecordCompositions'] else xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/statusMessage/message[@processingProgress='failedArchiveRecord']"/>
                <xf:setvalue ref="xxf:instance('control-instance')/statusMessage/entry"
                    value="concat($resultDescription,$patientId)"/>
                <xf:insert context="xxf:instance('control-instance')/statusMessage/entryList"
                    origin="xxf:instance('control-instance')/statusMessage/entry"/>

                <!-- Clear the source and target patientIds.
                    The value-changed event will then clear the records -->
                <xf:action>
                    <xf:setvalue
                        ref="xxf:instance('control-instance')/manageRecords/source/patientId"
                        value="''"/>
                    <xf:setvalue
                        ref="xxf:instance('control-instance')/manageRecords/target/patientId"
                        value="''"/>
                </xf:action>

            </xf:action>



            <!-- Application defined action to unarchive (restore) source record.
                 The source is the archived record, the target is the active record (if it exists)
                 If the full record is being restored then all compositions are restored, otherwise just the ones selected by the user
                 Iterates through the composition set to be restored:
                    loads composition, sets the serviceEvent and writes to records then removes from the archive.                
                 Then for full restore, deletes the patient collection from the archive
                 Stores the restore (unarchive) composition in records/patientId to record the operation
            -->
            <xf:action ev:event="unarchive-record">
                <!-- patient id for unarchive -->
                <xxf:variable name="patientId"
                    select="xxf:instance('control-instance')/manageRecords/source/patientId"/>

                <!-- subOperation - record or composition -->
                <xxf:variable name="subOperation"
                    select="xxf:instance('control-instance')/manageRecords/subOperation"/>

                <!-- cdaHeader - will be from either the source (subOperation is 'record') or the target (subOperation is 'composition') -->
                <xxf:variable name="cdaHeader"
                    select="if ($subOperation='record') then xxf:instance('control-instance')/manageRecords/source/cdaHeader else xxf:instance('control-instance')/manageRecords/target/cdaHeader"/>

                <!-- patientId must be set to unarchive -->
                <xf:action if="$patientId != ''">
                    <!-- Get the template manageRecordsCDA document
                        This is placed in manageRecords-template-instance
                        This is insantiated and written to the target collection at the end of the unarchive process.
                        Also used as the source for the cda:documentationOf and cda:serviceEvent elements -->
                    <xf:send submission="load-manageRecordsTemplate-submission"/>

                    <xxf:variable name="templateCompositionId"
                        select="xxf:instance('manageRecords-template-instance')/cda:id[1]/@extension"/>
                    <xxf:variable name="templateDocumentationOf"
                        select="xxf:instance('manageRecords-template-instance')/cda:documentationOf[1]"/>

                    <!-- compositionsList to restore.
                        If subOperation is composition then the list of selected compositions in sourceCompositionsList.
                        If subOperation is record then all compositions in sourceCompositionsList.
                    -->
                    <xxf:variable name="compositionsList"
                        select="if ($subOperation='record') then xxf:instance('sourceCompositionsList-instance')/composition else xxf:instance('sourceCompositionsList-instance')/composition[selected='true']"/>

                    <!-- Iterate through source record compositions to be restored.
                         But not if there was an error
                         Load to import-instance.
                         Set the serviceEvemt
                         Save import-instance to the target record. 
                         Remove the composition from the archive -->

                    <xf:action if="xxf:instance('control-instance')/manageRecords/status !='error'"
                        xxf:iterate="$compositionsList">
                        <xxf:variable name="composition" select="."/>
                        <xxf:variable name="sourceHandle" select="$composition/handle"/>

                        <!-- Transfer composition from archive to records -->
                        <xf:dispatch name="transfer-composition" target="main-model">
                            <xxf:context name="sourceHandle" select="$sourceHandle"/>
                            <xxf:context name="sourceId" select="$patientId"/>
                            <xxf:context name="sourceInformationType" select="'archive'"/>
                            <xxf:context name="targetId" select="$patientId"/>
                            <xxf:context name="targetInformationType" select="'records'"/>
                            <xxf:context name="targetHeader" select="$cdaHeader"/>
                            <xxf:context name="templateDocumentationOf"
                                select="$templateDocumentationOf"/>
                        </xf:dispatch>
                    </xf:action>

                    <!-- If subOperation is 'record' and there are no errors so far
                        Remove archive collection from the source,
                    -->
                    <xf:action
                        if="$subOperation='record' and xxf:instance('control-instance')/manageRecords/status !='error'">
                        <xxf:variable name="informationTypeList" select="('archive')"/>
                        <xf:dispatch name="remove-record-collections" target="main-model">
                            <xxf:context name="informationTypeList" select="$informationTypeList"/>
                            <xxf:context name="patientId" select="$patientId"/>
                        </xf:dispatch>
                    </xf:action>

                    <!-- Restore is complete - now store manageRecords CDA composition in target record -->
                    <xf:action if="xxf:instance('control-instance')/manageRecords/status !='error'">
                        <!-- Put manageRecords into import-instance -->
                        <xf:insert nodeset="xxf:instance('import-instance')"
                            origin="xxf:instance('manageRecords-template-instance')"/>

                        <!-- Set the cda header patient information using CDA header -->
                        <xf:dispatch name="set-importRecordHeader" target="main-model">
                            <xxf:context name="cdaHeader" select="$cdaHeader"/>
                        </xf:dispatch>

                        <!-- Store manageRecords CDA composition to the target record -->
                        <xf:setvalue ref="xxf:instance('control-instance')/storageObject"
                            value="concat(xxf:instance('view-parameters-instance')/applicationDatabaseLocation,'/records/',$patientId,'/',$templateCompositionId)"/>
                        <xf:send submission="import-instance-submission"/>

                    </xf:action>

                </xf:action>

                <!-- Finished the unarchive operation, so set the status -->
                <xf:setvalue ref="xxf:instance('control-instance')/manageRecords/status"
                    value="if (.!='error') then 'processed' else ."/>
                <!-- Report the result -->
                <xxf:variable name="resultDescription"
                    select="if (xxf:instance('control-instance')/manageRecords/status = 'processed' and $subOperation='record') then xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/statusMessage/message[@processingProgress='unarchivedRecord'] else if (xxf:instance('control-instance')/manageRecords/status = 'processed' and $subOperation='composition') then xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/statusMessage/message[@processingProgress='unarchivedRecordCompositions'] else xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/statusMessage/message[@processingProgress='failedUnarchiveRecord']"/>
                <xf:setvalue ref="xxf:instance('control-instance')/statusMessage/entry"
                    value="concat($resultDescription,$patientId)"/>
                <xf:insert context="xxf:instance('control-instance')/statusMessage/entryList"
                    origin="xxf:instance('control-instance')/statusMessage/entry"/>

                <!-- Clear the source and target patientIds.
                    The value-changed event will then clear the records -->
                <xf:action>
                    <xf:setvalue
                        ref="xxf:instance('control-instance')/manageRecords/source/patientId"
                        value="''"/>
                    <xf:setvalue
                        ref="xxf:instance('control-instance')/manageRecords/target/patientId"
                        value="''"/>
                </xf:action>
            </xf:action>

            <!-- ===
                Redirect Notifications
                redirectNotifications
                === -->

            <!-- Application defined action to find notifications to redirect.
                 Depends on whether notificationType is set to notifications or annotations.
                 Sets the notificationCount once the notifications have been found. -->
            <xf:action ev:event="find-notifications">
                <xf:setvalue
                    ref="xxf:instance('control-instance')/redirectNotifications/notificationCount"
                    value="'0'"/>
                <!-- Set up the query, based on parameters set by user.
                     There are two parameters to set in the query:
                        actorCriteria
                        filterCriteria
                        notificationTypeCriteria (annotation | notification)
                -->
                <!-- Notify Actor -->
                <xxf:variable name="notifyActor"
                    select="xxf:instance('control-instance')/redirectNotifications/notifications/notifyActor"/>
                <!-- Components of the filterCriteria:
                        effectiveTime
                        authorTime
                        action
                        origin
                        trigger
                      -->
                <!-- Effective time 
                     For the upper limit (to) need to add one day to the date selected and then use the lt comparator
                     This is because (.e.g) a dateTime of 2016-01-27T10:39:24.238Z is greater than 2016-01-27 but less than 2016-01-28 -->
                <xxf:variable name="effectiveTimeCriteriaInput"
                    select="xxf:instance('control-instance')/redirectNotifications/notifications/effectiveTime"/>
                <xxf:variable name="effectiveTimeFromCriteria"
                    select="if ($effectiveTimeCriteriaInput/@from = '') then '' else concat('[data(cda:effectiveTime/@value) ge ''',$effectiveTimeCriteriaInput/@from,''']')"/>
                <xxf:variable name="adjustedEffectiveTimeToCriteria"
                    select="if ($effectiveTimeCriteriaInput/@to castable as xs:date) then xs:string(xs:date($effectiveTimeCriteriaInput/@to)+xs:dayTimeDuration('P1D')) else ''"/>
                <xxf:variable name="effectiveTimeToCriteria"
                    select="if ($adjustedEffectiveTimeToCriteria = '') then '' else concat('[data(cda:effectiveTime/@value) lt ''',$adjustedEffectiveTimeToCriteria,''']')"/>
                <xxf:variable name="effectiveTimeCriteria"
                    select="concat($effectiveTimeFromCriteria,$effectiveTimeToCriteria)"/>
                <!-- AuthorTime -->
                <xxf:variable name="authorTimeCriteriaInput"
                    select="xxf:instance('control-instance')/redirectNotifications/notifications/authorTime"/>
                <xxf:variable name="authorTimeFromCriteria"
                    select="if ($authorTimeCriteriaInput/@from = '') then '' else concat('[data(cda:author/cda:time/@value) ge ''',$authorTimeCriteriaInput/@from,''']')"/>
                <xxf:variable name="authorTimeToCriteria"
                    select="if ($authorTimeCriteriaInput/@to = '') then '' else concat('[data(cda:author/cda:time/@value) le ''',$authorTimeCriteriaInput/@to,''']')"/>
                <xxf:variable name="authorTimeCriteria"
                    select="concat($authorTimeFromCriteria,$authorTimeToCriteria)"/>
                <!-- Action.
                     -->
                <xxf:variable name="action"
                    select="xxf:instance('control-instance')/redirectNotifications/notifications/action"/>
                <xxf:variable name="actionType"
                    select="xxf:instance('control-instance')/redirectNotifications/notifications/actionType"/>
                <xxf:variable name="actionCriteria"
                    select="if ($actionType='#cityEHR:Action:AnyAction') then '' 
                    else if ($actionType='#cityEHR:Action:NoAction') then '[data(descendant::cda:act/cda:subject/cda:typeId/@extension eq '''''')]'
                    else  concat('[data(descendant::cda:act/cda:subject/cda:typeId/@extension eq ''',$action,''')]')"/>
                <!-- Acknowledged -->
                <xxf:variable name="acknowledged"
                    select="xxf:instance('control-instance')/redirectNotifications/notifications/acknowledged"/>
                <xxf:variable name="acknowledgeCode"
                    select="xxf:instance('view-parameters-instance')/staticParameters/cityEHRInTray/acknowledge/@code"/>
                <xxf:variable name="acknowledgedCriteria"
                    select="if ($acknowledged=true()) then concat('[data(descendant::cda:participant[1]/cda:functionCode/@code)=''',$acknowledgeCode,''']') else ''"/>
                <!-- Origin -->
                <xxf:variable name="origin"
                    select="xxf:instance('control-instance')/redirectNotifications/notifications/origin"/>
                <xxf:variable name="originCriteria"
                    select="if ($origin!='') then concat('[data(descendant::cda:serviceEvent/cda:id/@root eq ''',$origin,''')]') else '' "/>
                <!-- Trigger - this is finding the same stuff as Origin.
                     But trigger comes from configuration or pathway.
                     Origin comes from annotation. -->
                <xxf:variable name="triggerComposition"
                    select="xxf:instance('control-instance')/redirectNotifications/notifications/triggerComposition"/>
                <xxf:variable name="triggerEntry"
                    select="xxf:instance('control-instance')/redirectNotifications/notifications/triggerEntry"/>
                <xxf:variable name="triggerEffectiveTimeElement"
                    select="xxf:instance('control-instance')/redirectNotifications/notifications/triggerEffectiveTimeElement"/>
                <xxf:variable name="triggerCriteria"
                    select="if ($triggerComposition!='' and $triggerEntry!='') then concat('[data(descendant::cda:serviceEvent/cda:id/@root eq ''',$triggerComposition,''')]','[data(descendant::cda:serviceEvent/cda:id/@extension eq ''',$triggerEntry,''')]') else '' "/>
                <!-- EffectiveTime set from Trigger -->
                <xxf:variable name="triggeredEffectiveTime"
                    select="xxf:instance('control-instance')/redirectNotifications/notifications/triggeredEffectiveTime"/>
                <xxf:variable name="triggeredEffectiveTimeComparator"
                    select="if ($triggeredEffectiveTime='offset') then ' ne ' else if ($triggeredEffectiveTime='noOffset') then ' eq ' else ''"/>
                <xxf:variable name="triggeredEffectiveTimeCriteria"
                    select="if ($triggeredEffectiveTime=('offset','noOffset')) then concat('[data(cda:effectiveTime/@value)',$triggeredEffectiveTimeComparator,'descendant::cda:observation[cda:id/@extension = ''',$triggerEntry,''']/cda:value[@extension = ''',$triggerEffectiveTimeElement,''']/@value]') else ''"/>
                <!-- Set the concatenated filter criteria -->
                <xxf:variable name="filterCriteria"
                    select="concat($effectiveTimeCriteria,$authorTimeCriteria,$actionCriteria,$acknowledgedCriteria,$originCriteria,$triggerCriteria,$triggeredEffectiveTimeCriteria)"/>
                <!-- Annotations -->
                <xf:action
                    if="xxf:instance('control-instance')/redirectNotifications/notificationType='#CityEHR:Annotation'">
                    <xf:dispatch name="load-notifications-list" target="notification-model">
                        <xxf:context name="notificationType" select="'annotation'"/>
                        <xxf:context name="actorList" select="$notifyActor"/>
                        <xxf:context name="filterCriteria" select="$filterCriteria"/>
                    </xf:dispatch>
                    <xf:setvalue
                        ref="xxf:instance('control-instance')/redirectNotifications/notificationCount"
                        value="count(xxf:instance('notification-annotations-instance')/*)"/>
                </xf:action>
                <!-- Notifications -->
                <xf:action
                    if="xxf:instance('control-instance')/redirectNotifications/notificationType='#CityEHR:Notification'">
                    <xf:dispatch name="load-notifications-list" target="notification-model">
                        <xxf:context name="notificationType" select="'notification'"/>
                        <xxf:context name="actorList" select="$notifyActor"/>
                        <xxf:context name="filterCriteria" select="$filterCriteria"/>
                    </xf:dispatch>
                    <xf:setvalue
                        ref="xxf:instance('control-instance')/redirectNotifications/notificationCount"
                        value="count(xxf:instance('notification-actions-instance')/*)"/>
                </xf:action>
                <!-- Reset the status to 'ready' so that redirect button can be activated.
                     But only if there are notifications in the list  -->
                <xxf:variable name="notificationCount"
                    select="xxf:instance('control-instance')/redirectNotifications/notificationCount"/>
                <xf:setvalue ref="xxf:instance('control-instance')/redirectNotifications/status"
                    value="if (not($notificationCount = ('','0'))) then 'ready' else 'waiting'"/>
            </xf:action>

            <!-- Application defined action to redirect the current notification
                 Resets the notifyActor and action, then saves the notification.
                 Uses the notification passed via the <xxf:context name="notification" select="."/>  
            
                 Load notification
                 Reset notifyActor (if parameter has been set)
                 Reset action (if parameter has been set)
                 Reset effectiveTime (if parameter has been set)
                 Save notification -->
            <xf:action ev:event="redirect-notification">
                <xxf:variable name="notification" select="event('notification')"/>
                <!-- Set the current notification -->
                <xf:delete
                    nodeset="xxf:instance('notificationsControl-instance')/currentNotification/*"/>
                <xf:insert
                    context="xxf:instance('notificationsControl-instance')/currentNotification"
                    origin="$notification"/>
                <!-- Load the notification composition.
                     This loads the currently selected notification to notification-instance -->
                <xf:send submission="load-notification-submission" target="notification-model"/>
                <!-- Reset the notifyActor, if required -->
                <xxf:variable name="notifyActorType"
                    select="xxf:instance('control-instance')/redirectNotifications/redirectedNotifications/notifyActorType"/>
                <xxf:variable name="notifyActor"
                    select="xxf:instance('control-instance')/redirectNotifications/redirectedNotifications/notifyActor"/>
                <xf:action if="$notifyActorType != '' and $notifyActor != ''">
                    <xf:setvalue
                        ref="xxf:instance('notification-instance')/cda:participant/cda:associatedEntity/cda:id/@root"
                        value="$notifyActorType"/>
                    <xf:setvalue
                        ref="xxf:instance('notification-instance')/cda:participant/cda:associatedEntity/cda:id/@extension"
                        value="$notifyActor"/>
                </xf:action>
                <!-- Reset the action, if required -->
                <xxf:variable name="actionType"
                    select="xxf:instance('control-instance')/redirectNotifications/redirectedNotifications/actionType"/>
                <xxf:variable name="action"
                    select="xxf:instance('control-instance')/redirectNotifications/redirectedNotifications/action"/>
                <xf:action if="$actionType != '#cityEHR:Action:ExistingAction' and $action != ''">
                    <xxf:variable name="notificationSection"
                        select="xxf:instance('notification-instance')/descendant::cda:section[1]"/>
                    <xxf:variable name="notificationActionEntry"
                        select="$notificationSection/cda:entry[cda:act][1]"/>
                    <!-- If notificationActionEntry does not exist, then insert from the template -->
                    <xf:action if="not(exists($notificationActionEntry))">
                        <xxf:variable name="notificationActionEntryTemplate"
                            select="xxf:instance('action-notification-template-instance')/descendant::cda:entry[cda:act][1]"/>
                        <xf:insert context="$notificationSection"
                            origin="$notificationActionEntryTemplate"/>
                    </xf:action>
                    <!-- Reset the action -->
                    <xf:setvalue ref="$notificationActionEntry/cda:act/cda:subject/cda:typeId/@root"
                        value="$actionType"/>
                    <xf:setvalue
                        ref="$notificationActionEntry/cda:act/cda:subject/cda:typeId/@extension"
                        value="$action"/>
                </xf:action>
                <!-- Set the acknowledge status, if required.
                     Can only set to acknowledged - if 'false' then the acknowledge status remains unchanged -->
                <xxf:variable name="acknowledge"
                    select="xxf:instance('control-instance')/redirectNotifications/redirectedNotifications/acknowledge"/>
                <xf:action if="$acknowledge">
                    <!-- Set the functionCode -->
                    <xf:setvalue
                        ref="xxf:instance('notification-instance')//cda:participant[1]/cda:functionCode/@code"
                        value="xxf:instance('view-parameters-instance')/staticParameters/cityEHRInTray/acknowledge/@code"/>
                    <xf:setvalue
                        ref="xxf:instance('notification-instance')//cda:participant[1]/cda:functionCode/@codeSystem"
                        value="xxf:instance('view-parameters-instance')/staticParameters/cityEHRInTray/acknowledge/@codeSystem"
                    />
                </xf:action>
                <!-- Reset the effectiveTime, if required -->
                <xxf:variable name="resetEffectiveTime"
                    select="xxf:instance('control-instance')/redirectNotifications/redirectedNotifications/resetEffectiveTime"/>
                <xxf:variable name="trigger"
                    select="xxf:instance('control-instance')/redirectNotifications/notifications/selectedtrigger/trigger"/>
                <xf:action if="$resetEffectiveTime and exists($trigger)">
                    <!-- Get the effectiveTime from the variables set in the trigger -->
                    <xxf:variable name="effectiveTimeEntry" select="$trigger/@entryIRI"/>
                    <xxf:variable name="effectiveTimeElement"
                        select="$trigger/effectiveTime/@elementIRI"/>
                    <xxf:variable name="effectiveTimeOffset"
                        select="if ($trigger/effectiveTime/@offset castable as  xs:dayTimeDuration) then $trigger/effectiveTime/@offset else ''"/>
                    <!-- Get the recorded value -->
                    <xxf:variable name="effectiveTimeValue"
                        select="xxf:instance('notification-instance')//cda:observation[cda:id/@extension = $effectiveTimeEntry]/cda:value[@extension = $effectiveTimeElement]/@value"/>
                    <xxf:variable name="effectiveTimeBase"
                        select="if (exists($effectiveTimeValue)) then $effectiveTimeValue else ''"/>
                    <!-- Set the effectiveTime
                         Need to handle all combinations of xs:date. xs:dateTime and xs:dayTimeDuration, xs:yearMonthDuration -->
                    <xxf:variable name="newEffectiveTime"
                        select="if ($effectiveTimeOffset castable as xs:dayTimeDuration and $effectiveTimeBase castable as xs:dateTime) then xs:dateTime($effectiveTimeBase) + xs:dayTimeDuration($effectiveTimeOffset) 
                        else if ($effectiveTimeOffset castable as xs:dayTimeDuration and $effectiveTimeBase castable as xs:date) then xs:date($effectiveTimeBase) + xs:dayTimeDuration($effectiveTimeOffset)
                        else if ($effectiveTimeOffset castable as xs:yearMonthDuration and $effectiveTimeBase castable as xs:dateTime) then xs:dateTime($effectiveTimeBase) + xs:yearMonthDuration($effectiveTimeOffset) 
                        else if ($effectiveTimeOffset castable as xs:yearMonthDuration and $effectiveTimeBase castable as xs:date) then xs:date($effectiveTimeBase) + xs:yearMonthDuration($effectiveTimeOffset) 
                        else $effectiveTimeBase"/>
                    <xf:setvalue
                        ref="xxf:instance('notification-instance')//cda:effectiveTime[1]/@value"
                        value="if ($newEffectiveTime !='') then $newEffectiveTime else ."/>
                </xf:action>
                <!-- Save the notification composition -->
                <xf:send submission="save-notification-submission" target="notification-model"/>
            </xf:action>

            <!-- Application defined action to delete the set of acknowledged notifications.
                 Only to be used after the user has confirmed.
                 Gets the list of notifications and then calls the action in notification-model -->
            <xf:action ev:event="delete-notificationList">
                <!-- Get the list of notifications to delete -->
                <xxf:variable name="notificationType"
                    select="xxf:instance('control-instance')/redirectNotifications/notificationType"/>
                <xxf:variable name="notificationList"
                    select="if ($notificationType='#CityEHR:Annotation') then xxf:instance('notification-annotations-instance')/notification else xxf:instance('notification-actions-instance')/notification"/>
                <!-- Delete the notifications -->
                <xf:dispatch name="delete-notificationList" target="notification-model">
                    <xxf:context name="notificationList" select="$notificationList"/>
                </xf:dispatch>
                <!-- Rerun the find-notification action.
                     Should now find no notifications, because they have been deleted -->
                <xf:dispatch name="find-notifications" target="main-model"/>
            </xf:action>

            <!-- =================== 
                 Process patient lists
                 processPatientList
                 =================== -->

            <!-- Load the query from file -->
            <xf:instance id="checkPatientListXQuery-instance"
                src="oxf:/apps/ehr/xquery/checkPatientListXQuery.xml"/>

            <!-- Query submitted to xmlstore -->
            <xf:instance id="checkPatientListQuery-instance">
                <exist:query start="1" max="-1">
                    <exist:text/>
                </exist:query>
            </xf:instance>

            <!-- List of patients returned from query.
                    <patient id="" selected=""/>
                 The selected attribute is bound to xs:boolean so that patients in the list can be selected -->
            <xf:instance id="hasRecordPatientList-instance">
                <exist:result/>
            </xf:instance>
            <xf:bind nodeset="xxf:instance('hasRecordPatientList-instance')/patient/@selected"
                type="xs:boolean"/>

            <!-- Submission to run query to check patients-->
            <xf:submission id="checkPatientList-submission"
                ref="xxf:instance('checkPatientListQuery-instance')"
                action="{xxf:instance('view-parameters-instance')/applicationDatabaseLocation}/records"
                method="post" replace="instance" instance="hasRecordPatientList-instance">
                <!-- Success -->
                <xf:action ev:event="xforms-submit-done">
                    <!-- Create the hasRecordPatientList from id attributes returned in hasRecordPatientList -->
                    <xxf:variable name="hasRecordPatientList"
                        select="xxf:instance('hasRecordPatientList-instance')/patient/@id"/>
                    <xf:setvalue
                        ref="xxf:instance('control-instance')/processPatientList/patientList[@type='hasRecordPatientList']"
                        value="string-join($hasRecordPatientList,xxf:instance('view-parameters-instance')/resultSeparator)"/>
                    <xf:setvalue
                        ref="xxf:instance('control-instance')/processPatientList/patientList[@type='hasRecordPatientList']/@count"
                        value="count($hasRecordPatientList)"/>
                </xf:action>
                <!-- Failed -->
                <xf:action ev:event="xforms-submit-error">
                    <!-- TBD -->
                </xf:action>
            </xf:submission>

            <!-- Application defined action to check the patientList against the patients in xmlstore -->
            <xf:action ev:event="check-patientList">
                <!-- Set patientIdList in query.
                     This is set as a list of lists, since the XQuery (in eXist) is limited to a list length of 1064 -->
                <xxf:variable name="patientIdList"
                    select="tokenize(xxf:instance('control-instance')/processPatientList/patientList[@type='importedPatientList'],xxf:instance('view-parameters-instance')/resultSeparator)"/>
                <xxf:variable name="setSize" select="xs:integer('1000')"/>
                <xxf:variable name="setCount"
                    select="xs:integer(floor((count($patientIdList) + $setSize -1) div $setSize))"/>
                <xf:setvalue ref="xxf:instance('checkPatientListXQuery-instance')/patientIdList"
                    value="''"/>
                <xf:action if="$setCount gt 0" xxf:iterate="1 to $setCount">
                    <xxf:variable name="setNumber" select="."/>
                    <xxf:variable name="startPosition"
                        select="xs:integer(($setNumber - 1)*$setSize)"/>
                    <xxf:variable name="endPosition" select="xs:integer($startPosition + $setSize)"/>
                    <xxf:variable name="connector"
                        select="if (xxf:instance('checkPatientListXQuery-instance')/patientIdList = '') then '' else ','"/>
                    <xf:setvalue ref="xxf:instance('checkPatientListXQuery-instance')/patientIdList"
                        value="concat(.,$connector,'(''',string-join($patientIdList[position() &gt; $startPosition and position() &lt;= $endPosition],''','''),''')')"
                    />
                </xf:action>

                <!-- Set query text -->
                <xf:setvalue ref="xxf:instance('checkPatientListQuery-instance')/exist:text"
                    value="xxf:instance('checkPatientListXQuery-instance')"/>
                <!-- Submit query (sets hasRecordPatientList if successful) -->
                <xf:send submission="checkPatientList-submission"/>
            </xf:action>

            <!-- Application defined action to transform the patientList after it has been imported.
                 The transform works on cityEHR database format, converted from both ODF and MS spreadsheets -->
            <xf:action ev:event="transform-patientList">
                <xf:setvalue ref="xxf:instance('control-instance')/statusMessage/entry"
                    value="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/statusMessage/message[@processingProgress='convertingSpreadsheetToXML']"/>
                <xf:insert context="xxf:instance('control-instance')/statusMessage/entryList"
                    origin="xxf:instance('control-instance')/statusMessage/entry"/>
                <!-- Set up pipeline -->
                <xxf:variable name="xsltPipeline"
                    select="concat(xxf:instance('view-parameters-instance')/appPath,'/pipelines/convertDatabase2PatientList.xpl')"/>
                <!-- Replace root node of 'import-instance' with pipeline output -->
                <xf:insert nodeset="xxf:instance('import-instance')"
                    origin="xxf:call-xpl($xsltPipeline, 'instance', xxf:instance('import-instance'), 'data')"
                />
            </xf:action>

            <!-- Application defined action to create the patient lists.
                 First form the importedPatientList with the list of patientIds imported.
                 Then run a query to return all patients with a record in the xmlstore - hasRecordPatientList 
                 Then compare importedPatientList and hasRecordPatientList to form the list noRecordPatientList 
                 If a care team is loaded in careTeam-instance then compare with importedPatientList to form the list careTeamPatientList
            -->
            <xf:action ev:event="create-patientLists">
                <!-- Create the importedPatientList from patientId attributes.
                     Only use patients with id length up to the maximum (can be used to eliminate long values that are obviously not an identifier) 
                     And allow for specified number of header rows -->
                <xxf:variable name="patientIdLength"
                    select="if (xxf:instance('control-instance')/processPatientList/patientIdLength castable as xs:integer) then xxf:instance('control-instance')/processPatientList/patientIdLength else xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/checkPatientList/patientIdLength/@value"/>
                <xxf:variable name="headerRows"
                    select="if (xxf:instance('control-instance')/processPatientList/headerRows castable as xs:integer) then xxf:instance('control-instance')/processPatientList/headerRows else xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/checkPatientList/headerRows/@value"/>

                <!-- Patient list is imported from a spreadsheet which has been converted to cityEHR database format -->
                <xxf:variable name="importedPatientList"
                    select="distinct-values(xxf:instance('import-instance')/patient[position() gt xs:integer($headerRows)]/@id[.!=''][string-length(.) le xs:integer($patientIdLength)])"/>
                <xf:setvalue
                    ref="xxf:instance('control-instance')/processPatientList/patientList[@type='importedPatientList']"
                    value="string-join($importedPatientList,xxf:instance('view-parameters-instance')/resultSeparator)"/>
                <xf:setvalue
                    ref="xxf:instance('control-instance')/processPatientList/patientList[@type='importedPatientList']/@count"
                    value="count($importedPatientList)"/>

                <!-- Run query to set up hasRecordPatientList.
                     This sets hasRecordPatientList -->
                <xf:dispatch name="check-patientList" target="main-model"/>
                <xxf:variable name="hasRecordPatientList"
                    select="xxf:instance('control-instance')/processPatientList/patientList[@type='hasRecordPatientList']"/>
                <!-- noRecordPatientList are members of importedPatientList not in hasRecordPatientList -->
                <xxf:variable name="noRecordPatientList"
                    select="for $p in $importedPatientList return if (contains($hasRecordPatientList,$p)) then () else $p"/>
                <xf:setvalue
                    ref="xxf:instance('control-instance')/processPatientList/patientList[@type='noRecordPatientList']"
                    value="string-join($noRecordPatientList,xxf:instance('view-parameters-instance')/resultSeparator)"/>
                <xf:setvalue
                    ref="xxf:instance('control-instance')/processPatientList/patientList[@type='noRecordPatientList']/@count"
                    value="count($noRecordPatientList)"/>
                <!-- careTeamPatientList are members of importedPatientList that are in the currently loaded care team -->
                <xxf:variable name="careTeamPatientList"
                    select="for $p in $importedPatientList return if (exists(xxf:instance('careTeam-instance')/patient[@id = $p])) then $p else ()"/>
                <xf:setvalue
                    ref="xxf:instance('control-instance')/processPatientList/patientList[@type='careTeamPatientList']"
                    value="string-join($careTeamPatientList,xxf:instance('view-parameters-instance')/resultSeparator)"/>
                <xf:setvalue
                    ref="xxf:instance('control-instance')/processPatientList/patientList[@type='careTeamPatientList']/@count"
                    value="count($careTeamPatientList)"/>
            </xf:action>


            <!-- ===
                Managing Patient Access 
                managePatientAccess
                === -->
            <!-- cityEHRpaExtract template -->
            <xf:instance id="cityEHRpaExtract-instance">
                <cityEHRpaExtract xmlns=""/>
            </xf:instance>
            <xf:submission id="load-cityEHRpaExtract-submission"
                resource="{xxf:instance('view-parameters-instance')/staticFileURL}/templates/cityEHRpaExtract.xml"
                method="get" validate="false" replace="instance" serialization="none"
                instance="cityEHRpaExtract-instance"/>

            <!-- Submission to store the cityEHRpaExtract-instance to the patient database.
                 Uses storageObject, which must be set correctly before the submission is made -->
            <xf:submission id="store-cityEHRpaExtract-submission"
                ref="xxf:instance('cityEHRpaExtract-instance')"
                action="{xxf:instance('control-instance')/storageObject}" method="put"
                replace="none" f:url-type="resource" includenamespacesprefixes="">
                <xf:action ev:event="xforms-submit-done">
                    <!-- TBD -->
                </xf:action>
                <xf:action ev:event="xforms-submit-error">
                    <!-- TBD -->
                </xf:action>
            </xf:submission>

            <!-- Application defined action to set up the patientCompositionSet
                 The list is made for all composition types that match configuration in view-parameters.
                 Currently this should only be for #CityEHR:Form
            -->
            <xf:action ev:event="set-patientCompositionSet">
                <xxf:variable name="compositionList"
                    select="xxf:instance('dictionary-instance')/iso-13606:folderCollection/iso-13606:folder[1]/iso-13606:composition[@typeId=xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/managePatientAccess/patientCompositionSet/typeId]"/>
                <xf:delete
                    nodeset="xxf:instance('control-instance')/managePatientAccess/patientCompositionSet/*"/>
                <xxf:variable name="compositionTemplate"
                    select="xxf:instance('control-instance')/managePatientAccess/composition"/>
                <!-- Iterate through dictionary compositions, insert into compositionSet -->
                <xf:action xxf:iterate="$compositionList">
                    <xxf:variable name="composition" select="."/>
                    <xf:setvalue ref="$compositionTemplate/@id" value="$composition/@code"/>
                    <xf:setvalue ref="$compositionTemplate/@displayName"
                        value="$composition/@displayName"/>
                    <xf:insert
                        context="xxf:instance('control-instance')/managePatientAccess/patientCompositionSet"
                        origin="$compositionTemplate"/>
                </xf:action>
                <xf:setvalue
                    ref="xxf:instance('control-instance')/managePatientAccess/compositionCount"
                    value="count(xxf:instance('control-instance')/managePatientAccess/patientCompositionSet/composition)"/>
                <xf:setvalue
                    ref="xxf:instance('control-instance')/managePatientAccess/selectedCompositionCount"
                    value="count(xxf:instance('control-instance')/managePatientAccess/patientCompositionSet/composition[@selected='true'])"
                />
            </xf:action>

            <!-- Application defined action to load, instantiate and transfer the cityEHRpaExtract template
                 1) Load the template (ensures its clean at the start)
                 2) Insert the patientRegistration element from parameters-instance
                 3) Insert composition templates into data element
                 4) Store in systemConfiguration in patient database 
                 
                 Note that this must be called after transfer-patient-composition-templates so that compositionTemplates-instance is set correctly
            -->
            <xf:action ev:event="transfer-cityEHRpaExtract-template">
                <!-- 1. Load the template -->
                <xf:send submission="load-cityEHRpaExtract-submission"/>
                <!-- 2. Insert the patientRegistration element -->
                <xf:insert context="xxf:instance('cityEHRpaExtract-instance')"
                    origin="xxf:instance('application-parameters-instance')/patientRegistration"/>
                <!-- 3. Insert composition templates into the data element -->
                <xf:action
                    xxf:iterate="xxf:instance('compositionTemplates-instance')/cda:ClinicalDocument">
                    <xxf:variable name="composition" select="."/>
                    <!-- Insert into data element -->
                    <!--
                    <xf:insert context="xxf:instance('cityEHRpaExtract-instance')/data"
                    origin="$composition"/>
                    -->
                    <xf:insert context="xxf:instance('cityEHRpaExtract-instance')/data"
                        nodeset="cda:ClinicalDocument" origin="$composition" at="last()"
                        position="after"/>
                </xf:action>
                <!-- 4. Store in patient database -->
                <xf:setvalue ref="xxf:instance('control-instance')/storageObject"
                    value="concat(xxf:instance('control-instance')/managePatientAccess/patientDatabaseApplicationLocation,'/systemConfiguration/cityEHRpaExtract')"/>
                <xf:send submission="store-cityEHRpaExtract-submission"/>
            </xf:action>
            <!-- Composition templates -->
            <xf:instance id="compositionTemplates-instance">
                <compositionSet/>
            </xf:instance>

            <!-- Submission to store the compositionTemplates-instance to the patient database.
                Uses storageObject, which must be set correctly before the submission is made -->
            <xf:submission id="store-compositionTemplates-submission"
                ref="xxf:instance('compositionTemplates-instance')"
                action="{xxf:instance('control-instance')/storageObject}" method="put"
                replace="none" f:url-type="resource" includenamespacesprefixes="">
                <xf:action ev:event="xforms-submit-done">
                    <!-- TBD -->
                </xf:action>
                <xf:action ev:event="xforms-submit-error">
                    <!-- TBD -->
                </xf:action>
            </xf:submission>

            <!-- Application defined action to set up composition templates in patient database.
                    1) load the ontology model to the import-instance
                    2) generate the set of composition templates from the ontology model
                    3) insert those selected for transfer to compositionTemplates-instance
                    4) save in the patient database, overwriting the existing document (if it exists)
                 -->
            <xf:action ev:event="transfer-patient-composition-templates">
                <!-- 1. Load the ontology model into resource-instance (this is for the current specialty - TBD, select the specialty) -->
                <xf:setvalue ref="xxf:instance('control-instance')/storageObject"
                    value="concat('/xmlstore/applications/',xxf:instance('view-parameters-instance')/applicationId,'/informationModel/',xxf:instance('view-parameters-instance')/specialtyId,'/',xxf:instance('view-parameters-instance')/specialtyId)"/>

                <!-- Load the information model into the resource-instance -->
                <xf:dispatch name="dal-read" target="databaseAccessLayer-model">
                    <xxf:context name="system" select="'ehr'"/>
                    <xxf:context name="physicalClusterNode" select="''"/>
                    <xxf:context name="storageLocation"
                        select="xxf:instance('control-instance')/storageObject"/>
                    <xxf:context name="resource" select="xxf:instance('resource-instance')"/>
                    <xxf:context name="status"
                        select="xxf:instance('control-instance')/managePatientAccess/status"/>
                </xf:dispatch>

                <!-- 2. Transform ontology to the composition set.
                        Then insert compositions that have been selected to compositionTemplates-instance
                        Note that only forms can be input by the patient (not letters, pathways, etc)-->
                <xxf:variable name="xsltPipeline"
                    select="concat(xxf:instance('view-parameters-instance')/appPath, '/pipelines/convertOWL2CompositionSet.xpl')"/>
                <xf:insert nodeset="xxf:instance('storage-instance')"
                    origin="xxf:call-xpl($xsltPipeline, ('instance','parameters'), (xxf:instance('resource-instance'),xxf:instance('view-parameters-instance')) , 'data')"/>
                <!-- 3. Now insert compositions that have been selected for user input into compositionTemplates-instance -->
                <xf:delete nodeset="xxf:instance('compositionTemplates-instance')/*"/>
                <xf:action
                    xxf:iterate="xxf:instance('storage-instance')/descendant::cda:ClinicalDocument">
                    <xxf:variable name="composition" select="."/>
                    <xxf:variable name="compositionIRI" select="$composition/cda:typeId/@extension"/>
                    <!-- Insert into compositionTemplates-instance, if selected -->
                    <xf:action
                        if="exists(xxf:instance('control-instance')/managePatientAccess/patientCompositionSet/composition[@selected='true'][@id=$compositionIRI])">
                        <xf:insert context="xxf:instance('compositionTemplates-instance')"
                            origin="$composition"/>
                    </xf:action>
                </xf:action>
                <!-- 4. Store the composition set in the patient database -->
                <xf:setvalue ref="xxf:instance('control-instance')/storageObject"
                    value="concat(xxf:instance('control-instance')/managePatientAccess/patientDatabaseApplicationLocation,'/systemConfiguration/compositionTemplates')"/>
                <xf:send submission="store-compositionTemplates-submission"/>
            </xf:action>

            <!-- Application defined action to transfer dictionaries patient database.
                1) Transfer the specialty dictionary 
                2) get the list of dictionaries
                3) load each dictionary
                4) save in the patient database, overwriting the existing dictionary (if it exists)

                Class dictionaries have the same name in both databases
                The specialty dictionary is renamed to 'dictionary' in the patient database
                 -->
            <xf:action ev:event="transfer-dictionaries">
                <!-- Set the patient database dictionary location -->
                <xxf:variable name="patientDatabaseApplicationDictionaryLocation"
                    select="concat(xxf:instance('control-instance')/managePatientAccess/patientDatabaseApplicationLocation,'/systemConfiguration/dictionary/')"/>
                <!-- 1 Transfer the specialty dictionary.
                       This is already loaded in dictionary-instance, so just need to store it in the patient database -->
                <xf:setvalue ref="xxf:instance('control-instance')/storageObject"
                    value="concat($patientDatabaseApplicationDictionaryLocation,'/dictionary')"/>

                <xf:dispatch name="dal-write" target="databaseAccessLayer-model">
                    <xxf:context name="system" select="'patient'"/>
                    <xxf:context name="storageLocation"
                        select="xxf:instance('control-instance')/storageObject"/>
                    <xxf:context name="resource" select="xxf:instance('dictionary-instance')"/>
                    <xxf:context name="status" select="xxf:instance('control-instance')/status"/>
                </xf:dispatch>

                <!-- TBD -->
            </xf:action>
            <!-- Get Information on patient sessions - store in patientSessionList-instance  -->
            <!-- Get details of patient sessions -->
            <xf:instance id="patientSessionList-instance">
                <exist:result>Will get replaced by the list of sessions</exist:result>
            </xf:instance>
            <!-- Load the query from file -->
            <xf:instance id="patientSessionListXQuery-instance"
                src="oxf:/apps/ehr/xquery/patientSessionListXQuery.xml"/>

            <!-- Submission to get list of patient sessions for this application -->
            <xf:submission id="patientSessionList-submission"
                ref="xxf:instance('patientSessionListXQuery-instance')"
                action="{xxf:instance('control-instance')/storageObject}" method="post"
                replace="instance" instance="patientSessionList-instance">
                <xf:action ev:event="xforms-submit-done"> </xf:action>
            </xf:submission>

            <!-- Application defined action to get list of all patient access sessions.
            -->
            <xf:action ev:event="get-patientSessionList">
                <!-- Set the patient database session location -->
                <xxf:variable name="patientDatabaseSessionLocation"
                    select="concat(xxf:instance('control-instance')/managePatientAccess/patientDatabaseApplicationLocation,'/sessions')"/>
                <xf:setvalue ref="xxf:instance('control-instance')/storageObject"
                    value="$patientDatabaseSessionLocation"/>
                <xf:send submission="patientSessionList-submission"/>
                <!-- Count the number of sessions -->
                <xf:setvalue
                    ref="xxf:instance('control-instance')/managePatientAccess/patientSessionCount"
                    value="count(xxf:instance('patientSessionList-instance')/session)"/>
            </xf:action>

            <!-- ===Patient Sessions -->
            <xf:instance id="patientSession-instance">
                <cityEHRpaExtract xmlns=""/>
            </xf:instance>

            <!-- Submission to load session -->
            <xf:submission id="load-patientSession-submission"
                action="{xxf:instance('control-instance')/storageObject}" validate="false"
                method="get" replace="instance" instance="patientSession-instance"
                f:url-type="resource">
                <xf:action ev:event="xforms-submit-done">
                    <!-- TBD -->
                </xf:action>
                <xf:action ev:event="xforms-submit-error">
                    <!-- TBD -->
                </xf:action>
            </xf:submission>

            <!-- Submission to delete session -->
            <xf:submission id="delete-patientSession-submission"
                ref="xxf:instance('patientSession-instance')"
                action="{xxf:instance('control-instance')/storageObject}" method="delete"
                replace="none" serialization="none"/>

            <!-- Application defined action to import patient access sessions. 
                 The list of sessions has already been retrieved in patientSessionList-instance
                 Iterate through the sessions and for each one
                        Load session from patient database
                        Iterate through annotations that have content 
                            Create a new annotation (by loading the template)
                            Instantiate
                            Store in xmlstore
                        Iterate through ClinicalDocuments that have patientId set (i.e. have been opened by the patient)
                            Instantiate
                            Store in xmlstore
                        Delete the session from xmlstore                           
            -->
            <xf:action ev:event="import-patient-session-data">
                <!-- Iterate through sessions -->
                <xf:action xxf:iterate="xxf:instance('patientSessionList-instance')/session">
                    <xxf:variable name="sessionInfo" select="."/>
                    <xxf:variable name="sessionHandle" select="$sessionInfo/@handle"/>
                    <!-- Load the session -->
                    <xxf:variable name="patientDatabaseSessionObject"
                        select="concat(xxf:instance('control-instance')/managePatientAccess/patientDatabaseLocation,$sessionHandle)"/>
                    <xf:setvalue ref="xxf:instance('control-instance')/storageObject"
                        value="$patientDatabaseSessionObject"/>
                    <xf:send submission="load-patientSession-submission"/>
                    <!-- Can now set the patientSession which has been loaded -->
                    <xxf:variable name="patientSession"
                        select="xxf:instance('patientSession-instance')"/>
                    <!-- Process patientSession if it was retrived correctly -->
                    <xf:action if="$sessionInfo/@patientId = $patientSession/patientRegistration/id">
                        <!-- Iterate through annotations.
                             Only process annotations that have some data input -->
                        <xf:action
                            xxf:iterate="$patientSession/annotations/annotation[@compositionIRI!=''][data(.)!='']">
                            <xxf:variable name="annotation" select="."/>
                            <!-- Load annotation template - also sets CDA Header -->
                            <xf:send submission="load-annotation-template"/>
                            <!-- Set the observation in the annotation, using configuration in parameters-instance -->
                            <!-- Set the composition id -->
                            <!-- Store in record for the patient -->
                        </xf:action>
                        <!-- Iterate through patient entered data (cda:ClinicalDocument)
                              Only process compositions that have been touched by the patient -->
                        <xf:action
                            xxf:iterate="$patientSession/data/cda:ClinicalDocument[cda:recordTarget/cda:patientRole/cda:id/@extension!='']">
                            <!-- TBD -->
                        </xf:action>
                        <!-- Delete the session -->
                        <!--
                    <xf:send submission="delete-patientSession-submission"/>
                    -->
                    </xf:action>
                </xf:action>
            </xf:action>
            <!-- Annotations - for import into xmlstore from patient database -->

            <!-- Submission to load the annotation template 
                  This one loads the default, then sets the cda header from the patientSession-instance -->
            <xf:instance id="annotation-template-instance">
                <cda:ClinicalDocument xmlns="urn:hl7-org:v3">
                    <!-- Template content loaded from templates/annotationCDA.xml -->
                </cda:ClinicalDocument>
            </xf:instance>

            <!-- Submission to  load annotation template -->
            <xf:submission id="load-annotation-template"
                resource="{xxf:instance('view-parameters-instance')/staticFileURL}/templates/annotationCDA.xml"
                method="get" replace="instance" instance="annotation-template-instance"
                serialization="none">
                <!-- Set the CDA Header -->
                <xf:action ev:event="xforms-submit-done">
                    <!-- TBD -->
                </xf:action>
                <xf:action ev:event="xforms-submit-error">
                    <!-- TBD -->
                </xf:action>
            </xf:submission>

            <!-- ===
                 View Audit Log 
                 === -->
            <!-- Actions and submissions for view audit log are in auditLogModel which has been included as a model above -->

            <!-- ===
                Managing Care Teams 
                manageCareTeams
                === -->

            <!-- Application defined action to set the selected care team.
                 This is used to initialise a care team when manageCareTeams is selected or reset
                 Or clears it if there are no care teams for this user -->
            <xf:action ev:event="set-selected-careTeam">
                <xf:setvalue ref="xxf:instance('control-instance')/manageCareTeams/lifecycleStatus"
                    value="'waiting'"/>
                <!-- Get list of care teams for this user (also sets the first as the current care team) -->
                <xf:dispatch name="initialiseCareTeamsForUser" target="careTeam-model"/>
                <!-- Set the careTeamId, does not trigger load-careTeam in xforms-value-changed event on its selection control.
                     Because the lifecycleStatus is 'waiting' -->
                <xf:setvalue ref="xxf:instance('control-instance')/manageCareTeams/careTeamId"
                    value="xxf:instance('careTeamControl-instance')/careTeam/id"/>
                <xf:setvalue
                    ref="xxf:instance('control-instance')/manageCareTeams/careTeamDisplayName"
                    value="xxf:instance('careTeamControl-instance')/careTeam/displayName"/>
                <!-- Clear the hidden inputs for applicationUser and careTeamUser -->
                <xf:setvalue ref="xxf:instance('control-instance')/manageCareTeams/applicationUser"
                    value="''"/>
                <xf:setvalue ref="xxf:instance('control-instance')/manageCareTeams/careTeamUser"
                    value="''"/>
                <!-- Reset lifecycleStatus -->
                <xf:setvalue ref="xxf:instance('control-instance')/manageCareTeams/lifecycleStatus"
                    value="if (xxf:instance('control-instance')/manageCareTeams/careTeamId='') then 'waiting' else 'selected'"
                />
            </xf:action>

            <!-- ===Application defined action to set user for the care team.
                Inserts or deletes a user to/from a care team.
                There are two hidden input controls that hold the selected user - applicationUser and careTeamUser.
                These are bound to control-instance/manageCareTeams/applicationUser and control-instance/manageCareTeams/careTeamUser
                They are set when a user selects a user from either list - one holds the selected user, the other must always be blank.
                If applicationUser is blank then delete careTeamUser from the careTeam-instance
                If careTeamUser is blank then insert applicationUser into the careTeam-instance
                === -->
            <xf:action ev:event="setCareTeamUsers">
                <!-- Remove user from care team -->
                <xf:action
                    if="xxf:instance('control-instance')/manageCareTeams/applicationUser='' and xxf:instance('control-instance')/manageCareTeams/careTeamUser!=''">
                    <xf:delete
                        nodeset="xxf:instance('careTeam-instance')/user[@id=xxf:instance('control-instance')/manageCareTeams/careTeamUser]"
                    />
                </xf:action>
                <!-- Add user to care team. -->
                <xf:action
                    if="xxf:instance('control-instance')/manageCareTeams/careTeamUser='' and xxf:instance('control-instance')/manageCareTeams/applicationUser!=''">
                    <xf:setvalue ref="xxf:instance('careTeamControl-instance')/careTeam/user/@id"
                        value="xxf:instance('control-instance')/manageCareTeams/applicationUser"/>
                    <xf:insert context="xxf:instance('careTeam-instance')"
                        origin="xxf:instance('careTeamControl-instance')/careTeam/user"/>
                </xf:action>
                <!-- Set the editStatus -->
                <xf:setvalue ref="xxf:instance('control-instance')/manageCareTeams/editStatus"
                    value="'edited'"/>
            </xf:action>

            <!-- ===Application defined action to set patients for the care team. 
                    Inserts patients from $patientSet to a care team
                    patientSet is an instance (e.g. xxf:instance('hasRecordPatientList-instance')
                    care team must already be loaded into careTeam-instance
                === -->
            <xf:action ev:event="setCareTeamPatients">
                <xxf:variable name="patientSet" select="event('patientSet')"/>
                <!-- Iterate through the patientSet -->
                <xf:action xxf:iterate="$patientSet/patient">
                    <xxf:variable name="patient" select="."/>
                    <!-- Add patient to care team, if not already there -->
                    <xf:action
                        if="not(exists(xxf:instance('careTeam-instance')/patient[@id=$patient/@id]))">
                        <xf:insert context="xxf:instance('careTeam-instance')" origin="$patient"/>
                    </xf:action>
                </xf:action>
                <!-- Save the care team (assuming that is has been changed) -->
                <xf:send submission="save-careTeam-submission" target="careTeam-model"/>
                <!-- Refresh the patient list displays -->
                <xf:dispatch name="create-patientLists" target="main-model"/>
            </xf:action>

            <!-- Application defined action to delete the selected care team.
                This is only called after the user has confirmed.
            -->
            <xf:action ev:event="delete-careTeam">
                <!-- Delete the care team (also reloads or resets the current care team -->
                <xf:dispatch name="delete-careTeam" target="careTeam-model"/>
                <!-- Set manageCareTeams parameters -->
                <xf:setvalue ref="xxf:instance('control-instance')/manageCareTeams/careTeamId"
                    value="xxf:instance('careTeamControl-instance')/careTeam/id"/>
                <xf:setvalue ref="xxf:instance('control-instance')/manageCareTeams/editStatus"
                    value="''"/>
                <xf:setvalue ref="xxf:instance('control-instance')/manageCareTeams/lifecycleStatus"
                    value="if (xxf:instance('control-instance')/manageCareTeams/careTeamId='') then 'waiting' else 'selected'"
                />
            </xf:action>

            <!-- ===
                 Managing Users
                 manageUsers
                 === -->
            <!-- Query to check whether user (userId or logonAlias) already exists.
                 Uses the query for user authentication (also used in cityEHRSigonOn) -->
            <xf:instance id="authenticate-query-instance"
                src="oxf:/apps/ehr/xquery/userAuthenticationXQuery.xml"/>
            <xf:instance id="userCheckQuery-instance">
                <exist:query start="1" max="1">
                    <exist:text/>
                </exist:query>
            </xf:instance>
            <!-- Holds response from query to find a named user -->
            <xf:instance id="userCheckResponse-instance">
                <exist:result/>
            </xf:instance>

            <!-- Application defined action to check userId/logonAlias -->
            <xf:action ev:event="checkUserId">
                <xxf:variable name="userId" select="event('userId')"/>
                <!-- Set up the query.
                     The password test is set to always fail -->
                <xf:setvalue ref="xxf:instance('authenticate-query-instance')/whereClause-userid"
                    value="concat('(user/credentials/userId,user/credentials/logonAlias) = ''',$userId,'''')"/>
                <xf:setvalue ref="xxf:instance('authenticate-query-instance')/returnClause-password"
                    value="'false()'"/>
                <!-- Set up the query text for eXist -->
                <xf:setvalue ref="xxf:instance('userCheckQuery-instance')/exist:text"
                    value="xxf:instance('authenticate-query-instance')"/>
                <!-- Now submit the query.
                     The submission sets the validUserId flag -->
                <xf:send submission="checkUser-submission"/>
            </xf:action>

            <!-- Submission to check userId/logonAlias. -->
            <xf:submission id="checkUser-submission" ref="xxf:instance('userCheckQuery-instance')"
                action="{xxf:instance('view-parameters-instance')/databaseLocation}{xxf:instance('view-parameters-instance')/storageLocation}/users"
                method="post" replace="instance" instance="userCheckResponse-instance">
                <!-- Check if user exists - if so, then userId is invalid (user already exists with that id or logonAlias).
                     If user exists then the query will return invalidPassword-->
                <xf:action ev:event="xforms-submit-done">
                    <xf:setvalue ref="xxf:instance('control-instance')/manageUsers/validUserId"
                        value="if (xxf:instance('userCheckResponse-instance')/invalidPassword) then 'false' else 'true'"
                    />
                </xf:action>
                <!-- If submission fails then flag invalid user -->
                <xf:action ev:event="xforms-submit-error">
                    <xf:setvalue ref="xxf:instance('control-instance')/manageUsers/validUserId"
                        value="'false'"/>
                </xf:action>
            </xf:submission>

            <!-- Get details of users -->
            <xf:instance id="userList-instance">
                <exist:result>Will get replaced by the list of users</exist:result>
            </xf:instance>
            <!-- Load the queries from file -->
            <xf:instance id="userListXQuery-instance" src="oxf:/apps/ehr/xquery/userListXQuery.xml"/>
            <!-- Query instance - text is set from userListXQuery-instance.
                 Note that the number of hits is unlimited - may want to change this depending on performance with many users -->
            <xf:instance id="userList-query-instance">
                <exist:query start="1" max="-1">
                    <exist:text/>
                </exist:query>
            </xf:instance>

            <!-- Application defined action to get list of all users for the application.
            -->
            <xf:action ev:event="get-application-users">
                <xxf:variable name="applicationIRI" select="event('applicationIRI')"/>
                <xf:setvalue ref="xxf:instance('userListXQuery-instance')/userFilter"
                    value="if ($applicationIRI!='') then concat('[descendant::iso-13606:EHR_Extract/@id=''',$applicationIRI,''']') else ''"/>
                <!-- Set up the query text for eXist -->
                <xf:setvalue ref="xxf:instance('userList-query-instance')/exist:text"
                    value="xxf:instance('userListXQuery-instance')"/>
                <!-- Now submit the search -->
                <xf:send submission="userList-submission"/>
            </xf:action>

            <!-- Application defined action to get (list of) the current user.
                 There is only one current user, but works the same way as get-application-users
                 And puts the result in userList-instance
            -->
            <xf:action ev:event="get-current-user">
                <!-- Set the managedUserId to the current user -->
                <xf:setvalue ref="xxf:instance('control-instance')/manageUsers/managedUserId"
                    value="xxf:instance('user-instance')/credentials/userId"/>
                <xf:setvalue ref="xxf:instance('userListXQuery-instance')/userFilter"
                    value="concat('[descendant::userId=''',xxf:instance('control-instance')/manageUsers/managedUserId,''']')"/>
                <!-- Set up the query text for eXist -->
                <xf:setvalue ref="xxf:instance('userList-query-instance')/exist:text"
                    value="xxf:instance('userListXQuery-instance')"/>
                <!-- Now submit the search -->
                <xf:send submission="userList-submission"/>
            </xf:action>

            <!-- Submission to get list of users for this application -->
            <xf:submission id="userList-submission" ref="xxf:instance('userList-query-instance')"
                action="{xxf:instance('view-parameters-instance')/databaseLocation}{xxf:instance('view-parameters-instance')/storageLocation}/users"
                method="post" replace="instance" instance="userList-instance">
                <!-- Submission done -->
                <xf:action ev:event="xforms-submit-done">
                    <!-- Check the number of users returned -->
                    <xf:setvalue ref="xxf:instance('view-parameters-instance')/systemError"
                        value="if (count(xxf:instance('userList-instance')/*) eq number(xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/manageUsers/userListMax)) then xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/manageUsers/userListMaxMessage else ''"
                    />
                </xf:action>
                <!-- Error in submission -->
                <xf:action ev:event="xforms-submit-error">
                    <xf:setvalue ref="xxf:instance('view-parameters-instance')/systemError"
                        value="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/failedULQuery"
                    />
                </xf:action>
            </xf:submission>

            <!-- Instance for the managed user -->
            <xf:instance id="managedUser-instance">
                <user>
                    <!-- Get replaced by template or by instance from the xmlstore -->
                </user>
            </xf:instance>

            <!-- ===Application defined action to delete the current managedUser.
                     Can't delete the current user (shouldn't get called in this instance, but check anyway). === -->
            <xf:action ev:event="delete-managed-user">
                <xxf:variable name="userId"
                    select="xxf:instance('managedUser-instance')/credentials/userId"/>
                <!-- Not the logged on user -->
                <xf:action if="$userId != xxf:instance('user-instance')/credentials/userId">
                    <!-- Set the storage object for the user 
                         and call the delete-resource-submission.
                         managedUserHandle should end with userid/credentials - so use this to check and set the storage object
                  -->
                    <xxf:variable name="storageObject"
                        select="substring-before(xxf:instance('control-instance')/manageUsers/managedUserHandle,'/credentials')"/>
                    <xf:action if="ends-with($storageObject,$userId)">
                        <xf:setvalue ref="xxf:instance('control-instance')/storageObject"
                            value="concat(xxf:instance('view-parameters-instance')/databaseLocation,$storageObject)"/>
                        <xf:send submission="delete-resource-submission"/>
                        <!-- Refresh the list of users -->
                        <xf:dispatch name="get-application-users" target="main-model">
                            <xxf:context name="applicationIRI"
                                select="xxf:instance('control-instance')/manageUsers/applicationIRI"
                            />
                        </xf:dispatch>
                        <!-- Clear the managed user (no longer exists) -->
                        <xf:dispatch name="clear-managed-user" target="main-model"/>
                    </xf:action>
                </xf:action>
            </xf:action>

            <!-- Submission to archive managedUser to xmlstore.
                 Would be better than just deleting it, but TBD -->
            <xf:submission id="archive-managedUser-details-submission"
                ref="xxf:instance('managedUser-instance')"
                action="{xxf:instance('view-parameters-instance')/databaseLocation}{xxf:instance('view-parameters-instance')/storageLocation}/usersArchive/{xxf:instance('control-instance')/manageUsers/managedUserId}/credentials"
                method="put" replace="none" f:url-type="resource" includenamespacesprefixes="">
                <xf:action ev:event="xforms-submit-done">
                    <xf:setvalue ref="xxf:instance('control-instance')/status">success</xf:setvalue>
                    <xf:setvalue ref="xxf:instance('view-parameters-instance')/systemError"
                        value="''"/>
                </xf:action>
                <xf:action ev:event="xforms-submit-error">
                    <xf:setvalue ref="xxf:instance('control-instance')/status">failed</xf:setvalue>
                    <xf:setvalue ref="xxf:instance('view-parameters-instance')/systemError"
                        value="xxf:instance('view-parameters-instance')/systemErrorList/systemError[@type='failedSaveUser']"
                    />
                </xf:action>
            </xf:submission>

            <!-- Application defined action to clear the managedUser
                 -->
            <xf:action ev:event="clear-managed-user">
                <xf:setvalue ref="xxf:instance('control-instance')/manageUsers/managedUserId"
                    value="''"/>
                <xf:setvalue
                    ref="xxf:instance('control-instance')/manageUsers/managedUserLogonAlias"
                    value="''"/>
                <xf:setvalue ref="xxf:instance('control-instance')/manageUsers/managedUserHandle"
                    value="''"/>
                <xf:delete nodeset="xxf:instance('managedUser-instance')/*"/>
                <xf:setvalue ref="xxf:instance('control-instance')/manageUsers/lifecycleStatus"
                    value="'waiting'"/>
            </xf:action>

            <!-- Application defined action to reset the managedUser
                 Set selections for applications, specialties, roles and passwords -->
            <xf:action ev:event="reset-managed-user">
                <xxf:variable name="managedUser" select="xxf:instance('managedUser-instance')"/>
                <xf:setvalue ref="xxf:instance('control-instance')/manageUsers/managedUserId"
                    value="if (exists($managedUser/credentials)) then xxf:instance('managedUser-instance')/credentials/userId else ''"/>
                <xf:setvalue
                    ref="xxf:instance('control-instance')/manageUsers/managedUserLogonAlias"
                    value="if (exists($managedUser/credentials)) then xxf:instance('managedUser-instance')/credentials/logonAlias else ''"/>
                <xf:setvalue ref="xxf:instance('control-instance')/manageUsers/validUserId"
                    value="'true'"/>
                <xf:setvalue
                    ref="xxf:instance('control-instance')/manageUsers/managedUserApplications"
                    value="if (exists($managedUser/applications)) then string-join(xxf:instance('managedUser-instance')/applications/iso-13606:EHR_Extract/@id,' ') else ''"/>
                <xf:setvalue
                    ref="xxf:instance('control-instance')/manageUsers/managedUserSpecialties"
                    value="if (exists($managedUser/applications)) then string-join(xxf:instance('managedUser-instance')/applications/iso-13606:EHR_Extract[@id=xxf:instance('view-parameters-instance')/applicationIRI]/iso-13606:Folder/@id,' ') else ''"/>
                <xf:setvalue ref="xxf:instance('control-instance')/manageUsers/managedUserRoles"
                    value="if (exists($managedUser/rbac)) then string-join(xxf:instance('managedUser-instance')/rbac/role/@value,' ') else ''"/>
                <!-- Password is in passwordControl-instance.
                     The two password input controls are ste to blank -->
                <xf:setvalue ref="xxf:instance('passwordControl-instance')/password1" value="''"/>
                <xf:setvalue ref="xxf:instance('passwordControl-instance')/password2" value="''"/>
            </xf:action>

            <!-- Application defined action to load the current managedUser -->
            <xf:action ev:event="load-managed-user">
                <xf:action>
                    <!-- Set the database handle -->
                    <xxf:variable name="selectedUser"
                        select="xxf:instance('userList-instance')/user[credentials/userId=xxf:instance('control-instance')/manageUsers/managedUserId]"/>
                    <xf:setvalue
                        ref="xxf:instance('control-instance')/manageUsers/managedUserHandle"
                        value="$selectedUser/@handle"/>
                    <!-- Load the managed user from xmlstore -->
                    <xf:send submission="load-managedUser-details-submission"/>
                    <!-- Legacy user credentials had role@id in place of role@value in rbac until 2015-06-25 -->
                    <xf:action if="exists(xxf:instance('managedUser-instance')/rbac/role[@id])">
                        <xf:action xxf:iterate="xxf:instance('managedUser-instance')/rbac/role[@id]">
                            <xxf:variable name="storedRole" select="."/>
                            <xxf:variable name="fixedRole"
                                select="xxf:instance('control-instance')/manageUsers/legacyFixes/role"/>
                            <!-- Set up fixed role -->
                            <xf:setvalue ref="$fixedRole/@value" value="$storedRole/@id"/>
                            <xf:setvalue ref="$fixedRole/@displayName"
                                value="$storedRole/@displayName"/>
                            <!-- Remove legacy role -->
                            <xf:delete nodeset="$storedRole"/>
                            <!-- Insert new version of role -->
                            <xf:insert context="xxf:instance('managedUser-instance')/rbac"
                                origin="$fixedRole"/>
                        </xf:action>
                        <xf:send submission="save-managedUser-details-submission"
                            target="main-model"/>
                    </xf:action>
                    <!-- Legacy user credentials had no restrictPatientAccess element in rbac until 2015-10-12 -->
                    <xf:action
                        if="not(exists(xxf:instance('managedUser-instance')/rbac/restrictPatientAccess))">
                        <!-- Insert new restrictPatientAccess element -->
                        <xf:insert context="xxf:instance('managedUser-instance')/rbac"
                            origin="xxf:instance('control-instance')/manageUsers/legacyFixes/restrictPatientAccess"/>
                        <xf:send submission="save-managedUser-details-submission"
                            target="main-model"/>
                    </xf:action>
                    <!-- Legacy user credentials had no logonAlias until 2016-07-15 -->
                    <xf:action
                        if="not(exists(xxf:instance('managedUser-instance')/credentials/logonAlias))">
                        <!-- Insert new logonAlias element -->
                        <xf:insert context="xxf:instance('managedUser-instance')/credentials"
                            origin="xxf:instance('control-instance')/manageUsers/legacyFixes/logonAlias"/>
                        <xf:send submission="save-managedUser-details-submission"
                            target="main-model"/>
                    </xf:action>
                    <!-- Reset the managed user -->
                    <xf:dispatch name="reset-managed-user" target="main-model"/>
                </xf:action>
                <!-- Set task status -->
                <xf:action>
                    <xf:setvalue ref="xxf:instance('control-instance')/manageUsers/editAccount"
                        value="'false'"/>
                    <xf:setvalue ref="xxf:instance('control-instance')/manageUsers/editStatus"
                        value="''"/>
                    <xf:setvalue ref="xxf:instance('control-instance')/manageUsers/lifecycleStatus"
                        value="'selected'"/>
                </xf:action>
            </xf:action>

            <!-- Submission to load managedUser from xmlstore -->
            <xf:submission id="load-managedUser-details-submission" serialization="none"
                action="{xxf:instance('view-parameters-instance')/databaseLocation}{xxf:instance('control-instance')/manageUsers/managedUserHandle}"
                validate="false" method="get" replace="instance" instance="managedUser-instance"
                f:url-type="resource">
                <!-- Done - check that the correct user credentials were found -->
                <xf:action ev:event="xforms-submit-done">
                    <xf:action
                        if="xxf:instance('control-instance')/manageUsers/managedUserId != xxf:instance('managedUser-instance')/credentials/userId">
                        <!-- TBD -->
                    </xf:action>
                </xf:action>
                <!-- Error -->
                <xf:action ev:event="xforms-submit-error">
                    <xf:setvalue ref="xxf:instance('view-parameters-instance')/systemError"
                        value="xxf:instance('view-parameters-instance')/systemErrorList/systemError[@type='failedLoadingUserInstance']"
                    />
                </xf:action>
            </xf:submission>

            <!-- Submission to load new managedUser from template -->
            <xf:submission id="load-managedUser-template-submission"
                resource="{xxf:instance('view-parameters-instance')/staticFileURL}/templates/user.xml"
                method="get" validate="false" replace="instance" instance="managedUser-instance"
                serialization="none">
                <xf:action ev:event="xforms-submit-done">
                    <xf:setvalue ref="xxf:instance('control-instance')/status">success</xf:setvalue>
                    <xf:setvalue ref="xxf:instance('control-instance')/error"/>
                    <!-- Set up the template with the current application -->
                    <xf:setvalue
                        ref="xxf:instance('managedUser-instance')/applications/iso-13606:EHR_Extract[1]/@id"
                        value="xxf:instance('view-parameters-instance')/applicationIRI"/>
                    <!-- Reset the managed user -->
                    <xf:dispatch name="reset-managed-user" target="main-model"/>
                    <!-- Set admin task status -->
                    <xf:setvalue ref="xxf:instance('control-instance')/manageUsers/lifecycleStatus"
                        value="'new'"/>
                    <xf:setvalue ref="xxf:instance('control-instance')/manageUsers/editStatus"
                        value="''"/>
                    <xf:setvalue ref="xxf:instance('control-instance')/manageUsers/editAccount"
                        value="'true'"/>
                </xf:action>
                <xf:action ev:event="xforms-submit-error">
                    <xf:setvalue ref="xxf:instance('control-instance')/status">failed</xf:setvalue>
                    <xf:setvalue ref="xxf:instance('view-parameters-instance')/systemError"
                        value="xxf:instance('view-parameters-instance')/systemErrorList/systemError[@type='failedLoadingUserTemplate']"
                    />
                </xf:action>
            </xf:submission>

            <!-- Submission to save managedUser to xmlstore -->
            <xf:submission id="save-managedUser-details-submission"
                ref="xxf:instance('managedUser-instance')"
                action="{xxf:instance('view-parameters-instance')/databaseLocation}{xxf:instance('view-parameters-instance')/storageLocation}/users/{xxf:instance('control-instance')/manageUsers/managedUserId}/credentials"
                method="put" replace="none" f:url-type="resource" includenamespacesprefixes="">
                <xf:action ev:event="xforms-submit-done">
                    <xf:setvalue ref="xxf:instance('control-instance')/status">success</xf:setvalue>
                    <xf:setvalue ref="xxf:instance('view-parameters-instance')/systemError"
                        value="''"/>
                </xf:action>
                <xf:action ev:event="xforms-submit-error">
                    <xf:setvalue ref="xxf:instance('control-instance')/status">failed</xf:setvalue>
                    <xf:setvalue ref="xxf:instance('view-parameters-instance')/systemError"
                        value="xxf:instance('view-parameters-instance')/systemErrorList/systemError[@type='failedSaveUser']"
                    />
                </xf:action>
            </xf:submission>

            <!-- ===
                Managing Cohort Searches
                manageCohortSearch
                === -->
            <!-- Instance for exporting cohort searches -->
            <xf:instance id="exportCohortSearches-instance">
                <cohortSearches>
                    <!-- Seaches are inserted here -->
                </cohortSearches>
            </xf:instance>

            <!-- Application defined action to set up shared search -->
            <xf:action ev:event="set-SharedSearchForRole">
                <!-- The user search selected -->
                <xxf:variable name="userSearchId"
                    select="xxf:instance('control-instance')/manageCohortSearch/userSearchId"/>
                <xxf:variable name="searchHandle"
                    select="xxf:instance('userSearches-instance')/search[id=$userSearchId]/handle"/>
                <!-- Load the user search -->
                <xf:dispatch name="load-saved-search" target="manageCohortSearch-model">
                    <xxf:context name="searchHandle" select="$searchHandle"/>
                </xf:dispatch>
                <!-- Save the search for the role -->
                <xxf:variable name="roleIRI"
                    select="xxf:instance('control-instance')/manageCohortSearch/roleIRI"/>
                <xf:dispatch name="save-cohort-search" target="manageCohortSearch-model">
                    <xxf:context name="originIRI" select="$roleIRI"/>
                </xf:dispatch>
                <!-- Refresh the list of searches for the role -->
                <xf:dispatch name="get-shared-searches" target="manageCohortSearch-model">
                    <xxf:context name="roleList"
                        select="(xxf:instance('control-instance')/manageCohortSearch/roleIRI)"/>
                </xf:dispatch>
            </xf:action>

            <!-- Application defined action to delete selected seacrhes -->
            <xf:action ev:event="delete-selected-searches">
                <!-- Iterate through selected searches -->
                <xf:action
                    xxf:iterate="xxf:instance('sharedSearches-instance')/search[@selected='true']">
                    <xxf:variable name="search" select="."/>
                    <!-- Delete the cohort search (includes check that the search exists-->
                    <xf:dispatch name="delete-cohortSearch" target="manageCohortSearch-model">
                        <xxf:context name="handle" select="$search/handle"/>
                        <xxf:context name="id" select="$search/id"/>
                    </xf:dispatch>
                </xf:action>
                <!-- Now refresh the list of searches -->
                <xf:dispatch name="get-shared-searches" target="manageCohortSearch-model">
                    <xxf:context name="roleList"
                        select="(xxf:instance('control-instance')/manageCohortSearch/roleIRI)"/>
                </xf:dispatch>
            </xf:action>

            <!-- Application defined action to export selected seacrhes
                    Clear the exportCohortSearches-instance
                    Assemble selected searches
                    Store the exportCohortSearches to xmlcache
                    Export the exportCohortSearches-instance to a zip file
                 -->
            <xf:action ev:event="export-selected-searches">
                <!-- Clear the exportCohortSearches-instance -->
                <xf:delete nodeset="xxf:instance('exportCohortSearches-instance')/*"/>
                <!-- Assemble selected searches -->
                <xf:action
                    xxf:iterate="xxf:instance('sharedSearches-instance')/search[@selected='true']">
                    <xxf:variable name="search" select="."/>
                    <!-- Load the user search -->
                    <xf:dispatch name="load-saved-search" target="manageCohortSearch-model">
                        <xxf:context name="searchHandle" select="$search/handle"/>
                    </xf:dispatch>
                    <xf:insert context="xxf:instance('exportCohortSearches-instance')"
                        origin="xxf:instance('saved-cohort-search-instance')"/>
                </xf:action>
                <!-- Export exportCohortSearches to zip file -->
                <xf:dispatch name="export-xmlCache" target="pageNavigation-model">
                    <xxf:context name="export-instance"
                        select="xxf:instance('exportCohortSearches-instance')"/>
                    <xxf:context name="exportName" select="'cohortSearches'"/>
                    <xxf:context name="exportType" select="'xml'"/>
                </xf:dispatch>
            </xf:action>

            <!-- ===
                Import cohort searches 
                === -->

            <!-- Application defined action to import cohort searches that have been loaded to import-instance.
                 Iterate through all searches that have id and origin set.
                 Set up saved-cohort-search-instance
                 Save to the xmlstore -->
            <xf:action ev:event="import-cohort-searches">
                <xxf:variable name="selectedRoleIRI"
                    select="xxf:instance('control-instance')/importCohortSearch/roleIRI"/>
                <xf:action
                    xxf:iterate="xxf:instance('import-instance')/cohortSearch[id!=''][origin!='']">
                    <xxf:variable name="cohortSearch" select="."/>
                    <!-- Set up saved-cohort-search-instance -->
                    <xf:delete nodeset="xxf:instance('saved-cohort-search-instance')/*"/>
                    <xf:insert context="xxf:instance('saved-cohort-search-instance')"
                        origin="$cohortSearch/*"/>
                    <!-- Save the cohort search using the selected role as origin
                         unless no role exists, in which case use origin defined in the search.
                         Note that this will overwrite any existing search with the same origin and id -->
                    <xxf:variable name="originIRI"
                        select="if ($selectedRoleIRI!='') then $selectedRoleIRI else $cohortSearch/origin"/>
                    <xf:dispatch name="save-cohort-search" target="manageCohortSearch-model">
                        <xxf:context name="originIRI" select="$originIRI"/>
                    </xf:dispatch>
                    <xf:setvalue ref="xxf:instance('control-instance')/statusMessage/entry"
                        value="concat($cohortSearch/id,': ',xxf:instance('manageCohortSearchControl-instance')/status)"/>
                    <xf:insert context="xxf:instance('control-instance')/statusMessage/entryList"
                        origin="xxf:instance('control-instance')/statusMessage/entry"/>
                </xf:action>
            </xf:action>

            <!-- ===
                    Set up admin tasks 
                    === -->

            <!-- Application defined action to set access admin tasks.
                 Uses the access control settings from the application-parameters -->
            <xf:action ev:event="set-adminTaskAccess">
                <!-- Roles for the current user -->
                <xf:variable name="userRoles"
                    select="xxf:instance('user-instance')/rbac/role/@value"/>

                <!-- Iterate through all tasks -->
                <xf:variable name="taskSet"
                    select="xxf:instance('application-parameters-instance')/adminTaskList/descendant::task"/>
                <xf:action xxf:iterate="$taskSet">
                    <xf:variable name="task" select="."/>

                    <!-- Access control rules for this task -->
                    <xf:variable name="taskAccessRules"
                        select="xxf:instance('application-parameters-instance')/accessControl/adminTaskAccess/taskAccess[@taskId=$task/adminTask]"/>

                    <!-- Default is that the task is displayed 
                         Or hide the task if access is denied -->
                    <xf:setvalue ref="$task/@display"
                        value="if (exists($taskAccessRules[@access='deny'][@role='#CityEHR:Role:System:AllRoles' or @role=$userRoles])) then 'hide' else ''"/>

                    <!-- But reset to display if access is allowed -->
                    <xf:setvalue ref="$task/@display"
                        value="if (exists($taskAccessRules[@access='allow'][@role='#CityEHR:Role:System:AllRoles' or @role=$userRoles])) then '' else ."/>

                </xf:action>

            </xf:action>


            <!-- Application defined action to set up selected admin task -->
            <xf:action ev:event="set-adminTask">
                <xxf:variable name="adminTask" select="event('adminTask')"/>
                <xf:setvalue ref="xxf:instance('control-instance')/adminTask/nextAdminTask"
                    value="$adminTask"/>

                <!-- Get the process status in case there is a process running -->
                <xf:dispatch name="get-processStatus" target="process-model">
                    <xxf:context name="status"
                        select="xxf:instance('control-instance')/processStatus"/>
                </xf:dispatch>

                <!-- User action is disabled while a process is running -->
                <xf:action if="xxf:instance('control-instance')/processStatus != 'running'">

                    <!-- Check the editStatus of the current task -->
                    <xf:dispatch name="check-editStatus" target="main-model">
                        <xxf:context name="editStatus"
                            select="xxf:instance('control-instance')/editStatus"/>
                    </xf:dispatch>

                    <!-- No edits, so set up the next task -->
                    <xf:action if="xxf:instance('control-instance')/editStatus = ''">
                        <xf:dispatch name="set-nextAdminTask" target="main-model"/>
                    </xf:action>

                    <!-- Unsaved edits on current task -->
                    <xf:action if="not(xxf:instance('control-instance')/editStatus = '')">
                        <xxf:variable name="confirmationMessage"
                            select="xxf:instance('control-instance')/adminTask/adminTaskTitle"/>
                        <xf:dispatch name="confirm-action" target="pageNavigation-model">
                            <xxf:context name="action" select="'setNextAdminTask'"/>
                            <xxf:context name="messageSet" select="$confirmationMessage"/>
                        </xf:dispatch>
                    </xf:action>

                </xf:action>

            </xf:action>


            <!-- Application defined action to set up the next admin task.
                 This is invoked from set-adminTask, which sets  nextAdminTask
                 Either invoked directly or after user has confirmed (discarding edits made in the cirrent task) -->
            <xf:action ev:event="set-nextAdminTask">
                <xxf:variable name="adminTask"
                    select="xxf:instance('control-instance')/adminTask/nextAdminTask"/>
                <xxf:variable name="task"
                    select="xxf:instance('application-parameters-instance')/adminTaskList/descendant::task[adminTask=$adminTask]"/>

                <!-- Set up base parameters -->
                <xf:setvalue ref="xxf:instance('control-instance')/adminTask/previousAdminTask"
                    value="xxf:instance('control-instance')/adminTask/adminTask"/>
                <xf:setvalue ref="xxf:instance('control-instance')/adminTask/adminTask"
                    value="$adminTask"/>
                <xf:setvalue ref="xxf:instance('control-instance')/adminTask/adminTaskTitle"
                    value="$task/adminTaskTitle"/>
                <xf:setvalue ref="xxf:instance('control-instance')/adminTask/adminTaskHint"
                    value="$task/adminTaskTitle/@hint"/>
                <xf:setvalue ref="xxf:instance('control-instance')/adminTask/adminTaskLoadFile"
                    value="$task/adminTaskLoadFile"/>
                <xf:setvalue ref="xxf:instance('control-instance')/importActionMessage"
                    value="$task/adminTaskLoadFile/@importActionMessage"/>

                <!-- Reset processing status -->
                <xf:delete nodeset="xxf:instance('control-instance')/statusMessage/entryList/entry"/>

                <!-- Reset system errors and status -->
                <!-- Display messages on status, errors, etc -->
                <xf:setvalue ref="xxf:instance('view-parameters-instance')/systemError" value="''"/>
                <xf:setvalue ref="xxf:instance('view-parameters-instance')/systemStatus" value="''"/>
                <!-- Set the uploaded file status -->
                <!--
                <xf:setvalue ref="xxf:instance('file-instance')/file/content" value="''"/>
                -->
                <xf:setvalue ref="xxf:instance('control-instance')/uploadStatus" value="'waiting'"/>

                <!-- Clear the processExecution controls -->
                <xf:dispatch name="clear-processExecutionParameters" target="process-model"/>

                <!-- Set up for tasks requiring file upload -->
                <xf:action if="xxf:instance('control-instance')/adminTask/adminTaskLoadFile!=''">
                    <xf:setvalue ref="xxf:instance('control-instance')/uploadStatus" value="'ready'"/>
                    <xf:setvalue ref="xxf:instance('control-instance')/importStatus"
                        value="'waiting'"/>
                    <xf:setvalue ref="xxf:instance('file-instance')/file/content" value="''"/>
                </xf:action>

                <!-- === Set up for specific actions -->

                <!-- Manage system icons -->
                <xf:action if="$adminTask='manageSystemIcons'">
                    <xf:dispatch name="reset-manageSystemIcons" target="main-model"/>
                </xf:action>

                <!-- Managing information models -->
                <xf:action if="$adminTask='manageInformationModel'">
                    <xf:dispatch name="reset-manageInformationModel" target="main-model"/>
                </xf:action>

                <!-- Import information model - must be for the current application -->
                <xf:action if="$adminTask='importInformationModel'">
                    <!-- Reset editStatus (used in case user tries to move away during processing) -->
                    <xf:setvalue
                        ref="xxf:instance('control-instance')/importInformationModel/editStatus"
                        value="''"/>
                </xf:action>

                <!-- Manage media -->
                <xf:action if="$adminTask='manageMedia'">
                    <!-- Reset the media -->
                    <xf:dispatch name="reset-manageMedia" target="main-model"/>
                </xf:action>

                <!-- Manage image maps-->
                <xf:action if="$adminTask='manageImageMaps'">
                    <xf:dispatch name="reset-manageImageMaps" target="main-model"/>
                </xf:action>

                <!-- Manage letter templates-->
                <xf:action if="$adminTask='manageLetterTemplates'">
                    <xf:dispatch name="reset-manageLetterTemplates" target="main-model"/>
                </xf:action>

                <!-- Import letter templates -->
                <xf:action if="$adminTask='importLetterTemplates'">
                    <xf:dispatch name="get-storedLetterTemplateList" target="dictionary-model">
                        <xxf:context name="applicationIRI"
                            select="xxf:instance('view-parameters-instance')/applicationIRI"/>
                    </xf:dispatch>
                </xf:action>

                <!-- Associate letter templates -->
                <xf:action if="$adminTask='associateLetterTemplates'">

                    <!-- Set manageLetterTemplates/specialtyIRI -->
                    <xf:setvalue
                        ref="xxf:instance('control-instance')/manageLetterTemplates/specialtyIRI"
                        value="if (.='') then xxf:instance('control-instance')/managedApplication/defaultSpecialtyIRI else ."/>


                    <!-- Reset the letterTemplate (is then stored in import-instance) -->
                    <xf:dispatch name="reset-associateLetterTemplates" target="main-model"/>

                </xf:action>

                <!-- Manage local information model -->
                <xf:action if="$adminTask='manageLocalInformationModel'">
                    <xf:dispatch name="reset-manageLocalInformationModel" target="main-model"/>
                </xf:action>

                <!-- Managing directories -->
                <xf:action if="$adminTask='manageDirectory'">
                    <!-- Set manageDirectory/specialtyIRI -->
                    <xf:setvalue ref="xxf:instance('control-instance')/manageDirectory/specialtyIRI"
                        value="if (.='') then xxf:instance('control-instance')/managedApplication/defaultSpecialtyIRI else ."/>

                    <!-- Set manageDirectory/languageCode -->
                    <xf:setvalue ref="xxf:instance('control-instance')/manageDirectory/languageCode"
                        value="if (.='') then xxf:instance('control-instance')/managedApplication/baseLanguage/@code else ."/>

                    <xxf:variable name="managedApplication"
                        select="xxf:instance('control-instance')/managedApplication"/>

                    <!-- Set up common model dictionary in commonModelDictionary-instance -->
                    <xf:dispatch name="load-commonModelDictionary" target="dictionary-model">
                        <xxf:context name="applicationIRI"
                            select="$managedApplication/applicationIRI"/>
                        <xxf:context name="commonModelIRI"
                            select="$managedApplication/commonModelIRI"/>
                    </xf:dispatch>
                    <xf:dispatch name="set-directoryList" target="application-model">
                        <xxf:context name="dictionary-instance"
                            select="xxf:instance('commonModelDictionary-instance')"/>
                        <xxf:context name="directoryList-instance"
                            select="xxf:instance('commonModelDirectoryList-instance')"/>
                    </xf:dispatch>

                    <!-- Set up specialty dictionary in dictionary-instance.
                         And the corresponding directoryList -->
                    <xf:dispatch name="load-dictionary" target="dictionary-model">
                        <xxf:context name="specialtyIRI"
                            select="xxf:instance('control-instance')/manageDirectory/specialtyIRI"/>
                    </xf:dispatch>
                    <xf:dispatch name="set-directoryList" target="application-model">
                        <xxf:context name="dictionary-instance"
                            select="xxf:instance('dictionary-instance')"/>
                        <xxf:context name="directoryList-instance"
                            select="xxf:instance('directoryList-instance')"/>
                    </xf:dispatch>

                    <!-- Reset the status message -->
                    <xf:setvalue
                        ref="xxf:instance('control-instance')/manageDirectory/statusMessage"
                        value="''"/>
                </xf:action>

                <!-- Importing directories -->
                <xf:action if="$adminTask='importDirectory'">
                    <!-- Set importDirectory/specialtyIRI -->
                    <xf:setvalue ref="xxf:instance('control-instance')/importDirectory/specialtyIRI"
                        value="if (.='') then xxf:instance('control-instance')/managedApplication/defaultSpecialtyIRI else ."/>

                    <xxf:variable name="managedApplication"
                        select="xxf:instance('control-instance')/managedApplication"/>

                    <!-- Set up common model dictionary in commonModelDictionary-instance -->
                    <xf:dispatch name="load-commonModelDictionary" target="dictionary-model">
                        <xxf:context name="applicationIRI"
                            select="$managedApplication/applicationIRI"/>
                        <xxf:context name="commonModelIRI"
                            select="$managedApplication/commonModelIRI"/>
                    </xf:dispatch>
                    <xf:dispatch name="set-directoryList" target="application-model">
                        <xxf:context name="dictionary-instance"
                            select="xxf:instance('commonModelDictionary-instance')"/>
                        <xxf:context name="directoryList-instance"
                            select="xxf:instance('commonModelDirectoryList-instance')"/>
                    </xf:dispatch>

                    <!-- Set up specialty dictionary in dictionary-instance.
                         And the corresponding directoryList -->
                    <xf:dispatch name="load-dictionary" target="dictionary-model">
                        <xxf:context name="specialtyIRI"
                            select="xxf:instance('control-instance')/importDirectory/specialtyIRI"/>
                    </xf:dispatch>
                    <xf:dispatch name="set-directoryList" target="application-model">
                        <xxf:context name="dictionary-instance"
                            select="xxf:instance('dictionary-instance')"/>
                        <xxf:context name="directoryList-instance"
                            select="xxf:instance('directoryList-instance')"/>
                    </xf:dispatch>

                    <!-- Reset the status message -->
                    <xf:setvalue
                        ref="xxf:instance('control-instance')/importDirectory/statusMessage"
                        value="''"/>

                </xf:action>

                <!-- Database Access Layer operstion-->
                <xf:action if="$adminTask='databaseAccessLayer'">
                    <!-- Set the database system.
                         Invokes xforms-value-changed to set-managed-system -->
                    <xf:setvalue ref="xxf:instance('control-instance')/managedDatabase/system"
                        value="if (.='') then xxf:instance('system-parameters-instance')/coreParameters/databaseConfiguration/systemDatabases/database[1]/@system else ."/>
                    <!-- Options for query type -->
                    <xf:delete
                        nodeset="xxf:instance('control-instance')/databaseAccessLayer/databaseOperation"/>
                    <xf:insert context="xxf:instance('control-instance')/databaseAccessLayer"
                        origin="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/databaseAccessLayer/databaseOperation"/>
                    <!-- Options for processing action -->
                    <xf:delete
                        nodeset="xxf:instance('control-instance')/databaseAccessLayer/processingAction"/>
                    <xf:insert context="xxf:instance('control-instance')/databaseAccessLayer"
                        origin="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/databaseAccessLayer/processingAction"/>
                    <!-- Set up Query -->
                    <xf:dispatch name="reset-xquery" target="main-model"/>
                </xf:action>

                <!-- Browse Physical Databases -->
                <xf:action if="$adminTask='browsePhysicalDatabases'">
                    <!-- Set managed database parameters -->
                    <xf:dispatch name="set-managed-database" target="main-model"/>
                </xf:action>

                <!-- Browse Logical Databases -->
                <xf:action if="$adminTask='browseLogicalDatabases'">
                    <!-- Set managed database parameters -->
                    <xf:dispatch name="set-managed-database" target="main-model"/>
                </xf:action>

                <!-- Generate test data -->
                <xf:action if="$adminTask='generateTestData'">
                    <!-- Must use specialty that contains the registrationEvent composition -->
                    <xxf:variable name="registrationCompositionIRI"
                        select="xxf:instance('application-parameters-instance')/patientRegistration/registrationEvent/@composition"/>

                    <!-- Test data is only generated for the managedApplication.
                         Iterate through the information models to find one with the registrationEvent.
                         Since the event is likely to be in the base model and that is inherited by all specialties, there is likely to be more than one-->
                    <xxf:variable name="specialtyIRIList"
                        select="xxf:instance('specialtyList-instance')/iso-13606:Folder/@id"/>

                    <xf:action xxf:iterate="$specialtyIRIList">
                        <xxf:variable name="specialtyIRI" select="."/>
                        <xf:dispatch name="load-dictionary" target="dictionary-model">
                            <xxf:context name="specialtyIRI" select="$specialtyIRI"/>
                        </xf:dispatch>
                        <xxf:variable name="registrationComposition"
                            select="xxf:instance('dictionary-instance')/iso-13606:folderCollection/iso-13606:folder[1]/iso-13606:composition[@code=$registrationCompositionIRI]"/>
                        <xf:action if="exists($registrationComposition)">
                            <xf:setvalue
                                ref="xxf:instance('control-instance')/generateTestData/specialtyIRI"
                                value="$specialtyIRI"/>
                        </xf:action>
                    </xf:action>
                    <xf:dispatch name="load-dictionary" target="dictionary-model">
                        <xxf:context name="specialtyIRI"
                            select="xxf:instance('control-instance')/generateTestData/specialtyIRI"
                        />
                    </xf:dispatch>

                    <!-- Set importStatus for uploading template file -->
                    <xf:setvalue ref="xxf:instance('control-instance')/importStatus"
                        value="'waiting'"/>
                    <!-- Set default CDA Header -->
                    <xf:dispatch name="setDefaultCDAHeader" target="main-model"/>
                    <!-- Set gender values -->
                    <xf:dispatch name="setGenderValueSet" target="main-model"/>

                    <!-- Set the numberOfRecords -->
                    <xxf:variable name="defaultNumberOfRecords"
                        select="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/generateTestData/numberOfRecords/@value"/>
                    <xf:setvalue
                        ref="xxf:instance('control-instance')/generateTestData/numberOfRecords"
                        value="if ($defaultNumberOfRecords castable as xs:integer and xs:integer($defaultNumberOfRecords) gt 0) then $defaultNumberOfRecords else 0"/>
                    <xf:setvalue
                        ref="xxf:instance('control-instance')/generateTestData/reportProgress"
                        value="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/generateTestData/reportProgress/@default"/>
                    <!-- Minimum and maximum lengths -->
                    <xf:setvalue
                        ref="xxf:instance('control-instance')/generateTestData/identifierMinimumSuffixLength"
                        value="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/generateTestData/identifierLength/@identifierMinimumSuffixLength"/>
                    <xf:setvalue
                        ref="xxf:instance('control-instance')/generateTestData/identifierRandomSuffixLength"
                        value="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/generateTestData/identifierLength/@identifierRandomSuffixLength"/>
                    <!-- Set default identifierPrefix - sets identifierPrefixLength, identifierLengthMin and identifierLengthMax through value-changed evebt -->
                    <xf:setvalue
                        ref="xxf:instance('control-instance')/generateTestData/identifierLength"
                        value="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/generateTestData/identifierLength/@default"/>
                    <!-- Set default identifierLength -->
                    <xf:setvalue
                        ref="xxf:instance('control-instance')/generateTestData/identifierPrefix"
                        value="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/generateTestData/identifierPrefix"/>
                    <xf:setvalue
                        ref="xxf:instance('control-instance')/generateTestData/setBirthTime"
                        value="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/generateTestData/setBirthTime/@default"/>
                    <xf:setvalue ref="xxf:instance('control-instance')/generateTestData/minimumAge"
                        value="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/generateTestData/minimumAge"/>
                    <xf:setvalue ref="xxf:instance('control-instance')/generateTestData/maximumAge"
                        value="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/generateTestData/maximumAge"/>

                    <!-- Clear the processExecution controls -->
                    <xf:dispatch name="clear-processExecutionParameters" target="process-model"/>
                </xf:action>

                <!-- Import patient records -->
                <xf:action if="$adminTask='importRecords'">
                    <!-- Set specialty -->
                    <xf:setvalue ref="xxf:instance('control-instance')/importRecords/specialtyIRI"
                        value="if (.='') then xxf:instance('control-instance')/managedApplication/defaultSpecialtyIRI else ."/>
                    <!-- Set the first compositionId -->
                    <xf:setvalue
                        ref="xxf:instance('control-instance')/importRecords/setCompositionId"
                        value="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/importRecords/setCompositionId/option[1]/@value"
                    />
                </xf:action>

                <!-- Fix compositions -->
                <xf:action if="$adminTask='fixCompositions'">
                    <xf:dispatch name="get-compositionListToFix" target="main-model"/>
                </xf:action>

                <!-- Redirect notifications  -->
                <xf:action if="$adminTask='redirectNotifications'">
                    <!-- Set the specialty 
                        (will trigger load of dictionary-instance and set of compositions for transfer in xforms-value-changed) -->
                    <xf:setvalue
                        ref="xxf:instance('control-instance')/redirectNotifications/specialtyIRI"
                        value="if (.='') then xxf:instance('control-instance')/managedApplication/defaultSpecialtyIRI else ."/>

                    <xf:setvalue
                        ref="xxf:instance('control-instance')/redirectNotifications/notificationType"
                        value="xxf:instance('view-parameters-instance')/notifications/notificationTypes/notification[1]/@typeIRI"/>
                    <xf:setvalue
                        ref="xxf:instance('control-instance')/redirectNotifications/notifications/actionType"
                        value="'#cityEHR:Action:AnyAction'"/>
                    <xf:setvalue
                        ref="xxf:instance('control-instance')/redirectNotifications/notifications/acknowledged"
                        value="false()"/>
                    <xf:delete nodeset="xxf:instance('notification-annotations-instance')/*"/>
                    <xf:delete nodeset="xxf:instance('notification-actions-instance')/*"/>
                    <xf:setvalue
                        ref="xxf:instance('control-instance')/redirectNotifications/notificationCount"
                        value="'0'"/>
                    <!-- Get list of application users -->
                    <xf:dispatch name="get-application-users" target="main-model">
                        <xxf:context name="applicationIRI"
                            select="xxf:instance('view-parameters-instance')/applicationIRI"/>
                    </xf:dispatch>
                    <!-- Get list of care teams for this user -->
                    <xf:dispatch name="initialiseCareTeamsForUser" target="careTeam-model"/>
                    <!-- Load notification template (needed if cda:act is missing when redirecting notifications -->
                    <xf:dispatch name="load-action-notification-template"
                        target="notification-model"/>

                    <!-- Reset trigger selections -->
                    <xf:delete
                        nodeset="xxf:instance('control-instance')/redirectNotifications/notifications/selectedtrigger/*"/>
                    <xf:setvalue
                        ref="xxf:instance('control-instance')/redirectNotifications/notifications/triggerComposition"
                        value="''"/>
                    <xf:setvalue
                        ref="xxf:instance('control-instance')/redirectNotifications/notifications/triggerEntry"
                        value="''"/>
                    <xf:setvalue
                        ref="xxf:instance('control-instance')/redirectNotifications/notifications/triggeredEffectiveTime"
                        value="''"/>
                    <!-- Reset redirect selections -->
                    <xf:setvalue
                        ref="xxf:instance('control-instance')/redirectNotifications/redirectedNotifications/notifyActorType"
                        value="''"/>
                    <xf:setvalue
                        ref="xxf:instance('control-instance')/redirectNotifications/redirectedNotifications/actionType"
                        value="'#cityEHR:Action:ExistingAction'"/>
                    <xf:setvalue
                        ref="xxf:instance('control-instance')/redirectNotifications/redirectedNotifications/acknowledge"
                        value="false()"/>
                </xf:action>

                <!-- Manage Patient Access -->
                <xf:action if="$adminTask='managePatientAccess'">
                    <!-- Set database parameters -->
                    <xxf:variable name="activeXMLstore"
                        select="xxf:instance('system-parameters-instance')/coreParameters/databaseConfiguration/activeDatabases/xmlstore[@system='patientstore']"/>
                    <xxf:variable name="xmlstore"
                        select="xxf:instance('system-parameters-instance')/coreParameters/databaseConfiguration/installedDatabases/xmlstore[@value=$activeXMLstore/@value]"/>
                    <xf:setvalue
                        ref="xxf:instance('control-instance')/managePatientAccess/patientDatabaseStorageLocation"
                        value="concat($xmlstore/databaseURL/@value,$activeXMLstore/@storageLocation)"/>
                    <xf:setvalue
                        ref="xxf:instance('control-instance')/managePatientAccess/patientDatabaseApplicationLocation"
                        value="concat(xxf:instance('control-instance')/managePatientAccess/patientDatabaseStorageLocation,'/applications/',xxf:instance('view-parameters-instance')/applicationId)"/>
                    <!-- Set the specialty 
                         (will trigger load of dictionary-instance and set of compositions for transfer in xforms-value-changed) -->
                    <xf:setvalue
                        ref="xxf:instance('control-instance')/managePatientAccess/specialtyIRI"
                        value="if (.='') then xxf:instance('control-instance')/managedApplication/defaultSpecialtyIRI else ."/>
                    <!-- Get list of patient sessions -->
                    <xf:dispatch name="get-patientSessionList" target="main-model"/>
                </xf:action>

                <!-- Manage application configuration -->
                <xf:action if="$adminTask='manageApplicationParameters'">

                    <!-- Get the list of shipped applications.
                         The list is created in shippedApplicationList-instance -->
                    <xf:dispatch name="get-shippedApplicationList" target="application-model"/>

                    <!-- Set the application to the managedApplication -->
                    <xf:setvalue
                        ref="xxf:instance('control-instance')/manageApplicationParameters/applicationIRI"
                        value="xxf:instance('control-instance')/managedApplication/applicationIRI"/>

                    <!-- Set the specialty to the first in the list for managedApplication.-->
                    <xf:setvalue
                        ref="xxf:instance('control-instance')/manageApplicationParameters/specialtyIRI"
                        value="xxf:instance('specialtyList-instance')/iso-13606:Folder[1]/@id"/>

                    <!-- Set the baselanguage and langauge to the baseLanguage for managedApplication.-->
                    <xxf:variable name="baseLanguageCode"
                        select="xxf:instance('control-instance')/managedApplication/baseLanguage/@code"/>
                    <xxf:variable name="supportedLanguageList"
                        select="xxf:instance('application-parameters-instance')/languagePacks/language"/>
                    <xxf:variable name="baseLanguageDisplayName"
                        select="if (exists($supportedLanguageList[lower-case(@code)=$baseLanguageCode])) then $supportedLanguageList[lower-case(@code)=$baseLanguageCode]/@displayName else $baseLanguageCode"/>

                    <xf:setvalue
                        ref="xxf:instance('control-instance')/managedParameters/baseLanguage/@code"
                        value="$baseLanguageCode"/>
                    <xf:setvalue
                        ref="xxf:instance('control-instance')/managedParameters/baseLanguage/@displayName"
                        value="$baseLanguageDisplayName"/>

                    <xf:setvalue
                        ref="xxf:instance('control-instance')/managedParameters/language/@code"
                        value="xxf:instance('control-instance')/managedApplication/baseLanguage/@code"/>
                    <xf:setvalue
                        ref="xxf:instance('control-instance')/managedParameters/language/@displayName"
                        value="$baseLanguageDisplayName"/>

                    <!-- Set language pack format -->
                    <xxf:variable name="option"
                        select="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/managedLanguagePack/exportFormat/option[1]"/>
                    <xf:setvalue
                        ref="xxf:instance('control-instance')/managedLanguagePack/exportFormat"
                        value="$option/@value"/>
                    <xf:setvalue
                        ref="xxf:instance('control-instance')/managedLanguagePack/transformationXSL"
                        value="$option/@transformationXSL"/>

                    <!-- Set options for displaying languagePack terms -->
                    <xf:setvalue ref="xxf:instance('control-instance')/managedParameters/termFilter"
                        value="''"/>
                    <xf:setvalue
                        ref="xxf:instance('control-instance')/managedParameters/termSortOrder"
                        value="''"/>

                    <!-- Clear process execution parameters, in case apply-languagePack has previously been invoked -->
                    <xf:dispatch name="clear-processExecutionParameters" target="process-model"/>

                    <!-- Load dictionary for the specialty -->
                    <xf:dispatch name="load-dictionary" target="dictionary-model">
                        <xxf:context name="specialtyIRI"
                            select="xxf:instance('control-instance')/manageApplicationParameters/specialtyIRI"
                        />
                    </xf:dispatch>

                    <!-- Set the manage application parameters -->
                    <xf:dispatch name="set-manageApplicationParameters" target="main-model"/>

                    <!-- Set the debugInstance to the first in the list in view-parameters.-->
                    <xf:setvalue
                        ref="xxf:instance('control-instance')/manageApplicationParameters/debugInstance"
                        value="xxf:instance('view-parameters-instance')/debuggingInformation/debugInstance/option[1]/@value"/>

                    <!-- Selection and status for editing - not editing until user selects the opeion -->
                    <xf:setvalue ref="xxf:instance('control-instance')/managedParameters/edit"
                        value="false()"/>
                    <xf:setvalue ref="xxf:instance('control-instance')/managedParameters/editType"
                        value="''"/>

                </xf:action>

                <!-- Show user interface wireframe -->
                <xf:action if="$adminTask='showWireframe'">
                    <!-- Call pipeline through page-flow -->
                    <xf:dispatch name="load-cityEHR-page" target="pageNavigation-model">
                        <xxf:context name="page" select="'cityEHRWireframe'"/>
                    </xf:dispatch>
                </xf:action>

                <!-- Manage system parameters -->
                <xf:action if="$adminTask='manageSystemParameters'">
                    <!-- Load the system-parameters for editing.
                         displayMode is inline, so that controls are for inline display, rather than a dialog -->
                    <xf:dispatch name="load-system-parameters-for-edit"
                        target="systemParameters-model">
                        <xxf:context name="displayMode" select="'inline'"/>
                        <xxf:context name="editMode" select="''"/>
                    </xf:dispatch>

                    <!-- Load the system parameters language pack -->
                    <xf:dispatch name="load-parametersLanguagePack" target="main-model">
                        <xxf:context name="adminTask" select="$adminTask"/>
                    </xf:dispatch>

                    <!-- Set the baselanguage and langauge to the baseLanguage for the system parameters.-->
                    <xxf:variable name="baseLanguageCode"
                        select="lower-case(xxf:instance('system-parameters-instance')/@languageCode)"/>
                    <xxf:variable name="supportedLanguageList"
                        select="xxf:instance('application-parameters-instance')/languagePacks/language"/>
                    <xxf:variable name="baseLanguageDisplayName"
                        select="if (exists($supportedLanguageList[lower-case(@code)=$baseLanguageCode])) then $supportedLanguageList[lower-case(@code)=$baseLanguageCode]/@displayName else $baseLanguageCode"/>

                    <xf:setvalue
                        ref="xxf:instance('control-instance')/managedParameters/baseLanguage/@code"
                        value="$baseLanguageCode"/>
                    <xf:setvalue
                        ref="xxf:instance('control-instance')/managedParameters/baseLanguage/@displayName"
                        value="$baseLanguageDisplayName"/>

                    <xf:setvalue
                        ref="xxf:instance('control-instance')/managedParameters/language/@code"
                        value="xxf:instance('control-instance')/managedApplication/baseLanguage/@code"/>
                    <xf:setvalue
                        ref="xxf:instance('control-instance')/managedParameters/language/@displayName"
                        value="$baseLanguageDisplayName"/>

                    <!-- Set language pack format -->
                    <xxf:variable name="option"
                        select="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/managedLanguagePack/exportFormat/option[1]"/>
                    <xf:setvalue
                        ref="xxf:instance('control-instance')/managedLanguagePack/exportFormat"
                        value="$option/@value"/>
                    <xf:setvalue
                        ref="xxf:instance('control-instance')/managedLanguagePack/transformationXSL"
                        value="$option/@transformationXSL"/>

                    <!-- Selection and status for editing - not editing until user selects the opeion -->
                    <xf:setvalue ref="xxf:instance('control-instance')/managedParameters/edit"
                        value="false()"/>
                    <xf:setvalue ref="xxf:instance('control-instance')/managedParameters/editType"
                        value="''"/>

                </xf:action>

                <!-- New application wizard -->
                <xf:action if="$adminTask='newApplicationWizard'">
                    <xf:dispatch name="reset-newApplicationWizard" target="main-model"/>
                </xf:action>

                <!-- Manage patient records -->
                <xf:action if="$adminTask='manageRecords'">
                    <!-- Set up templates for cdaHeader -->
                    <xf:delete nodeset="xxf:instance('control-instance')/manageRecords/*/cdaHeader"/>
                    <xf:insert context="xxf:instance('control-instance')/manageRecords/source"
                        origin="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/manageRecords/cdaHeader"/>
                    <xf:insert context="xxf:instance('control-instance')/manageRecords/target"
                        origin="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/manageRecords/cdaHeader"/>
                    <!-- Reset source and target -->
                    <xf:dispatch name="reset-record" target="main-model">
                        <xxf:context name="record"
                            select="xxf:instance('control-instance')/manageRecords/source"/>
                        <xxf:context name="patientId" select="''"/>
                        <xxf:context name="source" select="''"/>
                    </xf:dispatch>
                    <xf:dispatch name="reset-record" target="main-model">
                        <xxf:context name="record"
                            select="xxf:instance('control-instance')/manageRecords/target"/>
                        <xxf:context name="patientId" select="''"/>
                        <xxf:context name="source" select="''"/>
                    </xf:dispatch>
                    <!-- Set status -->
                    <xf:setvalue ref="xxf:instance('control-instance')/manageRecords/status"
                        value="./@default"/>
                    <!-- Set the operation (will trigger xforms-value-changed event -->
                    <xf:setvalue ref="xxf:instance('control-instance')/manageRecords/operation"
                        value="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/manageRecords/recordOperation/option[1]/@value"
                    />
                </xf:action>

                <!-- Manage care teams -->
                <xf:action if="$adminTask='manageCareTeams'">
                    <!-- Get list of all users for the application.
                         Can only manage care teams for the current application-->
                    <xf:dispatch name="get-application-users" target="main-model">
                        <xxf:context name="applicationIRI"
                            select="xxf:instance('view-parameters-instance')/applicationIRI"/>
                    </xf:dispatch>
                    <!-- Set the selected care team (or clears care team, if none exist for this user -->
                    <xf:dispatch name="set-selected-careTeam" target="main-model"/>
                </xf:action>

                <!-- View audit log -->
                <xf:action if="$adminTask='viewAuditLog'">
                    <!-- Get list of all users for the application.
                         Can only manage audit log for user of the current application-->
                    <xf:dispatch name="get-application-users" target="main-model">
                        <xxf:context name="applicationIRI"
                            select="xxf:instance('view-parameters-instance')/applicationIRI"/>
                    </xf:dispatch>
                    <!-- Set the maxmimum sessions shown (returned from xquery) -->
                    <xf:setvalue ref="xxf:instance('control-instance')/viewAuditLog/maxSessions"
                        value="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/viewAuditLog/maxSessions"/>
                    <!-- Set the current user as the first selection - this triggers xforms-value-changed event to load the audit log -->
                    <xf:setvalue ref="xxf:instance('control-instance')/viewAuditLog/userIRI"
                        value="xxf:instance('user-instance')/@id"/>
                </xf:action>


                <!-- Manage cohort searches -->
                <xf:action if="$adminTask='manageCohortSearch'">
                    <!-- Get list of all users for the application.
                         Can only manage cohort searches for the current application-->
                    <xf:dispatch name="get-application-users" target="main-model">
                        <xxf:context name="applicationIRI"
                            select="xxf:instance('view-parameters-instance')/applicationIRI"/>
                    </xf:dispatch>
                    <!-- Set the current user as the first selection -->
                    <xf:setvalue ref="xxf:instance('control-instance')/manageCohortSearch/userIRI"
                        value="xxf:instance('user-instance')/@id"/>
                    <!-- Set cohortType to first on the list (should be 'all') -->
                    <xf:setvalue
                        ref="xxf:instance('control-instance')/manageCohortSearch/cohortType"
                        value="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/manageCohortSearch/cohortType/item[1]/@value"/>
                    <!-- Set the first role as selection -->
                    <xf:setvalue ref="xxf:instance('control-instance')/manageCohortSearch/roleIRI"
                        value="xxf:instance('application-parameters-instance')/rbac/role[1]/@value"
                    />
                </xf:action>

                <!-- Import cohort searches -->
                <xf:action if="$adminTask='importCohortSearch'">
                    <!-- Set the first role as selection -->
                    <xf:setvalue ref="xxf:instance('control-instance')/importCohortSearch/roleIRI"
                        value="xxf:instance('application-parameters-instance')/rbac/role[1]/@value"
                    />
                </xf:action>

                <!-- Manage export data sets -->
                <xf:action if="$adminTask='manageExportDataSet'">
                    <!-- Set the specialty in exportDataSetControl-instance in the exportDataSet-model.
                         This is because export data set features are shared with the manageExportDataSetDialog -->
                    <xf:setvalue
                        ref="xxf:instance('exportDataSetControl-instance')/exportDataSet/specialtyIRI"
                        value="if (.='') then xxf:instance('control-instance')/managedApplication/defaultSpecialtyIRI else ."/>

                    <!-- Load the dictionary for the specialty -->
                    <xf:dispatch name="load-dictionary" target="dictionary-model">
                        <xxf:context name="specialtyIRI"
                            select="xxf:instance('control-instance')/manageExportDataSet/specialtyIRI"
                        />
                    </xf:dispatch>

                    <!-- Initialise data sets for this specialty -->
                    <xf:dispatch name="initialiseDataSetForSpecialty" target="exportDataSet-model">
                        <xxf:context name="specialtyIRI"
                            select="xxf:instance('exportDataSetControl-instance')/exportDataSet/specialtyIRI"
                        />
                    </xf:dispatch>
                </xf:action>

                <!-- Manage schedule parameters -->
                <xf:action if="$adminTask='manageSchedule'">
                    <xf:dispatch name="initialise-manageSchedule" target="main-model"/>
                </xf:action>

                <!-- Create new clinic -->
                <xf:action if="$adminTask='createClinic'">
                    <xf:dispatch name="initialise-createClinic" target="main-model"/>
                </xf:action>

                <!-- Manage user account (user edits their own account) -->
                <xf:action if="$adminTask='manageUserAccount'">
                    <!-- Load managedUser - this is the same as the current user in user-instance -->
                    <xf:dispatch name="get-current-user" target="main-model"/>
                    <xf:dispatch name="load-managed-user" target="main-model"/>
                    <!-- Set task status -->
                    <xf:setvalue ref="xxf:instance('control-instance')/manageUsers/lifecycleStatus"
                        value="'myAccount'"/>
                    <xf:setvalue ref="xxf:instance('control-instance')/manageUsers/editStatus"
                        value="''"/>
                    <xf:setvalue ref="xxf:instance('control-instance')/manageUsers/editAccount"
                        value="'false'"/>
                </xf:action>

                <!-- Code Knowledge Sources -->
                <xf:action if="$adminTask='codeKnowledgeSources'">
                    <!-- Load the set of all knowledge maps -->
                    <xf:dispatch name="load-knowledgeMaps" target="main-model"/>
                </xf:action>

                <!-- Managing users -->
                <xf:action if="$adminTask='manageUsers'">
                    <!-- Set applicationIRI for users -->
                    <xf:setvalue ref="xxf:instance('control-instance')/manageUsers/applicationIRI"
                        value="xxf:instance('view-parameters-instance')/applicationIRI"/>
                    <!-- Set maximum users returned from query -->
                    <xf:setvalue ref="xxf:instance('userList-query-instance')/@max"
                        value="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/manageUsers/userListMax"/>
                    <!-- Get application users -->
                    <xf:dispatch name="get-application-users" target="main-model">
                        <xxf:context name="applicationIRI"
                            select="xxf:instance('control-instance')/manageUsers/applicationIRI"/>
                    </xf:dispatch>
                    <!-- Clear the managed user -->
                    <xf:delete nodeset="xxf:instance('managedUser-instance')/*"/>
                    <!-- Reset managed user -->
                    <xf:dispatch name="reset-managed-user" target="main-model"/>
                    <!-- Set task status -->
                    <xf:setvalue ref="xxf:instance('control-instance')/manageUsers/editAccount"
                        value="'false'"/>
                    <xf:setvalue ref="xxf:instance('control-instance')/manageUsers/editStatus"
                        value="''"/>
                    <xf:setvalue ref="xxf:instance('control-instance')/manageUsers/lifecycleStatus"
                        value="'waiting'"/>
                </xf:action>

                <!-- Check patient lists -->
                <xf:action if="$adminTask='processPatientList'">
                    <!-- Get list of care teams for this user -->
                    <xf:dispatch name="initialiseCareTeamsForUser" target="careTeam-model"/>
                    <!-- Set the care team selection for processPatientList -->
                    <xf:setvalue
                        ref="xxf:instance('control-instance')/processPatientList/careTeamId"
                        value="xxf:instance('careTeamControl-instance')/careTeam/id"/>
                    <!-- Set maximum patient Id length -->
                    <xf:setvalue
                        ref="xxf:instance('control-instance')/processPatientList/patientIdLength"
                        value="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/processPatientList/patientIdLength/@value"/>
                    <!-- Set number of header rows -->
                    <xf:setvalue
                        ref="xxf:instance('control-instance')/processPatientList/headerRows"
                        value="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/processPatientList/headerRows/@value"
                    />
                </xf:action>

                <!-- Test web services -->
                <xf:action if="$adminTask='testWebService'">
                    <!-- Setting selectedService will trigger value-changed event to insert service into control-instance -->
                    <xf:setvalue
                        ref="xxf:instance('control-instance')/testWebService/selectedService"
                        value="if (exists(xxf:instance('application-parameters-instance')/webServices/service)) then xxf:instance('application-parameters-instance')/webServices/service[1]/@entryIRI else ''"
                    />
                </xf:action>

            </xf:action>
            <!-- End of set-adminTask action -->

            <!-- Application defined action to check whether the form has been edited.
                 Invoked from set-adminTask
                 Also nvoked from load-cityEHR-page in pageNavigation-model-->
            <xf:action ev:event="check-editStatus">
                <xxf:variable name="editStatus" select="event('editStatus')"/>

                <xxf:variable name="currentAdminTask"
                    select="xxf:instance('control-instance')/adminTask/adminTask"/>
                <xxf:variable name="taskEditStatus"
                    select="if ($currentAdminTask !='' and exists(xxf:instance('control-instance')/*[name()=$currentAdminTask]/editStatus)) then xxf:instance('control-instance')/*[name()=$currentAdminTask]/editStatus else ''"/>


                <xf:setvalue ref="$editStatus" value="$taskEditStatus"/>

            </xf:action>


            <!-- ===Set up view when first loaded -->
            <xf:action ev:event="xforms-model-construct-done">

                <!-- Set the managed application.
                     Also invokes get-specialtyList -->
                <xf:dispatch name="set-managedApplication" target="main-model">
                    <xxf:context name="applicationIRI"
                        select="xxf:instance('view-parameters-instance')/applicationIRI"/>
                </xf:dispatch>


                <!-- Load application list -->
                <xf:dispatch name="get-applicationList" target="application-model">
                    <xxf:context name="status" select="xxf:instance('control-instance')/status"/>
                </xf:dispatch>

                <!-- Set audit log parameters (nneded in case audit log is switched off for this session) -->
                <xf:dispatch name="set-auditLog-parameters" target="auditLog-model"/>

                <!-- Set admin task access -->
                <xf:dispatch name="set-adminTaskAccess" target="main-model"/>

                <!-- Set default admin task.
                     This is the first visible leaf task (i.e. must not have any child task)-->
                <xxf:variable name="defaultTask"
                    select="xxf:instance('application-parameters-instance')/adminTaskList/descendant::task[not(task)][not(../@display='hide')][not(@display='hide')][1]/adminTask"/>
                <xf:dispatch name="set-adminTask" target="main-model">
                    <xxf:context name="adminTask" select="$defaultTask"/>
                </xf:dispatch>

            </xf:action>
        </xf:model>

        <!-- === HTML Page starts here == -->

    </xhtml:head>

    <xhtml:body class="cityEHRBase">
        <!-- Action confirmation dialogue -->
        <xi:include href="cityEHRActionConfirmationDialog.xhtml"/>
        <!-- In progress dialogue -->
        <xi:include href="cityEHRInProgressDialog.xhtml"/>
        <!-- View selected knowledge source -->
        <xi:include href="cityEHRViewKnowledgeSourceDialog.xhtml"/>
        <!-- View XML dialogue box -->
        <xi:include href="cityEHRViewXMLDialog.xhtml"/>
        <!-- Term context dialogue box -->
        <xi:include href="cityEHRTermContextDialog.xhtml"/>
        <!-- Fixed Header Information -->
        <xhtml:div id="ehrHeader">
            <xhtml:div id="patientLabel" class="hidden"></xhtml:div>
            <xhtml:div id="systemNavigation">
                <!-- System-level Navigation Pane -->
                <xi:include href="cityEHRNavigation.xhtml"/>
            </xhtml:div>
            <!-- Logo Pane -->
            <xhtml:div id="logo">
                <xf:output ref="xxf:instance('logo-instance')" mediatype="image/*"/>
            </xhtml:div>
        </xhtml:div>
        <!-- === Level 2 /3 =================================== 
            ehrContent - content in the EHR
            Contains
                ehrNavigation
                ehrView
                ehrInfo
            ==================================================
        -->
        <xhtml:div id="ehrContent">

            <!-- =========================================================
                ehrNavigation - navigation around the EHR
                    Contains
                        navigationType
                        navigationDisplay
                 ========================================================= -->

            <xxf:variable name="ehrNavigationClass"
                select="if (xxf:instance('view-parameters-instance')/viewDisplayLayout='landscape') then 'hidden' else ''"/>

            <xhtml:div id="ehrNavigation" class="{$ehrNavigationClass}">

                <xhtml:div id="navigationType">
                    <!-- Button to collapse (hide) ehrNavigation -->
                    <xhtml:div id="collapseNavigation">
                        <xf:trigger appearance="minimal" class="layoutControl">
                            <xf:label
                                ref="xxf:instance('view-parameters-instance')/staticParameters/layoutControls/activator[@type='collapseNavigation']/@displayName"/>
                            <xf:action ev:event="DOMActivate">
                                <xf:setvalue
                                    ref="xxf:instance('view-parameters-instance')/viewDisplayLayout"
                                    value="'landscape'"/>
                            </xf:action>
                        </xf:trigger>
                    </xhtml:div>

                </xhtml:div>

                <xhtml:div id="navigationDisplay">
                    <!-- Show the list of admin tasks.
                         Access control sets the display attribute on taks to 'hide' if th euser does not have access -->
                    <xxf:variable name="adminTaskList"
                        select="xxf:instance('application-parameters-instance')/adminTaskList/task[not(@display='hide')]"/>
                    <xf:repeat nodeset="$adminTaskList">
                        <xxf:variable name="task" select="."/>
                        <xxf:variable name="subTaskList" select="$task/task[not(@display='hide')]"/>
                        <xxf:variable name="adminSubTaskDisplay"
                            select="xxf:instance('control-instance')/adminTask/adminSubTaskDisplay"/>
                        <xxf:variable name="isSelectedCategory"
                            select="if (exists($subTaskList) and $subTaskList/adminTask=xxf:instance('control-instance')/adminTask/adminTask) then true() else false()"/>

                        <!-- Set the display - depends on whether this is the current task or not.
                             Note that tasks with subtask list can't be selected as the current task - they are set as the cirrent category
                             Display of subTasks for the current category is controlled by adminSubTaskDisplay (expanded or collapsed)-->
                        <xxf:variable name="adminTaskClass"
                            select="if ($task/adminTask = xxf:instance('control-instance')/adminTask/adminTask) then 'viewNavigationSelectedItem' else if ($isSelectedCategory and $adminSubTaskDisplay='expanded') then 'viewNavigationSelectedCategoryExpanded' else if ($isSelectedCategory) then  'viewNavigationSelectedCategoryCollapsed' else if (exists($subTaskList)) then 'viewNavigationCategory' else 'viewNavigationItem'"/>
                        <!-- Action when user selects the item is expand, collapse or select.
                             The selected category (i.e. one with subtasks) can be collapsed or expanded, depending on the current setting of adminSubTaskDisplay -->
                        <xxf:variable name="selectionAction"
                            select="if ($adminTaskClass='viewNavigationSelectedCategoryExpanded') then 'collapse' else if ($adminTaskClass=('viewNavigationSelectedCategoryCollapsed','viewNavigationCategory')) then 'expand' else 'select'"/>
                        <xxf:variable name="adminTaskTitle"
                            select="concat(xxf:instance('view-parameters-instance')/staticParameters/viewNavigationItem/prefix[@action=$selectionAction],$task/adminTaskTitle)"/>

                        <!-- Selecting top level category or task -->
                        <xf:trigger class="{$adminTaskClass}" appearance="minimal" xxf:modal="true">
                            <xf:label ref="$adminTaskTitle"/>
                            <xf:action ev:event="DOMActivate">
                                <!-- selectedTask is either the first subtask or the task itself -->
                                <xxf:variable name="selectedTask"
                                    select="if (exists($subTaskList)) then $subTaskList[1] else $task"/>
                                <!-- selectedTaskCategory is either the task (if it has sub tasks) or is blank -->
                                <xxf:variable name="selectedTaskCategory"
                                    select="if (exists($subTaskList)) then $task/adminTask else ''"/>

                                <!-- If the current task is this task then don't do anything.
                                     If the current task is a subTask of this category then toggle adminSubTaskDisplay
                                     Otherwise, set the new task -->
                                <xf:action
                                    if="xxf:instance('control-instance')/adminTask/adminTask = $subTaskList/adminTask">
                                    <xf:setvalue ref="$adminSubTaskDisplay"
                                        value="if (.='expanded') then 'collapsed' else 'expanded'"/>
                                </xf:action>

                                <xf:action
                                    if="not(xxf:instance('control-instance')/adminTask/adminTask=($task/adminTask,$subTaskList/adminTask))">
                                    <!-- Clear any system error messages -->
                                    <xf:setvalue
                                        ref="xxf:instance('view-parameters-instance')/systemError"
                                        value="''"/>

                                    <!-- New task, so all subtasks for the category must be displayed -->
                                    <xf:setvalue ref="$adminSubTaskDisplay" value="'expanded'"/>

                                    <!-- Set up selected task -->
                                    <xf:dispatch name="set-adminTask" target="main-model">
                                        <xxf:context name="adminTask"
                                            select="$selectedTask/adminTask"/>
                                    </xf:dispatch>
                                </xf:action>
                            </xf:action>
                        </xf:trigger>

                        <!-- If there are subtasks, then each has a trigger to select.
                             But only show them if one has been selected as the current task and adminSubTaskDisplay is set to 'expanded' -->
                        <xxf:variable name="subTaskListClass"
                            select="if ($subTaskList/adminTask=xxf:instance('control-instance')/adminTask/adminTask and $adminSubTaskDisplay='expanded') then '' else 'hidden'"/>
                        <xhtml:span class="{$subTaskListClass}">
                            <xf:repeat id="subTaskList" nodeset="$subTaskList">
                                <xxf:variable name="subTask" select="."/>
                                <xxf:variable name="subTaskClass"
                                    select="if ($subTask/adminTask = xxf:instance('control-instance')/adminTask/adminTask) then 'viewNavigationSelectedItem' else 'viewNavigationSubItem'"/>
                                <xxf:variable name="adminSubTaskTitle"
                                    select="concat(xxf:instance('view-parameters-instance')/staticParameters/viewNavigationItem/prefix[@action='subselect'],$subTask/adminTaskTitle)"/>
                                <!-- Selecting sub task -->
                                <xf:trigger class="{$subTaskClass}" appearance="minimal"
                                    xxf:modal="true">
                                    <xf:label ref="$adminSubTaskTitle"/>
                                    <xf:action ev:event="DOMActivate">
                                        <!-- Set up selected task -->
                                        <xf:dispatch name="set-adminTask" target="main-model">
                                            <xxf:context name="adminTask"
                                                select="$subTask/adminTask"/>
                                        </xf:dispatch>
                                    </xf:action>
                                </xf:trigger>
                            </xf:repeat>
                        </xhtml:span>
                    </xf:repeat>
                </xhtml:div>

            </xhtml:div>

            <!-- =========================================================
                EHR View 
                    Contains
                        viewType
                        viewControls
                        viewDisplay
                ========================================================= -->
            <xhtml:div id="ehrView">

                <!-- View Type - select the type of ehr view
                     For Admin this just contains a display of the current task
                     ===================================================================== -->
                <xhtml:div id="viewType">

                    <!-- Button to expand (restore) ehrNavigation -->
                    <xxf:variable name="expandNavigationClass"
                        select="if (xxf:instance('view-parameters-instance')/viewDisplayLayout='portrait') then 'hidden' else ''"/>
                    <xhtml:div id="expandNavigation" class="{$expandNavigationClass}">
                        <xf:trigger appearance="minimal" class="layoutControl">
                            <xf:label
                                ref="xxf:instance('view-parameters-instance')/staticParameters/layoutControls/activator[@type='expandNavigation']/@displayName"/>
                            <xf:action ev:event="DOMActivate">
                                <xf:setvalue
                                    ref="xxf:instance('view-parameters-instance')/viewDisplayLayout"
                                    value="'portrait'"/>
                            </xf:action>
                        </xf:trigger>
                    </xhtml:div>

                    <xhtml:div class="ViewTitle">
                        <!-- Show the applicationId - (not displayName because we need to know the id to build models)
                             This id is the one used for models - it is the suffix after #ISO-13606:EHR_Extract: in the applicationIRI-->
                        <xf:output
                            ref="substring-after(xxf:instance('view-parameters-instance')/applicationIRI,'#ISO-13606:EHR_Extract:')"/>

                        <xf:output
                            ref="concat('- ',xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/pageDisplayName)"/>
                        <xf:output
                            ref="concat('- ',xxf:instance('control-instance')/adminTask/adminTaskTitle)"
                        />
                    </xhtml:div>

                    <!-- Button to show ehrInfo -->
                    <xxf:variable name="expandInfoClass"
                        select="if (xxf:instance('view-parameters-instance')/ehrInfoLayout='hidden') then '' else 'hidden'"/>
                    <xhtml:div id="expandInfo" class="{$expandInfoClass}">
                        <xf:trigger appearance="minimal" class="layoutControl">
                            <xf:label
                                ref="xxf:instance('view-parameters-instance')/staticParameters/layoutControls/activator[@type='expandInfo']/@displayName"/>
                            <xf:action ev:event="DOMActivate">
                                <xf:setvalue
                                    ref="xxf:instance('view-parameters-instance')/ehrInfoLayout"
                                    value="''"/>
                            </xf:action>
                        </xf:trigger>
                    </xhtml:div>

                </xhtml:div>



                <!-- =====================================================================
                    View Controls - controls specific to this admin task
                    
                     Displays system errors and messages.
                     Then
                        viewControlsHeader
                            viewControlsDisplay (controls on left hand side)    
                            viewControlsActions (buttons on right hand side)
                     Then may have a table
                    
                     Is used for the following tasks:
                         Database Access Layer
                         Browse xmlstore
                         Manage export data sets
                         Manage care teams
                         Manage users
                         Manage Information Models
                         Any task that requires a file to be uploaded
                         Merge patient record
                         
                         
                    ===================================================================== -->

                <xhtml:div id="viewControls">
                    <!-- System error - can be dismissed by clicking on trigger -->
                    <xf:group ref="xxf:instance('view-parameters-instance')[systemError!='']">
                        <xf:output
                            ref="if (xxf:instance('view-parameters-instance')/systemError!='') then concat(xxf:instance('view-parameters-instance')/systemError/@displayName,xxf:instance('view-parameters-instance')/systemError) else ''"
                            class="error"/>
                        <xf:trigger appearance="minimal">
                            <xf:label>
                                <xf:output
                                    ref="xxf:instance('view-parameters-instance')/systemError/@acknowledgeLabel"
                                />
                            </xf:label>
                            <xf:action ev:event="DOMActivate">
                                <xf:setvalue
                                    ref="xxf:instance('view-parameters-instance')/systemError"
                                    value="''"/>
                            </xf:action>
                        </xf:trigger>
                    </xf:group>

                    <!-- Display messages on status -->
                    <xf:output
                        ref="if (xxf:instance('view-parameters-instance')/systemStatus!='') then normalize-space(concat(xxf:instance('view-parameters-instance')/systemStatus/@displayName,xxf:instance('view-parameters-instance')/systemStatus)) else ''"
                        class="status"/>

                    <!-- Controls are displayed for the current adminTask -->
                    <xxf:variable name="adminTask"
                        select="xxf:instance('control-instance')/adminTask/adminTask"/>


                    <!-- === Tasks using the Managed database ========================== 
                         These controls in the viewControlsHeader are shared between tasks:
                            databaseAccessLayer
                            browsePhysicalDatabases
                            browseLogicalDatabases
                         =============================================================== -->
                    <xhtml:div
                        class="{if ($adminTask=('databaseAccessLayer','browsePhysicalDatabases','browseLogicalDatabases')) then '' else 'hidden'}">

                        <!-- Some controls are only relevant if the database node is accessible.
                             If it isn't, then get-collectionList will return an error and set databaseAccessible to false -->
                        <xxf:variable name="databaseAccessible"
                            select="xxf:instance('control-instance')/managedDatabase/databaseAccessible"/>

                        <xhtml:ul class="viewControlsHeader">
                            <!-- System databases defined in system-parameters -->
                            <xxf:variable name="systemSet"
                                select="xxf:instance('system-parameters-instance')/coreParameters/databaseConfiguration/systemDatabases/database"/>
                            <!-- Physical databases defined in database-parameters, associated with the selected system  -->
                            <xxf:variable name="physicalClusterSet"
                                select="xxf:instance('database-parameters-instance')/deployedDatabases/physicalCluster[@system=xxf:instance('control-instance')/managedDatabase/system]"/>
                            <!-- Physical database nodes defined in database-parameters, associated with the selected physicalDatabase -->
                            <xxf:variable name="physicalClusterNodeSet"
                                select="$physicalClusterSet[@id=xxf:instance('control-instance')/managedDatabase/physicalDatabase]/node"/>

                            <!-- viewControlsDisplay has selections for the managedDatabase, followed by task-specific selections -->
                            <xhtml:li class="viewControlsDisplay">
                                <!-- Select the system (ehr or patientstore). -->
                                <xf:select1
                                    ref="xxf:instance('control-instance')/managedDatabase/system">
                                    <xf:label
                                        ref="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/managedDatabase/systemLabel"/>
                                    <xf:itemset nodeset="$systemSet">
                                        <xf:label ref="@cityEHR:displayName"/>
                                        <xf:value ref="@system"/>
                                    </xf:itemset>
                                    <!-- User has selected the system -->
                                    <xf:action ev:event="xforms-value-changed">
                                        <xf:dispatch name="set-managed-system" target="main-model"/>
                                    </xf:action>
                                </xf:select1>
                            </xhtml:li>

                            <!-- viewControlsDisplay selections for databaseAccessLayer -->
                            <xhtml:li
                                class="{if ($adminTask='databaseAccessLayer') then 'viewControlsDisplay' else 'hidden'}">
                                <!-- Select the application (or no applications) -->
                                <xxf:variable name="applicationList"
                                    select="xxf:instance('applicationList-instance')/iso-13606:EHR_Extract"/>
                                <xf:select1
                                    ref="xxf:instance('control-instance')/databaseAccessLayer/applicationIRI">
                                    <xf:label
                                        ref="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/databaseAccessLayer/applicationLabel"/>
                                    <xf:itemset
                                        nodeset="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/databaseAccessLayer/iso-13606:EHR_Extract | $applicationList">
                                        <xf:label ref="@displayName"/>
                                        <xf:value ref="@id"/>
                                    </xf:itemset>
                                    <xf:action ev:event="xforms-value-changed">
                                        <xf:dispatch name="set-databaseLocation" target="main-model">
                                            <xxf:context name="applicationIRI"
                                                select="xxf:instance('control-instance')/databaseAccessLayer/applicationIRI"
                                            />
                                        </xf:dispatch>
                                    </xf:action>
                                </xf:select1>
                                <!-- Select the operation -->
                                <xf:select1
                                    ref="xxf:instance('control-instance')/databaseAccessLayer/databaseOperation/@value">
                                    <xf:label
                                        ref="xxf:instance('control-instance')/databaseAccessLayer/databaseOperation/@displayName"/>
                                    <xf:itemset
                                        nodeset="xxf:instance('control-instance')/databaseAccessLayer/databaseOperation/option">
                                        <xf:label ref="./@displayName"/>
                                        <xf:value ref="./@value"/>
                                    </xf:itemset>
                                    <xf:action ev:event="xforms-value-changed">
                                        <!-- Clear the query report -->
                                        <xf:setvalue
                                            ref="xxf:instance('control-instance')/databaseAccessLayer/queryReport/@displayName"
                                            value="''"/>
                                        <xf:setvalue
                                            ref="xxf:instance('control-instance')/databaseAccessLayer/queryReport/@start"
                                            value="''"/>
                                        <xf:setvalue
                                            ref="xxf:instance('control-instance')/databaseAccessLayer/queryReport/@end"
                                            value="''"/>
                                        <xf:setvalue
                                            ref="xxf:instance('control-instance')/databaseAccessLayer/queryReport/@duration"
                                            value="''"/>
                                        <!-- Reset the DAL results -->
                                        <xf:dispatch name="reset-DALResults" target="main-model"/>
                                    </xf:action>
                                </xf:select1>
                            </xhtml:li>

                            <!-- viewControlsDisplay selections for browsePhysicalDatabases -->
                            <xhtml:li
                                class="{if ($adminTask='browsePhysicalDatabases') then 'viewControlsDisplay' else 'hidden'}">
                                <!-- Select the physicalDatabase. -->
                                <xf:select1
                                    ref="xxf:instance('control-instance')/managedDatabase/physicalDatabase">
                                    <xf:label
                                        ref="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/managedDatabase/physicalDatabaseLabel"/>
                                    <xf:itemset nodeset="$physicalClusterSet">
                                        <xf:label ref="@displayName"/>
                                        <xf:value ref="@id"/>
                                    </xf:itemset>
                                    <!-- Set the physicalClusterNode .
                                         Associated with the physicalDatabase - there may be more than one. -->
                                    <xf:action ev:event="xforms-value-changed">
                                        <xf:setvalue
                                            ref="xxf:instance('control-instance')/managedDatabase/physicalClusterNode"
                                            value="$physicalClusterNodeSet[1]/@id"/>
                                    </xf:action>
                                </xf:select1>
                                <!-- Select the physicalClusterNode. -->
                                <xf:select1
                                    ref="xxf:instance('control-instance')/managedDatabase/physicalClusterNode">
                                    <xf:label
                                        ref="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/managedDatabase/physicalClusterNodeLabel"/>
                                    <xf:itemset nodeset="$physicalClusterNodeSet">
                                        <xf:label ref="@id"/>
                                        <xf:value ref="@id"/>
                                    </xf:itemset>
                                    <!-- Set the databaseURL, databaseHandle.and version -->
                                    <xf:action ev:event="xforms-value-changed">
                                        <xf:dispatch name="set-physicalClusterNode"
                                            target="main-model"/>
                                    </xf:action>
                                </xf:select1>
                                <!-- database version - stored for the cluster node -->
                                <xf:output
                                    ref="normalize-space(concat(xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/browsePhysicalDatabases/databaseVersionLabel,xxf:instance('control-instance')/managedDatabase/databaseVersion))"/>
                                <!-- Display message if installed database is not accessible -->
                                <xf:output
                                    class="{if ($databaseAccessible='true') then 'hidden' else ''}"
                                    ref="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/browsePhysicalDatabases/databaseNodeInaccessible"
                                />
                            </xhtml:li>

                            <!-- viewControlsDisplay selections for browseLogicalDatabases -->
                            <xhtml:li
                                class="{if ($adminTask='browseLogicalDatabases') then 'viewControlsDisplay' else 'hidden'}">
                                <!-- Logical database location -->
                                <xxf:variable name="logicalDatabaseLocation"
                                    select="xxf:instance('control-instance')/managedDatabase/logicalDatabaseLocation"/>
                                <!-- Path to the currently selected node (resource or collection) -->
                                <xxf:variable name="databaseLocation"
                                    select="xxf:instance('control-instance')/browseLogicalDatabases/node/@path"/>
                                <!-- Display the complete path -->
                                <xf:output ref="concat($logicalDatabaseLocation,$databaseLocation)"
                                />
                            </xhtml:li>
                            <!-- End of viewControlsDisplay -->


                            <!-- viewControlsActions are specific to each task -->

                            <!-- Actions for Database Access Layer -->
                            <xhtml:li
                                class="{if ($adminTask='databaseAccessLayer') then 'viewControlsActions' else 'hidden'}">
                                <!-- Process the results of an xquery.
                                     Only available when the query results return handles to database resources in the form:
                                        <resource>{$handle}</resource>
                                -->
                                <xhtml:span
                                    class="{if (exists(xxf:instance('response-instance')/resource)) then '' else 'hidden'}">
                                    <!-- Select the action -->
                                    <xf:select1
                                        ref="xxf:instance('control-instance')/databaseAccessLayer/processingAction/@value">
                                        <xf:label
                                            ref="xxf:instance('control-instance')/databaseAccessLayer/processingAction/@displayName"/>
                                        <xf:itemset
                                            nodeset="xxf:instance('control-instance')/databaseAccessLayer/processingAction/option">
                                            <xf:label ref="./@displayName"/>
                                            <xf:value ref="./@value"/>
                                        </xf:itemset>
                                        <xf:action ev:event="xforms-value-changed">
                                            <!-- Not doing anything here -->
                                        </xf:action>
                                    </xf:select1>
                                    <!-- Execute the action -->
                                    <xxf:variable name="type" select="'action'"/>
                                    <xxf:variable name="icon"
                                        select="concat(xxf:instance('view-parameters-instance')/staticFileRoot,'/icons/',$type,'.png?',xxf:instance('view-parameters-instance')/versionNumber/@version)"/>
                                    <xxf:variable name="action"
                                        select="xxf:instance('control-instance')/databaseAccessLayer/processingAction/@value"/>
                                    <xxf:variable name="hint"
                                        select="xxf:instance('control-instance')/databaseAccessLayer/processingAction/option[@value=$action]/@hint"/>
                                    <!-- UI is blocked until action is done -->
                                    <xf:trigger appearance="minimal" xxf:modal="true">
                                        <xf:label>
                                            <xhtml:img src="{$icon}" alt="" />
                                        </xf:label>
                                        <xf:hint ref="$hint"/>
                                        <xf:action ev:event="DOMActivate">
                                            <!-- Must have specified a resource in order to perform action
                                                 (Will have prevented the trigger from being displayed).-->
                                            <xf:action
                                                if="exists(xxf:instance('response-instance')/resource)">
                                                <xf:dispatch name="confirm-action"
                                                  target="pageNavigation-model">
                                                  <xxf:context name="action"
                                                  select="'performResultsAction'"/>
                                                  <xxf:context name="messageSet" select="$hint"/>
                                                </xf:dispatch>
                                            </xf:action>
                                        </xf:action>
                                    </xf:trigger>
                                </xhtml:span>
                                <!-- Run the DAL operation -->
                                <xhtml:span
                                    class="{if (xxf:instance('control-instance')/databaseAccessLayer/xmlStoreResource='') then '' else ''}">
                                    <xxf:variable name="type" select="'search'"/>
                                    <xxf:variable name="icon"
                                        select="concat(xxf:instance('view-parameters-instance')/staticFileRoot,'/icons/',$type,'.png?',xxf:instance('view-parameters-instance')/versionNumber/@version)"/>
                                    <!-- UI is blocked until action is done -->
                                    <xf:trigger appearance="minimal" xxf:modal="true">
                                        <xf:label>
                                            <xhtml:img src="{$icon}" alt="" />
                                        </xf:label>
                                        <xf:hint
                                            ref="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/databaseAccessLayer/submitLabel"/>
                                        <xf:action ev:event="DOMActivate">
                                            <xf:dispatch name="run-DAL-operation"
                                                target="main-model"/>
                                        </xf:action>
                                    </xf:trigger>
                                </xhtml:span>
                                <!-- Export the results of the query (if there are any). -->
                                <xhtml:span
                                    class="{if (exists(xxf:instance('response-instance')/*[name()!='exception'])) then '' else 'hidden'}">
                                    <xxf:variable name="label"
                                        select="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/databaseAccessLayer/exportResultsLabel"/>
                                    <xxf:variable name="icon"
                                        select="concat(xxf:instance('view-parameters-instance')/staticFileRoot,'/icons/','export','.png?',xxf:instance('view-parameters-instance')/versionNumber/@version)"/>
                                    <!-- UI is blocked until action is done -->
                                    <xf:trigger appearance="minimal" xxf:modal="true">
                                        <xf:label>
                                            <xhtml:img src="{$icon}" alt="" />
                                        </xf:label>
                                        <xf:hint ref="$label"/>
                                        <!-- Export the response-instance to a zip file -->
                                        <xf:action ev:event="DOMActivate">
                                            <xf:dispatch name="export-queryResults"
                                                target="main-model"/>
                                        </xf:action>
                                    </xf:trigger>
                                </xhtml:span>
                                <!-- View the results of the query (if there are any) -->
                                <xhtml:span
                                    class="{if (xxf:instance('response-instance')/name()='cityEHR:empty') then 'hidden' else ''}">
                                    <xxf:variable name="label"
                                        select="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/databaseAccessLayer/viewResultsLabel"/>
                                    <xxf:variable name="icon"
                                        select="concat(xxf:instance('view-parameters-instance')/staticFileRoot,'/icons/','view','.png?',xxf:instance('view-parameters-instance')/versionNumber/@version)"/>
                                    <!-- UI is blocked until action is done -->
                                    <xf:trigger appearance="minimal" xxf:modal="true">
                                        <xf:label>
                                            <xhtml:img src="{$icon}" alt="" />
                                        </xf:label>
                                        <xf:hint ref="$label"/>
                                        <!-- Export the response-instance to a zip file -->
                                        <xf:action ev:event="DOMActivate">
                                            <xf:dispatch name="view-queryResults"
                                                target="main-model"/>
                                        </xf:action>
                                    </xf:trigger>
                                </xhtml:span>
                                <!-- Reset the xquery -->
                                <xhtml:span>
                                    <xxf:variable name="label"
                                        select="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/databaseAccessLayer/resetQueryLabel"/>
                                    <xxf:variable name="icon"
                                        select="concat(xxf:instance('view-parameters-instance')/staticFileRoot,'/icons/','reset','.png?',xxf:instance('view-parameters-instance')/versionNumber/@version)"/>
                                    <!-- UI is blocked until action is done -->
                                    <xf:trigger appearance="minimal" xxf:modal="true">
                                        <xf:label>
                                            <xhtml:img src="{$icon}" alt="" />
                                        </xf:label>
                                        <xf:hint ref="$label"/>
                                        <xf:action ev:event="DOMActivate">
                                            <xf:dispatch name="reset-xquery" target="main-model"/>
                                        </xf:action>
                                    </xf:trigger>
                                </xhtml:span>
                            </xhtml:li>


                            <!-- Actions for browsePhysicalDatabases, browseLogicalDatabases -->
                            <xhtml:li
                                class="{if ($adminTask=('browsePhysicalDatabases','browseLogicalDatabases')) then 'viewControlsActions' else 'hidden'}">
                                <!-- The current node depends on whether task is browsePhysicalDatabases or browseLogicalDatabases -->
                                <xxf:variable name="node"
                                    select="if ($adminTask='browsePhysicalDatabases') then xxf:instance('control-instance')/browsePhysicalDatabases/node else xxf:instance('control-instance')/browseLogicalDatabases/node"/>
                                <!-- View button if a resource (not a collection) is selected -->
                                <xhtml:span
                                    class="{if ($node/@type='resource') then 'viewControl' else 'hidden'}">
                                    <xxf:variable name="type" select="'view'"/>
                                    <xxf:variable name="label"
                                        select="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/browsePhysicalDatabases/viewButtonLabel"/>
                                    <xxf:variable name="icon"
                                        select="concat(xxf:instance('view-parameters-instance')/staticFileRoot,'/icons/',$type,'.png?',xxf:instance('view-parameters-instance')/versionNumber/@version)"/>
                                    <!-- View button -->
                                    <!-- UI is blocked until action is done -->
                                    <xf:trigger appearance="minimal" xxf:modal="true">
                                        <xf:label>
                                            <xhtml:img src="{$icon}" alt="" />
                                        </xf:label>
                                        <xf:hint ref="$label"/>
                                        <!-- View the selected resource -->
                                        <xf:action ev:event="DOMActivate">
                                            <xf:dispatch name="view-resource" target="main-model">
                                                <xxf:context name="node" select="$node"/>
                                            </xf:dispatch>
                                        </xf:action>
                                    </xf:trigger>
                                </xhtml:span>
                                <!-- Export button if a resource (not a collection) is selected -->
                                <xhtml:span
                                    class="{if ($node/@type='resource') then 'viewControl' else 'hidden'}">
                                    <xxf:variable name="type" select="'export'"/>
                                    <xxf:variable name="label"
                                        select="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/browsePhysicalDatabases/exportButtonLabel"/>
                                    <xxf:variable name="icon"
                                        select="concat(xxf:instance('view-parameters-instance')/staticFileRoot,'/icons/',$type,'.png?',xxf:instance('view-parameters-instance')/versionNumber/@version)"/>
                                    <!-- Export button -->
                                    <!-- UI is blocked until action is done -->
                                    <xf:trigger appearance="minimal" xxf:modal="true">
                                        <xf:label>
                                            <xhtml:img src="{$icon}" alt="" />
                                        </xf:label>
                                        <xf:hint ref="$label"/>
                                        <!-- Load the selected resource -->
                                        <xf:action ev:event="DOMActivate">
                                            <xf:dispatch name="export-resource" target="main-model">
                                                <xxf:context name="node" select="$node"/>
                                            </xf:dispatch>
                                        </xf:action>
                                    </xf:trigger>
                                </xhtml:span>
                                <!-- Delete button if a resource (not a collection) is selected -->
                                <xhtml:span
                                    class="{if ($node/@type='resource') then 'viewControl' else 'hidden'}">
                                    <xxf:variable name="type" select="'delete'"/>
                                    <xxf:variable name="label"
                                        select="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/browsePhysicalDatabases/deleteButtonLabel"/>
                                    <xxf:variable name="icon"
                                        select="concat(xxf:instance('view-parameters-instance')/staticFileRoot,'/icons/',$type,'.png?',xxf:instance('view-parameters-instance')/versionNumber/@version)"/>
                                    <!-- Delete button -->
                                    <xf:trigger appearance="minimal">
                                        <xf:label>
                                            <xhtml:img src="{$icon}" alt="" />
                                        </xf:label>
                                        <xf:hint ref="$label"/>
                                        <!-- Show confirmation dialog.
                                        Calls the action delete-resource in main-model if Confirm is pressed -->
                                        <xf:action ev:event="DOMActivate">
                                            <xxf:variable name="confirmationMessage"
                                                select="xxf:instance('control-instance')/browsePhysicalDatabases/node/@name"/>
                                            <xf:dispatch name="confirm-action"
                                                target="pageNavigation-model">
                                                <xxf:context name="action" select="'deleteResource'"/>
                                                <xxf:context name="messageSet"
                                                  select="$confirmationMessage"/>
                                            </xf:dispatch>
                                        </xf:action>
                                    </xf:trigger>
                                </xhtml:span>
                                <!-- Generate manifest button.
                                     Only if the current node is a collection -->
                                <xhtml:span
                                    class="{if ($node/@type='collection') then '' else 'hidden'}">
                                    <xxf:variable name="type" select="'manifest'"/>
                                    <xxf:variable name="label"
                                        select="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/browsePhysicalDatabases/generateManifestButtonLabel"/>
                                    <xxf:variable name="icon"
                                        select="concat(xxf:instance('view-parameters-instance')/staticFileRoot,'/icons/',$type,'.png?',xxf:instance('view-parameters-instance')/versionNumber/@version)"/>
                                    <!-- Manifest button -->
                                    <!-- UI is blocked until action is done -->
                                    <xf:trigger appearance="minimal" xxf:modal="true">
                                        <xf:label>
                                            <xhtml:img src="{$icon}" alt="" />
                                        </xf:label>
                                        <xf:hint ref="$label"/>
                                        <!-- Show confirmation dialog, since this process may take some time.
                                             Calls the action generate-databaseManifest in main-model if Confirm is pressed -->
                                        <xf:action ev:event="DOMActivate">
                                            <xf:dispatch name="confirm-action"
                                                target="pageNavigation-model">
                                                <xxf:context name="action"
                                                  select="'generateDatabaseManifest'"/>
                                                <xxf:context name="messageSet" select="$node/@path"
                                                />
                                            </xf:dispatch>
                                        </xf:action>
                                    </xf:trigger>
                                </xhtml:span>
                                <!-- Export manifest button.
                                     Only shown if a database manifest has been generated -->
                                <xhtml:span
                                    class="{if (exists(xxf:instance('manifest-instance')/*)) then '' else 'hidden'}">
                                    <xxf:variable name="type" select="'export'"/>
                                    <xxf:variable name="label"
                                        select="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/browsePhysicalDatabases/exportManifestButtonLabel"/>
                                    <xxf:variable name="icon"
                                        select="concat(xxf:instance('view-parameters-instance')/staticFileRoot,'/icons/',$type,'.png?',xxf:instance('view-parameters-instance')/versionNumber/@version)"/>
                                    <!-- Export manifest button -->
                                    <!-- UI is blocked until action is done -->
                                    <xf:trigger appearance="minimal" xxf:modal="true">
                                        <xf:label>
                                            <xhtml:img src="{$icon}" alt="" />
                                        </xf:label>
                                        <xf:hint ref="$label"/>
                                        <!-- Export the database manifest -->
                                        <xf:action ev:event="DOMActivate">
                                            <xf:dispatch name="export-manifest" target="main-model"
                                            />
                                        </xf:action>
                                    </xf:trigger>
                                </xhtml:span>
                                <!-- Database back up from manifest button.
                                     Only shown if a database manifest has been generated -->
                                <xhtml:span
                                    class="{if (exists(xxf:instance('manifest-instance')/*)) then '' else 'hidden'}">
                                    <xxf:variable name="type" select="'backup'"/>
                                    <xxf:variable name="label"
                                        select="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/browsePhysicalDatabases/backupButtonLabel"/>
                                    <xxf:variable name="icon"
                                        select="concat(xxf:instance('view-parameters-instance')/staticFileRoot,'/icons/',$type,'.png?',xxf:instance('view-parameters-instance')/versionNumber/@version)"/>
                                    <!-- Backup button -->
                                    <!-- UI is blocked until action is done -->
                                    <xf:trigger appearance="minimal" xxf:modal="true">
                                        <xf:label>
                                            <xhtml:img src="{$icon}" alt="" />
                                        </xf:label>
                                        <xf:hint ref="$label"/>
                                        <!-- Show confirmation dialog.
                                             Calls the action backup-database in main-model if Confirm is pressed.
                                             From 2019-06-26 use backup-database-from-manifest -->
                                        <xf:action ev:event="DOMActivate">
                                            <xf:dispatch name="confirm-action"
                                                target="pageNavigation-model">
                                                <xxf:context name="action"
                                                  select="'backupDatabaseFromManifest'"/>
                                                <xxf:context name="messageSet" select="$node/@path"
                                                />
                                            </xf:dispatch>
                                        </xf:action>
                                    </xf:trigger>
                                </xhtml:span>
                                <!-- Reindex the database.
                                     Only if the current node is a collection -->
                                <xhtml:span
                                    class="{if ($node/@type='collection') then '' else 'hidden'}">
                                    <xxf:variable name="type" select="'index'"/>
                                    <xxf:variable name="label"
                                        select="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/browsePhysicalDatabases/reindexButtonLabel"/>
                                    <xxf:variable name="icon"
                                        select="concat(xxf:instance('view-parameters-instance')/staticFileRoot,'/icons/',$type,'.png?',xxf:instance('view-parameters-instance')/versionNumber/@version)"/>
                                    <!-- index button -->
                                    <!-- UI is blocked until action is done -->
                                    <xf:trigger appearance="minimal" xxf:modal="true">
                                        <xf:label>
                                            <xhtml:img src="{$icon}" alt="" />
                                        </xf:label>
                                        <xf:hint ref="$label"/>
                                        <!-- Show confirmation dialog, since this process may take some time.
                                            Calls the action generate-databaseManifest in main-model if Confirm is pressed -->
                                        <xf:action ev:event="DOMActivate">
                                            <xf:dispatch name="confirm-action"
                                                target="pageNavigation-model">
                                                <xxf:context name="action"
                                                  select="'reindexDatabase'"/>
                                                <xxf:context name="messageSet" select="$node/@path"
                                                />
                                            </xf:dispatch>
                                        </xf:action>
                                    </xf:trigger>
                                </xhtml:span>
                            </xhtml:li>

                            <!-- Actions for browseLogicalDatabases -->
                            <xhtml:li
                                class="{if ($adminTask='browseLogicalDatabases') then 'viewControlsActions' else 'hidden'}">
                                <!-- TBD -->
                            </xhtml:li>

                            <xhtml:li class="LayoutFooter">&#160;</xhtml:li>
                        </xhtml:ul>
                        <!-- End of viewControlsHeader -->

                        <!-- Additional controls and text input for databaseAccessLayer -->
                        <xhtml:div
                            class="{if ($adminTask='databaseAccessLayer') then '' else 'hidden'}">

                            <xhtml:ul class="viewControlsHeader">
                                <xhtml:li>
                                    <!-- Set the databaseLocation for the query context -->
                                    <xxf:variable name="locationPrefix"
                                        select="if (starts-with(xxf:instance('control-instance')/databaseAccessLayer/databaseLocation,'/')) then xxf:instance('control-instance')/managedDatabase/btuLocation else concat(xxf:instance('control-instance')/managedDatabase/btuLocation,'/')"/>
                                    <xxf:variable name="databaseLocationLabel"
                                        select="concat(xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/databaseAccessLayer/databaseLocationLabel,$locationPrefix)"/>
                                    <xf:input
                                        ref="xxf:instance('control-instance')/databaseAccessLayer/databaseLocation"
                                        xxf:size="60" incremental="true">
                                        <xf:label ref="$databaseLocationLabel"/>
                                        <!-- Clear results when location is edited -->
                                        <xf:action ev:event="xforms-value-changed">
                                            <!-- Reset DAL results -->
                                            <xf:dispatch name="reset-DALResults" target="main-model"
                                            />
                                        </xf:action>
                                    </xf:input>
                                    <!-- Set the maximum number of results -->
                                    <xf:input ref="xxf:instance('query-instance')/@max" xxf:size="4">
                                        <xf:label
                                            ref="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/databaseAccessLayer/maxResultsLabel"
                                        />
                                    </xf:input>
                                </xhtml:li>
                            </xhtml:ul>

                            <!-- Enter the XQuery -->
                            <xhtml:div
                                class="{if (xxf:instance('control-instance')/databaseAccessLayer/databaseOperation/@value='query') then '' else 'hidden'}">
                                <xf:textarea
                                    ref="xxf:instance('control-instance')/databaseAccessLayer/queryDocument"
                                    appearance="xxf:autosize" incremental="true">
                                    <xf:label
                                        ref="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/databaseAccessLayer/queryDocumentLabel"/>
                                    <!-- Reset DAL results when query is changed -->
                                    <xf:action ev:event="xforms-value-changed">
                                        <xf:dispatch name="reset-DALResults" target="main-model"/>
                                    </xf:action>
                                </xf:textarea>
                            </xhtml:div>

                            <!-- Enter the xml document to write to the database -->
                            <xhtml:div
                                class="{if (xxf:instance('control-instance')/databaseAccessLayer/databaseOperation/@value='write') then '' else 'hidden'}">
                                <xf:textarea
                                    ref="xxf:instance('control-instance')/databaseAccessLayer/writeDocument"
                                    appearance="xxf:autosize" incremental="true">
                                    <xf:label
                                        ref="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/databaseAccessLayer/writeDocumentLabel"/>
                                    <!-- Reset DAL results when document is changed -->
                                    <xf:action ev:event="xforms-value-changed">
                                        <xf:dispatch name="reset-DALResults" target="main-model"/>
                                    </xf:action>
                                </xf:textarea>
                            </xhtml:div>

                        </xhtml:div>

                        <!-- Additional controls for browsePhysicalDatabases.
                             -->
                        <xhtml:ul
                            class="{if ($adminTask='browsePhysicalDatabases') then 'viewControlsHeader' else 'hidden'}">
                            <xhtml:li class="viewControlsDisplay">
                                <!-- Back button to return to parent collection.
                                 Only shown if there is at least one node in the path (which starts with '/' so first node is the blank string -->
                                <xhtml:span
                                    class="{if ($databaseAccessible='true' and count(tokenize(xxf:instance('control-instance')/browsePhysicalDatabases/databaseHandle,'/')) gt 2) then '' else 'hidden'}">
                                    <xxf:variable name="type" select="'previous'"/>
                                    <xxf:variable name="label"
                                        select="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/browsePhysicalDatabases/previousButtonLabel"/>
                                    <xxf:variable name="icon"
                                        select="concat(xxf:instance('view-parameters-instance')/staticFileRoot,'/icons/',$type,'.png?',xxf:instance('view-parameters-instance')/versionNumber/@version)"/>
                                    <!-- Back button -->
                                    <xf:trigger appearance="minimal">
                                        <xf:label>
                                            <xhtml:img src="{$icon}" alt="" />
                                        </xf:label>
                                        <xf:hint ref="$label"/>
                                        <!-- Remove last node from the path
                                         Reset the current node and redisplay the list -->
                                        <xf:action ev:event="DOMActivate">
                                            <xf:dispatch name="undoBrowsePhysicalDatabasesPath"
                                                target="main-model"/>
                                        </xf:action>
                                    </xf:trigger>
                                </xhtml:span>
                                <!-- Show path to current node, including its name if current node is a resource.
                                 And if a collection, the number of resources it contains. -->
                                <xhtml:span
                                    class="{if ($databaseAccessible='true') then '' else 'hidden'}">
                                    <!-- Path, including resource node (if selected) -->
                                    <xf:output
                                        ref="xxf:instance('control-instance')/browsePhysicalDatabases/node/@path"/>
                                    <!-- Resource count -->
                                    <xxf:variable name="nodeType"
                                        select="xxf:instance('control-instance')/browsePhysicalDatabases/node/@type"/>
                                    <xxf:variable name="size"
                                        select="xxf:instance('control-instance')/browsePhysicalDatabases/node/@size"/>
                                    <xf:output
                                        ref="if ($type='collection' and $size castable as xs:integer) then concat(' (',$size,')') else ''"
                                    />
                                </xhtml:span>
                            </xhtml:li>

                            <!-- Actions to control database browsing - only if database is accessible -->
                            <xhtml:li
                                class="{if ($databaseAccessible='true') then 'viewControlsActions' else 'hidden'}">
                                <!-- Show BTUs -->
                                <xf:output
                                    ref="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/browsePhysicalDatabases/showBTUsLabel"/>
                                <xf:input
                                    ref="xxf:instance('control-instance')/browsePhysicalDatabases/showBTUs"/>
                                <!-- Sort criteria for the displayed nodes in the collection -->
                                <xf:select1
                                    ref="xxf:instance('control-instance')/browsePhysicalDatabases/sortCriteria">
                                    <xf:label
                                        ref="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/browsePhysicalDatabases/sortCriteriaLabel"/>
                                    <xf:itemset
                                        nodeset="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/browsePhysicalDatabases/sortCriteria/option">
                                        <xf:label value="@displayName"/>
                                        <xf:value ref="@value"/>
                                    </xf:itemset>
                                </xf:select1>
                                <!-- Sort direction - can be ascending or descending -->
                                <xhtml:span>
                                    <xxf:variable name="sortDirection"
                                        select="xxf:instance('control-instance')/browsePhysicalDatabases/sortDirection"/>
                                    <xxf:variable name="toggleDirection"
                                        select="if ($sortDirection='ascending') then 'descending' else 'ascending'"/>
                                    <xxf:variable name="hint"
                                        select="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/browsePhysicalDatabases/sortDirectionLabel[@type=$toggleDirection]"/>
                                    <xxf:variable name="icon"
                                        select="concat(xxf:instance('view-parameters-instance')/staticFileRoot,'/icons/','sort.png',xxf:instance('view-parameters-instance')/staticFileVersion)"/>
                                    <!-- Sort button -->
                                    <!-- UI is blocked until action is done -->
                                    <xf:trigger appearance="minimal" xxf:modal="true">
                                        <xf:label>
                                            <xhtml:img src="{$icon}" alt="" />
                                        </xf:label>
                                        <xf:hint ref="$hint"/>
                                        <!-- Toggle the sort direction -->
                                        <xf:action ev:event="DOMActivate">
                                            <xf:setvalue
                                                ref="xxf:instance('control-instance')/browsePhysicalDatabases/sortDirection"
                                                value="$toggleDirection"/>
                                        </xf:action>
                                    </xf:trigger>
                                </xhtml:span>
                                <!-- Filter for the displayed nodes in the collection -->
                                <xf:output
                                    ref="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/browsePhysicalDatabases/filterLabel"/>
                                <xf:input
                                    ref="xxf:instance('control-instance')/browsePhysicalDatabases/filter"
                                    incremental="true"/>
                            </xhtml:li>

                            <xhtml:li class="LayoutFooter">&#160;</xhtml:li>
                        </xhtml:ul>

                    </xhtml:div>


                    <!-- === Manage System Icons ============== 
                         ========================================= -->

                    <xhtml:div class="{if ($adminTask='manageSystemIcons') then '' else 'hidden'}">
                        <!-- Actions for managing icons -->
                        <xhtml:ul class="viewControlsHeader">
                            <!-- Reload icons from disk -->
                            <xhtml:li class="viewControlsActions">
                                <xxf:variable name="label"
                                    select="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/manageSystemIcons/reloadLabel"/>
                                <xxf:variable name="icon"
                                    select="concat(xxf:instance('view-parameters-instance')/staticFileRoot,'/icons/','reload','.png?',xxf:instance('view-parameters-instance')/versionNumber/@version)"/>
                                <!-- UI is blocked until action is done -->
                                <xf:trigger appearance="minimal" xxf:modal="true">
                                    <xf:label>
                                        <xhtml:img src="{$icon}" alt="" />
                                    </xf:label>
                                    <xf:hint ref="$label"/>
                                    <!-- Reload the system icons-->
                                    <xf:action ev:event="DOMActivate">
                                        <xf:dispatch name="reload-systemIcons" target="main-model"/>
                                    </xf:action>
                                </xf:trigger>
                            </xhtml:li>

                            <!-- Save iconList -->
                            <xhtml:li class="viewControlsActions">
                                <xxf:variable name="label"
                                    select="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/manageSystemIcons/saveLabel"/>
                                <xxf:variable name="icon"
                                    select="concat(xxf:instance('view-parameters-instance')/staticFileRoot,'/icons/','save','.png?',xxf:instance('view-parameters-instance')/versionNumber/@version)"/>
                                <!-- UI is blocked until action is done -->
                                <xf:trigger appearance="minimal" xxf:modal="true">
                                    <xf:label>
                                        <xhtml:img src="{$icon}" alt="" />
                                    </xf:label>
                                    <xf:hint ref="$label"/>
                                    <!-- Reload the system icons-->
                                    <xf:action ev:event="DOMActivate">
                                        <xf:dispatch name="save-systemIcons" target="main-model"/>
                                    </xf:action>
                                </xf:trigger>
                            </xhtml:li>


                            <xhtml:li class="LayoutFooter">&#160;</xhtml:li>
                        </xhtml:ul>

                    </xhtml:div>



                    <!-- ===Redirect Notifications ============== 
                         ========================================= -->
                    <xhtml:div
                        class="{if ($adminTask='redirectNotifications') then '' else 'hidden'}">
                        <!-- Actions for search and redirect -->
                        <xhtml:ul class="viewControlsHeader">
                            <!-- Select the specialty -->
                            <xhtml:li class="viewControlsDisplay">
                                <xf:select1
                                    ref="xxf:instance('control-instance')/redirectNotifications/specialtyIRI">
                                    <xf:label
                                        ref="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/redirectNotifications/selectSpecialtyLabel"/>
                                    <xf:itemset
                                        nodeset="xxf:instance('specialtyList-instance')/iso-13606:Folder">
                                        <xf:label ref="@displayName"/>
                                        <xf:value ref="@id"/>
                                    </xf:itemset>
                                    <!-- When specialty is changed to a value from the specialtyList (not set to empty) -->
                                    <xf:action
                                        if="xxf:instance('control-instance')/redirectNotifications/specialtyIRI!=''"
                                        ev:event="xforms-value-changed">
                                        <!-- Load dictionary for this specialty -->
                                        <xf:dispatch name="load-dictionary"
                                            target="dictionary-model">
                                            <xxf:context name="specialtyIRI"
                                                select="xxf:instance('control-instance')/redirectNotifications/specialtyIRI"
                                            />
                                        </xf:dispatch>
                                    </xf:action>
                                </xf:select1>
                            </xhtml:li>
                            <!-- Select the notification type and show button to run search -->
                            <xhtml:li class="viewControlsDisplay">
                                <!-- Select notification type -->
                                <xf:select1
                                    ref="xxf:instance('control-instance')/redirectNotifications/notificationType">
                                    <xf:label
                                        ref="xxf:instance('view-parameters-instance')/notifications/notificationTypes/@displayName"/>
                                    <xf:itemset
                                        nodeset="xxf:instance('view-parameters-instance')/notifications/notificationTypes/notification">
                                        <xf:label ref="@typeDisplayName"/>
                                        <xf:value ref="@typeIRI"/>
                                    </xf:itemset>
                                    <!-- Rerun the search and reset the notificationCount -->
                                    <xf:action ev:event="xforms-value-changed">
                                        <xf:dispatch name="find-notifications" target="main-model"/>
                                    </xf:action>
                                </xf:select1>
                                <!-- Button to search for stored notifications -->
                                <xxf:variable name="label"
                                    select="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/redirectNotifications/searchLabel"/>
                                <xxf:variable name="icon"
                                    select="concat(xxf:instance('view-parameters-instance')/staticFileRoot,'/icons/','search','.png?',xxf:instance('view-parameters-instance')/versionNumber/@version)"/>
                                <!-- UI is blocked until action is done -->
                                <xf:trigger appearance="minimal" xxf:modal="true">
                                    <xf:label>
                                        <xhtml:img src="{$icon}" alt="" />
                                    </xf:label>
                                    <xf:hint ref="$label"/>
                                    <!-- Run the search and reset the notificationCount -->
                                    <xf:action ev:event="DOMActivate">
                                        <xf:dispatch name="find-notifications" target="main-model"/>
                                    </xf:action>
                                </xf:trigger>
                                <!-- Show number of notifications matched -->
                                <xf:output
                                    ref="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/redirectNotifications/searchResults/@prefix"/>
                                <xf:output
                                    ref="xxf:instance('control-instance')/redirectNotifications/notificationCount"/>
                                <xf:output
                                    ref="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/redirectNotifications/searchResults/@suffix"
                                />
                            </xhtml:li>

                            <xxf:variable name="status"
                                select="xxf:instance('control-instance')/redirectNotifications/status"/>

                            <!-- Button to redirect the selected notifications -->
                            <xxf:variable name="redirectButtonClass"
                                select="if ($status='ready' and (xxf:instance('control-instance')/redirectNotifications/redirectedNotifications/notifyActor != '' or xxf:instance('control-instance')/redirectNotifications/redirectedNotifications/action != '' or xxf:instance('control-instance')/redirectNotifications/redirectedNotifications/acknowledge='true' or xxf:instance('control-instance')/redirectNotifications/redirectedNotifications/resetEffectiveTime='true')) then 'viewControlsActions' else 'hidden'"/>
                            <xhtml:li class="{$redirectButtonClass}">
                                <xxf:variable name="notificationList"
                                    select="if (xxf:instance('control-instance')/redirectNotifications/notificationType ='#CityEHR:Annotation') then xxf:instance('notification-annotations-instance')/notification else xxf:instance('notification-actions-instance')/notification"/>
                                <xxf:variable name="label"
                                    select="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/redirectNotifications/redirectLabel"/>
                                <xxf:variable name="icon"
                                    select="concat(xxf:instance('view-parameters-instance')/staticFileRoot,'/icons/','redirect','.png?',xxf:instance('view-parameters-instance')/versionNumber/@version)"/>
                                <!-- UI is blocked until action is done -->
                                <xf:trigger appearance="minimal" xxf:modal="true">
                                    <xf:label>
                                        <xhtml:img src="{$icon}" alt="" />
                                    </xf:label>
                                    <xf:hint ref="$label"/>
                                    <xf:action ev:event="DOMActivate">
                                        <!-- Iterate through the notifications, redirecting to the parameters set -->
                                        <xf:action xxf:iterate="$notificationList">
                                            <xf:dispatch name="redirect-notification"
                                                target="main-model">
                                                <xxf:context name="notification" select="."/>
                                            </xf:dispatch>
                                        </xf:action>
                                        <!-- Reset redirectNotifications/status -->
                                        <xf:setvalue
                                            ref="xxf:instance('control-instance')/redirectNotifications/status"
                                            value="'waiting'"/>
                                    </xf:action>
                                </xf:trigger>
                            </xhtml:li>

                            <!-- Button to delete acknowledged notifications -->
                            <xxf:variable name="deleteButtonClass"
                                select="if ($status='ready' and xxf:instance('control-instance')/redirectNotifications/notifications/acknowledged = true()) then 'viewControlsActions' else 'hidden'"/>
                            <xhtml:li class="{$deleteButtonClass}">
                                <xxf:variable name="label"
                                    select="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/redirectNotifications/deleteLabel"/>
                                <xxf:variable name="icon"
                                    select="concat(xxf:instance('view-parameters-instance')/staticFileRoot,'/icons/','delete','.png?',xxf:instance('view-parameters-instance')/versionNumber/@version)"/>
                                <!-- UI is blocked until action is done -->
                                <xf:trigger appearance="minimal" xxf:modal="true">
                                    <xf:label>
                                        <xhtml:img src="{$icon}" alt="" />
                                    </xf:label>
                                    <xf:hint ref="$label"/>
                                    <!-- Delete the notifications - need user confirmation first -->
                                    <xf:action ev:event="DOMActivate">
                                        <xxf:variable name="confirmationMessage"
                                            select="concat(xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/redirectNotifications/confirmDeleteMessage/@prefix,xxf:instance('control-instance')/redirectNotifications/notificationCount,xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/redirectNotifications/confirmDeleteMessage/@suffix)"/>
                                        <xf:dispatch name="confirm-action"
                                            target="pageNavigation-model">
                                            <xxf:context name="action"
                                                select="'deleteNotificationList'"/>
                                            <xxf:context name="messageSet"
                                                select="$confirmationMessage"/>
                                        </xf:dispatch>
                                    </xf:action>
                                </xf:trigger>
                            </xhtml:li>


                            <xhtml:li class="LayoutFooter">&#160;</xhtml:li>
                        </xhtml:ul>

                        <!-- Parameters for search and redirect -->
                        <xhtml:table class="displayList">
                            <xhtml:thead>
                                <xhtml:tr>
                                    <xhtml:th>
                                        <xf:output
                                            ref="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/redirectNotifications/notificationsLabel"
                                        />
                                    </xhtml:th>
                                    <xhtml:th>
                                        <xf:output
                                            ref="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/redirectNotifications/redirectToLabel"
                                        />
                                    </xhtml:th>
                                </xhtml:tr>
                            </xhtml:thead>

                            <xhtml:tbody>
                                <!-- List of compositions and composition types, used in both selecting and redirecting notifications -->
                                <xxf:variable name="compositionList"
                                    select="xxf:instance('dictionary-instance')/iso-13606:folderCollection/iso-13606:folder[1]/iso-13606:composition"/>
                                <xxf:variable name="compositionIRIList"
                                    select="$compositionList/@code"/>
                                <xxf:variable name="typeList"
                                    select="xxf:instance('view-parameters-instance')/pageInformation/page[@compositionIRI=$compositionList/@typeId]"/>

                                <xhtml:tr>
                                    <!-- Parameters to find notifications.
                                         Held in control-instance / redirectNotifications
                                        <notifications>
                                            <effectiveTime from="" to=""/>
                                            <authorTime from="" to=""/>
                                            <notifyActorType/>
                                            <notifyActor/>
                                            <action/>
                                        </notifications>
                                      -->
                                    <xhtml:td>
                                        <xhtml:ul>
                                            <!-- Effective time -->
                                            <xhtml:li>
                                                <xf:output
                                                  ref="xxf:instance('view-parameters-instance')/notifications/effectiveTime/@displayName"/>
                                                <xf:output
                                                  ref="xxf:instance('view-parameters-instance')/notifications/effectiveTime/@from"/>
                                                <xf:input
                                                  ref="xxf:instance('control-instance')/redirectNotifications/notifications/effectiveTime/@from">
                                                  <xf:action ev:event="xforms-value-changed">
                                                  <!-- Rerun query to find notifications -->
                                                  <xf:dispatch name="find-notifications"
                                                  target="main-model"/>
                                                  </xf:action>
                                                </xf:input>
                                                <xf:output
                                                  ref="xxf:instance('view-parameters-instance')/notifications/effectiveTime/@to"/>
                                                <xf:input
                                                  ref="xxf:instance('control-instance')/redirectNotifications/notifications/effectiveTime/@to">
                                                  <xf:action ev:event="xforms-value-changed">
                                                  <!-- Rerun query to find notifications -->
                                                  <xf:dispatch name="find-notifications"
                                                  target="main-model"/>
                                                  </xf:action>
                                                </xf:input>
                                            </xhtml:li>
                                            <!-- Created -->
                                            <xhtml:li>
                                                <xf:output
                                                  ref="xxf:instance('view-parameters-instance')/notifications/authorTime/@displayName"/>
                                                <xf:output
                                                  ref="xxf:instance('view-parameters-instance')/notifications/authorTime/@from"/>
                                                <xf:input
                                                  ref="xxf:instance('control-instance')/redirectNotifications/notifications/authorTime/@from">
                                                  <xf:action ev:event="xforms-value-changed">
                                                  <xf:dispatch name="find-notifications"
                                                  target="main-model"/>
                                                  </xf:action>
                                                </xf:input>
                                                <xf:output
                                                  ref="xxf:instance('view-parameters-instance')/notifications/authorTime/@to"/>
                                                <xf:input
                                                  ref="xxf:instance('control-instance')/redirectNotifications/notifications/authorTime/@to">
                                                  <xf:action ev:event="xforms-value-changed">
                                                  <!-- Rerun query to find notifications -->
                                                  <xf:dispatch name="find-notifications"
                                                  target="main-model"/>
                                                  </xf:action>
                                                </xf:input>
                                            </xhtml:li>
                                            <!-- Actor Type and Actor -->
                                            <!-- Notify actor selection is only displayed if notifyActorType is set.
                                                 For users, selecting user/@id - for careTeamList-instance and parameters-instance we want @value  -->
                                            <xhtml:li>
                                                <xxf:variable name="notifyActorType"
                                                  select="xxf:instance('control-instance')/redirectNotifications/notifications/notifyActorType"/>
                                                <xxf:variable name="notifyActorSelectionList"
                                                  select="if ($notifyActorType='#CityEHR:CareTeam') then xxf:instance('careTeamList-instance')/careTeam else if ($notifyActorType='#CityEHR:Role') then xxf:instance('application-parameters-instance')/rbac/role else if ($notifyActorType='#CityEHR:User') then xxf:instance('userList-instance')/user else ()"/>
                                                <!-- Select actor type -->
                                                <xf:select1
                                                  ref="xxf:instance('control-instance')/redirectNotifications/notifications/notifyActorType">
                                                  <xf:label
                                                  ref="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/redirectNotifications/actorLabel"/>
                                                  <xf:itemset
                                                  nodeset="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/redirectNotifications/notificationActions/option | xxf:instance('view-parameters-instance')/notifications/notificationActions/option">
                                                  <xf:label ref="@displayName"/>
                                                  <xf:value ref="@value"/>
                                                  </xf:itemset>
                                                  <xf:action ev:event="xforms-value-changed">
                                                  <!-- Set notifyActor to first in the list for selected type (or nothing) -->
                                                  <xf:setvalue
                                                  ref="xxf:instance('control-instance')/redirectNotifications/notifications/notifyActor"
                                                  value="if (exists($notifyActorSelectionList[1]/@id)) then $notifyActorSelectionList[1]/@id else if (exists($notifyActorSelectionList[1]/@value)) then $notifyActorSelectionList[1]/@value else ''"
                                                  />
                                                  </xf:action>
                                                </xf:select1>
                                                <!-- Notify actor selection is only displayed if notifyActorType is set and is not empty -->
                                                <xxf:variable name="notifyActorDisplayClass"
                                                  select="if (xxf:instance('control-instance')/redirectNotifications/notifications/notifyActorType!='' and exists($notifyActorSelectionList)) then '' else 'hidden'"/>
                                                <xf:select1 class="{$notifyActorDisplayClass}"
                                                  ref="xxf:instance('control-instance')/redirectNotifications/notifications/notifyActor">
                                                  <xf:itemset nodeset="$notifyActorSelectionList">
                                                  <xf:label
                                                  ref="if (@displayName!='') then @displayName else if (exists(@id)) then @id else @value"/>
                                                  <xf:value
                                                  ref="if (exists(@id)) then @id else @value"/>
                                                  </xf:itemset>
                                                  <xf:action ev:event="xforms-value-changed">
                                                  <!-- First get the node that was selected -->
                                                  <xxf:variable name="notifyActorId" select="."/>
                                                  <xxf:variable name="notifyActor"
                                                  select="$notifyActorSelectionList[@id=$notifyActorId]"/>
                                                  <!-- Rerun query to find notifications -->
                                                  <xf:dispatch name="find-notifications"
                                                  target="main-model"/>
                                                  </xf:action>
                                                </xf:select1>
                                            </xhtml:li>
                                            <!-- Action.
                                                 Select the type and the compositionIRI
                                                 Only show types for which there is at least one composition in the dictionary.
                                                 Only show selection for the composition if a type has been set -->
                                            <xhtml:li>
                                                <xf:select1
                                                  ref="xxf:instance('control-instance')/redirectNotifications/notifications/actionType">
                                                  <xf:label
                                                  ref="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/redirectNotifications/actionLabel"/>
                                                  <xf:itemset
                                                  nodeset="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/redirectNotifications/pageInformation/page[@id='action'] | $typeList">
                                                  <xf:label ref="@compositionType"/>
                                                  <xf:value ref="@compositionIRI"/>
                                                  </xf:itemset>
                                                  <xf:action ev:event="xforms-value-changed">
                                                  <!-- Set the action to the first composition in the list of the selected type -->
                                                  <xxf:variable name="firstAction"
                                                  select="$compositionList[@typeId=xxf:instance('control-instance')/redirectNotifications/notifications/actionType][1]"/>
                                                  <xf:setvalue
                                                  ref="xxf:instance('control-instance')/redirectNotifications/notifications/action"
                                                  value="if (exists($firstAction)) then $firstAction/@code else ''"
                                                  />
                                                  </xf:action>
                                                </xf:select1>
                                                <!-- List of compositions comes from the data dictionary -->
                                                <xf:select1
                                                  ref="xxf:instance('control-instance')/redirectNotifications/notifications/action"
                                                  class="{if (xxf:instance('control-instance')/redirectNotifications/notifications/actionType = ('#cityEHR:Action:NoAction','#cityEHR:Action:AnyAction')) then 'hidden' else ''}">
                                                  <xf:label/>
                                                  <xf:itemset
                                                  nodeset="$compositionList[@typeId=xxf:instance('control-instance')/redirectNotifications/notifications/actionType]">
                                                  <xf:label ref="@displayName"/>
                                                  <xf:value ref="@code"/>
                                                  </xf:itemset>
                                                  <xf:action ev:event="xforms-value-changed">
                                                  <!-- Rerun query to find notifications -->
                                                  <xf:dispatch name="find-notifications"
                                                  target="main-model"/>
                                                  </xf:action>
                                                </xf:select1>
                                            </xhtml:li>
                                            <!-- Origin.
                                                Select the type and the compositionIRI
                                                Only show types for which there is at least one composition in the dictionary.                                               
                                                Only show selection for the composition if a type has been set -->
                                            <xhtml:li>
                                                <xf:select1
                                                  ref="xxf:instance('control-instance')/redirectNotifications/notifications/originType">
                                                  <xf:label
                                                  ref="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/redirectNotifications/originLabel"/>
                                                  <xf:itemset
                                                  nodeset="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/redirectNotifications/pageInformation/page[@id='origin'] | $typeList">
                                                  <xf:label ref="@compositionType"/>
                                                  <xf:value ref="@compositionIRI"/>
                                                  </xf:itemset>
                                                  <xf:action ev:event="xforms-value-changed">
                                                  <!-- Set the action to the first composition in the list of the selected type -->
                                                  <xxf:variable name="firstOrigin"
                                                  select="$compositionList[@typeId=xxf:instance('control-instance')/redirectNotifications/notifications/originType][1]"/>
                                                  <xf:setvalue
                                                  ref="xxf:instance('control-instance')/redirectNotifications/notifications/origin"
                                                  value="if (exists($firstOrigin)) then $firstOrigin/@code else ''"
                                                  />
                                                  </xf:action>
                                                </xf:select1>
                                                <!-- List of compositions comes from the data dictionary -->
                                                <xf:select1
                                                  ref="xxf:instance('control-instance')/redirectNotifications/notifications/origin"
                                                  class="{if (xxf:instance('control-instance')/redirectNotifications/notifications/originType != '') then '' else 'hidden'}">
                                                  <xf:label/>
                                                  <xf:itemset
                                                  nodeset="$compositionList[@typeId=xxf:instance('control-instance')/redirectNotifications/notifications/originType]">
                                                  <xf:label ref="@displayName"/>
                                                  <xf:value ref="@code"/>
                                                  </xf:itemset>
                                                  <xf:action ev:event="xforms-value-changed">
                                                  <!-- Rerun query to find notifications -->
                                                  <xf:dispatch name="find-notifications"
                                                  target="main-model"/>
                                                  </xf:action>
                                                </xf:select1>
                                            </xhtml:li>
                                            <!-- Trigger.
                                                 List is found in application-parameters
                                                 Only show triggers for compositions in the current specialty ($compositionIRIList) -->
                                            <xhtml:li>
                                                <xxf:variable name="triggerList"
                                                  select="xxf:instance('application-parameters-instance')/triggers/triggerSet[@compositionIRI=$compositionIRIList]/trigger[@type='notification']"/>
                                                <xf:select1
                                                  ref="xxf:instance('control-instance')/redirectNotifications/notifications/trigger">
                                                  <xf:label
                                                  ref="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/redirectNotifications/triggerLabel"/>
                                                  <xf:itemset
                                                  nodeset="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/redirectNotifications/anyTrigger , $triggerList">
                                                  <xf:value
                                                  ref="concat(../@compositionIRI,xxf:instance('view-parameters-instance')/resultSeparator,@entryIRI,xxf:instance('view-parameters-instance')/resultSeparator,@elementIRI)"/>
                                                  <xf:label
                                                  ref="if (exists(../@compositionIRI) and ../@compositionIRI!='') then for $compositionIRI in ../@compositionIRI return concat(@displayName,' - ',$compositionList[@code=$compositionIRI]/@displayName) else @displayName"
                                                  />
                                                  </xf:itemset>
                                                  <xf:action ev:event="xforms-value-changed">
                                                  <xxf:variable name="selectedTrigger"
                                                  select="$triggerList[concat(../@compositionIRI,xxf:instance('view-parameters-instance')/resultSeparator,@entryIRI,xxf:instance('view-parameters-instance')/resultSeparator,@elementIRI)=xxf:instance('control-instance')/redirectNotifications/notifications/trigger]"/>
                                                  <!-- Remove trigger -->
                                                  <xf:delete
                                                  nodeset="xxf:instance('control-instance')/redirectNotifications/notifications/selectedtrigger/*"/>
                                                  <xf:setvalue
                                                  ref="xxf:instance('control-instance')/redirectNotifications/notifications/triggerComposition"
                                                  value="''"/>
                                                  <xf:setvalue
                                                  ref="xxf:instance('control-instance')/redirectNotifications/notifications/triggerEntry"
                                                  value="''"/>
                                                  <xf:setvalue
                                                  ref="xxf:instance('control-instance')/redirectNotifications/notifications/triggeredEffectiveTime"
                                                  value="''"/>
                                                  <!-- Set selected trigger, if it exists -->
                                                  <xf:action if="exists($selectedTrigger)">
                                                  <xf:setvalue
                                                  ref="xxf:instance('control-instance')/redirectNotifications/notifications/triggerComposition"
                                                  value="$selectedTrigger/../@compositionIRI"/>
                                                  <xf:setvalue
                                                  ref="xxf:instance('control-instance')/redirectNotifications/notifications/triggerEntry"
                                                  value="$selectedTrigger/@entryIRI"/>
                                                  <xf:setvalue
                                                  ref="xxf:instance('control-instance')/redirectNotifications/notifications/triggerEffectiveTimeElement"
                                                  value="$selectedTrigger/effectiveTime/@elementIRI"/>
                                                  <xf:insert
                                                  context="xxf:instance('control-instance')/redirectNotifications/notifications/selectedtrigger"
                                                  origin="$selectedTrigger"/>
                                                  <!-- Rerun query to find notifications -->
                                                  <xf:dispatch name="find-notifications"
                                                  target="main-model"/>
                                                  </xf:action>
                                                  </xf:action>
                                                </xf:select1>
                                            </xhtml:li>
                                            <!-- Effective time set from trigger -->
                                            <xhtml:li>
                                                <xf:select1
                                                  ref="xxf:instance('control-instance')/redirectNotifications/notifications/triggeredEffectiveTime">
                                                  <xf:label
                                                  ref="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/redirectNotifications/triggeredEffectiveTimeLabel"/>
                                                  <xf:itemset
                                                  nodeset="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/redirectNotifications/triggeredEffectiveTime/option">
                                                  <xf:value ref="@value"/>
                                                  <xf:label ref="@displayName"/>
                                                  </xf:itemset>
                                                  <xf:action ev:event="xforms-value-changed">
                                                  <!-- Rerun query to find notifications -->
                                                  <xf:dispatch name="find-notifications"
                                                  target="main-model"/>
                                                  </xf:action>
                                                </xf:select1>
                                            </xhtml:li>
                                            <!-- Acknowledged -->
                                            <xhtml:li>
                                                <xf:input
                                                  ref="xxf:instance('control-instance')/redirectNotifications/notifications/acknowledged">
                                                  <xf:label
                                                  ref="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/redirectNotifications/acknowledgedLabel"/>
                                                  <xf:action ev:event="xforms-value-changed">
                                                  <!-- Rerun query to find notifications -->
                                                  <xf:dispatch name="find-notifications"
                                                  target="main-model"/>
                                                  </xf:action>
                                                </xf:input>
                                            </xhtml:li>


                                        </xhtml:ul>
                                    </xhtml:td>

                                    <!-- Parameters to redirect notifications -->
                                    <xhtml:td>
                                        <xxf:variable name="notificationParameters"
                                            select="xxf:instance('control-instance')/redirectNotifications/notifications"/>
                                        <xhtml:ul>
                                            <!-- Notify actor selection is only displayed if notifyActorType is set -->
                                            <xxf:variable name="notifyActorType"
                                                select="xxf:instance('control-instance')/redirectNotifications/redirectedNotifications/notifyActorType"/>
                                            <xxf:variable name="notifyActorSelectionList"
                                                select="if ($notifyActorType='#CityEHR:CareTeam') then xxf:instance('careTeamList-instance')/careTeam else if ($notifyActorType='#CityEHR:Role') then xxf:instance('application-parameters-instance')/rbac/role else if ($notifyActorType='#CityEHR:User') then xxf:instance('userList-instance')/user else ()"/>

                                            <!-- Actor Type and Actor -->
                                            <xhtml:li>
                                                <!-- Select actor type -->
                                                <xf:select1
                                                  ref="xxf:instance('control-instance')/redirectNotifications/redirectedNotifications/notifyActorType">
                                                  <xf:label
                                                  ref="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/redirectNotifications/actorLabel"/>
                                                  <xf:itemset
                                                  nodeset="xxf:instance('view-parameters-instance')/notifications/notificationRedirectActions/option">
                                                  <xf:label ref="@displayName"/>
                                                  <xf:value ref="@value"/>
                                                  </xf:itemset>
                                                  <xf:action ev:event="xforms-value-changed">
                                                  <!-- Set notifyActor to first in the list for selected type (or nothing) -->
                                                  <xf:setvalue
                                                  ref="xxf:instance('control-instance')/redirectNotifications/redirectedNotifications/notifyActor"
                                                  value="if (exists($notifyActorSelectionList)) then $notifyActorSelectionList[1]/@value else  ''"
                                                  />
                                                  </xf:action>
                                                </xf:select1>
                                                <!-- Select actor.
                                                     For users, selecting user/@id - for careTeamList-instance and parameters-instance we want @value-->
                                                <xxf:variable name="notifyActorDisplayClass"
                                                  select="if (xxf:instance('control-instance')/redirectNotifications/redirectedNotifications/notifyActorType!='' and exists($notifyActorSelectionList[1])) then '' else 'hidden'"/>
                                                <xf:select1 class="{$notifyActorDisplayClass}"
                                                  ref="xxf:instance('control-instance')/redirectNotifications/redirectedNotifications/notifyActor">
                                                  <xf:itemset nodeset="$notifyActorSelectionList">
                                                  <xf:label
                                                  ref="if (@displayName!='') then @displayName else if (exists(@id)) then @id else @value"/>
                                                  <xf:value
                                                  ref="if (exists(@id)) then @id else @value"/>
                                                  </xf:itemset>
                                                  <xf:action ev:event="xforms-value-changed">
                                                  <!-- Get the node that was selected -->
                                                  <xxf:variable name="notifyActorId" select="."/>
                                                  <xxf:variable name="notifyActor"
                                                  select="$notifyActorSelectionList[@value=$notifyActorId]"/>
                                                  <!-- Not doing anything here, yet -->
                                                  </xf:action>
                                                </xf:select1>
                                            </xhtml:li>

                                            <!-- Action.
                                                 Select the type and the compositionIRI -->
                                            <xhtml:li>
                                                <xf:select1
                                                  ref="xxf:instance('control-instance')/redirectNotifications/redirectedNotifications/actionType">
                                                  <xf:label
                                                  ref="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/redirectNotifications/actionLabel"/>
                                                  <xf:itemset
                                                  nodeset="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/redirectNotifications/pageInformation/page[@id='action-redirect'] | $typeList">
                                                  <xf:label ref="@compositionType"/>
                                                  <xf:value ref="@compositionIRI"/>
                                                  </xf:itemset>
                                                  <xf:action ev:event="xforms-value-changed">
                                                  <!-- Set the action to the first composition in the list of the selected type -->
                                                  <xxf:variable name="firstAction"
                                                  select="($compositionList[@typeId=xxf:instance('control-instance')/redirectNotifications/redirectedNotifications/actionType])[1]"/>
                                                  <xf:setvalue
                                                  ref="xxf:instance('control-instance')/redirectNotifications/redirectedNotifications/action"
                                                  value="if (exists($firstAction)) then $firstAction/@code else ''"
                                                  />
                                                  </xf:action>
                                                </xf:select1>
                                                <!-- List of compositions comes from the data dictionary -->
                                                <xf:select1
                                                  class="{if (xxf:instance('control-instance')/redirectNotifications/redirectedNotifications/actionType != '#cityEHR:Action:ExistingAction') then '' else 'hidden'}"
                                                  ref="xxf:instance('control-instance')/redirectNotifications/redirectedNotifications/action">
                                                  <xf:label/>
                                                  <xf:itemset
                                                  nodeset="$compositionList[@typeId=xxf:instance('control-instance')/redirectNotifications/redirectedNotifications/actionType]">
                                                  <xf:label ref="@displayName"/>
                                                  <xf:value ref="@code"/>
                                                  </xf:itemset>
                                                  <xf:action ev:event="xforms-value-changed">
                                                  <!-- Not doing anything here, yet -->
                                                  </xf:action>
                                                </xf:select1>
                                            </xhtml:li>

                                            <!-- Reset effectiveTime from trigger - only if a trigger has been selected -->
                                            <xhtml:li
                                                class="{if ($notificationParameters/triggerComposition != '' and $notificationParameters/triggerEntry != '') then '' else 'hidden'}">
                                                <xf:input
                                                  ref="xxf:instance('control-instance')/redirectNotifications/redirectedNotifications/resetEffectiveTime">
                                                  <xf:label
                                                  ref="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/redirectNotifications/resetEffectiveTimeLabel"
                                                  />
                                                </xf:input>
                                            </xhtml:li>

                                            <!-- Acknowledge notification -->
                                            <xhtml:li>
                                                <xf:input
                                                  ref="xxf:instance('control-instance')/redirectNotifications/redirectedNotifications/acknowledge">
                                                  <xf:label
                                                  ref="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/redirectNotifications/acknowledgeLabel"
                                                  />
                                                </xf:input>
                                            </xhtml:li>
                                        </xhtml:ul>
                                    </xhtml:td>
                                </xhtml:tr>
                            </xhtml:tbody>
                        </xhtml:table>
                    </xhtml:div>



                    <!-- ===Manage Patient Access ============== 
                        ========================================= -->
                    <xhtml:ul
                        class="{if ($adminTask='managePatientAccess') then 'viewControlsHeader' else 'hidden'}">

                        <!-- Transfer to cityEHRpa
                             Get selected composition templates and save in system configuration of patient store -->
                        <xhtml:li class="viewControlsDisplay">
                            <!-- Select specialty -->
                            <xhtml:span class="viewControl">
                                <xf:select1
                                    ref="xxf:instance('control-instance')/managePatientAccess/specialtyIRI">
                                    <xf:label
                                        ref="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/managePatientAccess/selectSpecialtyLabel"/>
                                    <xf:itemset
                                        nodeset="xxf:instance('specialtyList-instance')/iso-13606:Folder">
                                        <xf:label ref="@displayName"/>
                                        <xf:value ref="@id"/>
                                    </xf:itemset>
                                    <!-- When specialty is changed to a value from the specialtyList (not set to empty) -->
                                    <xf:action
                                        if="xxf:instance('control-instance')/managePatientAccess/specialtyIRI!=''"
                                        ev:event="xforms-value-changed">
                                        <!-- Load the dictionary for the specialty -->
                                        <xf:dispatch name="load-dictionary"
                                            target="dictionary-model">
                                            <xxf:context name="specialtyIRI"
                                                select="xxf:instance('control-instance')/managePatientAccess.specialtyIRI"
                                            />
                                        </xf:dispatch>
                                        <!-- Set the compositions for this specialty -->
                                        <xf:dispatch name="set-patientCompositionSet"
                                            target="main-model"/>
                                    </xf:action>
                                </xf:select1>
                            </xhtml:span>
                            <!-- Button to transfer templates -->
                            <xhtml:span>
                                <xxf:variable name="label"
                                    select="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/managePatientAccess/configureAccessLabel"/>
                                <xxf:variable name="icon"
                                    select="concat(xxf:instance('view-parameters-instance')/staticFileRoot,'/icons/','export','.png?',xxf:instance('view-parameters-instance')/versionNumber/@version)"/>
                                <!-- UI is blocked until action is done -->
                                <xf:trigger appearance="minimal" xxf:modal="true">
                                    <xf:label>
                                        <xhtml:img src="{$icon}" alt="" />
                                    </xf:label>
                                    <xf:hint ref="$label"/>
                                    <!-- To set up to cityEHRpa need to transfer:
                                        composition templates
                                        cityEHRpaExtract template
                                        dictionaries -->
                                    <xf:action ev:event="DOMActivate">
                                        <!-- Transfer the composition templates -->
                                        <xf:dispatch name="transfer-patient-composition-templates"
                                            target="main-model"/>
                                        <!-- Transfer the cityEHRpaExtract template -->
                                        <xf:dispatch name="transfer-cityEHRpaExtract-template"
                                            target="main-model"/>
                                        <!-- Transfer the dictionaries -->
                                        <xf:dispatch name="transfer-dictionaries"
                                            target="main-model"/>
                                    </xf:action>
                                </xf:trigger>
                            </xhtml:span>
                            <!-- Summary of templates -->
                            <xf:output
                                ref="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/managePatientAccess/transferCountLabel/@prefix"/>
                            <xf:output
                                ref="concat(xxf:instance('control-instance')/managePatientAccess/selectedCompositionCount,' / ',xxf:instance('control-instance')/managePatientAccess/compositionCount)"/>
                            <xf:output
                                ref="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/managePatientAccess/transferCountLabel/@suffix"
                            />
                        </xhtml:li>

                        <!-- Transfer from cityEHRpa to xmlstore -->
                        <xhtml:li class="viewControlsActions">
                            <!-- Summary of patient sessions -->
                            <xf:output
                                ref="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/managePatientAccess/sessionCountLabel/@prefix"/>
                            <xf:output
                                ref="xxf:instance('control-instance')/managePatientAccess/sessionCount"/>
                            <xf:output
                                ref="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/managePatientAccess/sessionCountLabel/@suffix"/>
                            <!-- Button to import data from patient sessions -->
                            <xxf:variable name="label"
                                select="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/managePatientAccess/importSessionDataLabel"/>
                            <xxf:variable name="icon"
                                select="concat(xxf:instance('view-parameters-instance')/staticFileRoot,'/icons/','import','.png?',xxf:instance('view-parameters-instance')/versionNumber/@version)"/>
                            <!-- UI is blocked until action is done -->
                            <xf:trigger appearance="minimal" xxf:modal="true">
                                <xf:label>
                                    <xhtml:img src="{$icon}" alt="" />
                                </xf:label>
                                <xf:hint ref="$label"/>
                                <!-- Import -->
                                <xf:action ev:event="DOMActivate">
                                    <xf:dispatch name="import-patient-session-data"
                                        target="main-model"/>
                                </xf:action>
                            </xf:trigger>
                        </xhtml:li>

                        <xhtml:li class="LayoutFooter">&#160;</xhtml:li>
                    </xhtml:ul>



                    <!-- ===Test Web Service ============== 
                    ========================================= -->
                    <xhtml:div
                        class="{if ($adminTask='testWebService' and exists(xxf:instance('application-parameters-instance')/webServices/service)) then '' else 'hidden'}">
                        <!-- Controls for chosing and testing the service -->
                        <xhtml:ul class="viewControlsHeader">
                            <xhtml:li class="viewControlsDisplay">
                                <!-- Select web service -->
                                <xhtml:span class="viewControl">
                                    <xf:select1
                                        ref="xxf:instance('control-instance')/testWebService/selectedService">
                                        <xf:label
                                            ref="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/testWebService/selectWebServiceLabel"/>
                                        <xf:itemset
                                            nodeset="xxf:instance('application-parameters-instance')/webServices/service">
                                            <xf:label
                                                ref="substring-after(@entryIRI,'#ISO-13606:Entry:')"/>
                                            <xf:value ref="@entryIRI"/>
                                        </xf:itemset>
                                        <!-- Clear web service, insert selected -->
                                        <xf:action ev:event="xforms-value-changed">
                                            <xf:delete
                                                nodeset="xxf:instance('control-instance')/testWebService/service"/>
                                            <xf:insert
                                                context="xxf:instance('control-instance')/testWebService"
                                                origin="xxf:instance('application-parameters-instance')/webServices/service[@entryIRI=xxf:instance('control-instance')/testWebService/selectedService]"/>
                                            <!-- Clear webServiceReturn-instance -->
                                            <xf:delete
                                                nodeset="xxf:instance('webServiceReturn-instance')/*"
                                            />
                                        </xf:action>
                                    </xf:select1>
                                </xhtml:span>
                                <!-- Display selected service -->
                                <xhtml:span class="viewControl">
                                    <xxf:variable name="selectedService"
                                        select="xxf:instance('control-instance')/testWebService/service"/>
                                    <xxf:variable name="selectedServiceDetails"
                                        select="if (exists($selectedService)) then concat(' ',$selectedService/@url,' (',$selectedService/@method,')') else ''"/>
                                    <xf:output ref="$selectedServiceDetails"/>
                                </xhtml:span>
                            </xhtml:li>
                            <xhtml:li class="viewControlsActions">
                                <!-- Button to test web service -->
                                <xxf:variable name="icon"
                                    select="concat(xxf:instance('view-parameters-instance')/staticFileRoot,'/icons/','action','.png?',xxf:instance('view-parameters-instance')/versionNumber/@version)"/>
                                <!-- UI is blocked until action is done -->
                                <xf:trigger appearance="minimal" xxf:modal="true">
                                    <xf:label>
                                        <xhtml:img src="{$icon}" alt="" />
                                    </xf:label>
                                    <xf:hint
                                        ref="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/testWebService/callWebServiceLabel"/>
                                    <xf:action ev:event="DOMActivate">
                                        <!-- Test the service -->
                                        <xf:dispatch name="call-web-service"
                                            target="webService-model">
                                            <xxf:context name="service"
                                                select="xxf:instance('control-instance')/testWebService/service"/>
                                            <xxf:context name="entry" select="()"/>
                                        </xf:dispatch>
                                    </xf:action>
                                </xf:trigger>
                            </xhtml:li>
                            <xhtml:li class="LayoutFooter">&#160;</xhtml:li>
                        </xhtml:ul>
                        <!-- Set the parameters for the test call -->
                        <xhtml:table class="displayList">
                            <xhtml:thead>
                                <xhtml:tr>
                                    <xhtml:td>
                                        <xf:output
                                            ref="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/testWebService/parameterNameLabel"
                                        />
                                    </xhtml:td>
                                    <xhtml:td>
                                        <xf:output
                                            ref="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/testWebService/parameterSettingLabel"
                                        />
                                    </xhtml:td>
                                </xhtml:tr>
                            </xhtml:thead>
                            <!-- One row for each parameter to be set -->
                            <xhtml:tbody>
                                <xf:repeat
                                    nodeset="xxf:instance('control-instance')/testWebService/service/parameter">
                                    <xxf:variable name="parameter" select="."/>
                                    <xhtml:tr>
                                        <xhtml:td>
                                            <xf:output ref="$parameter/@name"/>
                                        </xhtml:td>
                                        <xhtml:td>
                                            <xf:input ref="$parameter/@value">
                                                <xf:action ev:event="xforms-value-changed">
                                                  <xf:dispatch name="clear-web-service"
                                                  target="webService-model"/>
                                                </xf:action>
                                            </xf:input>
                                        </xhtml:td>
                                    </xhtml:tr>
                                </xf:repeat>
                            </xhtml:tbody>
                        </xhtml:table>
                    </xhtml:div>


                    <!-- ===Manage Directory Entries and Elements ============== 
                         ========================================================= -->
                    <xhtml:ul
                        class="{if ($adminTask='manageDirectory') then 'viewControlsHeader' else 'hidden'}">
                        <!-- Show current directory name and button to add a new item (entry or element) (shown on LHS) -->
                        <xhtml:li class="viewControlsDisplay">
                            <xxf:variable name="directory"
                                select="xxf:instance('control-instance')/manageDirectory/directory"/>
                            <xxf:variable name="directoryType"
                                select="xxf:instance('control-instance')/manageDirectory/directoryType"/>
                            <!-- Show name of the current directory -->
                            <xf:output ref="$directory/@displayName"/>
                            <!-- Button to add new entry/element to the directory.
                                 But only if a directory is selected
                                 And can't add a new entry to an entry directory with key value that is enumeratedValue, enumeratedClass or enumeratedDirectory -->
                            <xxf:variable name="key" select="$directory/@key"/>
                            <xxf:variable name="keyElement"
                                select="xxf:instance('dictionary-instance')/iso-13606:elementCollection/iso-13606:element[@root=$key]"/>
                            <xxf:variable name="keyType"
                                select="if (exists($keyElement)) then $keyElement/@cityEHR:elementType else ''"/>
                            <xxf:variable name="addButtonClass"
                                select="if (xxf:instance('control-instance')/manageDirectory/directoryIRI='') then 'hidden' else if ($directoryType='entry' and $keyType=('#CityEHR:ElementProperty:enumeratedValue','#CityEHR:ElementProperty:enumeratedDirectory','#CityEHR:ElementProperty:enumeratedClass')) then 'hidden' else ''"/>
                            <xhtml:span class="{$addButtonClass}">
                                <xxf:variable name="type" select="'add'"/>
                                <xxf:variable name="label"
                                    select="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/manageDirectory/newLabel"/>
                                <xxf:variable name="icon"
                                    select="concat(xxf:instance('view-parameters-instance')/staticFileRoot,'/icons/',$type,'.png?',xxf:instance('view-parameters-instance')/versionNumber/@version)"/>
                                <!-- Add button -->
                                <xf:trigger appearance="minimal">
                                    <xf:label>
                                        <xhtml:img src="{$icon}" alt="" />
                                    </xf:label>
                                    <xf:hint ref="$label"/>
                                    <!-- Add new entry/element to the directory -->
                                    <xf:action ev:event="DOMActivate">
                                        <!-- Insert a new entry into the directory.
                                             The template has already been set in the applicationControl-instance when the directory was selected (for entries) -->
                                        <xf:action
                                            if="$adminTask='manageDirectory' and $directoryType='entry'">
                                            <xf:insert
                                                context="xxf:instance('import-instance')/iso-13606:entryCollection"
                                                origin="xxf:instance('applicationControl-instance')/directoryParameters/iso-13606:entry"
                                            />
                                        </xf:action>
                                        <!-- Insert a new element value into the directory -->
                                        <xf:action
                                            if="$adminTask='manageDirectory' and $directoryType='element'">
                                            <xf:insert
                                                context="xxf:instance('import-instance')/iso-13606:elementCollection/iso-13606:element"
                                                origin="xxf:instance('applicationControl-instance')/directoryParameters/iso-13606:data"
                                            />
                                        </xf:action>
                                        <!-- Set the status to 'edited' -->
                                        <xf:setvalue
                                            ref="xxf:instance('control-instance')/manageDirectory/editStatus"
                                            value="'edited'"/>
                                    </xf:action>
                                </xf:trigger>
                            </xhtml:span>
                            <!-- Message -->
                            <xf:output
                                ref="xxf:instance('control-instance')/manageDirectory/statusMessage"/>
                            <!-- Count of directory entries - either for iso-13606:entry or iso-13606:element -->
                            <xhtml:span>
                                <xf:output
                                    ref="if ($directoryType='element') then count(xxf:instance('import-instance')/iso-13606:elementCollection/iso-13606:element/*) else ''"/>
                                <xf:output
                                    ref="if ($directoryType='entry') then count(xxf:instance('import-instance')/iso-13606:entryCollection/iso-13606:entry) else ''"
                                />
                            </xhtml:span>
                        </xhtml:li>

                        <!-- Other actions (shown on RHS) -->
                        <xhtml:li class="viewControlsActions">
                            <!-- Select the specialty -->
                            <xhtml:span class="viewControl">
                                <xf:select1
                                    ref="xxf:instance('control-instance')/manageDirectory/specialtyIRI">
                                    <xf:label
                                        ref="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/manageDirectory/selectSpecialtyLabel"/>
                                    <xf:itemset
                                        nodeset="xxf:instance('specialtyList-instance')/iso-13606:Folder">
                                        <xf:label ref="@displayName"/>
                                        <xf:value ref="@id"/>
                                    </xf:itemset>
                                    <!-- When specialty is changed to a value from the specialtyList (not set to empty) -->
                                    <xf:action
                                        if="xxf:instance('control-instance')/manageDirectory/specialtyIRI!=''"
                                        ev:event="xforms-value-changed">
                                        <!-- Load the dictionary for the specialty.
                                             This loads to dictionary-instance -->
                                        <xf:dispatch name="load-dictionary"
                                            target="dictionary-model">
                                            <xxf:context name="specialtyIRI"
                                                select="xxf:instance('control-instance')/manageDirectory/specialtyIRI"
                                            />
                                        </xf:dispatch>
                                        <!-- Set list of directory entries/elements for this specialty.
                                             Pass the current specialty dictionary as a parameter
                                             This forms a set of <directory/> elements in the directoryList-instance -->
                                        <xf:dispatch name="set-directoryList"
                                            target="application-model">
                                            <xxf:context name="dictionary-instance"
                                                select="xxf:instance('dictionary-instance')"/>
                                            <xxf:context name="directoryList-instance"
                                                select="xxf:instance('directoryList-instance')"/>
                                        </xf:dispatch>
                                        <!-- Set the current directory to the first on the list.
                                             This will trigger the load-directory action.
                                             Also sets the directoryType which will populate the directory selection list correctly -->
                                        <xxf:variable name="selectedDirectory"
                                            select="xxf:instance('directoryList-instance')/directory[1]"/>
                                        <xf:setvalue
                                            ref="xxf:instance('control-instance')/manageDirectory/directoryType"
                                            value="if (exists($selectedDirectory)) then $selectedDirectory/@type else ''"/>
                                        <xf:setvalue
                                            ref="xxf:instance('control-instance')/manageDirectory/directoryIRI"
                                            value="if (exists($selectedDirectory)) then $selectedDirectory/@root else ''"/>
                                        <xf:setvalue
                                            ref="xxf:instance('control-instance')/manageDirectory/lifecycleStatus"
                                            value="'selected'"/>
                                        <!-- Load directory rebuilds and saves as necessary.
                                             Directory is loaded to import-instance -->
                                        <!-- This gets triggered anyway, if required -->
                                        <!--
                                        <xf:dispatch name="load-directory" target="application-model">
                                            <xxf:context name="directory" select="$selectedDirectory"/>
                                            <xxf:context name="dictionary-instance" select="xxf:instance('dictionary-instance')"/>
                                            <xxf:context name="applicationIRI"
                                                select="xxf:instance('control-instance')/managedApplication/applicationIRI"/>
                                            <xxf:context name="directory-instance" select="xxf:instance('import-instance')"/>
                                            <xxf:context name="status" select="xxf:instance('control-instance')/manageDirectory/status"/>
                                        </xf:dispatch>
                                        -->
                                    </xf:action>
                                </xf:select1>
                            </xhtml:span>
                            <!-- Select the directory type (element | entry) -->
                            <xhtml:span class="viewControl">
                                <xf:select1
                                    ref="xxf:instance('control-instance')/manageDirectory/directoryType">
                                    <xf:label
                                        ref="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/manageDirectory/directoryType/@label"/>
                                    <xf:itemset
                                        nodeset="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/manageDirectory/directoryType/item">
                                        <xf:label ref="@displayName"/>
                                        <xf:value ref="@value"/>
                                    </xf:itemset>
                                    <!-- When directory type is changed -->
                                    <xf:action ev:event="xforms-value-changed">
                                        <!-- Set the current directory to the first on the list.
                                             This will trigger the load-directory action -->
                                        <xxf:variable name="selectedDirectory"
                                            select="xxf:instance('directoryList-instance')/directory[@type=xxf:instance('control-instance')/manageDirectory/directoryType][1]"/>
                                        <xf:setvalue
                                            ref="xxf:instance('control-instance')/manageDirectory/lifecycleStatus"
                                            value="'selected'"/>
                                        <xf:setvalue
                                            ref="xxf:instance('control-instance')/manageDirectory/directoryIRI"
                                            value="if (exists($selectedDirectory)) then $selectedDirectory/@root else ''"
                                        />
                                    </xf:action>
                                </xf:select1>
                            </xhtml:span>
                            <!-- Select the directory (can be entry or element directories)
                                 But only if there are directories of the selected type -->
                            <xxf:variable name="directoryList"
                                select="xxf:instance('directoryList-instance')/directory[@type=xxf:instance('control-instance')/manageDirectory/directoryType]"/>
                            <xxf:variable name="directoryListClass"
                                select="if (exists($directoryList[1])) then 'viewControl' else 'hidden'"/>
                            <xxf:variable name="noDirectoryClass"
                                select="if ($directoryListClass='hidden') then 'viewControl' else 'hidden'"/>
                            <xhtml:span class="{$directoryListClass}">
                                <xf:select1
                                    ref="xxf:instance('control-instance')/manageDirectory/directoryIRI">
                                    <xf:label
                                        ref="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/manageDirectory/selectDirectoryLabel"/>
                                    <xf:itemset nodeset="$directoryList">
                                        <xf:label ref="./@displayName"/>
                                        <xf:value ref="./@root"/>
                                    </xf:itemset>
                                    <!-- New directory selected - load it.
                                         This also triggers when the directory is set as a result of a new specialty or directoryType being selected.
                                         -->
                                    <xf:action ev:event="xforms-value-changed">
                                        <!-- Get the selected directory.
                                             Always use the common model if the directory exists there. -->
                                        <xxf:variable name="commonModelDirectory"
                                            select="xxf:instance('commonModelDirectoryList-instance')/directory[@root=xxf:instance('control-instance')/manageDirectory/directoryIRI]"/>
                                        <xxf:variable name="specialtyDirectory"
                                            select="xxf:instance('directoryList-instance')/directory[@root=xxf:instance('control-instance')/manageDirectory/directoryIRI]"/>
                                        <xxf:variable name="selectedDirectory"
                                            select="if (exists($commonModelDirectory)) then $commonModelDirectory else $specialtyDirectory"/>
                                        <!-- Set the directory in the manageDirectory control. -->
                                        <xf:delete
                                            nodeset="xxf:instance('control-instance')/manageDirectory/directory"/>
                                        <xf:insert
                                            context="xxf:instance('control-instance')/manageDirectory"
                                            origin="$selectedDirectory"/>
                                        <!-- Load directory rebuilds and saves as necessary.
                                             Directory is loaded to import-instance -->
                                        <xf:dispatch name="load-directory"
                                            target="application-model">
                                            <xxf:context name="directory"
                                                select="$selectedDirectory"/>
                                            <xxf:context name="dictionary-instance"
                                                select="xxf:instance('dictionary-instance')"/>
                                            <xxf:context name="applicationIRI"
                                                select="xxf:instance('control-instance')/managedApplication/applicationIRI"/>
                                            <xxf:context name="directory-instance"
                                                select="xxf:instance('import-instance')"/>
                                            <xxf:context name="status"
                                                select="xxf:instance('control-instance')/manageDirectory/status"
                                            />
                                        </xf:dispatch>
                                    </xf:action>
                                </xf:select1>
                            </xhtml:span>
                            <!-- No directories for this specialty -->
                            <xf:output class="{$noDirectoryClass}"
                                ref="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/noDirectoryLabel"/>
                            <!-- Save the directory
                                 But only if one is selected and has been edited -->
                            <xhtml:span
                                class="{if (xxf:instance('control-instance')/manageDirectory/directoryIRI!='' and xxf:instance('control-instance')/manageDirectory/editStatus='edited') then 'viewControl' else 'hidden'}">
                                <xxf:variable name="type" select="'save'"/>
                                <xxf:variable name="label"
                                    select="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/manageDirectory/saveLabel"/>
                                <xxf:variable name="icon"
                                    select="concat(xxf:instance('view-parameters-instance')/staticFileRoot,'/icons/',$type,'.png?',xxf:instance('view-parameters-instance')/versionNumber/@version)"/>
                                <!-- Save button -->
                                <!-- UI is blocked until action is done -->
                                <xf:trigger appearance="minimal" xxf:modal="true">
                                    <xf:label>
                                        <xhtml:img src="{$icon}" alt="" />
                                    </xf:label>
                                    <xf:hint ref="$label"/>
                                    <!-- Save the directory -->
                                    <xf:action ev:event="DOMActivate">
                                        <xf:dispatch name="save-directory"
                                            target="application-model">
                                            <xxf:context name="directory"
                                                select="xxf:instance('control-instance')/manageDirectory/directory"/>
                                            <xxf:context name="directory-instance"
                                                select="xxf:instance('import-instance')"/>
                                            <xxf:context name="applicationIRI"
                                                select="xxf:instance('control-instance')/managedApplication/applicationIRI"/>
                                            <xxf:context name="status"
                                                select="xxf:instance('control-instance')/manageDirectory/status"
                                            />
                                        </xf:dispatch>
                                    </xf:action>
                                </xf:trigger>
                            </xhtml:span>
                            <!-- Export the directory
                                 But only if one is selected -->
                            <xhtml:span
                                class="{if (xxf:instance('control-instance')/manageDirectory/directoryIRI!='') then 'viewControl' else 'hidden'}">
                                <xxf:variable name="label"
                                    select="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/manageDirectory/exportLabel"/>
                                <xxf:variable name="icon"
                                    select="concat(xxf:instance('view-parameters-instance')/staticFileRoot,'/icons/','export','.png?',xxf:instance('view-parameters-instance')/versionNumber/@version)"/>
                                <!-- UI is blocked until action is done -->
                                <xf:trigger appearance="minimal" xxf:modal="true">
                                    <xf:label>
                                        <xhtml:img src="{$icon}" alt="" />
                                    </xf:label>
                                    <xf:hint ref="$label"/>
                                    <!-- Export the directory to a zip file.
                                         The directory is in import-instance -->
                                    <xf:action ev:event="DOMActivate">
                                        <xf:dispatch name="export-xmlCache"
                                            target="pageNavigation-model">
                                            <xxf:context name="export-instance"
                                                select="xxf:instance('import-instance')"/>
                                            <xxf:context name="exportType" select="'xml'"/>
                                        </xf:dispatch>
                                    </xf:action>
                                </xf:trigger>
                            </xhtml:span>
                            <!-- Rebuild all directories - only for element directories -->
                            <xhtml:span
                                class="{if (xxf:instance('control-instance')/manageDirectory/directoryType='element') then 'viewControl' else 'hidden'}">
                                <xxf:variable name="label"
                                    select="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/manageDirectory/rebuildLabel"/>
                                <xxf:variable name="icon"
                                    select="concat(xxf:instance('view-parameters-instance')/staticFileRoot,'/icons/','rebuild','.png?',xxf:instance('view-parameters-instance')/versionNumber/@version)"/>
                                <!-- UI is blocked until action is done -->
                                <xf:trigger appearance="minimal">
                                    <xf:label>
                                        <xhtml:img src="{$icon}" alt="" />
                                    </xf:label>
                                    <xf:hint ref="$label"/>
                                    <!-- Rebuild the current directory -->
                                    <xf:action ev:event="DOMActivate">
                                        <!-- Rebuild action must be confirmed. -->
                                        <xf:dispatch name="confirm-action"
                                            target="pageNavigation-model">
                                            <xxf:context name="action"
                                                select="'rebuild-directories'"/>
                                            <xxf:context name="messageSet"
                                                select="xxf:instance('control-instance')/manageDirectory/specialtyIRI"
                                            />
                                        </xf:dispatch>
                                    </xf:action>
                                </xf:trigger>
                            </xhtml:span>
                        </xhtml:li>

                        <xhtml:li class="LayoutFooter">&#160;</xhtml:li>
                    </xhtml:ul>


                    <!-- ===Manage Export Data Sets ======== 
                         Controls are shared with manageExportDataSetDialog
                         ==================================== -->
                    <xhtml:div class="{if ($adminTask='manageExportDataSet') then '' else 'hidden'}">
                        <!-- Manage EDS Controls -->
                        <xi:include href="cityEHRManageExportDataSetControls.xhtml"/>
                    </xhtml:div>


                    <!-- ===Manage Cohort Searches ======== 
                        ==================================== -->
                    <!-- Controls for managing cohort searches -->
                    <xhtml:ul
                        class="{if ($adminTask='manageCohortSearch' and xxf:instance('sharedSearches-instance')/search/@selected='true') then 'viewControlsHeader' else 'hidden'}">

                        <xhtml:li class="viewControlsActions">
                            <!-- Delete selected shared searches -->
                            <xhtml:span class="viewControl">
                                <xxf:variable name="type" select="'delete'"/>
                                <xxf:variable name="label"
                                    select="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/manageCohortSearch/deleteLabel"/>
                                <xxf:variable name="icon"
                                    select="concat(xxf:instance('view-parameters-instance')/staticFileRoot,'/icons/',$type,'.png?',xxf:instance('view-parameters-instance')/versionNumber/@version)"/>
                                <!-- UI is blocked until action is done -->
                                <xf:trigger appearance="minimal" xxf:modal="true">
                                    <xf:label>
                                        <xhtml:img src="{$icon}" alt="" />
                                    </xf:label>
                                    <xf:hint ref="$label"/>
                                    <!-- Delete selected searches -->
                                    <xf:action ev:event="DOMActivate">
                                        <xf:dispatch name="delete-selected-searches"
                                            target="main-model"/>
                                    </xf:action>
                                </xf:trigger>
                            </xhtml:span>
                            <!-- export selected shared searches -->
                            <xhtml:span class="viewControl">
                                <xxf:variable name="type" select="'export'"/>
                                <xxf:variable name="label"
                                    select="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/manageCohortSearch/exportLabel"/>
                                <xxf:variable name="icon"
                                    select="concat(xxf:instance('view-parameters-instance')/staticFileRoot,'/icons/',$type,'.png?',xxf:instance('view-parameters-instance')/versionNumber/@version)"/>
                                <!-- UI is blocked until action is done -->
                                <xf:trigger appearance="minimal" xxf:modal="true">
                                    <xf:label>
                                        <xhtml:img src="{$icon}" alt="" />
                                    </xf:label>
                                    <xf:hint ref="$label"/>
                                    <!-- Export selected searches -->
                                    <xf:action ev:event="DOMActivate">
                                        <xf:dispatch name="export-selected-searches"
                                            target="main-model"/>
                                    </xf:action>
                                </xf:trigger>
                            </xhtml:span>
                        </xhtml:li>

                        <xhtml:li class="LayoutFooter">&#160;</xhtml:li>
                    </xhtml:ul>


                    <!-- ===View Audit Logs ============== 
                         ==================================== -->
                    <!-- Controls for View Audit Log -->
                    <xhtml:ul
                        class="{if ($adminTask='viewAuditLog') then 'viewControlsHeader' else 'hidden'}">

                        <xhtml:li class="viewControlsDisplay">
                            <xxf:variable name="userList"
                                select="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/viewAuditLog/allUsersSelection | xxf:instance('userList-instance')/user"/>
                            <xxf:variable name="selectedUserCredentials"
                                select="$userList[@id=xxf:instance('control-instance')/viewAuditLog/userIRI]/credentials"/>
                            <xxf:variable name="userId"
                                select="if (exists($selectedUserCredentials)) then $selectedUserCredentials/userId else ''"/>
                            <!-- get-auditLog-for-user when the setting of any parameter is changed -->
                            <xf:group>
                                <!-- User changes a parameter -->
                                <xf:action ev:event="xforms-value-changed">
                                    <xf:dispatch name="get-auditLog-for-user"
                                        target="auditLog-model">
                                        <xxf:context name="applicationId"
                                            select="xxf:instance('view-parameters-instance')/applicationId"/>
                                        <xxf:context name="userId" select="$userId"/>
                                        <xxf:context name="patientId"
                                            select="xxf:instance('control-instance')/viewAuditLog/patientFilter"/>
                                        <xxf:context name="maxSessions"
                                            select="xxf:instance('control-instance')/viewAuditLog/maxSessions"
                                        />
                                    </xf:dispatch>
                                </xf:action>
                                <!-- Filter by patientId -->
                                <xhtml:span class="viewControl">
                                    <xf:input
                                        ref="xxf:instance('control-instance')/viewAuditLog/patientFilter"
                                        xxf:size="10">
                                        <xf:label
                                            ref="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/viewAuditLog/patientFilterLabel"
                                        />
                                    </xf:input>
                                </xhtml:span>
                                <!-- Set maxmimum sessions to display -->
                                <xhtml:span class="viewControl">
                                    <xf:input
                                        ref="xxf:instance('control-instance')/viewAuditLog/maxSessions"
                                        xxf:size="5" incremental="true">
                                        <xf:label
                                            ref="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/viewAuditLog/maxSessionsLabel"
                                        />
                                    </xf:input>
                                </xhtml:span>
                                <!-- Select User -->
                                <xhtml:span class="viewControl">
                                    <xf:select1
                                        ref="xxf:instance('control-instance')/viewAuditLog/userIRI">
                                        <xf:label
                                            ref="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/viewAuditLog/userLabel"/>
                                        <xf:itemset nodeset="$userList">
                                            <xf:label
                                                ref="if (exists(@displayName)) then @displayName else concat(credentials/username,' (',credentials/userId,')')"/>
                                            <xf:value ref="@id"/>
                                        </xf:itemset>
                                    </xf:select1>
                                </xhtml:span>
                            </xf:group>
                        </xhtml:li>

                        <xhtml:li class="viewControlsActions">
                            <!-- View the audit session, if selected -->
                            <xhtml:span
                                class="{if (xxf:instance('control-instance')/viewAuditLog/auditLogSessionHandle !='') then 'viewControl' else 'hidden'}">
                                <xxf:variable name="type" select="'view'"/>
                                <xxf:variable name="label"
                                    select="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/viewAuditLog/loadLogLabel"/>
                                <xxf:variable name="icon"
                                    select="concat(xxf:instance('view-parameters-instance')/staticFileRoot,'/icons/',$type,'.png?',xxf:instance('view-parameters-instance')/versionNumber/@version)"/>
                                <!-- View button -->
                                <!-- UI is blocked until action is done -->
                                <xf:trigger appearance="minimal" xxf:modal="true">
                                    <xf:label>
                                        <xhtml:img src="{$icon}" alt="" />
                                    </xf:label>
                                    <xf:hint ref="$label"/>
                                    <!-- Load the session log -->
                                    <xf:action ev:event="DOMActivate">
                                        <!-- Load the selected session log to resource-instance -->
                                        <xf:dispatch name="dal-read"
                                            target="databaseAccessLayer-model">
                                            <xxf:context name="system" select="'ehr'"/>
                                            <xxf:context name="storageLocation"
                                                select="xxf:instance('control-instance')/viewAuditLog/auditLogSessionHandle"/>
                                            <xxf:context name="resource"
                                                select="xxf:instance('resource-instance')"/>
                                            <xxf:context name="status"
                                                select="xxf:instance('auditLogControl-instance')/status"
                                            />
                                        </xf:dispatch>
                                        <!-- Display in viewXML dialog -->
                                        <xf:dispatch name="display-formatted-xml"
                                            target="pageNavigation-model">
                                            <xxf:context name="title" select="$label"/>
                                            <xxf:context name="displayXML"
                                                select="xxf:instance('resource-instance')"/>
                                        </xf:dispatch>
                                    </xf:action>
                                </xf:trigger>
                            </xhtml:span>
                        </xhtml:li>

                        <xhtml:li class="LayoutFooter">&#160;</xhtml:li>
                    </xhtml:ul>


                    <!-- ===Manage Schedules ============== 
                         ==================================== -->
                    <!-- Controls for Manage Schedules -->
                    <xhtml:ul
                        class="{if ($adminTask='manageSchedule') then 'viewControlsHeader' else 'hidden'}">
                        <xhtml:li class="viewControlsDisplay">
                            <!-- Select display date, set schedule date -->
                            <xf:input
                                ref="xxf:instance('control-instance')/manageSchedule/displayDate">
                                <xf:action ev:event="xforms-value-changed">
                                    <xf:dispatch name="set-scheduleDate" target="main-model"/>
                                </xf:action>
                            </xf:input>
                            <!-- Previous month -->
                            <xf:trigger appearance="minimal">
                                <xf:label>
                                    <xhtml:img
                                        src="{xxf:instance('view-parameters-instance')/staticFileRoot}/icons/previous.png"
                                     />
                                </xf:label>
                                <xf:hint>
                                    <xf:output
                                        ref="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/previousMonth/@displayName"
                                    />
                                </xf:hint>
                                <xf:action ev:event="DOMActivate">
                                    <!-- Set the displayDate back one month from scheduleDate.
                                         Will trigger re-generation of the schedule -->
                                    <xf:setvalue
                                        ref="xxf:instance('control-instance')/manageSchedule/displayDate"
                                        value="xs:date(xxf:instance('control-instance')/manageSchedule/scheduleDate) - xs:yearMonthDuration('P1M')"
                                    />
                                </xf:action>
                            </xf:trigger>
                            <!-- Schedule date -->
                            <xf:output
                                ref="xxf:instance('control-instance')/manageSchedule/scheduleDate"/>
                            <!-- Next month -->
                            <xf:trigger appearance="minimal">
                                <xf:label>
                                    <xhtml:img
                                        src="{xxf:instance('view-parameters-instance')/staticFileRoot}/icons/next.png"
                                     />
                                </xf:label>
                                <xf:hint>
                                    <xf:output
                                        ref="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/nextMonth/@displayName"
                                    />
                                </xf:hint>
                                <xf:action ev:event="DOMActivate">
                                    <!-- Set the displayDate forward one month from scheduleDate.
                                         Will trigger re-generation of the schedule -->
                                    <xf:setvalue
                                        ref="xxf:instance('control-instance')/manageSchedule/displayDate"
                                        value="xs:date(xxf:instance('control-instance')/manageSchedule/scheduleDate) + xs:yearMonthDuration('P1M')"
                                    />
                                </xf:action>
                            </xf:trigger>
                        </xhtml:li>
                    </xhtml:ul>


                    <!-- Controls for Create Clinic -->
                    <xhtml:ul
                        class="{if ($adminTask='createClinic') then 'viewControlsHeader' else 'hidden'}">

                        <!-- Actions - reset, generate, schedule clinics -->
                        <xhtml:li class="viewControlsActions">
                            <!-- Generate clinic - when there is no clinic yet created (otherwise need reset) -->
                            <xhtml:span
                                class="{if (xxf:instance('control-instance')/createClinic/status='waiting') then 'viewControl' else 'hidden'}">
                                <xxf:variable name="type" select="'generate'"/>
                                <xxf:variable name="label"
                                    select="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/createClinic/generateLabel"/>
                                <xxf:variable name="icon"
                                    select="concat(xxf:instance('view-parameters-instance')/staticFileRoot,'/icons/',$type,'.png?',xxf:instance('view-parameters-instance')/versionNumber/@version)"/>
                                <!-- Generate button -->
                                <xf:trigger appearance="minimal">
                                    <xf:label>
                                        <xhtml:img src="{$icon}" alt="" />
                                    </xf:label>
                                    <xf:hint ref="$label"/>
                                    <xf:action ev:event="DOMActivate">
                                        <xf:message ref="'Generating clinic'"/>
                                    </xf:action>
                                </xf:trigger>
                            </xhtml:span>
                            <!-- Reset clinic schedule - requires confirmation -->
                            <xhtml:span
                                class="{if (xxf:instance('control-instance')/createClinic/status='created') then 'viewControl' else 'hidden'}">
                                <xxf:variable name="type" select="'reset'"/>
                                <xxf:variable name="label"
                                    select="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/createClinic/resetLabel"/>
                                <xxf:variable name="icon"
                                    select="concat(xxf:instance('view-parameters-instance')/staticFileRoot,'/icons/',$type,'.png?',xxf:instance('view-parameters-instance')/versionNumber/@version)"/>
                                <!-- Reset button -->
                                <xf:trigger appearance="minimal">
                                    <xf:label>
                                        <xhtml:img src="{$icon}" alt="" />
                                    </xf:label>
                                    <xf:hint ref="$label"/>
                                    <xf:action ev:event="DOMActivate">
                                        <xf:message ref="'Resetting schedule'"/>
                                    </xf:action>
                                </xf:trigger>
                            </xhtml:span>
                            <!-- Schedule clinic - requires confirmation -->
                            <xhtml:span
                                class="{if (xxf:instance('control-instance')/createClinic/status='created') then 'viewControl' else 'hidden'}">
                                <xxf:variable name="type" select="'schedule'"/>
                                <xxf:variable name="label"
                                    select="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/createClinic/scheduleLabel"/>
                                <xxf:variable name="icon"
                                    select="concat(xxf:instance('view-parameters-instance')/staticFileRoot,'/icons/',$type,'.png?',xxf:instance('view-parameters-instance')/versionNumber/@version)"/>
                                <!-- Reset button -->
                                <xf:trigger appearance="minimal">
                                    <xf:label>
                                        <xhtml:img src="{$icon}" alt="" />
                                    </xf:label>
                                    <xf:hint ref="$label"/>
                                    <xf:action ev:event="DOMActivate">
                                        <xf:message ref="'Scheduling clinic'"/>
                                    </xf:action>
                                </xf:trigger>
                            </xhtml:span>
                        </xhtml:li>
                    </xhtml:ul>

                    <!-- ===Manage Care Teams ============== 
                         ==================================== -->
                    <!-- Controls for Care Teams -->
                    <xhtml:ul
                        class="{if ($adminTask='manageCareTeams') then 'viewControlsHeader' else 'hidden'}">
                        <!-- Controls depend on lifecycleStatus and editStatus -->
                        <xxf:variable name="lifecycleStatus"
                            select="xxf:instance('control-instance')/manageCareTeams/lifecycleStatus"/>
                        <xxf:variable name="editStatus"
                            select="xxf:instance('control-instance')/manageCareTeams/editStatus"/>

                        <!-- Show current Care Team name.
                             The care team is either new, or has been loaded from the xmlstore.
                             Details of the current care team are held in careTeamControl-instance.
                             The id of the current care team is also held in control-instance/manageCareTeams/careTeamId -->
                        <xhtml:li class="viewControlsDisplay">
                            <!-- Show name, or instructions if waiting -->
                            <xf:output
                                ref="if ($lifecycleStatus=('new','selected')) then xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/manageCareTeams/careTeamLabel
                                else if ($lifecycleStatus='waiting') then xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/manageCareTeams/waitingMessage else ''"/>
                            <!-- Display or edit (if its new) the care team name -->
                            <xf:output
                                ref="if ($lifecycleStatus='new') then '' else xxf:instance('careTeamControl-instance')/careTeam/displayName"/>
                            <!-- Can edit name of new care team -->
                            <xf:input
                                ref="xxf:instance('control-instance')/manageCareTeams/careTeamDisplayName"
                                incremental="true"
                                class="{if ($lifecycleStatus='new') then '' else 'hidden'}">
                                <!-- Only process changed value if lifecycleStatus is new -->
                                <xf:action ev:event="xforms-value-changed"
                                    if="$lifecycleStatus='new'">
                                    <!-- To set the id:
                                         1. Remove spaces, using translate
                                         2. encode-for-uri to replace funny characters
                                         3. Remoce any % characters introduced by encode-for-uri
                                    -->
                                    <!-- Remove non-allowable characters in displayName and id -->
                                    <xxf:variable name="displayName" select="."/>
                                    <xxf:variable name="careTeamId"
                                        select="translate($displayName,'# &#09;&#10;','')"/>
                                    <!-- Set careTeamControl-instance parameters -->
                                    <xf:setvalue
                                        ref="xxf:instance('careTeamControl-instance')/careTeam/id"
                                        value="if ($careTeamId!='') then concat('#CityEHR:CareTeam:',$careTeamId) else ''"/>
                                    <xf:setvalue
                                        ref="xxf:instance('careTeamControl-instance')/careTeam/displayName"
                                        value="if ($careTeamId!='') then normalize-space($displayName) else ''"/>
                                    <xf:setvalue
                                        ref="xxf:instance('careTeamControl-instance')/careTeam/handle"
                                        value="if ($careTeamId!='') then concat(xxf:instance('view-parameters-instance')/applicationStorageLocation,'/careTeams/',xxf:instance('user-instance')/credentials/userId,'-',$careTeamId) else ''"/>
                                    <!-- Set careTeam-instance attributes -->
                                    <xf:setvalue
                                        ref="xxf:instance('careTeam-instance')/@displayName"
                                        value="xxf:instance('careTeamControl-instance')/careTeam/displayName"/>
                                    <xf:setvalue ref="xxf:instance('careTeam-instance')/@id"
                                        value="xxf:instance('careTeamControl-instance')/careTeam/id"/>
                                    <!-- Set manageCareTeams parameters -->
                                    <xf:setvalue
                                        ref="xxf:instance('control-instance')/manageCareTeams/careTeamId"
                                        value="xxf:instance('careTeamControl-instance')/careTeam/id"/>
                                    <xf:setvalue
                                        ref="xxf:instance('control-instance')/manageCareTeams/editStatus"
                                        value="if ($careTeamId!='') then 'edited' else ''"/>
                                </xf:action>
                            </xf:input>
                            <!-- Display the care team id, if there is one -->
                            <xf:output
                                ref="if (xxf:instance('control-instance')/manageCareTeams/careTeamId!='') then concat(' (',xxf:instance('control-instance')/manageCareTeams/careTeamId,')') else ''"
                            />
                        </xhtml:li>

                        <!-- Actions -->
                        <xhtml:li class="viewControlsActions">
                            <!-- Select the Care Team. 
                                 Can't do this if creating a new Care Team or if there aren't any Care Teams defined for this application -->
                            <xhtml:span
                                class="{if ($lifecycleStatus!='new' and exists(xxf:instance('careTeamList-instance')/careTeam)) then 'viewControl' else 'hidden'}">
                                <xf:select1
                                    ref="xxf:instance('control-instance')/manageCareTeams/careTeamId">
                                    <xf:label
                                        ref="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/manageCareTeams/careTeamLabel"/>
                                    <xf:itemset
                                        nodeset="xxf:instance('careTeamList-instance')/careTeam">
                                        <xf:label ref="@displayName"/>
                                        <xf:value ref="@value"/>
                                    </xf:itemset>
                                    <!-- Only process changed value if lifecycleStatus is 'selected' -->
                                    <xf:action ev:event="xforms-value-changed"
                                        if="$lifecycleStatus='selected'">
                                        <!-- Set the displayName, handle and load the care team. -->
                                        <xf:dispatch name="set-careTeam" target="careTeam-model">
                                            <!-- Set the care team that has just been selected -->
                                            <xxf:context name="careTeamId"
                                                select="xxf:instance('control-instance')/manageCareTeams/careTeamId"
                                            />
                                        </xf:dispatch>
                                        <!-- Clear the hidden inputs for applicationUser and careTeamUser -->
                                        <xf:setvalue
                                            ref="xxf:instance('control-instance')/manageCareTeams/applicationUser"
                                            value="''"/>
                                        <xf:setvalue
                                            ref="xxf:instance('control-instance')/manageCareTeams/careTeamUser"
                                            value="''"/>
                                        <!-- Reset control-instance -->
                                        <xf:setvalue
                                            ref="xxf:instance('control-instance')/manageCareTeams/careTeamDisplayName"
                                            value="xxf:instance('careTeamControl-instance')/displayName"/>
                                        <xf:setvalue
                                            ref="xxf:instance('control-instance')/manageCareTeams/editStatus"
                                            value="''"/>
                                    </xf:action>
                                </xf:select1>
                            </xhtml:span>
                            <!-- Save the Care Team
                                 If it has been edited -->
                            <xhtml:span
                                class="{if (xxf:instance('control-instance')/manageCareTeams/careTeamId !='' and xxf:instance('control-instance')/manageCareTeams/editStatus='edited') then 'viewControl' else 'hidden'}">
                                <xxf:variable name="type" select="'save'"/>
                                <xxf:variable name="label"
                                    select="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/manageCareTeams/saveLabel"/>
                                <xxf:variable name="icon"
                                    select="concat(xxf:instance('view-parameters-instance')/staticFileRoot,'/icons/',$type,'.png?',xxf:instance('view-parameters-instance')/versionNumber/@version)"/>
                                <!-- Save button -->
                                <!-- UI is blocked until action is done -->
                                <xf:trigger appearance="minimal" xxf:modal="true">
                                    <xf:label>
                                        <xhtml:img src="{$icon}" alt="" />
                                    </xf:label>
                                    <xf:hint ref="$label"/>
                                    <!-- Save the Care Team.
                                        Note that careTeamControl-instance/careTeam/handle must be correctly set before these actions are called -->
                                    <xf:action ev:event="DOMActivate">
                                        <xf:send submission="save-careTeam-submission"
                                            target="careTeam-model"/>
                                        <!-- If this was a new Care Team then relosd the list of care teams -->
                                        <xf:action
                                            if="xxf:instance('control-instance')/manageCareTeams/lifecycleStatus = 'new'">
                                            <xf:dispatch name="getCareTeamsForUser"
                                                target="careTeam-model"/>
                                        </xf:action>
                                        <!-- Reset status -->
                                        <xf:setvalue
                                            ref="xxf:instance('control-instance')/manageCareTeams/lifecycleStatus"
                                            value="'selected'"/>
                                        <xf:setvalue
                                            ref="xxf:instance('control-instance')/manageCareTeams/editStatus"
                                            value="''"/>
                                    </xf:action>
                                </xf:trigger>
                            </xhtml:span>
                            <!-- New Care Team.
                                 The Care Team will not be created in the xmlstore until it is saved. -->
                            <xhtml:span
                                class="{if (xxf:instance('control-instance')/manageCareTeams/editStatus !='edited') then 'viewControl' else 'hidden'}">
                                <xxf:variable name="type" select="'add'"/>
                                <xxf:variable name="label"
                                    select="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/manageCareTeams/newLabel"/>
                                <xxf:variable name="icon"
                                    select="concat(xxf:instance('view-parameters-instance')/staticFileRoot,'/icons/',$type,'.png?',xxf:instance('view-parameters-instance')/versionNumber/@version)"/>
                                <!-- Add button -->
                                <xf:trigger appearance="minimal">
                                    <xf:label>
                                        <xhtml:img src="{$icon}" alt="" />
                                    </xf:label>
                                    <xf:hint ref="$label"/>
                                    <!-- Add new care team -->
                                    <xf:action ev:event="DOMActivate">
                                        <xf:send submission="load-careTeam-template-submission"
                                            target="careTeam-model"/>
                                        <!-- Set manageCareTeams parameters.
                                        The new care team isn't 'edited' until it has a name -->
                                        <xf:setvalue
                                            ref="xxf:instance('control-instance')/manageCareTeams/careTeamId"
                                            value="''"/>
                                        <xf:setvalue
                                            ref="xxf:instance('control-instance')/manageCareTeams/careTeamDisplayName"
                                            value="''"/>
                                        <xf:setvalue
                                            ref="xxf:instance('control-instance')/manageCareTeams/lifecycleStatus"
                                            value="'new'"/>
                                        <xf:setvalue
                                            ref="xxf:instance('control-instance')/manageCareTeams/editStatus"
                                            value="''"/>
                                    </xf:action>
                                </xf:trigger>
                            </xhtml:span>
                            <!-- Reset the Care Team, if it has been edited -->
                            <xhtml:span
                                class="{if (xxf:instance('control-instance')/manageCareTeams/editStatus ='edited' or xxf:instance('control-instance')/manageCareTeams/lifecycleStatus ='new') then 'viewControl' else 'hidden'}">
                                <xxf:variable name="type" select="'reset'"/>
                                <xxf:variable name="label"
                                    select="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/manageCareTeams/resetLabel"/>
                                <xxf:variable name="icon"
                                    select="concat(xxf:instance('view-parameters-instance')/staticFileRoot,'/icons/',$type,'.png?',xxf:instance('view-parameters-instance')/versionNumber/@version)"/>
                                <!-- Reset button.
                                     Three possible actions:
                                     new care team and no existing, then reset the new instance
                                     new care team and there are existing care teams, load the first on the list
                                     selected care team then reload
                                     -->
                                <xf:trigger appearance="minimal">
                                    <xf:label>
                                        <xhtml:img src="{$icon}" alt="" />
                                    </xf:label>
                                    <xf:hint ref="$label"/>
                                    <!-- Reset the Care Team.
                                         If this is a new care team then load-careTeam submission will fail
                                         and the careTeamControl-instance will be reset -->
                                    <xf:action ev:event="DOMActivate">
                                        <!-- New - reset the care team selection (loads the first one, or resets if there are none) -->
                                        <xf:action if="$lifecycleStatus='new'">
                                            <!-- Set the selected care team (or clears care team, if none exist for this user -->
                                            <xf:dispatch name="set-selected-careTeam"
                                                target="main-model"/>
                                        </xf:action>
                                        <!-- Selected - reload from the xmlstore -->
                                        <xf:action if="$lifecycleStatus='selected'">
                                            <xf:dispatch name="load-careTeam"
                                                target="careTeam-model"/>
                                        </xf:action>
                                        <!-- Reset control-instance -->
                                        <xf:setvalue
                                            ref="xxf:instance('control-instance')/manageCareTeams/editStatus"
                                            value="''"/>
                                    </xf:action>
                                </xf:trigger>
                            </xhtml:span>
                            <!-- Delete the Care Team.
                                 Only if already in xmlstore and hasn't been edited -->
                            <xhtml:span
                                class="{if ($lifecycleStatus='selected' and xxf:instance('control-instance')/manageCareTeams/editStatus!='edited' and xxf:instance('control-instance')/manageCareTeams/careTeamId!='') then 'viewControl' else 'hidden'}">
                                <xxf:variable name="type" select="'delete'"/>
                                <xxf:variable name="label"
                                    select="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/manageCareTeams/deleteLabel"/>
                                <xxf:variable name="icon"
                                    select="concat(xxf:instance('view-parameters-instance')/staticFileRoot,'/icons/',$type,'.png?',xxf:instance('view-parameters-instance')/versionNumber/@version)"/>
                                <!-- Delete button -->
                                <!-- UI is blocked until action is done -->
                                <xf:trigger appearance="minimal" xxf:modal="true">
                                    <xf:label>
                                        <xhtml:img src="{$icon}" alt="" />
                                    </xf:label>
                                    <xf:hint ref="$label"/>
                                    <!-- Delete the Care Team 
                                         Need to confirm the action first -->
                                    <xf:action ev:event="DOMActivate">
                                        <xf:dispatch name="confirm-action"
                                            target="pageNavigation-model">
                                            <xxf:context name="action" select="'deleteCareTeam'"/>
                                            <xxf:context name="messageSet"
                                                select="xxf:instance('careTeamControl-instance')/careTeam/displayName"
                                            />
                                        </xf:dispatch>
                                    </xf:action>
                                </xf:trigger>
                            </xhtml:span>
                            <!-- Remove selected Care Team patients
                                 Only if one or more patients has been selected -->
                            <xhtml:span
                                class="{if ($lifecycleStatus='selected' and xxf:instance('careTeam-instance')/patient[@selected='true']) then 'viewControl' else 'hidden'}">
                                <xxf:variable name="type" select="'remove'"/>
                                <xxf:variable name="label"
                                    select="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/manageCareTeams/removePatientLabel"/>
                                <xxf:variable name="icon"
                                    select="concat(xxf:instance('view-parameters-instance')/staticFileRoot,'/icons/',$type,'.png?',xxf:instance('view-parameters-instance')/versionNumber/@version)"/>
                                <!-- Delete button -->
                                <!-- UI is blocked until action is done -->
                                <xf:trigger appearance="minimal" xxf:modal="true">
                                    <xf:label>
                                        <xhtml:img src="{$icon}" alt="" />
                                    </xf:label>
                                    <xf:hint ref="$label"/>
                                    <!-- Remove the selected patients -->
                                    <xf:action ev:event="DOMActivate">
                                        <xf:delete
                                            nodeset="xxf:instance('careTeam-instance')/patient[@selected='true']"/>
                                        <!-- Reset control-instance -->
                                        <xf:setvalue
                                            ref="xxf:instance('control-instance')/manageCareTeams/editStatus"
                                            value="'edited'"/>
                                    </xf:action>
                                </xf:trigger>
                            </xhtml:span>
                        </xhtml:li>
                        <xhtml:li class="LayoutFooter">&#160;</xhtml:li>
                    </xhtml:ul>


                    <!-- ===Tasks to code knowledge sources =============                    
                         ===================================================== -->
                    <xhtml:ul
                        class="{if ($adminTask='codeKnowledgeSources') then 'viewControlsHeader' else 'hidden'}">
                        <xhtml:li class="viewControlsDisplay">
                            <!-- Select the code system -->
                            <xf:select1
                                ref="xxf:instance('control-instance')/codeKnowledgeSources/codeSystem">
                                <xf:label
                                    ref="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/codeKnowledgeSources/codeSystemList/@displayName"/>
                                <xf:itemset
                                    nodeset="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/codeKnowledgeSources/codeSystemList/codeSystem">
                                    <xf:label ref="@displayName"/>
                                    <xf:value ref="@datatype"/>
                                </xf:itemset>
                                <xf:action ev:event="xforms-value-changed">
                                    <!-- TBD -->
                                </xf:action>
                            </xf:select1>
                            <!-- Debugging - show selected map position -->
                            <xxf:variable name="selectedMapIndex"
                                select="xxf:instance('control-instance')/codeKnowledgeSources/selectedMapIndex"/>
                            <xxf:variable name="selectedKnowledgeMap"
                                select="if ($selectedMapIndex castable as xs:integer) then xxf:instance('knowledgeMap-instance')/rdf:RDF/rdf:Description[position()=$selectedMapIndex] else ()"/>
                            <xf:output
                                ref="if (exists($selectedKnowledgeMap)) then $selectedKnowledgeMap/dc:description else ''"
                            />
                        </xhtml:li>

                        <!-- Actions -->
                        <xhtml:li class="viewControlsActions">
                            <!-- Save knowledge map - only if map has been edited -->
                            <xhtml:span
                                class="{if (xxf:instance('control-instance')/codeKnowledgeSources/status = 'edited') then 'viewControl' else 'hidden'}">
                                <xxf:variable name="label"
                                    select="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/codeKnowledgeSources/saveLabel"/>
                                <xxf:variable name="icon"
                                    select="concat(xxf:instance('view-parameters-instance')/staticFileRoot,'/icons/','save','.png?',xxf:instance('view-parameters-instance')/versionNumber/@version)"/>
                                <!-- Save button -->
                                <!-- UI is blocked until action is done -->
                                <xf:trigger appearance="minimal" xxf:modal="true">
                                    <xf:label>
                                        <xhtml:img src="{$icon}" alt="" />
                                    </xf:label>
                                    <xf:hint ref="$label"/>
                                    <!-- Save knowledge map -->
                                    <xf:action ev:event="DOMActivate">
                                        <xf:dispatch name="save-knowledgeMaps" target="main-model"/>
                                        <xf:setvalue
                                            ref="xxf:instance('control-instance')/codeKnowledgeSources/status"
                                            value="''"/>
                                    </xf:action>
                                </xf:trigger>
                            </xhtml:span>
                            <!-- Add a new map - only if codeSystem is set -->
                            <xhtml:span
                                class="{if (xxf:instance('control-instance')/codeKnowledgeSources/codeSystem='') then 'hidden' else 'viewControl'}">
                                <xxf:variable name="label"
                                    select="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/codeKnowledgeSources/addLabel"/>
                                <xxf:variable name="icon"
                                    select="concat(xxf:instance('view-parameters-instance')/staticFileRoot,'/icons/','add','.png?',xxf:instance('view-parameters-instance')/versionNumber/@version)"/>
                                <!-- Add button -->
                                <xf:trigger appearance="minimal">
                                    <xf:label>
                                        <xhtml:img src="{$icon}" alt="" />
                                    </xf:label>
                                    <xf:hint ref="$label"/>
                                    <!-- Add new map -->
                                    <xf:action ev:event="DOMActivate">
                                        <xf:dispatch name="add-knowledgeMap" target="main-model"/>
                                    </xf:action>
                                </xf:trigger>
                            </xhtml:span>
                            <!-- Revert to saved map - only if map has been edited -->
                            <xhtml:span
                                class="{if (xxf:instance('control-instance')/codeKnowledgeSources/status = 'edited') then 'viewControl' else 'hidden'}">
                                <xxf:variable name="label"
                                    select="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/codeKnowledgeSources/resetLabel"/>
                                <xxf:variable name="icon"
                                    select="concat(xxf:instance('view-parameters-instance')/staticFileRoot,'/icons/','reset','.png?',xxf:instance('view-parameters-instance')/versionNumber/@version)"/>
                                <!-- Reset button -->
                                <xf:trigger appearance="minimal">
                                    <xf:label>
                                        <xhtml:img src="{$icon}" alt="" />
                                    </xf:label>
                                    <xf:hint ref="$label"/>
                                    <!-- Reload map from xmlstore -->
                                    <xf:action ev:event="DOMActivate">
                                        <xf:dispatch name="load-knowledgeMaps" target="main-model"/>
                                    </xf:action>
                                </xf:trigger>
                            </xhtml:span>
                            <!-- View  map component - only if map component is selected -->
                            <xhtml:span
                                class="{if ( xxf:instance('control-instance')/codeKnowledgeSources/selectedMapIndex!='') then 'viewControl' else 'hidden'}">
                                <xxf:variable name="label"
                                    select="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/codeKnowledgeSources/viewLabel"/>
                                <xxf:variable name="icon"
                                    select="concat(xxf:instance('view-parameters-instance')/staticFileRoot,'/icons/','view','.png?',xxf:instance('view-parameters-instance')/versionNumber/@version)"/>
                                <!-- Add button -->
                                <xf:trigger appearance="minimal">
                                    <xf:label>
                                        <xhtml:img src="{$icon}" alt="" />
                                    </xf:label>
                                    <xf:hint ref="$label"/>
                                    <!-- View selected map -->
                                    <xf:action ev:event="DOMActivate">
                                        <xxf:show dialog="viewKnowledgeSourceDialog"/>
                                    </xf:action>
                                </xf:trigger>
                            </xhtml:span>
                            <!-- Export knoweledge map -->
                            <xhtml:span class="viewControl">
                                <xxf:variable name="label"
                                    select="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/codeKnowledgeSources/exportLabel"/>
                                <xxf:variable name="icon"
                                    select="concat(xxf:instance('view-parameters-instance')/staticFileRoot,'/icons/','export','.png?',xxf:instance('view-parameters-instance')/versionNumber/@version)"/>
                                <!-- UI is blocked until action is done -->
                                <xf:trigger appearance="minimal" xxf:modal="true">
                                    <xf:label>
                                        <xhtml:img src="{$icon}" alt="" />
                                    </xf:label>
                                    <xf:hint ref="$label"/>
                                    <!-- Export compelte map -->
                                    <xf:action ev:event="DOMActivate">
                                        <xf:dispatch name="export-knowledgeMap" target="main-model"
                                        />
                                    </xf:action>
                                </xf:trigger>
                            </xhtml:span>
                            <!-- Delete map component - only if map component is selected -->
                            <xhtml:span
                                class="{if ( xxf:instance('control-instance')/codeKnowledgeSources/selectedMapIndex!='') then 'viewControl' else 'hidden'}">
                                <xxf:variable name="type" select="'delete'"/>
                                <xxf:variable name="label"
                                    select="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/codeKnowledgeSources/deleteLabel"/>
                                <xxf:variable name="icon"
                                    select="concat(xxf:instance('view-parameters-instance')/staticFileRoot,'/icons/',$type,'.png?',xxf:instance('view-parameters-instance')/versionNumber/@version)"/>
                                <!-- Delete button -->
                                <xf:trigger appearance="minimal">
                                    <xf:label>
                                        <xhtml:img src="{$icon}" alt="" />
                                    </xf:label>
                                    <xf:hint ref="$label"/>
                                    <!-- Delete selected map -->
                                    <xf:action ev:event="DOMActivate">
                                        <xf:dispatch name="delete-selected-knowledgeMap"
                                            target="main-model"/>
                                    </xf:action>
                                </xf:trigger>
                            </xhtml:span>
                        </xhtml:li>
                    </xhtml:ul>


                    <!-- ===Tasks to manage users =========================== 
                         These controls are for both manageUsers (all users) and manageUserAccount (user manages their own account)
                         Visibility of controls depends on which of these tasks is set
                         ===================================================== -->

                    <xhtml:div
                        class="{if ($adminTask=('manageUsers','manageUserAccount')) then '' else 'hidden'}">

                        <!-- Summary and controls for managing users. -->
                        <xhtml:ul class="viewControlsHeader">
                            <xxf:variable name="lifecycleStatus"
                                select="xxf:instance('control-instance')/manageUsers/lifecycleStatus"/>

                            <!-- Select the application (or all applications) -->
                            <xhtml:li
                                class="{if ($adminTask='manageUsers') then 'viewControlsDisplay' else 'hidden'}">
                                <xxf:variable name="applicationList"
                                    select="xxf:instance('applicationList-instance')/iso-13606:EHR_Extract"/>
                                <xf:select1
                                    ref="xxf:instance('control-instance')/manageUsers/applicationIRI">
                                    <xf:itemset
                                        nodeset="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/manageUsers/iso-13606:EHR_Extract | $applicationList">
                                        <xf:label ref="@displayName"/>
                                        <xf:value ref="@id"/>
                                    </xf:itemset>
                                    <xf:action ev:event="xforms-value-changed">
                                        <xf:dispatch name="get-application-users"
                                            target="main-model">
                                            <xxf:context name="applicationIRI"
                                                select="xxf:instance('control-instance')/manageUsers/applicationIRI"
                                            />
                                        </xf:dispatch>
                                    </xf:action>
                                </xf:select1>
                            </xhtml:li>

                            <!-- Number of users returned in userList-instance -->
                            <xhtml:li
                                class="{if ($adminTask='manageUsers') then 'viewControlsDisplay' else 'hidden'}">
                                <xf:output
                                    ref="if (xxf:instance('control-instance')/manageUsers/applicationIRI='') then xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/manageUsers/anyApplicationUsersLabel else xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/manageUsers/applicationUsersLabel"/>
                                <xf:output ref="count(xxf:instance('userList-instance')/*)"/>
                            </xhtml:li>

                            <!-- Selected User or myAccount -->
                            <xhtml:li
                                class="{if ($lifecycleStatus!='waiting') then 'viewControlsDisplay' else 'hidden'}">
                                <xf:output
                                    ref="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/manageUsers/selectedUserLabel"/>
                                <xf:output
                                    ref="xxf:instance('control-instance')/manageUsers/managedUserId"
                                />
                            </xhtml:li>

                            <!-- Actions -->
                            <xhtml:li class="viewControlsActions">
                                <!-- Select whether to edit account or not (Boolean) -->
                                <xhtml:span
                                    class="{if (not($lifecycleStatus=('waiting','new'))) then 'viewControl' else 'hidden'}">
                                    <xf:output
                                        ref="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/manageUsers/selectEditAccountLabel"/>
                                    <xf:input
                                        ref="xxf:instance('control-instance')/manageUsers/editAccount"
                                    />
                                </xhtml:span>
                                <!-- Select whether to show passwords or not -->
                                <xhtml:span
                                    class="{if ($adminTask=('manageUsers','manageUserAccount')) then 'viewControl' else 'hidden'}">
                                    <xf:output
                                        ref="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/manageUsers/showPasswordLabel"/>
                                    <xf:input
                                        ref="xxf:instance('control-instance')/manageUsers/showPassword"
                                    />
                                </xhtml:span>
                                <!-- Reset the selected user.
                                 Has two possible actions:
                                     If the selected user has been edited, then reload it (revert any changes made)
                                     If the selected use has not been edited, then de-select so that the display of selected user is hidden
                            -->
                                <xhtml:span
                                    class="{if ($lifecycleStatus=('selected','new') or ($lifecycleStatus='myAccount' and xxf:instance('control-instance')/manageUsers/editStatus='edited')) then 'viewControl' else 'hidden'}">
                                    <xxf:variable name="editStatus"
                                        select="xxf:instance('control-instance')/manageUsers/editStatus"/>
                                    <xxf:variable name="label"
                                        select="if ($editStatus='edited') then xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/manageUsers/resetAccountLabel else xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/manageUsers/hideAccountLabel"/>
                                    <xxf:variable name="icon"
                                        select="concat(xxf:instance('view-parameters-instance')/staticFileRoot,'/icons/','reset','.png?',xxf:instance('view-parameters-instance')/versionNumber/@version)"/>
                                    <!-- Reset button -->
                                    <!-- UI is blocked until action is done -->
                                    <xf:trigger appearance="minimal" xxf:modal="true">
                                        <xf:label>
                                            <xhtml:img src="{$icon}" alt="" />
                                        </xf:label>
                                        <xf:hint ref="$label"/>
                                        <!-- Reset managed user -->
                                        <xf:action ev:event="DOMActivate">
                                            <!-- If not edited, then deselect, but only for manageUsers (not myAccount).
                                             Need to test this one first because some of the options below reset the editStatus -->
                                            <xf:action
                                                if="xxf:instance('control-instance')/manageUsers/editStatus!='edited' and $adminTask='manageUsers'">
                                                <xf:dispatch name="clear-managed-user"
                                                  target="main-model"/>
                                            </xf:action>
                                            <!-- If edited, then reload (saved user or template for new one) -->
                                            <xf:action
                                                if="xxf:instance('control-instance')/manageUsers/editStatus='edited'">
                                                <!-- Reload selected user (or current user if this is myAccount)-->
                                                <xf:action
                                                  if="xxf:instance('control-instance')/manageUsers/lifecycleStatus=('selected','myAccount')">
                                                  <xf:dispatch name="load-managed-user"
                                                  target="main-model"/>
                                                </xf:action>
                                                <!-- Reload template for new user -->
                                                <xf:action
                                                  if="xxf:instance('control-instance')/manageUsers/lifecycleStatus='new'">
                                                  <xf:send
                                                  submission="load-managedUser-template-submission"
                                                  />
                                                </xf:action>
                                                <!-- Make sure editStatus is set -->
                                                <xf:action>
                                                  <xf:setvalue
                                                  ref="xxf:instance('control-instance')/manageUsers/editStatus"
                                                  value="''"/>
                                                </xf:action>
                                            </xf:action>
                                        </xf:action>
                                    </xf:trigger>
                                </xhtml:span>
                                <!-- Save edited user details.
                                Display controls if editing account
                                and current edit status is 'edited'
                                and the userId is not blank (which can only happen when adding a new user) -->
                                <xhtml:span
                                    class="{if (xxf:instance('control-instance')/manageUsers/managedUserId !='' and xxf:instance('control-instance')/manageUsers/editAccount='true' and xxf:instance('control-instance')/manageUsers/editStatus='edited') then 'viewControl' else 'hidden'}">
                                    <xxf:variable name="label"
                                        select="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/manageUsers/saveAccountLabel"/>
                                    <xxf:variable name="icon"
                                        select="concat(xxf:instance('view-parameters-instance')/staticFileRoot,'/icons/','save','.png?',xxf:instance('view-parameters-instance')/versionNumber/@version)"/>
                                    <xxf:variable name="displayEditMessageClass"
                                        select="if (xxf:instance('control-instance')/manageUsers/editAccount='true') then '' else 'hidden'"/>
                                    <!-- Save button -->
                                    <!-- UI is blocked until action is done -->
                                    <xf:trigger appearance="minimal" xxf:modal="true">
                                        <xf:label>
                                            <xhtml:img src="{$icon}" alt="" />
                                        </xf:label>
                                        <xf:hint ref="$label"/>
                                        <!-- Save credentials.
                                         But only if valid password and userId/logonAlias are valid -->
                                        <xf:action ev:event="DOMActivate">
                                            <!-- Check userId - only for new users -->
                                            <xf:action
                                                if="xxf:instance('control-instance')/manageUsers/lifecycleStatus='new'">
                                                <xf:dispatch name="checkUserId" target="main-model">
                                                  <xxf:context name="userId"
                                                  select="xxf:instance('managedUser-instance')/credentials/userId"
                                                  />
                                                </xf:dispatch>
                                            </xf:action>
                                            <!-- Check logonAlias - only if it has changed -->
                                            <xf:action
                                                if="xxf:instance('control-instance')/manageUsers/managedUserLogonAlias != xxf:instance('managedUser-instance')/credentials/logonAlias">
                                                <xf:dispatch name="checkUserId" target="main-model">
                                                  <xxf:context name="userId"
                                                  select="xxf:instance('managedUser-instance')/credentials/logonAlias"
                                                  />
                                                </xf:dispatch>
                                            </xf:action>
                                            <!-- Reset password - only if it has changed
                                             And password policy has been checked OK -->
                                            <xf:action
                                                if="xxf:instance('passwordControl-instance')/password2 != '' and xxf:instance('passwordControl-instance')/status='compliant'">
                                                <xf:dispatch name="reset-password"
                                                  target="session-model">
                                                  <xxf:context name="password"
                                                  select="xxf:instance('passwordControl-instance')/password2"/>
                                                  <xxf:context name="user-instance"
                                                  select="xxf:instance('managedUser-instance')"/>
                                                </xf:dispatch>
                                            </xf:action>
                                            <!-- Problem with userId -->
                                            <xf:action
                                                if="xxf:instance('control-instance')/manageUsers/validUserId!='true'">
                                                <xf:setvalue
                                                  ref="xxf:instance('view-parameters-instance')/systemError"
                                                  value="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/statusMessage/message[@processingProgress='invalidUserId']"
                                                />
                                            </xf:action>
                                            <!-- If userId is OK then save the details -->
                                            <xf:action
                                                if="xxf:instance('control-instance')/manageUsers/validUserId='true'">
                                                <xf:send
                                                  submission="save-managedUser-details-submission"
                                                  target="main-model"/>
                                                <xf:setvalue
                                                  ref="xxf:instance('control-instance')/manageUsers/editStatus"
                                                  value="''"/>
                                                <xf:setvalue
                                                  ref="xxf:instance('control-instance')/manageUsers/lifecycleStatus"
                                                  value="'selected'"/>
                                                <xf:setvalue
                                                  ref="xxf:instance('view-parameters-instance')/systemError"
                                                  value="''"/>
                                                <!-- If managedUser is the current user, then reload details of current user.
                                             This action is in the session model.
                                             Update the details for the session. -->
                                                <xf:action
                                                  if="xxf:instance('control-instance')/manageUsers/managedUserId = xxf:instance('user-instance')/credentials/userId">
                                                  <xf:dispatch name="load-user-details"
                                                  target="session-model"/>
                                                </xf:action>
                                                <!-- Reload the user list.
                                             This in case any of the details in the list have been changed. -->
                                                <xf:dispatch name="get-application-users"
                                                  target="main-model">
                                                  <xxf:context name="applicationIRI"
                                                  select="xxf:instance('control-instance')/manageUsers/applicationIRI"
                                                  />
                                                </xf:dispatch>
                                                <!-- Reset the managedUserLogonAlias, in case it has changed -->
                                                <xf:setvalue
                                                  ref="xxf:instance('control-instance')/manageUsers/managedUserLogonAlias"
                                                  value="xxf:instance('managedUser-instance')/credentials/logonAlias"
                                                />
                                            </xf:action>
                                        </xf:action>
                                    </xf:trigger>
                                    <!-- Message on edit status -->
                                    <xf:output class="{$displayEditMessageClass}"
                                        ref="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/manageUsers/userAccountEditStatus[@status=xxf:instance('control-instance')/manageUsers/editStatus]/@displayName"
                                    />
                                </xhtml:span>
                                <!-- Add new user -->
                                <xhtml:span
                                    class="{if ($adminTask='manageUsers' and xxf:instance('control-instance')/manageUsers/lifecycleStatus ='waiting') then 'viewControl' else 'hidden'}">
                                    <xxf:variable name="label"
                                        select="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/manageUsers/newAccountLabel"/>
                                    <xxf:variable name="icon"
                                        select="concat(xxf:instance('view-parameters-instance')/staticFileRoot,'/icons/','add','.png?',xxf:instance('view-parameters-instance')/versionNumber/@version)"/>
                                    <!-- Add button -->
                                    <xf:trigger appearance="minimal">
                                        <xf:label>
                                            <xhtml:img src="{$icon}" alt="" />
                                        </xf:label>
                                        <xf:hint ref="$label"/>
                                        <!-- Add new user -->
                                        <xf:action ev:event="DOMActivate">
                                            <xf:send
                                                submission="load-managedUser-template-submission"/>
                                        </xf:action>
                                    </xf:trigger>
                                </xhtml:span>
                                <!-- Delete (archive) the selected user
                                 Display control if user is selected and is not the current user
                                 and current edit status is not 'edited'
                                 and the session user is not the managed-user (i.e. you can't delete yourself) -->
                                <xhtml:span
                                    class="{if ($adminTask='manageUsers' and $lifecycleStatus='selected' and xxf:instance('control-instance')/manageUsers/editStatus!='edited' and xxf:instance('managedUser-instance')/credentials/userId != xxf:instance('user-instance')/credentials/userId) then 'viewControl' else 'hidden'}">
                                    <xxf:variable name="label"
                                        select="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/manageUsers/deleteAccountLabel"/>
                                    <xxf:variable name="icon"
                                        select="concat(xxf:instance('view-parameters-instance')/staticFileRoot,'/icons/','remove','.png?',xxf:instance('view-parameters-instance')/versionNumber/@version)"/>
                                    <!-- Delete button -->
                                    <!-- UI is blocked until action is done -->
                                    <xf:trigger appearance="minimal" xxf:modal="true">
                                        <xf:label>
                                            <xhtml:img src="{$icon}" alt="" />
                                        </xf:label>
                                        <xf:hint ref="$label"/>
                                        <!-- Delete the user has to be confirmed -->
                                        <xf:action ev:event="DOMActivate">
                                            <xxf:variable name="confirmationMessage"
                                                select="concat(xxf:instance('managedUser-instance')/credentials/username,' (',xxf:instance('managedUser-instance')/credentials/userId,')')"/>
                                            <xf:dispatch name="confirm-action"
                                                target="pageNavigation-model">
                                                <xxf:context name="action" select="'deleteUser'"/>
                                                <xxf:context name="messageSet"
                                                  select="$confirmationMessage"/>
                                            </xf:dispatch>
                                        </xf:action>
                                    </xf:trigger>
                                </xhtml:span>
                            </xhtml:li>
                            <!-- Debugging -->
                            <!--
                            <xhtml:li>
                            <xhtml:p>Query:<xhtml:br/>
                            <xf:output ref="xxf:serialize(xxf:call-xpl('oxf:/ops/utils/formatting/format.xpl', 'data', xxf:instance('userList-query-instance'), 'data')/*, 'html')" mediatype="text/html"/>
                            </xhtml:p>
                            <xhtml:p>User list:<xhtml:br/>
                            <xf:output ref="xxf:serialize(xxf:call-xpl('oxf:/ops/utils/formatting/format.xpl', 'data', xxf:instance('userList-instance'), 'data')/*, 'html')" mediatype="text/html"/>
                            </xhtml:p>
                            </xhtml:li>
                        -->
                            <xhtml:li class="LayoutFooter">&#160;</xhtml:li>
                        </xhtml:ul>


                        <!-- Display or edit the user credentials for the managed user
                        
                        <credentials>
                        <userId>forename.surname</userId>
                        <username>cityEHR User</username>
                        <password>pa55w0rd</password>
                        <code>ID-001</code>
                        <specialtyCode>410</specialtyCode>
                        <organisation>cityEHR</organisation>
                        <jobTitle>Job title</jobTitle>
                        <email>info@openhealthinformatics.org</email>
                        </credentials>
                        
                        The userId is not editable unless this is a new user, the other details may be, depending on the editable setting (true|false) in the $userAccountDetails

                        There are three parts to the user profile:
                            credentials
                            specialties - these are recorded for the current application only (i.e. application of logged on administrator)
                            roles                     
                    -->
                        <xhtml:div
                            class="{if (xxf:instance('control-instance')/manageUsers/lifecycleStatus !='waiting') then 'tableContainer' else 'hidden'}">
                            <xhtml:table class="displayList">
                                <xhtml:thead>
                                    <xhtml:tr>
                                        <!-- Credentials -->
                                        <xhtml:td>
                                            <xf:output
                                                ref="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/manageUsers/credentialsLabel"
                                            />
                                        </xhtml:td>
                                        <!-- Applications - only for manageUsers -->
                                        <xhtml:td
                                            class="{if ($adminTask='manageUsers') then '' else 'hidden'}">
                                            <xf:output
                                                ref="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/manageUsers/applicationsLabel"
                                            />
                                        </xhtml:td>
                                        <!-- Specialties - only for manageUsers -->
                                        <xhtml:td
                                            class="{if ($adminTask='manageUsers') then '' else 'hidden'}">
                                            <xf:output
                                                ref="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/manageUsers/specialtiesLabel"
                                            />
                                        </xhtml:td>
                                        <!-- Roles - only for manageUsers -->
                                        <xhtml:td
                                            class="{if ($adminTask='manageUsers') then '' else 'hidden'}">
                                            <xf:output
                                                ref="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/manageUsers/rolesLabel"
                                            />
                                        </xhtml:td>
                                    </xhtml:tr>
                                </xhtml:thead>
                                <xhtml:tbody>
                                    <!-- Input controls are only visible if editing the user account -->
                                    <xxf:variable name="editAccount"
                                        select="xxf:instance('control-instance')/manageUsers/editAccount"/>
                                    <xhtml:tr>
                                        <!-- Credentials -->
                                        <xhtml:td>
                                            <xhtml:table>
                                                <xxf:variable name="userAccountDetails"
                                                  select="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/manageUsers/userAccountDetails"/>
                                                <!-- UserId is displayed, but cannot be edited unless this is a new user -->
                                                <xhtml:tr>
                                                  <xhtml:td>
                                                  <xf:output
                                                  ref="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/manageUsers/userIdLabel"
                                                  />
                                                  </xhtml:td>
                                                  <xhtml:td>
                                                  <!-- Just display for existing user -->
                                                  <xf:output
                                                  class="{if (xxf:instance('control-instance')/manageUsers/lifecycleStatus !='new') then '' else 'hidden'}"
                                                  ref="xxf:instance('managedUser-instance')/credentials/userId"/>
                                                  <!-- Edit for new user -->
                                                  <xf:input
                                                  class="{if (xxf:instance('control-instance')/manageUsers/lifecycleStatus ='new') then '' else 'hidden'}"
                                                  ref="xxf:instance('managedUser-instance')/credentials/userId"
                                                  incremental="true">
                                                  <xf:action ev:event="xforms-value-changed"
                                                  if="$editAccount='true'">
                                                  <!-- Remove non-allowable characters -->
                                                  <xf:setvalue
                                                  ref="xxf:instance('managedUser-instance')/credentials/userId"
                                                  value="translate(.,'# &#09;&#10;','')"/>
                                                  <xf:setvalue
                                                  ref="xxf:instance('managedUser-instance')/@id"
                                                  value="concat('#CityEHR:User:',xxf:instance('managedUser-instance')/credentials/userId)"/>
                                                  <xf:setvalue
                                                  ref="xxf:instance('control-instance')/manageUsers/managedUserId"
                                                  value="xxf:instance('managedUser-instance')/credentials/userId"/>
                                                  <xf:setvalue
                                                  ref="xxf:instance('control-instance')/manageUsers/editStatus"
                                                  value="'edited'"/>
                                                  <xf:setvalue
                                                  ref="xxf:instance('view-parameters-instance')/systemError"
                                                  value="''"/>
                                                  </xf:action>
                                                  </xf:input>
                                                  <xhtml:br />
                                                  <xf:output
                                                  ref="xxf:instance('managedUser-instance')/@id"/>
                                                  </xhtml:td>
                                                </xhtml:tr>
                                                <!-- Logon alias can be edited if editAccount is true -->
                                                <xhtml:tr>
                                                  <xhtml:td>
                                                  <xf:output
                                                  ref="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/manageUsers/logonAliasLabel"
                                                  />
                                                  </xhtml:td>
                                                  <xhtml:td>
                                                  <xf:output
                                                  class="{if ($editAccount='true') then 'hidden' else ''}"
                                                  ref="xxf:instance('managedUser-instance')/credentials/logonAlias"/>
                                                  <!-- Edit for all users -->
                                                  <xf:input
                                                  class="{if ($editAccount='true') then '' else 'hidden'}"
                                                  ref="xxf:instance('managedUser-instance')/credentials/logonAlias"
                                                  incremental="true">
                                                  <xf:action ev:event="xforms-value-changed"
                                                  if="$editAccount='true'">
                                                  <!-- Remove non-allowable characters -->
                                                  <xf:setvalue
                                                  ref="xxf:instance('managedUser-instance')/credentials/logonAlias"
                                                  value="translate(.,'# &#09;&#10;','')"/>
                                                  <xf:setvalue
                                                  ref="xxf:instance('control-instance')/manageUsers/editStatus"
                                                  value="'edited'"/>
                                                  <xf:setvalue
                                                  ref="xxf:instance('view-parameters-instance')/systemError"
                                                  value="''"/>
                                                  </xf:action>
                                                  </xf:input>
                                                  </xhtml:td>
                                                </xhtml:tr>
                                                <!-- Password can be changed if editAccount is true -->
                                                <xxf:variable name="changePasswordClass"
                                                  select="if ($editAccount='true') then '' else 'hidden'"/>
                                                <xhtml:tr class="{$changePasswordClass}">
                                                  <xhtml:td colspan="2">
                                                  <xf:group>
                                                  <!-- Password input - also used in cityEHRSetPasswordDialog -->
                                                  <xi:include href="cityEHRPasswordInput.xhtml"/>
                                                  <xf:action ev:event="xforms-value-changed"
                                                  if="$editAccount='true'">
                                                  <xf:setvalue
                                                  ref="xxf:instance('control-instance')/manageUsers/editStatus"
                                                  value="'edited'"/>
                                                  </xf:action>
                                                  </xf:group>
                                                  </xhtml:td>
                                                </xhtml:tr>
                                                <!-- Display/edit general account details as specified in view-parameters -->
                                                <xf:repeat nodeset="$userAccountDetails/item">
                                                  <xxf:variable name="item" select="."/>
                                                  <xhtml:tr>
                                                  <xhtml:td>
                                                  <xf:output ref="$item/@displayName"/>
                                                  </xhtml:td>
                                                  <xhtml:td>
                                                  <xxf:variable name="editAccountClass"
                                                  select="if ($editAccount='true' and $item/@editable='true') then '' else 'hidden'"/>
                                                  <xxf:variable name="displayAccountClass"
                                                  select="if ($item/@editable!='true' or $editAccount='false') then '' else 'hidden'"/>
                                                  <xf:output class="{$displayAccountClass}"
                                                  ref="xxf:instance('managedUser-instance')/credentials/*[name(.)=$item/@name]"/>
                                                  <xf:input class="{$editAccountClass}"
                                                  ref="xxf:instance('managedUser-instance')/credentials/*[name(.)=$item/@name]"
                                                  incremental="true">
                                                  <xf:action ev:event="xforms-value-changed"
                                                  if="$editAccount='true'">
                                                  <xf:setvalue
                                                  ref="xxf:instance('control-instance')/manageUsers/editStatus"
                                                  value="'edited'"/>
                                                  </xf:action>
                                                  </xf:input>
                                                  </xhtml:td>
                                                  </xhtml:tr>
                                                </xf:repeat>
                                                <!-- Select restrictPatientAccess.
                                                 But only if adminTask is manageUsers. not manageUserAccount -->
                                                <xhtml:tr>
                                                  <xhtml:td>
                                                  <xf:output
                                                  ref="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/manageUsers/restrictPatientAccess/@displayName"
                                                  />
                                                  </xhtml:td>
                                                  <xhtml:td>
                                                  <xf:output
                                                  class="{if ($editAccount='true' and $adminTask='manageUsers') then 'hidden' else ''}"
                                                  ref="xxf:instance('managedUser-instance')/rbac/restrictPatientAccess/@displayName"/>
                                                  <!-- List of options currently supported by this cityEHR deployment -->
                                                  <xxf:variable name="patientAccessList"
                                                  select="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/manageUsers/restrictPatientAccess/item"/>
                                                  <!-- Can only select patient access restriction if editing -->
                                                  <xf:select1
                                                  ref="xxf:instance('managedUser-instance')/rbac/restrictPatientAccess/@value"
                                                  class="{if ($editAccount='true' and $adminTask='manageUsers') then '' else 'hidden'}">
                                                  <xf:itemset nodeset="$patientAccessList">
                                                  <xf:label ref="@displayName"/>
                                                  <xf:value ref="@value"/>
                                                  </xf:itemset>
                                                  <xf:action ev:event="xforms-value-changed"
                                                  if="$editAccount='true'">
                                                  <!-- Set edit flag -->
                                                  <xf:setvalue
                                                  ref="xxf:instance('control-instance')/manageUsers/editStatus"
                                                  value="'edited'"/>
                                                  <!-- Set displayName -->
                                                  <xf:setvalue
                                                  ref="xxf:instance('managedUser-instance')/rbac/restrictPatientAccess/@displayName"
                                                  value="$patientAccessList[@value = xxf:instance('managedUser-instance')/rbac/restrictPatientAccess/@value]/@displayName"
                                                  />
                                                  </xf:action>
                                                  </xf:select1>
                                                  </xhtml:td>
                                                </xhtml:tr>
                                            </xhtml:table>
                                        </xhtml:td>
                                        <!-- Applications - only for manageUsers -->
                                        <xhtml:td
                                            class="{if ($adminTask='manageUsers') then '' else 'hidden'}">
                                            <!-- List of applications currently supported by this cityEHR deployment -->
                                            <xxf:variable name="applicationList"
                                                select="xxf:instance('applicationList-instance')/iso-13606:EHR_Extract"/>
                                            <!-- Can only select applications if editing -->
                                            <xf:select
                                                ref="xxf:instance('control-instance')/manageUsers/managedUserApplications"
                                                appearance="full" readonly="true"
                                                class="{if ($editAccount='true') then 'verticalList' else 'hidden'}">
                                                <xf:itemset nodeset="$applicationList">
                                                  <xf:label ref="@displayName"/>
                                                  <xf:value ref="@id"/>
                                                </xf:itemset>
                                                <xf:action ev:event="xforms-value-changed"
                                                  if="$editAccount='true'">
                                                  <xf:setvalue
                                                  ref="xxf:instance('control-instance')/manageUsers/editStatus"
                                                  value="'edited'"/>
                                                  <!-- Set applications for this user -->
                                                  <xxf:variable name="selectedApplications"
                                                  select="tokenize(xxf:instance('control-instance')/manageUsers/managedUserApplications,' ')"/>
                                                  <xxf:variable name="selectedApplicationList"
                                                  select="$applicationList[@id=$selectedApplications]"/>
                                                  <!-- Delete applications that are no longer selected -->
                                                  <xf:delete
                                                  nodeset="xxf:instance('managedUser-instance')/applications/iso-13606:EHR_Extract[not(@id=$selectedApplications)]"/>
                                                  <!-- Insert any applications that are not already on the list -->
                                                  <xf:action
                                                  xxf:iterate="$selectedApplicationList[not(@id=xxf:instance('managedUser-instance')/applications/iso-13606:EHR_Extract/@id)]">
                                                  <xxf:variable name="newApplication" select="."/>
                                                  <xf:insert
                                                  context="xxf:instance('managedUser-instance')/applications"
                                                  nodeset="iso-13606:EHR_Extract"
                                                  origin="$newApplication" at="last()"
                                                  position="after"/>
                                                  </xf:action>
                                                </xf:action>
                                            </xf:select>
                                            <!-- Display the applications set for this user.
                                            2016-04-26 No longer needed - select now has full appearance -->
                                            <!--
                                        <xhtml:ul>
                                            <xf:repeat
                                                nodeset="xxf:instance('managedUser-instance')/applications/iso-13606:EHR_Extract">
                                                <xxf:variable name="application" select="."/>
                                                <xxf:variable name="applicationDisplayName"
                                                  select="$applicationList[@id=$application/@id]/@displayName"/>
                                                <xhtml:li>
                                                  <xf:output
                                                  ref="if (exists($applicationDisplayName)) then $applicationDisplayName else $application/@id"
                                                  />
                                                </xhtml:li>
                                            </xf:repeat>
                                        </xhtml:ul>
                                        -->
                                        </xhtml:td>
                                        <!-- Specialties - only for manageUsers -->
                                        <xhtml:td
                                            class="{if ($adminTask='manageUsers') then '' else 'hidden'}">
                                            <xxf:variable name="specialtyList"
                                                select="xxf:instance('specialtyList-instance')/iso-13606:Folder"/>
                                            <!-- Can only select specialties if editing -->
                                            <xf:select
                                                ref="xxf:instance('control-instance')/manageUsers/managedUserSpecialties"
                                                appearance="full"
                                                class="{if ($editAccount='true') then 'verticalList' else 'hidden'}">
                                                <xf:itemset nodeset="$specialtyList">
                                                  <xf:label ref="@displayName"/>
                                                  <xf:value ref="@id"/>
                                                </xf:itemset>
                                                <xf:action ev:event="xforms-value-changed"
                                                  if="$editAccount='true'">
                                                  <xf:setvalue
                                                  ref="xxf:instance('control-instance')/manageUsers/editStatus"
                                                  value="'edited'"/>
                                                  <!-- Set specialties for this user -->
                                                  <xxf:variable name="selectedSpecialties"
                                                  select="tokenize(xxf:instance('control-instance')/manageUsers/managedUserSpecialties,' ')"/>
                                                  <xf:delete
                                                  nodeset="xxf:instance('managedUser-instance')/applications/iso-13606:EHR_Extract[@id=xxf:instance('view-parameters-instance')/applicationIRI]/iso-13606:Folder"/>
                                                  <xf:insert
                                                  context="xxf:instance('managedUser-instance')/applications/iso-13606:EHR_Extract[@id=xxf:instance('view-parameters-instance')/applicationIRI]"
                                                  nodeset="iso-13606:Folder"
                                                  origin="$specialtyList[@id=$selectedSpecialties]"
                                                  at="last()" position="after"/>
                                                </xf:action>
                                            </xf:select>
                                            <!-- Display the specialties set for this user.
                                             2016-04-26 No longer needed - select now has full appearance -->
                                            <!--
                                        <xhtml:ul>
                                            <xf:repeat
                                                nodeset="xxf:instance('managedUser-instance')/applications/iso-13606:EHR_Extract[@id=xxf:instance('view-parameters-instance')/applicationIRI]/iso-13606:Folder">
                                                <xxf:variable name="specialty" select="."/>
                                                <xxf:variable name="specialtyDisplayName"
                                                  select="$specialtyList[@id=$specialty/@id]/@displayName"/>
                                                <xhtml:li>
                                                  <xf:output
                                                  ref="if (exists($specialtyDisplayName)) then $specialtyDisplayName else $specialty/@id"
                                                  />
                                                </xhtml:li>
                                            </xf:repeat>
                                        </xhtml:ul>
                                        -->
                                        </xhtml:td>
                                        <!-- Roles - only for manageUsers -->
                                        <xhtml:td
                                            class="{if ($adminTask='manageUsers') then '' else 'hidden'}">
                                            <!-- Make sure the roleList doesn't include the fixed System:AllRoles  -->
                                            <xxf:variable name="roleList"
                                                select="xxf:instance('application-parameters-instance')/rbac/role[@value!=''][@value!='#CityEHR:Role:System:AllRoles']"/>
                                            <!-- Can only select role(s) if editing -->
                                            <xf:select
                                                ref="xxf:instance('control-instance')/manageUsers/managedUserRoles"
                                                appearance="full"
                                                class="{if ($editAccount='true') then 'verticalList' else 'hidden'}">
                                                <xf:itemset nodeset="$roleList">
                                                  <xf:label ref="@displayName"/>
                                                  <xf:value ref="@value"/>
                                                </xf:itemset>
                                                <xf:action ev:event="xforms-value-changed"
                                                  if="$editAccount='true'">
                                                  <xf:setvalue
                                                  ref="xxf:instance('control-instance')/manageUsers/editStatus"
                                                  value="'edited'"/>
                                                  <!-- Set roles for this user -->
                                                  <xxf:variable name="selectedRoles"
                                                  select="tokenize(xxf:instance('control-instance')/manageUsers/managedUserRoles,' ')"/>
                                                  <xf:delete
                                                  nodeset="xxf:instance('managedUser-instance')/rbac/role"/>
                                                  <xf:insert
                                                  context="xxf:instance('managedUser-instance')/rbac"
                                                  nodeset="role"
                                                  origin="$roleList[@value=$selectedRoles]"
                                                  at="last()" position="after"/>
                                                </xf:action>
                                            </xf:select>
                                            <!-- Display the roles set for this user.
                                        2016-04-26 No longer needed - select now has full appearance-->
                                            <!--
                                        <xhtml:ul>
                                            <xf:repeat
                                                nodeset="xxf:instance('managedUser-instance')/rbac/role">
                                                <xxf:variable name="role" select="."/>
                                                <xxf:variable name="roleDisplayName"
                                                  select="$roleList[@value=$role/@value]/@displayName"/>
                                                <xhtml:li>
                                                  <xf:output
                                                  ref="if (exists($roleDisplayName)) then $roleDisplayName else $role/@value"
                                                  />
                                                </xhtml:li>
                                            </xf:repeat>
                                        </xhtml:ul>
                                        -->
                                        </xhtml:td>
                                    </xhtml:tr>
                                </xhtml:tbody>
                            </xhtml:table>
                        </xhtml:div>

                    </xhtml:div>


                    <!-- ===Tasks to manage the Information Models ============ 
                         These tasks include
                            manageInformationModel
                            manageMedia
                            manageImageMaps
                            manageLetterTemplates
                            
                         All use the specialty set in manageInformationModel/specialtyIRI
                         ====================================================== -->
                    <xhtml:div
                        class="{if ($adminTask=('manageInformationModel','manageMedia','manageImageMaps')) then '' else 'hidden'}">
                        <xhtml:ul class="viewControlsHeader">

                            <!-- viewControlsDisplay on LHS for all tasks
                                 Contains spans for each adminTask and controlItem -->
                            <xhtml:li class="viewControlsDisplay">
                                <!-- Select the specialty to manage - this for all the adminTasks -->
                                <xhtml:span class="controlItem">
                                    <!-- For manageInformationModel the specialtyList includes the option for all specialties -->
                                    <xxf:variable name="specialtyList"
                                        select="if ($adminTask='manageInformationModel') then xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/manageInformationModel/iso-13606:Folder | xxf:instance('specialtyList-instance')/iso-13606:Folder else xxf:instance('specialtyList-instance')/iso-13606:Folder"/>
                                    <xf:select1
                                        ref="xxf:instance('control-instance')/manageInformationModel/specialtyIRI">
                                        <xf:label
                                            ref="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/manageInformationModel/specialtyLabel"/>
                                        <xf:itemset nodeset="$specialtyList">
                                            <xf:label ref="@displayName"/>
                                            <xf:value ref="@id"/>
                                        </xf:itemset>
                                        <xf:action ev:event="xforms-value-changed">
                                            <!-- Set the specialty id and displayName on selection -->
                                            <xxf:variable name="selectedSpecialty"
                                                select="$specialtyList[@id=xxf:instance('control-instance')/manageInformationModel/specialtyIRI]"/>
                                            <xf:setvalue
                                                ref="xxf:instance('control-instance')/manageInformationModel/specialtyId"
                                                value="replace(substring(xxf:instance('control-instance')/manageInformationModel/specialtyIRI,2),':','-')"/>
                                            <xf:setvalue
                                                ref="xxf:instance('control-instance')/manageInformationModel/specialtyDisplayName"
                                                value="$selectedSpecialty/@displayName"/>
                                            <!-- Invoke action to reset, depending on the adminTask.
                                                manageInformationModel
                                                manageMedia
                                                manageImageMaps
                                                manageLetterTemplates -->
                                            <xxf:variable name="resetAction"
                                                select="concat('resetSpecialty-',$adminTask)"/>
                                            <xf:dispatch name="{$resetAction}" target="main-model"/>
                                        </xf:action>
                                    </xf:select1>
                                </xhtml:span>
                                <!-- controlItems for manageInformationModel -->
                                <xhtml:span
                                    class="{if ($adminTask='manageInformationModel') then '' else 'hidden'}">
                                    <!-- Select the model, or to display summary of all models. 
                                         When model is selected the ontology (information model) is loaded to resource-instance
                                         and the data dictionary (for the specialty or class) is loaded to dictionary-instance
                                         -->
                                    <xhtml:span class="controlItem">
                                        <!-- Select the ontology model to manage.
                                 The list is limited to the specialty selected.
                                 Selection is of the database handle, since this is the only value guaranteed to be unique across all models -->
                                        <xxf:variable name="fullModelSet"
                                            select="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/manageInformationModel/informationModel | xxf:instance('informationModelList-instance')/informationModel"/>
                                        <xxf:variable name="specialtyModelSet"
                                            select="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/manageInformationModel/informationModel | xxf:instance('informationModelList-instance')/informationModel[data(specialtyIRI) = xxf:instance('control-instance')/manageInformationModel/specialtyIRI]"/>
                                        <xxf:variable name="modelSet"
                                            select="if (xxf:instance('control-instance')/manageInformationModel/specialtyIRI = '') then $fullModelSet else $specialtyModelSet"/>
                                        <xf:select1
                                            ref="xxf:instance('control-instance')/manageInformationModel/informationModelResource">
                                            <xf:label
                                                ref="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/manageInformationModel/selectInformationModelLabel"/>
                                            <xf:itemset nodeset="$modelSet">
                                                <xf:label
                                                  ref="if (./informationModelType = 'Class') then concat(./informationModelType,' - ',./specialtyDisplayName,' - ',./modelDisplayName) else concat(./informationModelType,' - ',./specialtyDisplayName)"/>
                                                <xf:value ref="./handle"/>
                                            </xf:itemset>
                                            <xf:action ev:event="xforms-value-changed">
                                                <!-- Clear systenError log -->
                                                <xf:setvalue
                                                  ref="xxf:instance('view-parameters-instance')/systemError"
                                                  value="''"/>
                                                <!-- Load the information model, if one was selected 
                                                     (Summary of all models sets informationModelResource to '') -->
                                                <xf:action
                                                  if="xxf:instance('control-instance')/manageInformationModel/informationModelResource !=''">
                                                  <!-- Reset modelSelected flag - this to prevent reset when change to specialtyIRI triggers resetSpecialty action -->
                                                  <xf:setvalue
                                                  ref="xxf:instance('control-instance')/manageInformationModel/modelSelected"
                                                  value="'selected'"/>
                                                  <!-- Get the selected model -->
                                                  <xxf:variable name="selectedModel"
                                                  select="$modelSet[handle=xxf:instance('control-instance')/manageInformationModel/informationModelResource]"/>
                                                  <!-- Set the informationModelType, specialtyIRI and modelIRI.
                                                          Need to set specialty, because this may have been a selection from the fullModelSet -->
                                                  <xf:setvalue
                                                  ref="xxf:instance('control-instance')/manageInformationModel/specialtyIRI"
                                                  value="$selectedModel/specialtyIRI"/>
                                                  <xf:setvalue
                                                  ref="xxf:instance('control-instance')/manageInformationModel/informationModelType"
                                                  value="$selectedModel/informationModelType"/>
                                                  <xf:setvalue
                                                  ref="xxf:instance('control-instance')/manageInformationModel/modelIRI"
                                                  value="$selectedModel/modelIRI"/>
                                                  <!-- Load the model -->
                                                  <xf:dispatch name="load-informationModel"
                                                  target="main-model"/>
                                                </xf:action>
                                                <!-- May have further actions here -->
                                            </xf:action>
                                        </xf:select1>
                                    </xhtml:span>
                                    <!-- Display statistics for selected model.
                                 (Show ontology summary)
                                 Not available in the languagePack view -->
                                    <xhtml:span
                                        class="{if (xxf:instance('control-instance')/manageInformationModel/informationModelResource !='' and xxf:instance('control-instance')/manageInformationModel/informationModelDisplayType!='languagePack') then 'controlItem' else 'hidden'}">
                                        <!-- Show details (summary) of the ontology -->
                                        <xf:input
                                            ref="xxf:instance('control-instance')/manageInformationModel/showOntologyDetails">
                                            <xf:label
                                                ref="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/manageInformationModel/showOntologyDetailsLabel"/>
                                            <xf:action ev:event="xforms-value-changed">
                                                <!-- Reset status message - used to clear message after apply-templates -->
                                                <xf:delete
                                                  nodeset="xxf:instance('control-instance')/statusMessage/entryList/*"
                                                />
                                            </xf:action>
                                        </xf:input>
                                    </xhtml:span>
                                    <!-- Edit language pack, but only if language pack is displayed -->
                                    <xhtml:span
                                        class="{if (xxf:instance('control-instance')/manageInformationModel/informationModelResource !='' and  xxf:instance('control-instance')/manageInformationModel/informationModelDisplayType='languagePack') then 'controlItem' else 'hidden'}">
                                        <xf:input
                                            ref="xxf:instance('control-instance')/manageInformationModel/editLanguagePack">
                                            <xf:label
                                                ref="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/manageInformationModel/editLanguagePackLabel"/>
                                            <xf:action ev:event="xforms-value-changed">
                                                <xf:setvalue
                                                  ref="xxf:instance('control-instance')/manageInformationModel/showLanguagePack"
                                                  value="true()"/>
                                            </xf:action>
                                        </xf:input>
                                    </xhtml:span>
                                    <!-- When an information model is selected and the application supports multiple languages -->
                                    <xhtml:span
                                        class="{if (xxf:instance('control-instance')/manageInformationModel/informationModelResource !='' and exists(xxf:instance('application-parameters-instance')/languagePacks/language[2])) then '''' else 'hidden'}">
                                        <!-- Display the base language -->
                                        <xhtml:span class="viewControl">
                                            <xf:output
                                                ref="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/manageInformationModel/modelLanguageLabel"/>
                                            <xf:output class="label"
                                                ref="xxf:instance('control-instance')/manageInformationModel/baseLanguage/@displayName"
                                            />
                                        </xhtml:span>
                                        <!-- Select the language for the language packs.
                                              Includes the language element from 'control-instance')/manageInformationModel if this is not supported in the parameters for the application.-->
                                        <xhtml:span class="viewControl">
                                            <!-- List of languages supported by this application -->
                                            <xxf:variable name="supportedLanguageList"
                                                select="xxf:instance('application-parameters-instance')/languagePacks/language"/>
                                            <!-- If currrent information model uses an unsupported language -->
                                            <xxf:variable name="unsupportedLanguage"
                                                select="if (xxf:instance('control-instance')/manageInformationModel/language/lower-case(@code) = $supportedLanguageList/lower-case(@code)) then () else xxf:instance('control-instance')/manageInformationModel/language"/>
                                            <xxf:variable name="languageSelection"
                                                select="($unsupportedLanguage | $supportedLanguageList)"/>
                                            <xf:select1
                                                ref="xxf:instance('control-instance')/manageInformationModel/language/@code">
                                                <xf:label
                                                  ref="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/manageInformationModel/selectLanguageLabel"/>
                                                <xf:itemset nodeset="$languageSelection">
                                                  <xf:label
                                                  ref="concat(./@code,' - ',./@displayName)"/>
                                                  <xf:value ref="lower-case(./@code)"/>
                                                </xf:itemset>
                                                <!-- Load the language pack or set to view it.
                                         If already viewing language packs, then load for the new language.
                                         Otherwise just set to view language pack, which will trigger the load.
                                         But not if baseLanguage is set.
                                    -->
                                                <xf:action ev:event="xforms-value-changed">
                                                  <!-- Set the displayName -->
                                                  <xf:setvalue
                                                  ref="xxf:instance('control-instance')/manageInformationModel/language/@displayName"
                                                  value="$languageSelection[lower-case(@code)=xxf:instance('control-instance')/manageInformationModel/language/@code]/@displayName"/>
                                                  <!-- Load new language pack (not for the base language) -->
                                                  <xf:action
                                                  if="xxf:instance('control-instance')/manageInformationModel/ontologyView='languagePack'">
                                                  <xf:action
                                                  if="not(xxf:instance('control-instance')/manageInformationModel/language/@code = xxf:instance('control-instance')/manageInformationModel/baseLanguage/@code)">
                                                  <xf:dispatch name="load-languagePack"
                                                  target="main-model"/>
                                                  </xf:action>
                                                  <!-- Selected the baseLanguage - can't show a language pack -->
                                                  <xf:action
                                                  if="xxf:instance('control-instance')/manageInformationModel/language/@code = xxf:instance('control-instance')/manageInformationModel/baseLanguage/@code">
                                                  <xf:setvalue
                                                  ref="xxf:instance('control-instance')/manageInformationModel/ontologyView"
                                                  value="'allNodes'"/>
                                                  </xf:action>
                                                  </xf:action>
                                                  <!-- Or set display type to 'languagePack' -->
                                                  <xf:action
                                                  if="not(xxf:instance('control-instance')/manageInformationModel/ontologyView='languagePack') and not(xxf:instance('control-instance')/manageInformationModel/language/@code = xxf:instance('control-instance')/manageInformationModel/baseLanguage/@code)">
                                                  <xf:setvalue
                                                  ref="xxf:instance('control-instance')/manageInformationModel/ontologyView"
                                                  value="'languagePack'"/>
                                                  </xf:action>
                                                </xf:action>
                                            </xf:select1>
                                        </xhtml:span>
                                    </xhtml:span>
                                    <!-- When an information model is selected -->
                                    <xhtml:span
                                        class="{if (xxf:instance('control-instance')/manageInformationModel/informationModelResource !='') then '' else 'hidden'}">
                                        <!-- Display options depend on language selected -->
                                        <xxf:variable name="languageCode"
                                            select="xxf:instance('control-instance')/manageInformationModel/language/@code"/>
                                        <xxf:variable name="baseLanguageCode"
                                            select="xxf:instance('control-instance')/managedApplication/baseLanguage/@code"/>
                                        <!-- Select the type of view for the ontology. 
                                     (Select view) -->
                                        <xhtml:span class="viewControl">
                                            <!-- Display options for this model type (specialty or class) -->
                                            <xxf:variable name="informationModelType"
                                                select="xxf:instance('control-instance')/manageInformationModel/informationModelType"/>
                                            <xxf:variable name="informationModelTypeDisplayOptions"
                                                select="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/ontologyView/options[@type=$informationModelType]/option"/>
                                            <!-- If language is the baseLanguage then can't display languagePack -->
                                            <xxf:variable name="informationModelDisplayOptions"
                                                select="if ($languageCode=$baseLanguageCode) then $informationModelTypeDisplayOptions[@type!='languagePack'] else $informationModelTypeDisplayOptions"/>
                                            <xf:select1
                                                ref="xxf:instance('control-instance')/manageInformationModel/ontologyView"
                                                xxf:modal="true">
                                                <xf:label
                                                  ref="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/manageInformationModel/selectViewLabel"/>
                                                <xf:itemset
                                                  nodeset="$informationModelDisplayOptions">
                                                  <xf:label ref="./@displayName"/>
                                                  <xf:value ref="."/>
                                                </xf:itemset>
                                                <xf:action ev:event="xforms-value-changed">
                                                  <!-- Set informationModelDisplayType -->
                                                  <xxf:variable name="informationModelDisplayType"
                                                  select="$informationModelDisplayOptions[text()=xxf:instance('control-instance')/manageInformationModel/ontologyView]/@type"/>
                                                  <xf:setvalue
                                                  ref="xxf:instance('control-instance')/manageInformationModel/informationModelDisplayType"
                                                  value="$informationModelDisplayType"/>
                                                  <!-- Set staticDisplay -->
                                                  <xxf:variable name="staticDisplay"
                                                  select="if (xxf:instance('control-instance')/manageInformationModel/ontologyView = ('dataDictionary','compositionSummary','nodeDisplayNames','nodeIds','nodeIRIs','allNodes')) then 'true' else 'false'"/>
                                                  <xf:setvalue
                                                  ref="xxf:instance('control-instance')/manageInformationModel/staticDisplay"
                                                  value="$staticDisplay"/>
                                                  <!-- Run transformation to html-instance (ontology) -->
                                                  <xf:action
                                                  if="$informationModelDisplayType='nodeList'">
                                                  <xf:setvalue
                                                  ref="xxf:instance('control-instance')/enumeratedClassSelection/selectedNode"
                                                  value=""/>
                                                  <xf:delete
                                                  nodeset="xxf:instance('control-instance')/enumeratedClassSelection/suppDataSet/*"/>
                                                  <xf:setvalue
                                                  ref="xxf:instance('view-parameters-instance')/informationModelType"
                                                  value="$informationModelType"/>
                                                  <xf:setvalue
                                                  ref="xxf:instance('view-parameters-instance')/informationModelDisplay"
                                                  value="xxf:instance('control-instance')/manageInformationModel/ontologyView"/>
                                                  <xxf:variable name="xsltPipeline"
                                                  select="concat(xxf:instance('view-parameters-instance')/appPath, '/pipelines/convertOWL2NodeDisplay.xpl')"/>
                                                  <xf:insert nodeset="xxf:instance('html-instance')"
                                                  origin="xxf:call-xpl($xsltPipeline, ('instance','parameters'),  (xxf:instance('resource-instance'),xxf:instance('view-parameters-instance')) , 'data')"
                                                  />
                                                  </xf:action>
                                                  <!-- Load (or create) the language pack (ontology).
                                                 Also set showOntologyDetails to false -->
                                                  <xf:action
                                                  if="$informationModelDisplayType='languagePack'">
                                                  <xf:dispatch name="load-languagePack"
                                                  target="main-model"/>
                                                  <xf:setvalue
                                                  ref="xxf:instance('control-instance')/manageInformationModel/showOntologyDetails"
                                                  value="false()"/>
                                                  <xf:setvalue
                                                  ref="xxf:instance('control-instance')/manageInformationModel/showLanguagePack"
                                                  value="true()"/>
                                                  </xf:action>
                                                </xf:action>
                                            </xf:select1>
                                        </xhtml:span>
                                    </xhtml:span>
                                </xhtml:span>
                                <!-- controlItems for manageMedia -->
                                <xhtml:span
                                    class="{if ($adminTask='manageMedia') then '' else 'hidden'}">
                                    <xhtml:span class="controlItem">
                                        <!-- Select the entry to manage (or all entries) -->
                                        <xxf:variable name="dictionaryMediaEntryList"
                                            select="xxf:instance('dictionary-instance')/iso-13606:entryCollection/iso-13606:entry[@cityEHR:rendition='#CityEHR:EntryProperty:Image']"/>
                                        <xxf:variable name="mediaEntryList"
                                            select="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/manageMedia/iso-13606:entry | $dictionaryMediaEntryList"/>
                                        <xf:select1
                                            ref="xxf:instance('control-instance')/manageMedia/entryIRI">
                                            <xf:label
                                                ref="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/manageMedia/entryLabel"/>
                                            <xf:itemset
                                                nodeset="$mediaEntryList/cda:component/cda:observation">
                                                <xf:label
                                                  ref="if (cda:id/@extension='') then cda:code/@displayName else if (cda:code/@displayName='') then cda:id/@extension else concat(cda:code/@displayName,' (',cda:id/@extension,')')"/>
                                                <xf:value ref="cda:id/@extension"/>
                                            </xf:itemset>
                                            <!-- New entry selected -->
                                            <xf:action ev:event="xforms-value-changed">
                                                <!-- Not doing anything here  -->
                                            </xf:action>
                                        </xf:select1>
                                    </xhtml:span>
                                </xhtml:span>
                                <!-- controlItems for manageImageMaps -->
                                <xhtml:span
                                    class="{if ($adminTask='manageImageMaps') then '' else 'hidden'}">
                                    <xhtml:span class="controlItem">
                                        <!-- Select the entry to manage (or all entries).
                                             Note that the imageMap rendition is assicated with the entry root (not the extension) -->
                                        <xxf:variable name="dictionaryImageMapList"
                                            select="xxf:instance('dictionary-instance')/iso-13606:entryCollection/iso-13606:entry[contains(@cityEHR:rendition,'ImageMap')]"/>
                                        <xxf:variable name="imageMapEntryList"
                                            select="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/manageImageMaps/iso-13606:entry | $dictionaryImageMapList"/>
                                        <xf:select1
                                            ref="xxf:instance('control-instance')/manageImageMaps/entryIRI">
                                            <xf:label
                                                ref="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/manageImageMaps/entryLabel"/>
                                            <xf:itemset
                                                nodeset="$imageMapEntryList/cda:component/cda:observation">
                                                <xf:label
                                                  ref="if (cda:id/@extension='') then cda:code/@displayName else if (cda:code/@displayName='') then cda:id/@extension else concat(cda:code/@displayName,' (',cda:id/@root,')')"/>
                                                <xf:value ref="cda:id/@root"/>
                                            </xf:itemset>
                                            <!-- New entry selected -->
                                            <xf:action ev:event="xforms-value-changed">
                                                <!-- Not doing anything here -->
                                            </xf:action>
                                        </xf:select1>
                                    </xhtml:span>
                                </xhtml:span>
                            </xhtml:li>


                            <!-- viewControlsActions on RHS for all tasks
                                 Contains spans for each adminTask and viewControl -->
                            <xhtml:li class="viewControlsActions">
                                <!-- viewControls for manageInformationModel -->
                                <xhtml:span
                                    class="{if ($adminTask='manageInformationModel') then '' else 'hidden'}">
                                    <!-- Controls that are only active when no specialty or model is selected -->
                                    <xhtml:span
                                        class="{if (xxf:instance('control-instance')/manageInformationModel/specialtyIRI ='' and xxf:instance('control-instance')/manageInformationModel/informationModelResource ='') then '' else 'hidden'}">
                                        <!-- Reload the shipped models for the specialty -->
                                        <xhtml:span class="viewControl">
                                            <xxf:variable name="icon"
                                                select="concat(xxf:instance('view-parameters-instance')/staticFileRoot,'/icons/','reload.png',xxf:instance('view-parameters-instance')/staticFileVersion)"/>
                                            <xf:trigger appearance="minimal">
                                                <xf:label>
                                                  <xhtml:img src="{$icon}" alt="" />
                                                </xf:label>
                                                <xf:hint>
                                                  <xf:output
                                                  ref="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/manageInformationModel/action[@type='reload']/@hint"
                                                  />
                                                </xf:hint>
                                                <!-- Show confirmation dialog.
                                                     Calls the action reload-shippedInformationModels in main-model if Confirm is pressed -->
                                                <xf:action ev:event="DOMActivate">
                                                  <xf:dispatch name="confirm-action"
                                                  target="pageNavigation-model">
                                                  <xxf:context name="action"
                                                  select="'reload-shippedInformationModels'"/>
                                                  </xf:dispatch>
                                                </xf:action>
                                            </xf:trigger>
                                        </xhtml:span>
                                    </xhtml:span>
                                    <!-- Controls that are only active when a specialty is selected, but no model -->
                                    <xhtml:span
                                        class="{if (xxf:instance('control-instance')/manageInformationModel/specialtyIRI !='' and xxf:instance('control-instance')/manageInformationModel/informationModelResource ='') then '' else 'hidden'}">
                                        <!-- Delete the specialty -->
                                        <xhtml:span class="viewControl">
                                            <xxf:variable name="icon"
                                                select="concat(xxf:instance('view-parameters-instance')/staticFileRoot,'/icons/','delete.png',xxf:instance('view-parameters-instance')/staticFileVersion)"/>
                                            <xf:trigger appearance="minimal">
                                                <xf:label>
                                                  <xhtml:img src="{$icon}" alt="" />
                                                </xf:label>
                                                <xf:hint>
                                                  <xf:output
                                                  ref="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/manageInformationModel/action[@type='delete']/@hint"
                                                  />
                                                </xf:hint>
                                                <!-- Show confirmation dialog.
                                             Calls the action delete-specialty in main-model if Confirm is pressed -->
                                                <xf:action ev:event="DOMActivate">
                                                  <xxf:variable name="confirmationMessage"
                                                  select="concat(xxf:instance('control-instance')/manageInformationModel/specialtyDisplayName,' (',xxf:instance('control-instance')/manageInformationModel/specialtyIRI,')')"/>
                                                  <xf:dispatch name="confirm-action"
                                                  target="pageNavigation-model">
                                                  <xxf:context name="action"
                                                  select="'deleteSpecialty'"/>
                                                  <xxf:context name="messageSet"
                                                  select="$confirmationMessage"/>
                                                  </xf:dispatch>
                                                </xf:action>
                                            </xf:trigger>
                                        </xhtml:span>
                                    </xhtml:span>
                                    <!-- Controls that are only active when languagePack is displayed -->
                                    <xhtml:span
                                        class="{if (xxf:instance('control-instance')/manageInformationModel/informationModelDisplayType = 'languagePack') then '' else 'hidden'}">
                                        <!-- Select language pack export format -->
                                        <xf:select1
                                            ref="xxf:instance('control-instance')/managedLanguagePack/exportFormat">
                                            <xf:label
                                                ref="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/managedLanguagePack/exportFormat/@displayName"/>
                                            <xf:itemset
                                                nodeset="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/managedLanguagePack/exportFormat/option">
                                                <xf:label ref="@displayName"/>
                                                <xf:value ref="@value"/>
                                            </xf:itemset>
                                            <!-- New export format selected -->
                                            <xf:action ev:event="xforms-value-changed">
                                                <xxf:variable name="option"
                                                  select="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/managedLanguagePack/exportFormat/option[@value=xxf:instance('control-instance')/managedLanguagePack/exportFormat]"/>
                                                <xf:setvalue
                                                  ref="xxf:instance('control-instance')/managedLanguagePack/transformationXSL"
                                                  value="$option/@transformationXSL"/>
                                            </xf:action>
                                        </xf:select1>
                                        <!-- Export language pack.-->
                                        <xhtml:span class="viewControl">
                                            <xxf:variable name="icon"
                                                select="concat(xxf:instance('view-parameters-instance')/staticFileRoot,'/icons/','export-lp.png',xxf:instance('view-parameters-instance')/staticFileVersion)"/>
                                            <!-- UI is blocked until action is done -->
                                            <xf:trigger appearance="minimal" xxf:modal="true">
                                                <xf:label>
                                                  <xhtml:img src="{$icon}" alt="" />
                                                </xf:label>
                                                <xf:hint>
                                                  <xf:output
                                                  ref="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/manageInformationModel/action[@type='export-lp']/@hint"
                                                  />
                                                </xf:hint>
                                                <!-- Export language pack -->
                                                <xf:action ev:event="DOMActivate">
                                                  <xf:dispatch name="export-languagePack"
                                                  target="main-model"/>
                                                </xf:action>
                                            </xf:trigger>
                                        </xhtml:span>
                                        <!-- Apply language pack - only if showing the language pack -->
                                        <xhtml:span
                                            class="{if (xxf:instance('control-instance')/manageInformationModel/showLanguagePack='true') then 'viewControl' else 'hidden'}">
                                            <xxf:variable name="icon"
                                                select="concat(xxf:instance('view-parameters-instance')/staticFileRoot,'/icons/','apply-lp.png',xxf:instance('view-parameters-instance')/staticFileVersion)"/>
                                            <!-- UI is blocked until action is done -->
                                            <xf:trigger appearance="minimal" xxf:modal="false">
                                                <xf:label>
                                                  <xhtml:img src="{$icon}" alt="" />
                                                </xf:label>
                                                <xf:hint>
                                                  <xf:output
                                                  ref="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/manageInformationModel/action[@type='apply-lp']/@hint"
                                                  />
                                                </xf:hint>
                                                <!-- Apply language pack -->
                                                <xf:action ev:event="DOMActivate">
                                                  <xf:dispatch name="apply-languagePack"
                                                  target="main-model"/>
                                                </xf:action>
                                            </xf:trigger>
                                        </xhtml:span>
                                        <!-- Save language pack, only if edited and showing the language pack -->
                                        <xhtml:span
                                            class="{if (xxf:instance('control-instance')/manageInformationModel/showLanguagePack='true' and xxf:instance('control-instance')/manageInformationModel/editStatus = 'edited') then 'viewControl' else 'hidden'}">
                                            <xxf:variable name="icon"
                                                select="concat(xxf:instance('view-parameters-instance')/staticFileRoot,'/icons/','save-lp.png',xxf:instance('view-parameters-instance')/staticFileVersion)"/>
                                            <!-- UI is blocked until action is done -->
                                            <xf:trigger appearance="minimal" xxf:modal="true">
                                                <xf:label>
                                                  <xhtml:img src="{$icon}" alt="" />
                                                </xf:label>
                                                <xf:hint>
                                                  <xf:output
                                                  ref="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/manageInformationModel/action[@type='save-lp']/@hint"
                                                  />
                                                </xf:hint>
                                                <!-- Save language pack -->
                                                <xf:action ev:event="DOMActivate">
                                                  <xf:dispatch name="save-languagePack"
                                                  target="main-model"/>
                                                </xf:action>
                                            </xf:trigger>
                                        </xhtml:span>
                                        <!-- Reset language pack - display only if not showing the language pack -->
                                        <xhtml:span
                                            class="{if (xxf:instance('control-instance')/manageInformationModel/showLanguagePack!='true') then 'viewControl' else 'hidden'}">
                                            <xxf:variable name="icon"
                                                select="concat(xxf:instance('view-parameters-instance')/staticFileRoot,'/icons/','reset.png',xxf:instance('view-parameters-instance')/staticFileVersion)"/>
                                            <!-- UI is blocked until action is done -->
                                            <xf:trigger appearance="minimal" xxf:modal="false">
                                                <xf:label>
                                                  <xhtml:img src="{$icon}" alt="" />
                                                </xf:label>
                                                <xf:hint>
                                                  <xf:output
                                                  ref="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/manageInformationModel/action[@type='show-lp']/@hint"
                                                  />
                                                </xf:hint>
                                                <!-- Reset language pack -->
                                                <xf:action ev:event="DOMActivate">
                                                  <!-- Clear the processExecution controls -->
                                                  <xf:dispatch
                                                  name="clear-processExecutionParameters"
                                                  target="process-model"/>
                                                  <!-- Show the langugae pack -->
                                                  <xf:setvalue
                                                  ref="xxf:instance('control-instance')/manageInformationModel/showLanguagePack"
                                                  value="true()"/>
                                                </xf:action>
                                            </xf:trigger>
                                        </xhtml:span>
                                    </xhtml:span>
                                    <!-- Controls that are only active when a specialty model is selected -->
                                    <xhtml:span
                                        class="{if (xxf:instance('control-instance')/manageInformationModel/informationModelResource !='') then '' else 'hidden'}">
                                        <!-- Select export extract.
                                             Only for ontology format-->
                                        <xhtml:span
                                            class="{if (xxf:instance('control-instance')/manageInformationModel/exportFormat='ontology') then '' else 'hidden'}">
                                            <xxf:variable name="exportExtractConfiguration"
                                                select="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/manageInformationModel/exportExtract"/>
                                            <xxf:variable name="compositionList"
                                                select="$exportExtractConfiguration/iso-13606:composition | xxf:instance('dictionary-instance')/iso-13606:folderCollection/iso-13606:folder[1]/iso-13606:composition"/>
                                            <xf:select1
                                                ref="xxf:instance('control-instance')/manageInformationModel/exportExtract">
                                                <xf:label
                                                  ref="$exportExtractConfiguration/@displayName"/>
                                                <xf:itemset nodeset="$compositionList">
                                                  <xf:label ref="@displayName"/>
                                                  <xf:value ref="@code"/>
                                                </xf:itemset>
                                                <!-- New export extract selected -->
                                                <xf:action ev:event="xforms-value-changed">
                                                  <!-- Nothing to do here  -->
                                                </xf:action>
                                            </xf:select1>
                                        </xhtml:span>
                                        <!-- Select export format -->
                                        <xf:select1
                                            ref="xxf:instance('control-instance')/manageInformationModel/exportFormat">
                                            <xf:label
                                                ref="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/manageInformationModel/exportFormat/@displayName"/>
                                            <xf:itemset
                                                nodeset="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/manageInformationModel/exportFormat/option">
                                                <xf:label ref="@displayName"/>
                                                <xf:value ref="@value"/>
                                            </xf:itemset>
                                            <!-- New export format selected -->
                                            <xf:action ev:event="xforms-value-changed">
                                                <!-- Nothing to do here  -->
                                            </xf:action>
                                        </xf:select1>
                                        <!-- Export Ontology -->
                                        <xhtml:span class="viewControl">
                                            <xxf:variable name="icon"
                                                select="concat(xxf:instance('view-parameters-instance')/staticFileRoot,'/icons/','export.png',xxf:instance('view-parameters-instance')/staticFileVersion)"/>
                                            <!-- UI is blocked until action is done -->
                                            <xf:trigger appearance="minimal" xxf:modal="true">
                                                <xf:label>
                                                  <xhtml:img src="{$icon}" alt="" />
                                                </xf:label>
                                                <xf:hint>
                                                  <xf:output
                                                  ref="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/manageInformationModel/action[@type='export']/@hint"
                                                  />
                                                </xf:hint>
                                                <!-- Call export-informationModel to return zip file to browser -->
                                                <xf:action ev:event="DOMActivate">
                                                  <xf:dispatch name="export-informationModel"
                                                  target="main-model">
                                                  <xxf:context name="exportExtract"
                                                  select="xxf:instance('control-instance')/manageInformationModel/exportExtract"/>
                                                  <xxf:context name="exportFormat"
                                                  select="xxf:instance('control-instance')/manageInformationModel/exportFormat"
                                                  />
                                                  </xf:dispatch>
                                                </xf:action>
                                            </xf:trigger>
                                        </xhtml:span>
                                        <!-- Print the HTML model view -->
                                        <xhtml:span
                                            class="{if (xxf:instance('control-instance')/manageInformationModel/staticDisplay='true' or xxf:instance('control-instance')/manageInformationModel/compositionIRI !='') then 'viewControl' else 'hidden'}">
                                            <xxf:variable name="icon"
                                                select="concat(xxf:instance('view-parameters-instance')/staticFileRoot,'/icons/','print.png',xxf:instance('view-parameters-instance')/staticFileVersion)"/>
                                            <!-- UI is blocked until action is done -->
                                            <xf:trigger appearance="minimal" xxf:modal="true">
                                                <xf:label>
                                                  <xhtml:img src="{$icon}" alt="" />
                                                </xf:label>
                                                <xf:hint>
                                                  <xf:output
                                                  ref="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/manageInformationModel/action[@type='print']/@hint"
                                                  />
                                                </xf:hint>
                                                <!-- Print the selected node in ISO-13606 bowser.
                                             Set the composition handle and the dictionary handle, then call the pipeline
                                             Use applicationStorageLocation in handles so that database location/password is not passed in URL -->
                                                <xf:action ev:event="DOMActivate">
                                                  <xxf:variable name="compositionIRI"
                                                  select="xxf:instance('control-instance')/manageInformationModel/compositionIRI"/>
                                                  <xxf:variable name="compositionId"
                                                  select="replace(substring($compositionIRI,2),':','-')"/>
                                                  <!-- Call submission to generate PDF for HTML -->
                                                  <!-- Set externalId for the composition  -->
                                                  <xf:dispatch name="set-externalId"
                                                  target="pageNavigation-model">
                                                  <xxf:context name="type" select="$compositionId"/>
                                                  <xxf:context name="externalId"
                                                  select="xxf:instance('view-parameters-instance')/externalId"
                                                  />
                                                  </xf:dispatch>
                                                  <xhtml:action>
                                                  <xf:dispatch name="print-html"
                                                  target="pageNavigation-model"/>
                                                  </xhtml:action>
                                                </xf:action>
                                            </xf:trigger>
                                        </xhtml:span>
                                    </xhtml:span>
                                </xhtml:span>
                                <!-- viewControls for manageMedia -->
                                <xhtml:span
                                    class="{if ($adminTask='manageMedia') then '' else 'hidden'}">
                                    <!-- Save the application media (only if they have been edited) -->
                                    <xhtml:span
                                        class="{if (xxf:instance('control-instance')/manageMedia/editStatus='edited') then 'viewControl' else 'hidden'}">
                                        <xxf:variable name="type" select="'save'"/>
                                        <xxf:variable name="label"
                                            select="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/manageMedia/saveLabel"/>
                                        <xxf:variable name="icon"
                                            select="concat(xxf:instance('view-parameters-instance')/staticFileRoot,'/icons/',$type,'.png?',xxf:instance('view-parameters-instance')/versionNumber/@version)"/>
                                        <xf:trigger appearance="minimal" xxf:modal="true">
                                            <xf:label>
                                                <xhtml:img src="{$icon}" alt="" />
                                            </xf:label>
                                            <xf:hint ref="$label"/>
                                            <xf:action ev:event="DOMActivate">
                                                <!-- Store application media -->
                                                <xf:dispatch name="save-storedMediaList"
                                                  target="main-model"/>
                                                <!-- Reset edit status -->
                                                <xf:setvalue
                                                  ref="xxf:instance('control-instance')/manageMedia/editStatus"
                                                  value="''"/>
                                            </xf:action>
                                        </xf:trigger>
                                    </xhtml:span>
                                    <!-- Reload the application media from shipped resources -->
                                    <xhtml:span class="viewControl">
                                        <xxf:variable name="type" select="'reset'"/>
                                        <xxf:variable name="label"
                                            select="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/manageMedia/reloadLabel"/>
                                        <xxf:variable name="icon"
                                            select="concat(xxf:instance('view-parameters-instance')/staticFileRoot,'/icons/',$type,'.png?',xxf:instance('view-parameters-instance')/versionNumber/@version)"/>
                                        <xf:trigger appearance="minimal" xxf:modal="true">
                                            <xf:label>
                                                <xhtml:img src="{$icon}" alt="" />
                                            </xf:label>
                                            <xf:hint ref="$label"/>
                                            <!-- Only reload after confirmation -->
                                            <xf:action ev:event="DOMActivate">
                                                <xf:dispatch name="confirm-action"
                                                  target="pageNavigation-model">
                                                  <xxf:context name="action"
                                                  select="'reload-shippedMedia'"/>
                                                </xf:dispatch>
                                            </xf:action>
                                        </xf:trigger>
                                    </xhtml:span>
                                </xhtml:span>
                                <!-- viewControls for manageImageMaps -->
                                <xhtml:span
                                    class="{if ($adminTask='manageImageMaps') then '' else 'hidden'}">
                                    <xxf:variable name="selectedEntryIRI"
                                        select="xxf:instance('control-instance')/manageImageMaps/entryIRI"/>
                                    <xxf:variable name="selectedEntryId"
                                        select="substring-after($selectedEntryIRI,'#ISO-13606:Entry:')"/>
                                    <xxf:variable name="imageMapFile"
                                        select="xxf:instance('imageMapFileList-instance')/imageMapFile[svg:svg/@id=$selectedEntryId]"/>
                                    <!-- Save the application image maps (only if they have been edited) -->
                                    <xhtml:span
                                        class="{if (xxf:instance('control-instance')/manageImageMaps/editStatus='edited') then 'viewControl' else 'hidden'}">
                                        <xxf:variable name="type" select="'save'"/>
                                        <xxf:variable name="label"
                                            select="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/manageImageMaps/saveLabel"/>
                                        <xxf:variable name="icon"
                                            select="concat(xxf:instance('view-parameters-instance')/staticFileRoot,'/icons/',$type,'.png?',xxf:instance('view-parameters-instance')/versionNumber/@version)"/>
                                        <xf:trigger appearance="minimal" xxf:modal="true">
                                            <xf:label>
                                                <xhtml:img src="{$icon}" alt="" />
                                            </xf:label>
                                            <xf:hint ref="$label"/>
                                            <xf:action ev:event="DOMActivate">
                                                <!-- Store specialty image maps.
                                                     Note that image maps are managed by specialty but stored for the application -->
                                                <xf:dispatch name="save-imageMapFileList"
                                                  target="application-model">
                                                  <xxf:context name="applicationId"
                                                  select="xxf:instance('control-instance')/managedApplication/applicationId"
                                                  />
                                                </xf:dispatch>
                                                <!-- Reset edit status -->
                                                <xf:setvalue
                                                  ref="xxf:instance('control-instance')/manageImageMaps/editStatus"
                                                  value="''"/>
                                            </xf:action>
                                        </xf:trigger>
                                    </xhtml:span>
                                    <!-- Reload the application image maps from shipped resources (only if they have not been editied)-->
                                    <xhtml:span
                                        class="{if (not(xxf:instance('control-instance')/manageImageMaps/editStatus='edited')) then 'viewControl' else 'hidden'}">
                                        <xxf:variable name="type" select="'reset'"/>
                                        <xxf:variable name="label"
                                            select="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/manageImageMaps/reloadShippedLabel"/>
                                        <xxf:variable name="icon"
                                            select="concat(xxf:instance('view-parameters-instance')/staticFileRoot,'/icons/',$type,'.png?',xxf:instance('view-parameters-instance')/versionNumber/@version)"/>
                                        <xf:trigger appearance="minimal" xxf:modal="true">
                                            <xf:label>
                                                <xhtml:img src="{$icon}" alt="" />
                                            </xf:label>
                                            <xf:hint ref="$label"/>
                                            <!-- Only reload after confirmation -->
                                            <xf:action ev:event="DOMActivate">
                                                <xf:dispatch name="confirm-action"
                                                  target="pageNavigation-model">
                                                  <xxf:context name="action"
                                                  select="'reload-shippedImageMaps'"/>
                                                </xf:dispatch>
                                            </xf:action>
                                        </xf:trigger>
                                    </xhtml:span>
                                    <!-- Reset the application image maps (only if they have been edited) -->
                                    <xhtml:span
                                        class="{if (xxf:instance('control-instance')/manageImageMaps/editStatus='edited') then 'viewControl' else 'hidden'}">
                                        <xxf:variable name="type" select="'reset'"/>
                                        <xxf:variable name="label"
                                            select="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/manageImageMaps/reloadLabel"/>
                                        <xxf:variable name="icon"
                                            select="concat(xxf:instance('view-parameters-instance')/staticFileRoot,'/icons/',$type,'.png?',xxf:instance('view-parameters-instance')/versionNumber/@version)"/>
                                        <xf:trigger appearance="minimal" xxf:modal="true">
                                            <xf:label>
                                                <xhtml:img src="{$icon}" alt="" />
                                            </xf:label>
                                            <xf:hint ref="$label"/>
                                            <xf:action ev:event="DOMActivate">
                                                <!-- Reset the image maps from the xmlstore -->
                                                <xf:dispatch name="resetSpecialty-manageImageMaps"
                                                  target="main-model"/>
                                            </xf:action>
                                        </xf:trigger>
                                    </xhtml:span>
                                    <!-- View button if a specific image map is selected -->
                                    <xhtml:span
                                        class="{if ($selectedEntryId!='' and exists($imageMapFile/svg:svg/*)) then 'viewControl' else 'hidden'}">
                                        <xxf:variable name="type" select="'view'"/>
                                        <xxf:variable name="label"
                                            select="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/manageImageMaps/viewButtonLabel"/>
                                        <xxf:variable name="icon"
                                            select="concat(xxf:instance('view-parameters-instance')/staticFileRoot,'/icons/',$type,'.png?',xxf:instance('view-parameters-instance')/versionNumber/@version)"/>
                                        <!-- View button -->
                                        <!-- UI is blocked until action is done -->
                                        <xf:trigger appearance="minimal" xxf:modal="true">
                                            <xf:label>
                                                <xhtml:img src="{$icon}" alt="" />
                                            </xf:label>
                                            <xf:hint ref="$label"/>
                                            <!-- View the selected image map -->
                                            <xf:action ev:event="DOMActivate">
                                                <xf:dispatch name="view-imageMap"
                                                  target="main-model">
                                                  <xxf:context name="entryId"
                                                  select="$selectedEntryId"/>
                                                </xf:dispatch>
                                            </xf:action>
                                        </xf:trigger>
                                    </xhtml:span>
                                </xhtml:span>
                            </xhtml:li>

                            <xhtml:li class="LayoutFooter">&#160;</xhtml:li>
                        </xhtml:ul>

                        <!-- Table headers when showing language packs -->
                        <xhtml:table
                            class="{if (xxf:instance('control-instance')/manageInformationModel/informationModelDisplayType='languagePack' and xxf:instance('control-instance')/manageInformationModel/showLanguagePack='true') then 'editList' else 'hidden'}">
                            <xhtml:tbody>
                                <!-- Sorting and filtering -->
                                <xhtml:tr>
                                    <xhtml:td class="header">
                                        <xf:output
                                            ref="concat(xxf:instance('control-instance')/manageInformationModel/baseLanguage/@displayName,'  ')"/>
                                        <!-- sort -->
                                        <xf:select1
                                            ref="xxf:instance('control-instance')/manageInformationModel/termSortOrder">
                                            <xf:label
                                                ref="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/managedLanguagePack/sortOrder/@displayName"/>
                                            <xf:itemset
                                                nodeset="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/managedLanguagePack/sortOrder/option">
                                                <xf:label ref="@displayName"/>
                                                <xf:value ref="@value"/>
                                            </xf:itemset>
                                            <!-- New sort order selected -->
                                            <xf:action ev:event="xforms-value-changed">
                                                <!-- Nothing to do here  -->
                                            </xf:action>
                                        </xf:select1>
                                        <!-- filter -->
                                        <xf:select1
                                            ref="xxf:instance('control-instance')/manageInformationModel/termFilter">
                                            <xf:label
                                                ref="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/manageInformationModel/filter/@displayName"/>
                                            <xf:itemset
                                                nodeset="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/manageInformationModel/filter/option">
                                                <xf:label ref="@displayName"/>
                                                <xf:value ref="@value"/>
                                            </xf:itemset>
                                            <!-- New filter selected - set the default filterText -->
                                            <xf:action ev:event="xforms-value-changed">
                                                <xxf:variable name="termFilter"
                                                  select="xxf:instance('control-instance')/manageInformationModel/termFilter"/>
                                                <xxf:variable name="termFilterCharacter"
                                                  select="substring(xxf:instance('control-instance')/manageInformationModel/termFilterCharacterSet,1,1)"/>
                                                <xf:setvalue
                                                  ref="xxf:instance('control-instance')/manageInformationModel/termFilterText"
                                                  value="if ($termFilter=('','compositionFilter')) then '' else if ($termFilter='letterPicker') then $termFilterCharacter else ."
                                                />
                                            </xf:action>
                                        </xf:select1>
                                    </xhtml:td>
                                    <xhtml:td></xhtml:td>
                                    <xhtml:td class="header">
                                        <xf:output
                                            ref="xxf:instance('control-instance')/manageInformationModel/language/@displayName"
                                        />
                                    </xhtml:td>
                                </xhtml:tr>

                                <!-- Filter settings -->
                                <xhtml:tr>
                                    <xhtml:td class="header">
                                        <!-- User defined filter -->
                                        <xf:input
                                            class="{if (xxf:instance('control-instance')/manageInformationModel/termFilter='userFilter') then '' else 'hidden'}"
                                            ref="xxf:instance('control-instance')/manageInformationModel/termFilterText"
                                            incremental="true"/>
                                        <!-- Composition filter compositionList -->
                                        <xf:group
                                            ref="xxf:instance('control-instance')/manageInformationModel[termFilter='compositionFilter']"
                                            class="{if (xxf:instance('control-instance')/manageInformationModel/termFilter='compositionFilter') then '' else 'hidden'}">
                                            <xxf:variable name="compositionList"
                                                select="xxf:instance('dictionary-instance')/iso-13606:folderCollection/iso-13606:folder[1]/iso-13606:composition"/>
                                            <xf:select1
                                                ref="xxf:instance('control-instance')/manageInformationModel/termFilterComposition">
                                                <xf:label
                                                  ref="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/manageInformationModel/compositionLabel"/>
                                                <xf:itemset nodeset="$compositionList">
                                                  <xf:label ref="@displayName"/>
                                                  <xf:value ref="@code"/>
                                                </xf:itemset>
                                                <!-- New composition filter selected -->
                                                <xf:action ev:event="xforms-value-changed">
                                                  <xf:dispatch name="get-compositionTerms"
                                                  target="main-model">
                                                  <xxf:context name="compositionIRI"
                                                  select="xxf:instance('control-instance')/manageInformationModel/termFilterComposition"
                                                  />
                                                  </xf:dispatch>
                                                </xf:action>
                                            </xf:select1>
                                        </xf:group>
                                        <!-- letterPicker filter -->
                                        <xf:group
                                            ref="xxf:instance('control-instance')/manageInformationModel[termFilter='letterPicker']"
                                            class="{if (xxf:instance('control-instance')/manageInformationModel/termFilter='letterPicker') then '' else 'hidden'}">
                                            <xxf:variable name="initialCharacters"
                                                select="tokenize(xxf:instance('control-instance')/manageInformationModel/termFilterCharacterSet,xxf:instance('view-parameters-instance')/resultSeparator)"/>
                                            <xxf:variable name="sortedInitialCharacters"
                                                select="xxf:sort($initialCharacters,.,'text', 'ascending')"/>
                                            <xf:repeat nodeset="$sortedInitialCharacters">
                                                <xxf:variable name="initialCharacter" select="."/>
                                                <xf:trigger
                                                  class="{if (xxf:instance('control-instance')/manageInformationModel/termFilterText = $initialCharacter) then 'selected' else ''}">
                                                  <xf:label ref="$initialCharacter"/>
                                                  <xf:action ev:event="DOMActivate">
                                                  <xf:setvalue
                                                  ref="xxf:instance('control-instance')/manageInformationModel/termFilterText"
                                                  value="$initialCharacter"/>
                                                  </xf:action>
                                                </xf:trigger>
                                            </xf:repeat>
                                        </xf:group>
                                    </xhtml:td>
                                </xhtml:tr>
                            </xhtml:tbody>
                        </xhtml:table>
                    </xhtml:div>


                    <!-- ===Task to manage the letter templates for a specialty model === 
                            importLetterTemplates
                            associateLetterTemplates
                         
                            Controlled in manageLetterTemplates
                         ===================================================== -->
                    <xhtml:ul
                        class="{if ($adminTask=('importLetterTemplates','associateLetterTemplates')) then 'viewControlsHeader' else 'hidden'}">

                        <xxf:variable name="letterTemplateId"
                            select="xxf:instance('control-instance')/manageLetterTemplates/letterTemplateId"/>
                        <xxf:variable name="letterTemplateList"
                            select="xxf:instance('storedLetterTemplateList-instance')/letterTemplate"/>
                        <xxf:variable name="letterTemplate"
                            select="$letterTemplateList[@value=$letterTemplateId]"/>

                        <xxf:variable name="applicationIRI"
                            select="xxf:instance('control-instance')/managedApplication/applicationIRI"/>
                        <xxf:variable name="specialtyIRI"
                            select="xxf:instance('control-instance')/manageLetterTemplates/specialtyIRI"/>

                        <xhtml:li
                            class="{if ($adminTask='associateLetterTemplates') then 'viewControlsDisplay' else 'hidden'}">
                            <!-- Select the specialty to manage -->
                            <xxf:variable name="specialtyList"
                                select="xxf:instance('specialtyList-instance')/iso-13606:Folder"/>
                            <xf:select1
                                ref="xxf:instance('control-instance')/manageLetterTemplates/specialtyIRI">
                                <xf:label
                                    ref="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/manageLetterTemplates/specialtyLabel"/>
                                <xf:itemset nodeset="$specialtyList">
                                    <xf:label ref="@displayName"/>
                                    <xf:value ref="@id"/>
                                </xf:itemset>
                                <!-- New specialty selected -->
                                <xf:action ev:event="xforms-value-changed">
                                    <!-- Reset the letter templates  -->
                                    <xf:dispatch name="reset-manageLetterTemplates"
                                        target="main-model"/>
                                </xf:action>
                            </xf:select1>
                            <!-- Select the letter template to manage. -->
                            <xf:select1
                                ref="xxf:instance('control-instance')/manageLetterTemplates/letterTemplateId">
                                <xf:label
                                    ref="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/manageLetterTemplates/templateLabel"/>
                                <xf:itemset nodeset="$letterTemplateList">
                                    <xf:label ref="@displayName"/>
                                    <xf:value ref="@value"/>
                                </xf:itemset>
                                <!-- New template selected -->
                                <xf:action ev:event="xforms-value-changed">
                                    <!-- Load the full letter template  -->
                                    <xf:dispatch name="reset-letterTemplate" target="main-model">
                                        <xxf:context name="letterTemplateId"
                                            select="xxf:instance('control-instance')/manageLetterTemplates/letterTemplateId"
                                        />
                                    </xf:dispatch>
                                </xf:action>
                            </xf:select1>
                        </xhtml:li>

                        <xhtml:li class="viewControlsActions">
                            <!-- New letter template -->
                            <xhtml:span
                                class="{if ($adminTask='importLetterTemplates') then 'viewControl' else 'hidden'}">
                                <xxf:variable name="type" select="'add'"/>
                                <xxf:variable name="label"
                                    select="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/manageLetterTemplates/newTemplateLabel"/>
                                <xxf:variable name="icon"
                                    select="concat(xxf:instance('view-parameters-instance')/staticFileRoot,'/icons/',$type,'.png?',xxf:instance('view-parameters-instance')/versionNumber/@version)"/>
                                <!-- Add button -->
                                <xf:trigger appearance="minimal">
                                    <xf:label>
                                        <xhtml:img src="{$icon}" alt="" />
                                    </xf:label>
                                    <xf:hint ref="$label"/>
                                    <!-- Add new letter template -->
                                    <xf:action ev:event="DOMActivate">
                                        <xf:dispatch name="add-letterTemplate"
                                            target="application-model"/>
                                    </xf:action>
                                </xf:trigger>
                            </xhtml:span>
                            <!-- New letter template association -->
                            <xhtml:span
                                class="{if ($adminTask='associateLetterTemplates') then 'viewControl' else 'hidden'}">
                                <xxf:variable name="type" select="'attach'"/>
                                <xxf:variable name="label"
                                    select="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/manageLetterTemplates/newCompositionLabel"/>
                                <xxf:variable name="icon"
                                    select="concat(xxf:instance('view-parameters-instance')/staticFileRoot,'/icons/',$type,'.png?',xxf:instance('view-parameters-instance')/versionNumber/@version)"/>
                                <!-- Attach button -->
                                <xf:trigger appearance="minimal">
                                    <xf:label>
                                        <xhtml:img src="{$icon}" alt="" />
                                    </xf:label>
                                    <xf:hint ref="$label"/>
                                    <!-- Add new composition association -->
                                    <xf:action ev:event="DOMActivate">
                                        <xf:dispatch name="add-letterTemplateComposition"
                                            target="application-model">
                                            <xxf:context name="letterTemplate"
                                                select="$letterTemplate"/>
                                            <xxf:context name="applicationIRI"
                                                select="$applicationIRI"/>
                                            <xxf:context name="specialtyIRI" select="$specialtyIRI"
                                            />
                                        </xf:dispatch>
                                    </xf:action>
                                </xf:trigger>
                            </xhtml:span>
                            <!-- Delete letter template -->
                            <xhtml:span
                                class="{if ($adminTask='associateLetterTemplates' and exists($letterTemplate)) then 'viewControl' else 'hidden'}">
                                <xxf:variable name="type" select="'delete'"/>
                                <xxf:variable name="label"
                                    select="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/manageLetterTemplates/deleteLetterLabel"/>
                                <xxf:variable name="icon"
                                    select="concat(xxf:instance('view-parameters-instance')/staticFileRoot,'/icons/',$type,'.png?',xxf:instance('view-parameters-instance')/versionNumber/@version)"/>
                                <!-- Delete button -->
                                <xf:trigger appearance="minimal">
                                    <xf:label>
                                        <xhtml:img src="{$icon}" alt="" />
                                    </xf:label>
                                    <xf:hint ref="$label"/>
                                    <!-- Delete letter template
                                         Must be confirmed in dialog -->
                                    <xf:action ev:event="DOMActivate">
                                        <xf:dispatch name="confirm-action"
                                            target="pageNavigation-model">
                                            <xxf:context name="action"
                                                select="'deleteLetterTemplate'"/>
                                            <xxf:context name="messageSet"
                                                select="($letterTemplate/@displayName)"/>
                                        </xf:dispatch>
                                    </xf:action>
                                </xf:trigger>
                            </xhtml:span>
                        </xhtml:li>

                        <xhtml:li class="LayoutFooter">&#160;</xhtml:li>
                    </xhtml:ul>


                    <!-- ===Purge patient records - get list, then purge from xmlstore === 
                         ================================================================== -->
                    <xhtml:ul
                        class="{if ($adminTask='purgeRecords') then 'viewControlsHeader' else 'hidden'}">
                        <!-- Show purge instructions -->
                        <xhtml:li class="viewControlsDisplay">
                            <xf:output
                                ref="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/purgeRecords/instructions"
                            />
                        </xhtml:li>
                        <xhtml:li class="viewControlsActions">
                            <!-- Get list of records to purge -->
                            <xhtml:span class="viewControl">
                                <xxf:variable name="type" select="'search'"/>
                                <xxf:variable name="label"
                                    select="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/purgeRecords/searchLabel"/>
                                <xxf:variable name="icon"
                                    select="concat(xxf:instance('view-parameters-instance')/staticFileRoot,'/icons/',$type,'.png?',xxf:instance('view-parameters-instance')/versionNumber/@version)"/>
                                <!-- UI is blocked until action is done -->
                                <xf:trigger appearance="minimal" xxf:modal="true">
                                    <xf:label>
                                        <xhtml:img src="{$icon}" alt="" />
                                    </xf:label>
                                    <xf:hint ref="$label"/>
                                    <!-- Get list of records to purge -->
                                    <xf:action ev:event="DOMActivate">
                                        <xf:dispatch name="getPatientPurgeList" target="main-model"
                                        />
                                    </xf:action>
                                </xf:trigger>
                            </xhtml:span>
                            <!-- Summary of records to purge -->
                            <xf:output
                                ref="concat(xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/purgeRecords/purgeListLabel/@prefix,count(xxf:instance('purgePatientList-instance')/patient),xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/purgeRecords/purgeListLabel/@suffix)"/>
                            <!-- Purge the records -->
                            <xhtml:span class="viewControl">
                                <xxf:variable name="type" select="'delete'"/>
                                <xxf:variable name="label"
                                    select="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/purgeRecords/purgeLabel"/>
                                <xxf:variable name="icon"
                                    select="concat(xxf:instance('view-parameters-instance')/staticFileRoot,'/icons/',$type,'.png?',xxf:instance('view-parameters-instance')/versionNumber/@version)"/>
                                <xf:trigger appearance="minimal">
                                    <xf:label>
                                        <xhtml:img src="{$icon}" alt="" />
                                    </xf:label>
                                    <xf:hint ref="$label"/>
                                    <!-- Purge records -->
                                    <xf:action ev:event="DOMActivate">
                                        <xf:dispatch name="confirm-action"
                                            target="pageNavigation-model">
                                            <xxf:context name="action" select="'purgePatients'"/>
                                        </xf:dispatch>
                                    </xf:action>
                                </xf:trigger>
                            </xhtml:span>
                        </xhtml:li>
                        <xhtml:li class="LayoutFooter">&#160;</xhtml:li>
                    </xhtml:ul>


                    <!-- === Manage system parameters - edit and save system-parameters === 
                         Shares comtrols with the system parameters dialog
                         ================================================================= -->
                    <xhtml:div
                        class="{if ($adminTask='manageSystemParameters') then '' else 'hidden'}">
                        <!-- Manage system parameters.
                             Note that xxi:omit-xml-base is required, otherwise URLs do not resolve correctly in the xf:load element -->
                        <xi:include href="cityEHRManageSystemParametersControls.xhtml"
                            xxi:omit-xml-base="true"/>
                    </xhtml:div>


                    <!-- === Manage application parameters - show information about the currently installed applications 
                             and edit the application configuration
                         ================================================================= -->
                    <xhtml:div
                        class="{if ($adminTask='manageApplicationParameters') then '' else 'hidden'}">
                        <xhtml:ul class="viewControlsHeader">

                            <xhtml:li class="viewControlsDisplay">
                                <!-- Select the application - only if not editing the parameters -->
                                <xhtml:span
                                    class="{if (xxf:instance('control-instance')/managedParameters/edit='false') then '' else 'hidden'}">
                                    <xxf:variable name="applicationList"
                                        select="xxf:instance('applicationList-instance')/iso-13606:EHR_Extract"/>
                                    <xf:select1
                                        ref="xxf:instance('control-instance')/manageApplicationParameters/applicationIRI">
                                        <xf:label
                                            ref="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/manageApplicationParameters/applicationLabel"/>
                                        <xf:itemset nodeset="$applicationList">
                                            <xf:label ref="@displayName"/>
                                            <xf:value ref="@id"/>
                                        </xf:itemset>
                                        <xf:action ev:event="xforms-value-changed">
                                            <!-- Set the manage application parameters -->
                                            <xf:dispatch name="set-manageApplicationParameters"
                                                target="main-model"/>
                                        </xf:action>
                                    </xf:select1>
                                </xhtml:span>
                                <!-- Controls only shown if editing the parameters -->
                                <xhtml:span
                                    class="{if (xxf:instance('control-instance')/managedParameters/edit='true') then '' else 'hidden'}">
                                    <!-- Select the specialty -->
                                    <xf:select1
                                        ref="xxf:instance('control-instance')/manageApplicationParameters/specialtyIRI">
                                        <xf:label
                                            ref="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/manageApplicationParameters/specialtyLabel"/>
                                        <xf:itemset
                                            nodeset="xxf:instance('specialtyList-instance')/iso-13606:Folder">
                                            <xf:label ref="@displayName"/>
                                            <xf:value ref="@id"/>
                                        </xf:itemset>
                                        <!-- Load dictionary for the selected specialty -->
                                        <xf:action ev:event="xforms-value-changed">
                                            <xf:dispatch name="load-dictionary"
                                                target="dictionary-model">
                                                <xxf:context name="specialtyIRI"
                                                  select="xxf:instance('control-instance')/manageApplicationParameters/specialtyIRI"
                                                />
                                            </xf:dispatch>
                                        </xf:action>
                                    </xf:select1>
                                </xhtml:span>
                            </xhtml:li>

                            <!-- Controls to view application parameters XML, edit/reset parameters, save edited parameters -->
                            <xhtml:li class="viewControlsActions">
                                <xxf:variable name="manageApplicationParameters"
                                    select="xxf:instance('control-instance')/manageApplicationParameters"/>
                                <!-- Show instance XML for debugging.
                                 The instances are listed in view-parameters.
                                 Only show these options when in debug mode -->
                                <xhtml:span
                                    class="{if (xxf:instance('session-parameters-instance')/debug) then 'viewControl' else 'hidden'}">
                                    <!-- Select the instance for debugging -->
                                    <xf:select1 ref="$manageApplicationParameters/debugInstance">
                                        <xf:label
                                            ref="xxf:instance('view-parameters-instance')/debuggingInformation/debugInstance/@displayName"/>
                                        <xf:itemset
                                            nodeset="xxf:instance('view-parameters-instance')/debuggingInformation/debugInstance/option">
                                            <xf:label ref="./@displayName"/>
                                            <xf:value ref="./@value"/>
                                        </xf:itemset>
                                        <xf:action ev:event="xforms-value-changed">
                                            <!-- Not doing anything here - wait until user presses the XML button -->
                                        </xf:action>
                                    </xf:select1>
                                    <!-- Button to show debugging instance -->
                                    <xxf:variable name="type" select="'xml'"/>
                                    <xxf:variable name="label"
                                        select="xxf:instance('view-parameters-instance')/debuggingInformation/@displayName"/>
                                    <xxf:variable name="icon"
                                        select="concat(xxf:instance('view-parameters-instance')/staticFileRoot,'/icons/',$type,'.png?',xxf:instance('view-parameters-instance')/versionNumber/@version)"/>
                                    <xf:trigger appearance="minimal" xxf:modal="true">
                                        <xf:label>
                                            <xhtml:img src="{$icon}" alt="" />
                                        </xf:label>
                                        <xf:hint ref="$label"/>
                                        <xf:action ev:event="DOMActivate">
                                            <!-- Display the degug instance -->
                                            <xxf:variable name="debugInstance"
                                                select="$manageApplicationParameters/debugInstance"/>
                                            <xf:dispatch name="display-formatted-xml"
                                                target="pageNavigation-model">
                                                <xxf:context name="title" select="$debugInstance"/>
                                                <xxf:context name="displayXML"
                                                  select="xxf:instance($debugInstance)"/>
                                            </xf:dispatch>
                                        </xf:action>
                                    </xf:trigger>
                                </xhtml:span>
                                <!-- Reset the application configuration (only if it has been edited) -->
                                <xhtml:span
                                    class="{if (xxf:instance('control-instance')/managedParameters/edit='true' and xxf:instance('parametersControl-instance')/status='edited') then 'viewControl' else 'hidden'}">
                                    <xxf:variable name="type" select="'reset'"/>
                                    <xxf:variable name="label"
                                        select="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/manageApplicationParameters/resetLabel"/>
                                    <xxf:variable name="icon"
                                        select="concat(xxf:instance('view-parameters-instance')/staticFileRoot,'/icons/',$type,'.png?',xxf:instance('view-parameters-instance')/versionNumber/@version)"/>
                                    <xf:trigger appearance="minimal" xxf:modal="true">
                                        <xf:label>
                                            <xhtml:img src="{$icon}" alt="" />
                                        </xf:label>
                                        <xf:hint ref="$label"/>
                                        <xf:action ev:event="DOMActivate">
                                            <!-- Set the manage application parameters -->
                                            <xf:dispatch name="set-manageApplicationParameters"
                                                target="main-model"/>
                                        </xf:action>
                                    </xf:trigger>
                                </xhtml:span>
                                <!-- Save the application parameters (only if they been edited) -->
                                <xhtml:span
                                    class="{if (xxf:instance('control-instance')/managedParameters/edit='true' and xxf:instance('parametersControl-instance')/status='edited') then 'viewControl' else 'hidden'}">
                                    <xxf:variable name="type" select="'save'"/>
                                    <xxf:variable name="label"
                                        select="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/manageApplicationParameters/saveLabel"/>
                                    <xxf:variable name="icon"
                                        select="concat(xxf:instance('view-parameters-instance')/staticFileRoot,'/icons/',$type,'.png?',xxf:instance('view-parameters-instance')/versionNumber/@version)"/>
                                    <xf:trigger appearance="minimal" xxf:modal="true">
                                        <xf:label>
                                            <xhtml:img src="{$icon}" alt="" />
                                        </xf:label>
                                        <xf:hint ref="$label"/>
                                        <xf:action ev:event="DOMActivate">
                                            <!-- Store application parameters - version must be blank for this to work.
                                             Note that parameters can only be edited for the managedApplication -->
                                            <xf:setvalue
                                                ref="xxf:instance('managed-parameters-instance')/@version"
                                                value="''"/>
                                            <!-- Save the application parameters (clears images before saving) -->
                                            <xf:dispatch name="save-application-parameters"
                                                target="configurationManagement-model">
                                                <xxf:context name="applicationId"
                                                  select="xxf:instance('control-instance')/managedApplication/applicationId"/>
                                                <xxf:context name="parameters-instance"
                                                  select="xxf:instance('managed-parameters-instance')"/>
                                                <xxf:context name="status"
                                                  select="xxf:instance('control-instance')/status"/>
                                            </xf:dispatch>
                                            <!-- Set the manage application parameters.
                                             This sets the edit parameter to 'false' so that the ueser needs to reload parameters to edit again.
                                             Which is needed because save-application-parameters changes some data, including clearing the application images -->
                                            <xf:dispatch name="set-manageApplicationParameters"
                                                target="main-model"/>
                                        </xf:action>
                                    </xf:trigger>
                                </xhtml:span>
                                <!-- Reload the shipped resources for the application
                                     Only if the current appliation is selected -->
                                <xhtml:span
                                    class="{if (xxf:instance('control-instance')/manageApplicationParameters/applicationIRI = xxf:instance('control-instance')/managedApplication/applicationIRI) then 'viewControl' else 'hidden'}">
                                    <xxf:variable name="icon"
                                        select="concat(xxf:instance('view-parameters-instance')/staticFileRoot,'/icons/','reload.png',xxf:instance('view-parameters-instance')/staticFileVersion)"/>
                                    <xf:trigger appearance="minimal">
                                        <xf:label>
                                            <xhtml:img src="{$icon}" alt="" />
                                        </xf:label>
                                        <xf:hint>
                                            <xf:output
                                                ref="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/manageInformationModel/action[@type='reloadResources']/@hint"
                                            />
                                        </xf:hint>
                                        <!-- Show confirmation dialog.
                                             Calls the action reload-shippedResources in main-model if Confirm is pressed -->
                                        <xf:action ev:event="DOMActivate">
                                            <xf:dispatch name="confirm-action"
                                                target="pageNavigation-model">
                                                <xxf:context name="action"
                                                  select="'reload-shippedResources'"/>
                                            </xf:dispatch>
                                        </xf:action>
                                    </xf:trigger>
                                </xhtml:span>
                            </xhtml:li>

                            <xhtml:li class="LayoutFooter">&#160;</xhtml:li>
                        </xhtml:ul>
                    </xhtml:div>


                    <!-- === Manage parameters language packs  =========================== 
                         manageSystemParameters
                         manageApplicationParameters
                         ================================================================= -->

                    <xhtml:div
                        class="{if ($adminTask=('manageSystemParameters','manageApplicationParameters')) then '' else 'hidden'}">

                        <xhtml:ul class="viewControlsHeader">
                            <!-- Debugging
                            <xf:output ref="xxf:instance('control-instance')/managedParameters/editType"/>
                            -->

                            <!-- Display the base language and select language.
                                 Select the top level element to edit.
                                 Only if editing parameters or languagePack (so editType is set) -->
                            <xhtml:li
                                class="{if (xxf:instance('control-instance')/managedParameters/editType != '') then 'viewControlsDisplay' else 'hidden'}">
                                <!-- Select the top level element to edit -->
                                <xf:select1
                                    ref="xxf:instance('parametersControl-instance')/editContext">
                                    <xf:label
                                        ref="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/managedParameters/selectContextLabel"/>
                                    <xf:itemset
                                        nodeset="xxf:instance('managed-parameters-instance')/*">
                                        <xf:label ref="@cityEHR:displayName"/>
                                        <xf:value ref="name()"/>
                                    </xf:itemset>
                                </xf:select1>
                                <!-- Display the base language -->
                                <xf:output class="viewControl"
                                    ref="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/managedParameters/applicationlLanguageLabel"/>
                                <xf:output class="label"
                                    ref="concat(xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/managedParameters/baseLanguageLabel,
                                xxf:instance('control-instance')/managedParameters/baseLanguage/@code,' - ',xxf:instance('control-instance')/managedParameters/baseLanguage/@displayName,' / ')"/>
                                <!-- List of languages supported by this application -->
                                <xxf:variable name="supportedLanguageList"
                                    select="xxf:instance('application-parameters-instance')/languagePacks/language"/>
                                <!-- Select the language for the language packs -->
                                <xf:select1
                                    ref="xxf:instance('control-instance')/managedParameters/language/@code">
                                    <xf:label
                                        ref="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/managedParameters/selectLanguageLabel"/>
                                    <xf:itemset nodeset="$supportedLanguageList">
                                        <xf:label
                                            ref="concat(lower-case(./@code),' - ',./@displayName)"/>
                                        <xf:value ref="lower-case(./@code)"/>
                                    </xf:itemset>
                                    <!-- Load the language pack But not if baseLanguage is set. -->
                                    <xf:action ev:event="xforms-value-changed">
                                        <!-- Set the displayName -->
                                        <xf:setvalue
                                            ref="xxf:instance('control-instance')/managedParameters/language/@displayName"
                                            value="$supportedLanguageList[lower-case(@code)=xxf:instance('control-instance')/managedParameters/language/@code]/@displayName"/>
                                        <!-- Not baseLanguage - load the language pack and set the editType to 'languagePack'  -->
                                        <xf:action
                                            if="not(xxf:instance('control-instance')/managedParameters/language/@code = xxf:instance('control-instance')/managedParameters/baseLanguage/@code)">
                                            <xf:dispatch name="load-parametersLanguagePack"
                                                target="main-model">
                                                <xxf:context name="adminTask" select="$adminTask"/>
                                            </xf:dispatch>
                                            <xf:setvalue
                                                ref="xxf:instance('control-instance')/managedParameters/editType"
                                                value="'languagePack'"/>
                                        </xf:action>
                                        <!-- baseLanguage - set the editType to 'parameters' -->
                                        <xf:action
                                            if="xxf:instance('control-instance')/managedParameters/language/@code = xxf:instance('control-instance')/managedParameters/baseLanguage/@code">
                                            <xf:setvalue
                                                ref="xxf:instance('control-instance')/managedParameters/editType"
                                                value="'parameters'"/>
                                        </xf:action>
                                    </xf:action>
                                </xf:select1>
                            </xhtml:li>

                            <!-- Controls that are only active when languagePack is being edited -->
                            <xhtml:li
                                class="{if (xxf:instance('control-instance')/managedParameters/editType = 'languagePack') then 'viewControlsActions' else 'hidden'}">
                                <!-- Select language pack.export format -->
                                <xhtml:span class="viewControl">
                                    <xf:select1
                                        ref="xxf:instance('control-instance')/managedLanguagePack/exportFormat">
                                        <xf:label
                                            ref="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/managedLanguagePack/exportFormat/@displayName"/>
                                        <xf:itemset
                                            nodeset="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/managedLanguagePack/exportFormat/option">
                                            <xf:label ref="@displayName"/>
                                            <xf:value ref="@value"/>
                                        </xf:itemset>
                                        <!-- New export format selected -->
                                        <xf:action ev:event="xforms-value-changed">
                                            <xxf:variable name="option"
                                                select="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/managedLanguagePack/exportFormat/option[@value=xxf:instance('control-instance')/managedLanguagePack/exportFormat]"/>
                                            <xf:setvalue
                                                ref="xxf:instance('control-instance')/managedLanguagePack/transformationXSL"
                                                value="$option/@transformationXSL"/>
                                        </xf:action>
                                    </xf:select1>
                                </xhtml:span>
                                <!-- Export language pack.-->
                                <xhtml:span class="viewControl">
                                    <xxf:variable name="icon"
                                        select="concat(xxf:instance('view-parameters-instance')/staticFileRoot,'/icons/','export-lp.png',xxf:instance('view-parameters-instance')/staticFileVersion)"/>
                                    <!-- UI is blocked until action is done -->
                                    <xf:trigger appearance="minimal" xxf:modal="true">
                                        <xf:label>
                                            <xhtml:img src="{$icon}" alt="" />
                                        </xf:label>
                                        <xf:hint>
                                            <xf:output
                                                ref="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/managedParameters/action[@type='export-lp']/@hint"
                                            />
                                        </xf:hint>
                                        <!-- Export language pack -->
                                        <xf:action ev:event="DOMActivate">
                                            <xf:dispatch name="export-parametersLanguagePack"
                                                target="main-model"/>
                                        </xf:action>
                                    </xf:trigger>
                                </xhtml:span>
                                <!-- Apply language pack -->
                                <xhtml:span class="viewControl">
                                    <xxf:variable name="icon"
                                        select="concat(xxf:instance('view-parameters-instance')/staticFileRoot,'/icons/','apply-lp.png',xxf:instance('view-parameters-instance')/staticFileVersion)"/>
                                    <!-- UI is blocked until action is done -->
                                    <xf:trigger appearance="minimal" xxf:modal="false">
                                        <xf:label>
                                            <xhtml:img src="{$icon}" alt="" />
                                        </xf:label>
                                        <xf:hint>
                                            <xf:output
                                                ref="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/managedParameters/action[@type='apply-lp']/@hint"
                                            />
                                        </xf:hint>
                                        <!-- Apply language pack -->
                                        <xf:action ev:event="DOMActivate">
                                            <xf:dispatch name="apply-parametersLanguagePack"
                                                target="main-model">
                                                <xxf:context name="adminTask"
                                                  select="xxf:instance('control-instance')/adminTask/adminTask"
                                                />
                                            </xf:dispatch>
                                        </xf:action>
                                    </xf:trigger>
                                </xhtml:span>
                                <!-- Save language pack, only if edited -->
                                <xhtml:span
                                    class="{if (xxf:instance('control-instance')/managedParameters/editStatus = 'edited') then 'viewControl' else 'hidden'}">
                                    <xxf:variable name="icon"
                                        select="concat(xxf:instance('view-parameters-instance')/staticFileRoot,'/icons/','save-lp.png',xxf:instance('view-parameters-instance')/staticFileVersion)"/>
                                    <!-- UI is blocked until action is done -->
                                    <xf:trigger appearance="minimal" xxf:modal="true">
                                        <xf:label>
                                            <xhtml:img src="{$icon}" alt="" />
                                        </xf:label>
                                        <xf:hint>
                                            <xf:output
                                                ref="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/managedParameters/action[@type='save-lp']/@hint"
                                            />
                                        </xf:hint>
                                        <!-- Save language pack -->
                                        <xf:action ev:event="DOMActivate">
                                            <xf:dispatch name="save-parametersLanguagePack"
                                                target="main-model">
                                                <xxf:context name="adminTask"
                                                  select="xxf:instance('control-instance')/adminTask/adminTask"
                                                />
                                            </xf:dispatch>
                                        </xf:action>
                                    </xf:trigger>
                                </xhtml:span>
                                <!-- Reset (i.e. load) language pack, only if edited -->
                                <xhtml:span
                                    class="{if (xxf:instance('control-instance')/managedParameters/editStatus = 'edited') then 'viewControl' else 'hidden'}">
                                    <xxf:variable name="icon"
                                        select="concat(xxf:instance('view-parameters-instance')/staticFileRoot,'/icons/','reset.png',xxf:instance('view-parameters-instance')/staticFileVersion)"/>
                                    <!-- UI is blocked until action is done -->
                                    <xf:trigger appearance="minimal" xxf:modal="false">
                                        <xf:label>
                                            <xhtml:img src="{$icon}" alt="" />
                                        </xf:label>
                                        <xf:hint>
                                            <xf:output
                                                ref="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/managedParameters/action[@type='reset-lp']/@hint"
                                            />
                                        </xf:hint>
                                        <!-- Reset language pack.
                                         After confirmation (in case changes are lost) -->
                                        <xf:action ev:event="DOMActivate">
                                            <xf:dispatch name="confirm-action"
                                                target="pageNavigation-model">
                                                <xxf:context name="action"
                                                  select="'resetParametersLanguagePack'"/>
                                            </xf:dispatch>
                                        </xf:action>
                                    </xf:trigger>
                                </xhtml:span>
                            </xhtml:li>

                            <!-- Edit the parameters.
                                 Only for the current application parameters or for the system parameters -->
                            <xhtml:li
                                class="{if ($adminTask='manageSystemParameters' or ($adminTask='manageApplicationParameters' and xxf:instance('control-instance')/manageApplicationParameters/applicationIRI = xxf:instance('view-parameters-instance')/applicationIRI)) then 'viewControlsActions' else 'hidden'}">
                                <xhtml:span class="viewControl">
                                    <xf:output
                                        ref="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/managedParameters/editLabel"/>
                                    <xf:input
                                        ref="xxf:instance('control-instance')/managedParameters/edit">
                                        <xf:action ev:event="xforms-value-changed">
                                            <!-- Edit the parameters -->
                                            <xf:action
                                                if="xxf:instance('control-instance')/managedParameters/edit = 'true'">
                                                <!-- Set the language to baseLanguage (which will reset the editType, if necessary) -->
                                                <xf:setvalue
                                                  ref="xxf:instance('control-instance')/managedParameters/language/@code"
                                                  value="xxf:instance('control-instance')/managedParameters/baseLanguage/@code"/>
                                                <xf:setvalue
                                                  ref="xxf:instance('control-instance')/managedParameters/editType"
                                                  value="'parameters'"/>
                                                <!-- Set to edit the working application parameters.
                                                     Note that the editMode for set-managed-parameters is newApp or '' (blank) -->
                                                <xf:action
                                                  if="$adminTask='manageApplicationParameters'">
                                                  <xf:dispatch name="set-managed-parameters"
                                                  target="manageParameters-model">
                                                  <xxf:context name="parameters-instance"
                                                  select="xxf:instance('working-application-parameters-instance')"/>
                                                  <xxf:context name="editMode" select="''"/>
                                                  </xf:dispatch>
                                                </xf:action>
                                            </xf:action>
                                            <!-- Do not edit the parameters -->
                                            <!-- Don't edit the parameters -->
                                            <xf:action
                                                if="not(xxf:instance('control-instance')/managedParameters/edit = 'true')">
                                                <xf:setvalue
                                                  ref="xxf:instance('control-instance')/managedParameters/editType"
                                                  value="''"/>
                                            </xf:action>
                                        </xf:action>
                                    </xf:input>
                                </xhtml:span>
                            </xhtml:li>

                            <xhtml:li class="LayoutFooter">&#160;</xhtml:li>
                        </xhtml:ul>

                        <!-- Table headers when showing language packs -->
                        <xhtml:table
                            class="{if (xxf:instance('control-instance')/managedParameters/editType='languagePack') then 'editList' else 'hidden'}">
                            <xhtml:tbody>
                                <xhtml:tr>
                                    <xhtml:td class="header">
                                        <xf:output
                                            ref="concat(xxf:instance('control-instance')/managedParameters/baseLanguage/@displayName,'  ')"/>
                                        <xf:input
                                            ref="xxf:instance('control-instance')/managedParameters/termFilter"
                                            incremental="true"/>
                                        <xf:select1
                                            ref="xxf:instance('control-instance')/managedParameters/termSortOrder">
                                            <xf:label
                                                ref="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/managedLanguagePack/sortOrder/@displayName"/>
                                            <xf:itemset
                                                nodeset="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/managedLanguagePack/sortOrder/option">
                                                <xf:label ref="@displayName"/>
                                                <xf:value ref="@value"/>
                                            </xf:itemset>
                                            <!-- New sort order selected -->
                                            <xf:action ev:event="xforms-value-changed">
                                                <!-- Nothing to do here  -->
                                            </xf:action>
                                        </xf:select1>
                                    </xhtml:td>
                                    <xhtml:td></xhtml:td>
                                    <xhtml:td class="header">
                                        <xf:output
                                            ref="xxf:instance('control-instance')/managedParameters/language/@displayName"
                                        />
                                    </xhtml:td>
                                </xhtml:tr>
                            </xhtml:tbody>
                        </xhtml:table>

                    </xhtml:div>


                    <!-- === New application wizard  ===================================== 
                         ================================================================= -->
                    <xhtml:ul
                        class="{if ($adminTask='newApplicationWizard') then 'viewControlsHeader' else 'hidden'}">
                        <xxf:variable name="wizardControl"
                            select="xxf:instance('control-instance')/newApplicationWizard"/>
                        <!-- Show the new application name and instructions -->
                        <xhtml:li class="viewControlsDisplay">
                            <xxf:variable name="newAppName"
                                select="if ($wizardControl/applicationIdBase = '') then '' else concat($wizardControl/applicationIdBase,' / ')"/>
                            <xf:output ref="concat($newAppName,$wizardControl/status)"/>
                        </xhtml:li>
                        <xhtml:li class="viewControlsActions">
                            <!-- Reset wizard -->
                            <xhtml:span
                                class="{if (($wizardControl/status='waiting' and $wizardControl/applicationIdBase!='') or $wizardControl/status!='waiting') then 'viewControl' else 'hidden'}">
                                <xxf:variable name="type" select="'reset'"/>
                                <xxf:variable name="label"
                                    select="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/newApplicationWizard/resetLabel"/>
                                <xxf:variable name="icon"
                                    select="concat(xxf:instance('view-parameters-instance')/staticFileRoot,'/icons/',$type,'.png?',xxf:instance('view-parameters-instance')/versionNumber/@version)"/>
                                <xf:trigger appearance="minimal" xxf:modal="true">
                                    <xf:label>
                                        <xhtml:img src="{$icon}" alt="" />
                                    </xf:label>
                                    <xf:hint ref="$label"/>
                                    <xf:action ev:event="DOMActivate">
                                        <xf:dispatch name="reset-newApplicationWizard"
                                            target="main-model"/>
                                    </xf:action>
                                </xf:trigger>
                            </xhtml:span>
                            <!-- Check applicationId -->
                            <xhtml:span
                                class="{if ($wizardControl/status='waiting' and $wizardControl/applicationIdBase!='') then 'viewControl' else 'hidden'}">
                                <xxf:variable name="type" select="'verify'"/>
                                <xxf:variable name="label"
                                    select="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/newApplicationWizard/verifyLabel"/>
                                <xxf:variable name="icon"
                                    select="concat(xxf:instance('view-parameters-instance')/staticFileRoot,'/icons/',$type,'.png?',xxf:instance('view-parameters-instance')/versionNumber/@version)"/>
                                <xf:trigger appearance="minimal" xxf:modal="true">
                                    <xf:label>
                                        <xhtml:img src="{$icon}" alt="" />
                                    </xf:label>
                                    <xf:hint ref="$label"/>
                                    <xf:action ev:event="DOMActivate">
                                        <xf:dispatch name="check-applicationId" target="main-model"
                                        />
                                    </xf:action>
                                </xf:trigger>
                            </xhtml:span>
                            <!-- Start new application wizard - after user has confirmed -->
                            <xhtml:span
                                class="{if ($wizardControl/status='application-parameters-built') then 'viewControl' else 'hidden'}">
                                <xxf:variable name="type" select="'action'"/>
                                <xxf:variable name="label"
                                    select="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/newApplicationWizard/newLabel"/>
                                <xxf:variable name="icon"
                                    select="concat(xxf:instance('view-parameters-instance')/staticFileRoot,'/icons/',$type,'.png?',xxf:instance('view-parameters-instance')/versionNumber/@version)"/>
                                <xf:trigger appearance="minimal" xxf:modal="true">
                                    <xf:label>
                                        <xhtml:img src="{$icon}" alt="" />
                                    </xf:label>
                                    <xf:hint ref="$label"/>
                                    <xf:action ev:event="DOMActivate">
                                        <xf:dispatch name="confirm-action"
                                            target="pageNavigation-model">
                                            <xxf:context name="action"
                                                select="'createNewApplication'"/>
                                            <xxf:context name="messageSet"
                                                select="xxf:instance('control-instance')/newApplicationWizard/applicationIdBase"
                                            />
                                        </xf:dispatch>
                                    </xf:action>
                                </xf:trigger>
                            </xhtml:span>
                        </xhtml:li>
                        <xhtml:li class="LayoutFooter">&#160;</xhtml:li>
                    </xhtml:ul>


                    <!-- === Manage patient records, from specified source to target === 
                         Operation can be merge, unmerge, archive, unarchive.
                         ============================================================== -->
                    <xhtml:ul
                        class="{if ($adminTask='manageRecords') then 'viewControlsHeader' else 'hidden'}">
                        <!-- Show operation message.
                             Message depends on the status of the operation, source and target-->
                        <xhtml:li class="viewControlsDisplay">
                            <xf:output
                                ref="normalize-space(xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/manageRecords/status/message[@operation=xxf:instance('control-instance')/manageRecords/operation][@status=xxf:instance('control-instance')/manageRecords/status][@sourceStatus=xxf:instance('control-instance')/manageRecords/source/status][@targetStatus=xxf:instance('control-instance')/manageRecords/target/status])"/>
                            <!-- For debugging
                            <xf:output
                                ref="concat(xxf:instance('control-instance')/manageRecords/source/status,' / ',xxf:instance('control-instance')/manageRecords/target/status)"
                            />
                            -->
                        </xhtml:li>
                        <xhtml:li class="viewControlsActions">
                            <!-- Select the manage operation -->
                            <xxf:variable name="operationList"
                                select="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/manageRecords/recordOperation/option"/>
                            <xf:select1
                                ref="xxf:instance('control-instance')/manageRecords/operation">
                                <xf:label
                                    ref="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/manageRecords/recordOperation/@displayName"/>
                                <xf:itemset nodeset="$operationList">
                                    <xf:label ref="@displayName"/>
                                    <xf:value ref="@value"/>
                                </xf:itemset>
                                <!-- Set up for the new operation 
                                    Always reset target record for any new operation.
                                    Action on the source record depends on which operation is selected -->
                                <xf:action ev:event="xforms-value-changed">
                                    <xxf:variable name="operation" select="."/>
                                    <!-- Clear target -->
                                    <xf:dispatch name="reset-record" target="main-model">
                                        <xxf:context name="record"
                                            select="xxf:instance('control-instance')/manageRecords/target"/>
                                        <xxf:context name="patientId" select="''"/>
                                        <xxf:context name="source" select="''"/>
                                    </xf:dispatch>
                                    <!-- If sourceId is set, then retrieve-record to renew set up (which may also trigger action on the target) -->
                                    <xf:action
                                        if="xxf:instance('control-instance')/manageRecords/source/patientId != ''">
                                        <xf:dispatch name="retrieve-record" target="main-model">
                                            <xxf:context name="record"
                                                select="xxf:instance('control-instance')/manageRecords/source"/>
                                            <xxf:context name="patientId"
                                                select="xxf:instance('control-instance')/manageRecords/source/patientId"/>
                                            <xxf:context name="source" select="''"/>
                                        </xf:dispatch>
                                    </xf:action>
                                    <!-- If sourceId is not set then clear it. -->
                                    <xf:action
                                        if="xxf:instance('control-instance')/manageRecords/source/patientId = ''">
                                        <xf:dispatch name="reset-record" target="main-model">
                                            <xxf:context name="record"
                                                select="xxf:instance('control-instance')/manageRecords/source"/>
                                            <xxf:context name="patientId" select="''"/>
                                            <xxf:context name="source" select="''"/>
                                        </xf:dispatch>
                                    </xf:action>
                                </xf:action>
                            </xf:select1>
                            <!-- Perform record management operation.
                                 Only if overall status is 'verified'
                                 Meaning source and/or target have been verified for the selected operation -->
                            <xhtml:span
                                class="{if (xxf:instance('control-instance')/manageRecords/status='verified') then 'viewControl' else 'hidden'}">
                                <!-- Button to perform operation.
                                     Icon is the same for all operations, but the label changes -->
                                <xxf:variable name="operation"
                                    select="xxf:instance('control-instance')/manageRecords/operation"/>
                                <xxf:variable name="type" select="'manageRecords'"/>
                                <xxf:variable name="label"
                                    select="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/manageRecords/recordOperation/option[@value=$operation]/@displayName"/>
                                <xxf:variable name="icon"
                                    select="concat(xxf:instance('view-parameters-instance')/staticFileRoot,'/icons/',$type,'.png?',xxf:instance('view-parameters-instance')/versionNumber/@version)"/>
                                <!-- UI is blocked until action is done -->
                                <xf:trigger appearance="minimal" xxf:modal="true">
                                    <xf:label>
                                        <xhtml:img src="{$icon}" alt="" />
                                    </xf:label>
                                    <xf:hint ref="$label"/>
                                    <!-- Perform the operation -->
                                    <xf:action ev:event="DOMActivate">
                                        <!-- Set the effectiveTime of the operation -->
                                        <xf:setvalue
                                            ref="xxf:instance('control-instance')/manageRecords/effectiveTime"
                                            value="current-dateTime()"/>
                                        <!-- Merge source and target records -->
                                        <xf:action if="$operation='merge'">
                                            <xf:dispatch name="merge-records" target="main-model"/>
                                        </xf:action>
                                        <!-- Unmerge source and target records -->
                                        <xf:action if="$operation='unmerge'">
                                            <xf:dispatch name="unmerge-records" target="main-model"
                                            />
                                        </xf:action>
                                        <!-- Archive source record -->
                                        <xf:action if="$operation='archive'">
                                            <xf:dispatch name="archive-record" target="main-model"/>
                                        </xf:action>
                                        <!-- Restore (unarchive) source record -->
                                        <xf:action if="$operation='unarchive'">
                                            <xf:dispatch name="unarchive-record" target="main-model"
                                            />
                                        </xf:action>
                                    </xf:action>
                                </xf:trigger>
                            </xhtml:span>
                        </xhtml:li>
                        <xhtml:li class="LayoutFooter">&#160;</xhtml:li>
                    </xhtml:ul>


                    <!-- === Fix compositions, in specified compositionIRI 
                             Use source entryIRI/elementIRI to set target entryIRI/elementIRI === 
                        ============================================================== -->
                    <xhtml:ul
                        class="{if ($adminTask='fixCompositions') then 'viewControlsHeader' else 'hidden'}">
                        <xhtml:li class="viewControlsDisplay">
                            <!-- Select composition -->
                            <xf:select1
                                ref="xxf:instance('control-instance')/fixCompositions/compositionIRI">
                                <xf:label
                                    ref="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/fixCompositions/compositionLabel"/>
                                <xf:itemset
                                    nodeset="xxf:instance('control-instance')/fixCompositions/compositionIRI">
                                    <xf:label ref="."/>
                                    <xf:value ref="."/>
                                </xf:itemset>
                                <!-- Set up for the new composition -->
                                <xf:action ev:event="xforms-value-changed">
                                    <!-- TBD -->
                                </xf:action>
                            </xf:select1>
                            <xf:output
                                ref="concat(' (',count(xxf:instance('patientCompositionsList-instance')/*),') ')"/>
                            <!-- Select source entry and element -->
                            <xf:select1
                                ref="xxf:instance('control-instance')/fixCompositions/source/@entryIRI">
                                <xf:label
                                    ref="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/fixCompositions/sourceLabel"/>
                                <xf:itemset
                                    nodeset="xxf:instance('control-instance')/fixCompositions/source/@entryIRI">
                                    <xf:label ref="."/>
                                    <xf:value ref="."/>
                                </xf:itemset>
                                <!-- Set up for the new composition -->
                                <xf:action ev:event="xforms-value-changed">
                                    <!-- TBD -->
                                </xf:action>
                            </xf:select1>
                            <xf:select1
                                ref="xxf:instance('control-instance')/fixCompositions/source/@elementIRI">
                                <xf:itemset
                                    nodeset="xxf:instance('control-instance')/fixCompositions/source/@elementIRI">
                                    <xf:label ref="."/>
                                    <xf:value ref="."/>
                                </xf:itemset>
                                <!-- Set up for the new composition -->
                                <xf:action ev:event="xforms-value-changed">
                                    <!-- TBD -->
                                </xf:action>
                            </xf:select1>
                            <!-- Select target entry and element -->
                            <xf:select1
                                ref="xxf:instance('control-instance')/fixCompositions/target/@entryIRI">
                                <xf:label
                                    ref="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/fixCompositions/targetLabel"/>
                                <xf:itemset
                                    nodeset="xxf:instance('control-instance')/fixCompositions/target/@entryIRI">
                                    <xf:label ref="."/>
                                    <xf:value ref="."/>
                                </xf:itemset>
                                <!-- Set up for the new composition -->
                                <xf:action ev:event="xforms-value-changed">
                                    <!-- TBD -->
                                </xf:action>
                            </xf:select1>
                            <xf:select1
                                ref="xxf:instance('control-instance')/fixCompositions/target/@elementIRI">
                                <xf:itemset
                                    nodeset="xxf:instance('control-instance')/fixCompositions/target/@elementIRI">
                                    <xf:label ref="."/>
                                    <xf:value ref="."/>
                                </xf:itemset>
                                <!-- Set up for the new composition -->
                                <xf:action ev:event="xforms-value-changed">
                                    <!-- TBD -->
                                </xf:action>
                            </xf:select1>
                        </xhtml:li>

                        <!-- Execute the action -->
                        <xhtml:li class="viewControlsAction">
                            <xxf:variable name="type" select="'action'"/>
                            <xxf:variable name="icon"
                                select="concat(xxf:instance('view-parameters-instance')/staticFileRoot,'/icons/',$type,'.png?',xxf:instance('view-parameters-instance')/versionNumber/@version)"/>
                            <!-- UI is blocked until action is done -->
                            <xf:trigger appearance="minimal" xxf:modal="true">
                                <xf:label>
                                    <xhtml:img src="{$icon}" alt="" />
                                </xf:label>
                                <xf:action ev:event="DOMActivate">
                                    <!-- Confirm action with the user -->
                                    <xf:dispatch name="confirm-action" target="pageNavigation-model">
                                        <xxf:context name="action"
                                            select="'performFixCompositionAction'"/>
                                    </xf:dispatch>
                                </xf:action>
                            </xf:trigger>
                        </xhtml:li>

                    </xhtml:ul>


                    <!-- ===For tasks that require a file to be uploaded === 
                         ==================================================== -->
                    <xhtml:ul
                        class="{if (xxf:instance('control-instance')/adminTask/adminTaskLoadFile!='') then 'viewControlsHeader' else 'hidden'}">
                        <!-- Display instructions -->
                        <xhtml:li>
                            <xxf:variable name="adminTaskInstructions"
                                select="xxf:instance('application-parameters-instance')/adminTaskList/descendant::task[adminTask=$adminTask]/adminTaskInstructions/line"/>
                            <xhtml:ul>
                                <xf:repeat nodeset="$adminTaskInstructions">
                                    <xhtml:li>
                                        <xf:output ref="normalize-space(.)"/>
                                    </xhtml:li>
                                </xf:repeat>
                            </xhtml:ul>
                            <xhtml:br />
                        </xhtml:li>

                        <!-- Upload the file -->
                        <xhtml:li>
                            <xf:output
                                ref="normalize-space(concat(xxf:instance('control-instance')/adminTask/adminTaskLoadFile,': '))"/>
                            <xf:upload ref="xxf:instance('file-instance')/file/content"
                                incremental="true">
                                <xf:filename ref="../filename"/>
                                <xf:mediatype ref="../mediatype"/>
                                <xxf:size ref="../size"/>
                                <!-- value-changed always called after upload-done or if cancel button is pressed -->
                                <xf:action ev:event="xforms-value-changed">
                                    <xf:setvalue
                                        ref="xxf:instance('view-parameters-instance')/systemError"
                                        value="''"/>
                                    <xf:setvalue
                                        ref="xxf:instance('view-parameters-instance')/systemStatus"
                                        value="''"/>
                                    <!-- Reset status message -->
                                    <xf:delete
                                        nodeset="xxf:instance('control-instance')/statusMessage/entryList/entry"/>
                                    <xf:setvalue ref="xxf:instance('control-instance')/importStatus"
                                        value="'waiting'"/>
                                    <xf:setvalue ref="xxf:instance('control-instance')/uploadStatus"
                                        value="'ready'"/>
                                    <!-- Check file size - if greater than configured limit, then show error message -->
                                    <xf:action ev:event="xxforms-upload-done"
                                        if="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/fileUpload/maxFileSize castable as xs:integer and xxf:instance('file-instance')/file/size castable as xs:integer and xs:integer(xxf:instance('file-instance')/file/size) gt xs:integer(xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/fileUpload/maxFileSize)">
                                        <xf:setvalue
                                            ref="xxf:instance('control-instance')/statusMessage/entry"
                                            value="concat(xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/statusMessage/message[@processingProgress='uploadedFileExceedsLimit'], xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/fileUpload/uploadFileSizeLimit)"/>
                                        <xf:insert
                                            context="xxf:instance('control-instance')/statusMessage/entryList"
                                            origin="xxf:instance('control-instance')/statusMessage/entry"/>
                                        <xf:setvalue
                                            ref="xxf:instance('control-instance')/uploadStatus"
                                            value="'failed'"/>
                                    </xf:action>
                                    <!-- Read file once uploaded to server -->
                                    <xf:action ev:event="xxforms-upload-done"
                                        if="xxf:instance('file-instance')/file/content!='' and xxf:instance('control-instance')/uploadStatus='ready'">
                                        <!-- Record uploaded file -->
                                        <xf:setvalue
                                            ref="xxf:instance('control-instance')/uploadedFileName"
                                            value="xxf:instance('file-instance')/file/filename"/>
                                        <xf:setvalue
                                            ref="xxf:instance('control-instance')/statusMessage/entry"
                                            value="concat(xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/statusMessage/message[@processingProgress='uploadedFile'], xxf:instance('file-instance')/file/content)"/>
                                        <xf:insert
                                            context="xxf:instance('control-instance')/statusMessage/entryList"
                                            origin="xxf:instance('control-instance')/statusMessage/entry"/>
                                        <!-- Read uploaded file to import-instance -->
                                        <xf:dispatch name="import-uploaded-file" target="main-model"
                                        />
                                    </xf:action>
                                    <!-- If the upload was cleared, then reset all processing status -->
                                    <xf:action ev:event="xxforms-upload-done"
                                        if="xxf:instance('file-instance')/file/content=''">
                                        <xf:setvalue
                                            ref="xxf:instance('control-instance')/uploadedFileName"
                                            value="''"/>
                                        <!-- Reset status message -->
                                        <xf:delete
                                            nodeset="xxf:instance('control-instance')/statusMessage/entryList/entry"/>
                                        <xf:setvalue
                                            ref="xxf:instance('control-instance')/importStatus"
                                            value="'waiting'"/>
                                        <xf:setvalue
                                            ref="xxf:instance('control-instance')/uploadStatus"
                                            value="'waiting'"/>
                                        <!-- Clear process execution parameters -->
                                        <xf:dispatch name="clear-processExecutionParameters"
                                            target="process-model"/>
                                    </xf:action>
                                </xf:action>
                            </xf:upload>
                        </xhtml:li>

                        <!-- Debugging -->
                        <!--
                        <xhtml:li>
                            <xf:output ref="concat(xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/uploadStatusLabel,xxf:instance('control-instance')/uploadStatus)"/>
                        </xhtml:li>
                        -->

                        <!-- Perform import task with uploaded file 
                             Display Import button and perform import task when importStatus is 'ready'
                             importStatus is set in validate-import-instance
                             Trigger actions on uploaded file
                             UI is blocked until action is done
                        -->
                        <xhtml:li
                            class="{if (xxf:instance('control-instance')/importStatus='ready') then 'viewControlsActions' else 'hidden'}">
                            <xf:trigger appearance="minimal" xxf:modal="true">
                                <xf:label>
                                    <img
                                        src="{xxf:instance('view-parameters-instance')/staticFileRoot}/icons/import.png"
                                        alt=""/>
                                </xf:label>
                                <xf:hint class="actionHint"
                                    ref="xxf:instance('control-instance')/importActionMessage"/>
                                <!-- Set the importStatus when button is pressed for any task.
                                     And clear the file upload information -->
                                <xf:action ev:event="DOMActivate">
                                    <xf:setvalue ref="xxf:instance('control-instance')/importStatus"
                                        value="'processing'"/>
                                    <xf:delete
                                        nodeset="xxf:instance('control-instance')/statusMessage/entryList/entry"
                                    />
                                </xf:action>
                                <!-- ====
                                     Generate test data.
                                     Set up test data template
                                     Iterate to the record count, importing records
                                    ==== -->
                                <xf:action ev:event="DOMActivate" if="$adminTask='generateTestData'">
                                    <xf:dispatch name="generate-test-data" target="main-model"/>
                                </xf:action>
                                <!-- End generate test data -->
                                <!-- ====
                                     Importing a resource.
                                     Location is specified in xmlStoreResource
                                     ==== -->
                                <xf:action ev:event="DOMActivate" if="$adminTask='loadDocument'">
                                    <!-- Set up the database object that is the target for the import -->
                                    <xf:setvalue
                                        ref="xxf:instance('control-instance')/storageObject"
                                        value="concat('/xmlstore/applications/',xxf:instance('view-parameters-instance')/applicationId,'/',xxf:instance('control-instance')/databaseAccessLayer/xmlStoreResource)"/>
                                    <xf:dispatch name="dal-write" target="databaseAccessLayer-model">
                                        <xxf:context name="system" select="'ehr'"/>
                                        <xxf:context name="storageLocation"
                                            select="xxf:instance('control-instance')/storageObject"/>
                                        <xxf:context name="resource"
                                            select="xxf:instance('import-instance')"/>
                                        <xxf:context name="status"
                                            select="xxf:instance('control-instance')/status"/>
                                    </xf:dispatch>
                                </xf:action>
                                <!-- End import of resource -->
                                <!-- ====
                                    Importing knowledge map
                                    ==== -->
                                <xf:action ev:event="DOMActivate"
                                    if="$adminTask='importKnowledgeMap'">
                                    <xxf:variable name="timeStamp"
                                        select="substring(replace(replace(string(current-dateTime()),':','-'),'\+','*'),1,16)"/>
                                    <xf:variable name="mapId"
                                        select="xxf:instance('import-instance')/@dc:title"/>
                                    <!-- Create externalId from timeStamp and mapId with any spaces removed -->
                                    <xxf:variable name="externalId"
                                        select="concat($timeStamp,'-',translate($mapId, ' &#9;&#10;&#13;', ''))"/>
                                    <!-- Set up the document to be stored in the XML store -->
                                    <xf:insert
                                        context="xxf:instance('control-instance')/storageDocument"
                                        origin="xxf:instance('import-instance')"/>
                                    <!-- Set up the database object that is the target for the import -->
                                    <xf:setvalue
                                        ref="xxf:instance('control-instance')/storageObject"
                                        value="concat('/xmlstore/applications/',xxf:instance('view-parameters-instance')/applicationId,'/knowledgeMaps/',$externalId)"/>
                                    <xf:dispatch name="dal-write" target="databaseAccessLayer-model">
                                        <xxf:context name="system" select="'ehr'"/>
                                        <xxf:context name="storageLocation"
                                            select="xxf:instance('control-instance')/storageObject"/>
                                        <xxf:context name="resource"
                                            select="xxf:instance('import-instance')"/>
                                        <xxf:context name="status"
                                            select="xxf:instance('control-instance')/status"/>
                                    </xf:dispatch>
                                </xf:action>
                                <!-- End import of knowledge map -->
                                <!-- ====
                                     Importing records - method depends on the recordFormat.
                                     
                                     ==== -->
                                <xf:action ev:event="DOMActivate" if="$adminTask='importRecords'">
                                    <!-- If imported record set is an export from MS Access -->
                                    <xf:action
                                        if="xxf:instance('control-instance')/importRecords/recordFormat='msAccess'">
                                        <!-- Set message to describe the action -->
                                        <xf:setvalue
                                            ref="xxf:instance('control-instance')/statusMessage/entry"
                                            value="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/statusMessage/message[@processingProgress='recordSetIsMSAccess']"/>
                                        <xf:insert
                                            context="xxf:instance('control-instance')/statusMessage/entryList"
                                            origin="xxf:instance('control-instance')/statusMessage/entry"/>
                                        <!-- Convert the MS Access XML to a set of HL7 CDA documents.
                                                     The conversion is specific to each cityEHR application and MS Access table.
                                                     So therefore look for the XSLT in the resources folder of the current application -->
                                        <xxf:variable name="accessTableName"
                                            select="xxf:instance('import-instance')/*[1]/name(.)"/>
                                        <xf:setvalue
                                            ref="xxf:instance('control-instance')/statusMessage/entry"
                                            value="concat('MS Access - table name is:',$accessTableName)"/>
                                        <xf:insert
                                            context="xxf:instance('control-instance')/statusMessage/entryList"
                                            origin="xxf:instance('control-instance')/statusMessage/entry"/>
                                        <xf:setvalue
                                            ref="xxf:instance('view-parameters-instance')/transformationXSL"
                                            value="concat(xxf:instance('view-parameters-instance')/appPath,'/resources/configuration/',xxf:instance('view-parameters-instance')/applicationId,'/xslt/',$accessTableName,'.xsl')"/>
                                        <xxf:variable name="xsltPipeline"
                                            select="concat(xxf:instance('view-parameters-instance')/appPath,'/pipelines/cityEHRTransformXMLInstance.xpl')"/>
                                        <xf:insert nodeset="xxf:instance('import-instance')"
                                            origin="xxf:call-xpl($xsltPipeline, ('parameters','instance'), (xxf:instance('view-parameters-instance'),xxf:instance('import-instance')), 'data')"/>
                                        <!-- Set message to describe the action -->
                                        <xf:setvalue
                                            ref="xxf:instance('control-instance')/statusMessage/entry"
                                            value="concat('Converted record set contains:',count(xxf:instance('import-instance')/cda:ClinicalDocument),' records')"/>
                                        <xf:insert
                                            context="xxf:instance('control-instance')/statusMessage/entryList"
                                            origin="xxf:instance('control-instance')/statusMessage/entry"
                                        />
                                    </xf:action>
                                    <!-- If imported record set is an extract of CDA documents (as created in a record export) -->
                                    <xf:action
                                        if="xxf:instance('control-instance')/importRecords/recordFormat='cda'">
                                        <!-- Set message to describe the action -->
                                        <xf:setvalue
                                            ref="xxf:instance('control-instance')/statusMessage/entry"
                                            value="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/statusMessage/message[@processingProgress='recordSetIsCDA']"/>
                                        <xf:insert
                                            context="xxf:instance('control-instance')/statusMessage/entryList"
                                            origin="xxf:instance('control-instance')/statusMessage/entry"/>
                                        <!-- Import the record set - Iterate through HL7 CDA compositions.
                                             User has selected setCompositionId as 'preserve' (default) or 'generate' -->
                                        <xf:dispatch name="import-RecordSet" target="main-model">
                                            <xxf:context name="record-set"
                                                select="xxf:instance('import-instance')"/>
                                            <xxf:context name="identifierPrefix" select="''"/>
                                            <xxf:context name="setCompositionId"
                                                select="xxf:instance('control-instance')/importRecords/setCompositionId"/>
                                            <xxf:context name="status"
                                                select="xxf:instance('control-instance')/importRecords/status"
                                            />
                                        </xf:dispatch>
                                    </xf:action>
                                    <!-- If imported record set is a cityEHR database format (as created from a spreadsheet) -->
                                    <xf:action
                                        if="xxf:instance('control-instance')/importRecords/recordFormat='database'">
                                        <!-- Set message to describe the action -->
                                        <xf:setvalue
                                            ref="xxf:instance('control-instance')/statusMessage/entry"
                                            value="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/statusMessage/message[@processingProgress='recordSetIsSpreadsheet']"/>
                                        <xf:insert
                                            context="xxf:instance('control-instance')/statusMessage/entryList"
                                            origin="xxf:instance('control-instance')/statusMessage/entry"/>
                                        <!-- Import the record set -->
                                        <xf:dispatch name="import-RecordSetFromDatabase"
                                            target="main-model"/>
                                    </xf:action>
                                </xf:action>
                                <!-- End import of records -->
                                <!-- ====
                                     Check record list - iterate through the record set.
                                     Form lists of patients that are stored/not stored in the xmlstore
                                     ==== -->
                                <xf:action ev:event="DOMActivate"
                                    if="$adminTask='processPatientList'">
                                    <!-- Create the list of patients in various categories -->
                                    <xf:dispatch name="create-patientLists" target="main-model"/>
                                    <!-- Lists are done, so set importStatus -->
                                    <xf:setvalue ref="xxf:instance('control-instance')/importStatus"
                                        value="'imported'"/>
                                    <!-- Clear status messages -->
                                    <xf:delete
                                        nodeset="xxf:instance('control-instance')/statusMessage/entryList/entry"
                                    />
                                </xf:action>
                                <!-- End check patient list -->
                                <!-- ====
                                     Importing user details - iterate through the user set 
                                     ==== -->
                                <xf:action ev:event="DOMActivate" if="$adminTask='importUsers'">
                                    <xf:action xxf:iterate="xxf:instance('import-instance')/user">
                                        <xxf:variable name="current-position" select="position()"/>
                                        <xxf:variable name="current-user"
                                            select="./credentials/userId"/>
                                        <!-- Only import if status is OK -->
                                        <xf:action if="xxf:instance('control-instance')/status =''">
                                            <!-- Set up the document to be stored in the XML store -->
                                            <xf:delete
                                                nodeset="xxf:instance('control-instance')/storageDocument/*"/>
                                            <xf:insert nodeset="xxf:instance('storage-instance')"
                                                origin="xxf:instance('import-instance')/user[$current-position]"/>
                                            <!-- Set up the database object that is the target for the import -->
                                            <xf:setvalue
                                                ref="xxf:instance('control-instance')/storageObject"
                                                value="concat('/xmlstore/users/',$current-user,'/credentials')"/>
                                            <!-- Write the storage instance to the xmlstore -->
                                            <xf:dispatch name="dal-write"
                                                target="databaseAccessLayer-model">
                                                <xxf:context name="system" select="'ehr'"/>
                                                <xxf:context name="storageLocation"
                                                  select="xxf:instance('control-instance')/storageObject"/>
                                                <xxf:context name="resource"
                                                  select="xxf:instance('storage-instance')"/>
                                                <xxf:context name="status"
                                                  select="xxf:instance('control-instance')/status"/>
                                            </xf:dispatch>
                                            <xf:setvalue
                                                ref="xxf:instance('control-instance')/statusMessage/entry"
                                                value="concat('Imported record ',$current-user)"/>
                                            <xf:insert
                                                context="xxf:instance('control-instance')/statusMessage/entryList"
                                                origin="xxf:instance('control-instance')/statusMessage/entry"
                                            />
                                        </xf:action>
                                    </xf:action>
                                    <!-- Reload the current user in case the upload changed their details -->
                                    <xf:dispatch name="load-user-details" target="session-model"/>
                                    <!-- If all is well then move to manageUsers task -->
                                    <xf:action if="xxf:instance('control-instance')/status =''">
                                        <xf:dispatch name="set-adminTask" target="main-model">
                                            <xxf:context name="adminTask" select="'manageUsers'"/>
                                        </xf:dispatch>
                                    </xf:action>
                                </xf:action>
                                <!-- End import of user details -->
                                <!-- ====
                                     Importing care team details - iterate through the set of care teams
                                     ==== -->
                                <xf:action ev:event="DOMActivate" if="$adminTask='importCareTeams'"
                                    xxf:iterate="xxf:instance('import-instance')/careTeam">
                                    <xxf:variable name="careTeam" select="."/>
                                    <xxf:variable name="careTeamId" select="$careTeam/@id"/>
                                    <xxf:variable name="displayName" select="$careTeam/@displayName"/>
                                    <xf:action if="xxf:instance('control-instance')/status =''">
                                        <!-- Set up the document to be stored in the XML store -->
                                        <xf:delete
                                            nodeset="xxf:instance('control-instance')/storageDocument/*"/>
                                        <xf:insert nodeset="xxf:instance('storage-instance')"
                                            origin="$careTeam"/>
                                        <!-- Set up the database object that is the target for the import.
                                                 Care teams are application specific (users can be cross-application) -->
                                        <xf:setvalue
                                            ref="xxf:instance('control-instance')/storageObject"
                                            value="concat('/xmlstore/applications/',xxf:instance('view-parameters-instance')/applicationId,'/careTeams/',$careTeamId)"/>
                                        <!-- Write the storage instance to the xmlstore -->
                                        <xf:dispatch name="dal-write"
                                            target="databaseAccessLayer-model">
                                            <xxf:context name="system" select="'ehr'"/>
                                            <xxf:context name="storageLocation"
                                                select="xxf:instance('control-instance')/storageObject"/>
                                            <xxf:context name="resource"
                                                select="xxf:instance('storage-instance')"/>
                                            <xxf:context name="status"
                                                select="xxf:instance('control-instance')/status"/>
                                        </xf:dispatch>
                                        <xf:setvalue
                                            ref="xxf:instance('control-instance')/statusMessage/entry"
                                            value="concat('Imported care team ',$displayName)"/>
                                        <xf:insert
                                            context="xxf:instance('control-instance')/statusMessage/entryList"
                                            origin="xxf:instance('control-instance')/statusMessage/entry"
                                        />
                                    </xf:action>
                                    <!-- If all OK, then move to manageCareTeams task -->
                                    <xf:action if="xxf:instance('control-instance')/status =''">
                                        <xf:dispatch name="set-adminTask" target="main-model">
                                            <xxf:context name="adminTask" select="'manageCareTeams'"
                                            />
                                        </xf:dispatch>
                                    </xf:action>
                                </xf:action>
                                <!-- End import care team details -->
                                <!-- ====
                                     Importing Cohort searches 
                                     ==== -->
                                <xf:action ev:event="DOMActivate"
                                    if="$adminTask=('importCohortSearch')">
                                    <xf:dispatch name="import-cohort-searches" target="main-model"/>
                                </xf:action>
                                <!-- End import of cohort searches -->
                                <!-- ====
                                     Importing Export Data Set (EDS) definitions - check that the format is correct and then import to the correct location.
                                     Note that this will overwrite any existing EDS with the same Ids.
                                     ==== -->
                                <xf:action ev:event="DOMActivate"
                                    if="$adminTask='importExportDataSet'"
                                    xxf:iterate="xxf:instance('import-instance')/iso-13606:entryCollection">
                                    <xxf:variable name="exportDataSet" select="."/>
                                    <xxf:variable name="exportDataSetId" select="$exportDataSet/@id"/>
                                    <xxf:variable name="exportDataSetDisplayName"
                                        select="$exportDataSet/@displayName"/>
                                    <!-- Set up the document to be stored in the XML store -->
                                    <xf:insert nodeset="xxf:instance('storage-instance')"
                                        origin="$exportDataSet"/>
                                    <!-- Set up the database object that is the target for the import.
                                        Export Data sets are specific to the application specialty (so use view-parameters-instance/specialtyId to set the storageObject -->
                                    <xf:action if="string-length($exportDataSetId) gt 0">
                                        <xf:setvalue
                                            ref="xxf:instance('control-instance')/storageObject"
                                            value="concat('/xmlstore/applications/',xxf:instance('view-parameters-instance')/applicationId,'/systemConfiguration/',xxf:instance('view-parameters-instance')/specialtyId,'/datasets/',$exportDataSetId)"/>
                                        <!-- Message on the status of the action -->
                                        <xf:setvalue
                                            ref="xxf:instance('control-instance')/statusMessage/entry"
                                            value="concat('Importing dataset ',$exportDataSetId,' (',$exportDataSetDisplayName,')')"/>
                                        <xf:insert
                                            context="xxf:instance('control-instance')/statusMessage/entryList"
                                            origin="xxf:instance('control-instance')/statusMessage/entry"/>
                                        <!-- Write the storage instance to the xmlstore -->
                                        <xf:dispatch name="dal-write"
                                            target="databaseAccessLayer-model">
                                            <xxf:context name="system" select="'ehr'"/>
                                            <xxf:context name="storageLocation"
                                                select="xxf:instance('control-instance')/storageObject"/>
                                            <xxf:context name="resource"
                                                select="xxf:instance('storage-instance')"/>
                                            <xxf:context name="status"
                                                select="xxf:instance('control-instance')/status"/>
                                        </xf:dispatch>
                                    </xf:action>
                                </xf:action>
                                <!-- End import of Export Data Set(s) -->
                                <!-- ====
                                     Importing directory for entry or element.
                                     Format has already been checked and directoryIRI set in importDirectory control 
                                     The directory is imported to the specialty set in the importDirectory control 
                                     ==== -->
                                <xf:action ev:event="DOMActivate" if="$adminTask='importDirectory'">
                                    <!-- Save the directory.-->
                                    <xf:dispatch name="save-directory" target="application-model">
                                        <xxf:context name="directory"
                                            select="xxf:instance('control-instance')/importDirectory/directory"/>
                                        <xxf:context name="directory-instance"
                                            select="xxf:instance('import-instance')"/>
                                        <xxf:context name="applicationIRI"
                                            select="xxf:instance('control-instance')/managedApplication/applicationIRI"/>
                                        <xxf:context name="status"
                                            select="xxf:instance('control-instance')/importDirectory/status"
                                        />
                                    </xf:dispatch>
                                </xf:action>
                                <!-- End import of Directories -->
                                <!-- ====
                                     Importing a Language Pack -->
                                <xf:action ev:event="DOMActivate"
                                    if="$adminTask='importLanguagePack'">
                                    <xf:dispatch name="import-language-pack" target="main-model"/>
                                </xf:action>
                                <!-- End import of language pack -->
                                <!-- ====
                                     Importing information model 
                                     ==== -->
                                <xf:action ev:event="DOMActivate"
                                    if="$adminTask='importInformationModel'">
                                    <!-- Set flag -->
                                    <xf:setvalue
                                        ref="xxf:instance('control-instance')/importInformationModel/checkExpressions"
                                        value="false()"/>
                                    <!-- Set editStatus in case user tries to move away during processing -->
                                    <xf:setvalue
                                        ref="xxf:instance('control-instance')/importInformationModel/editStatus"
                                        value="'edited'"/>
                                    <!-- Invoke process to import-informationModel.
                                         This invokves import-informationModelComplete on completion. -->
                                    <xf:dispatch name="import-informationModel"
                                        target="application-model">
                                        <xxf:context name="informationModel-instance"
                                            select="xxf:instance('import-instance')"/>
                                        <xxf:context name="applicationIRI"
                                            select="xxf:instance('control-instance')/managedApplication/applicationIRI"/>
                                        <xxf:context name="baseLanguageCode"
                                            select="xxf:instance('control-instance')/managedApplication/baseLanguage/@code"/>
                                        <xxf:context name="commonModelIRI"
                                            select="xxf:instance('control-instance')/managedApplication/commonModelIRI"/>
                                        <xxf:context name="mergeExistingModel"
                                            select="xxf:instance('control-instance')/importInformationModel/mergeExistingModel"/>
                                        <xxf:context name="mergeCommonModel"
                                            select="xxf:instance('control-instance')/importInformationModel/mergeCommonModel"/>
                                        <xxf:context name="rebuildDirectories"
                                            select="xxf:instance('control-instance')/importInformationModel/rebuildDirectories"/>
                                        <xxf:context name="checkExpressions" select="false()"/>
                                        <xxf:context name="status"
                                            select="xxf:instance('control-instance')/importInformationModel/status"
                                        />
                                    </xf:dispatch>
                                </xf:action>
                                <!-- End import of information model -->
                            </xf:trigger>
                            <!-- End of actions on uploaded file -->
                        </xhtml:li>


                        <!-- === Other user input for the tasks with an uploaded file - before and after the file is imported 
                                 Displayed on LHS when importStatus is loaded, imported or ready
                             === -->
                        <xhtml:li
                            class="{if (xxf:instance('control-instance')/importStatus=('loaded','imported','ready')) then 'viewControlsDisplay' else 'hidden'}">
                            <!-- generateTestData - just showing progress here
                                 Other controls are in the next li - only needed before import
                                 -->
                            <xhtml:span
                                class="{if ($adminTask='generateTestData') then '' else 'hidden'}">
                                <!-- Select whether to report progress -->
                                <xf:input
                                    ref="xxf:instance('control-instance')/generateTestData/reportProgress">
                                    <xf:label
                                        ref="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/generateTestData/reportProgress/@displayName"
                                    />
                                </xf:input>
                                <!-- Output progress, if requested -->
                                <xxf:variable name="reportClass"
                                    select="if (xxf:instance('control-instance')/generateTestData/reportProgress='true') then '' else 'hidden'"/>
                                <xhtml:p class="{$reportClass}">
                                    <!-- recordCount -->
                                    <xf:output
                                        ref="concat(xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/generateTestData/reportProgress/@progressDisplayName,' ',xxf:instance('control-instance')/generateTestData/recordCount,' / ',xxf:instance('control-instance')/generateTestData/numberOfRecords)"/>
                                    <xhtml:br />
                                    <!-- Stage of processing gender -->
                                    <xf:output
                                        ref="concat(xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/generateTestData/genderParameters/@displayName,' ',xxf:instance('control-instance')/generateTestData/genderValueSet/@processingValue)"/>
                                    <xhtml:br />
                                    <!-- Step time -->
                                    <xf:output
                                        ref="concat(xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/generateTestData/timingParameters/@stepTimeDisplayName,' ',xxf:instance('control-instance')/generateTestData/stepTime)"/>
                                    <xhtml:br />
                                    <!-- Average step time -->
                                    <xf:output
                                        ref="concat(xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/generateTestData/timingParameters/@averageStepTimeDisplayName,' ',xxf:instance('control-instance')/generateTestData/averageStepTime)"
                                    />
                                </xhtml:p>
                            </xhtml:span>
                        </xhtml:li>


                        <!-- === Other user input for the tasks with an uploaded file - before the file is imported 
                                 Displayed on LHS when importStatus is loaded or ready
                                 The importStatus may be set to ready as a result of the settings input here 
                                 The import button is only displayed once the importStatus is ready === -->
                        <xhtml:li
                            class="{if (xxf:instance('control-instance')/importStatus=('loaded','ready')) then 'viewControlsDisplay' else 'hidden'}">
                            <!-- Loading resource needs location as well as the Import button -->
                            <xhtml:span
                                class="{if ($adminTask='loadDocument') then '' else 'hidden'}">
                                <xf:input
                                    ref="xxf:instance('control-instance')/databaseAccessLayer/xmlStoreResource">
                                    <xf:label>
                                        <xf:output
                                            ref="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/resourceURLLabel"/>
                                        <xf:output
                                            ref="xxf:instance('view-parameters-instance')/applicationDatabaseLocation"
                                        />
                                    </xf:label>
                                </xf:input>
                            </xhtml:span>
                            <!-- Importing language pack needs option to overwrite language variants -->
                            <xhtml:span
                                class="{if ($adminTask='importLanguagePack') then '' else 'hidden'}">
                                <!-- Option to overwrite existing language variants -->
                                <xf:input
                                    ref="xxf:instance('control-instance')/importLanguagePack/overwriteVariants">
                                    <xf:label
                                        ref="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/mergeCommonModelLabel"/>
                                    <!-- Can't merge existing model if merging common model -->
                                    <xf:action ev:event="xforms-value-changed">
                                        <!-- TBD -->
                                    </xf:action>
                                </xf:input>
                            </xhtml:span>
                            <!-- Loading information model needs options to merge models, etc as well as the Import button -->
                            <xhtml:span
                                class="{if ($adminTask='importInformationModel') then '' else 'hidden'}">
                                <xxf:variable name="isCommonModel"
                                    select="xxf:instance('control-instance')/importInformationModel/isCommonModel"/>
                                <xxf:variable name="hasCommonModel"
                                    select="xxf:instance('control-instance')/importInformationModel/hasCommonModel"/>
                                <!-- Option to merge common model, except for the common model itself -->
                                <xhtml:span
                                    class="{if ($hasCommonModel='true' and $isCommonModel='false') then '' else 'hidden'}">
                                    <xf:input
                                        ref="xxf:instance('control-instance')/importInformationModel/mergeCommonModel">
                                        <xf:label
                                            ref="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/mergeCommonModelLabel"/>
                                        <!-- Can't merge existing model if merging common model -->
                                        <xf:action ev:event="xforms-value-changed">
                                            <xf:setvalue
                                                ref="xxf:instance('control-instance')/importInformationModel/mergeExistingModel"
                                                value="if (xxf:instance('control-instance')/importInformationModel/mergeCommonModel='true') then 'false' else ."
                                            />
                                        </xf:action>
                                    </xf:input>
                                </xhtml:span>
                                <!-- Option to merge existing model, only when not merging common model and there is an existing model -->
                                <xxf:variable name="hasExistingModel"
                                    select="xxf:instance('control-instance')/importInformationModel/hasExistingModel"/>
                                <xhtml:span
                                    class="{if ($hasExistingModel = 'true') then '' else 'hidden'}">
                                    <xf:input
                                        ref="xxf:instance('control-instance')/importInformationModel/mergeExistingModel">
                                        <xf:label
                                            ref="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/mergeExistingModelLabel"/>
                                        <!-- Can't merge common model if merging existing model -->
                                        <xf:action ev:event="xforms-value-changed">
                                            <xf:setvalue
                                                ref="xxf:instance('control-instance')/importInformationModel/mergeCommonModel"
                                                value="if (xxf:instance('control-instance')/importInformationModel/mergeExistingModel='true') then 'false' else ."
                                            />
                                        </xf:action>
                                    </xf:input>
                                </xhtml:span>
                                <!-- Option to regenerate data dictionaries.
                                     Should only be shown if there are directories in the model ***TBD -->
                                <xhtml:span class="{if (true()) then '' else 'hidden'}">
                                    <xf:input
                                        ref="xxf:instance('control-instance')/importInformationModel/rebuildDirectories">
                                        <xf:label
                                            ref="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/rebuildDirectoriesLabel"
                                        />
                                    </xf:input>
                                </xhtml:span>
                            </xhtml:span>
                            <!-- Generating test data - need to set various parameters in xxf:instance('control-instance')/generateTestData 
                                <identifierPrefix/>
                                <identifierLength/>
                                <identifierLengthMin/>
                                <identifierLengthMax/>
                                <setBirthTime/>
                                <minimumAge/>
                                <maximumAge/>
                                
                                 Also report progress here, if selected
                            -->
                            <xhtml:span
                                class="{if ($adminTask='generateTestData') then '' else 'hidden'}">
                                <!-- Hidden button to iterate through the recordCount -->
                                <xf:trigger id="generateTestRecord" class="hidden">
                                    <xf:label/>
                                    <xf:action ev:event="DOMActivate">
                                        <xf:dispatch name="generateTestRecord" target="main-model"/>
                                    </xf:action>
                                </xf:trigger>
                                <!-- Debugging
                                <xhtml:br/>
                                <xf:output ref="xxf:instance('control-instance')/generateTestData/randomNumber"/> / <xf:output ref="xxf:instance('control-instance')/generateTestData/randomNumberBase"/>
                                -->
                                <!-- Number of records to generate -->
                                <xhtmlp>
                                    <xf:output
                                        ref="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/generateTestData/numberOfRecords/@displayName"/>
                                    <xf:input
                                        ref="xxf:instance('control-instance')/generateTestData/numberOfRecords"
                                        xxf:size="{xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/generateTestData/numberOfRecords/@size}"
                                        incremental="false">
                                        <xf:action ev:event="xforms-value-changed">
                                            <!-- Make sure its an integer and greater than 0 -->
                                            <xxf:variable name="defaultNumberOfRecords"
                                                select="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/generateTestData/numberOfRecords/@value"/>
                                            <xf:setvalue
                                                ref="xxf:instance('control-instance')/generateTestData/numberOfRecords"
                                                value="if (. castable as xs:integer and xs:integer(.) gt 0) then . else if ($defaultNumberOfRecords castable as xs:integer and xs:integer($defaultNumberOfRecords) gt 0) then $defaultNumberOfRecords else 0"/>
                                            <!-- Set the number of records -->
                                            <xf:dispatch name="setGenderRecords" target="main-model"
                                            />
                                        </xf:action>
                                    </xf:input>
                                </xhtmlp>
                                <!-- Gender category percentage and given name selection -->
                                <xhtml:p>
                                    <xxf:variable name="genderValueSet"
                                        select="xxf:instance('control-instance')/generateTestData/genderValueSet/genderValue"/>
                                    <xxf:variable name="genderParameters"
                                        select="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/generateTestData/genderParameters"/>
                                    <!-- Table has rows for value, percentage, records, forename -->
                                    <xf:output ref="$genderParameters/@displayName"/>
                                    <xhtml:table>
                                        <xhtml:tbody>
                                            <!-- Value -->
                                            <xhtml:tr>
                                                <xhtml:td>
                                                  <xf:output
                                                  ref="$genderParameters/@valueDisplayName"/>
                                                </xhtml:td>
                                                <!-- One cell for each gender value -->
                                                <xf:repeat nodeset="$genderValueSet">
                                                  <xhtml:td>
                                                  <xf:output ref="@displayName"/>
                                                  </xhtml:td>
                                                </xf:repeat>
                                            </xhtml:tr>
                                            <!-- Percentage -->
                                            <xhtml:tr>
                                                <xhtml:td>
                                                  <xf:output
                                                  ref="$genderParameters/@percentageDisplayName"/>
                                                </xhtml:td>
                                                <!-- One cell for each percentage -->
                                                <xxf:variable name="fieldSize"
                                                  select="$genderParameters/@size"/>
                                                <xf:repeat nodeset="$genderValueSet">
                                                  <xxf:variable name="genderValue" select="."/>
                                                  <xhtml:td>
                                                  <xf:input ref="$genderValue/@percentage"
                                                  xxf:size="{$fieldSize}">
                                                  <xf:action ev:event="xforms-value-changed">
                                                  <!-- Check that % is between 0 and 100 -->
                                                  <xf:setvalue ref="."
                                                  value="if (. castable as xs:integer and xs:integer(.) ge 0 and xs:integer(.) le 100) then . else 0"/>
                                                  <!-- Verify percentages
                                                                     So that total is not greater than 100%
                                                                     And set status -->
                                                  <xf:dispatch name="verifyGenderPercentages"
                                                  target="main-model">
                                                  <xxf:context name="genderValue"
                                                  select="$genderValue"/>
                                                  </xf:dispatch>
                                                  <!-- Set the number of records -->
                                                  <xf:dispatch name="setGenderRecords"
                                                  target="main-model"/>
                                                  </xf:action>
                                                  </xf:input>
                                                  </xhtml:td>
                                                </xf:repeat>
                                                <!-- Status message, if percentageTotal is not 100%
                                                     Note that percentageTotal may be '' so use != for the comparison -->
                                                <xhtml:td>
                                                  <xxf:variable name="percentageTotal"
                                                  select="sum($genderValueSet[@percentage castable as xs:integer]/@percentage)"/>
                                                  <xf:output
                                                  ref="if ($percentageTotal != 100) then $genderParameters/@percentageMessage else ''"
                                                  />
                                                </xhtml:td>
                                            </xhtml:tr>
                                            <!-- Records -->
                                            <xhtml:tr>
                                                <xhtml:td>
                                                  <xf:output
                                                  ref="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/generateTestData/numberOfRecords/@displayName"
                                                  />
                                                </xhtml:td>
                                                <!-- One cell for each gender value -->
                                                <xf:repeat nodeset="$genderValueSet">
                                                  <xhtml:td>
                                                  <xf:output ref="@numberOfRecords"/>
                                                  </xhtml:td>
                                                </xf:repeat>
                                            </xhtml:tr>
                                            <!-- Given name -->
                                            <xhtml:tr>
                                                <xxf:variable name="givenNameOptions"
                                                  select="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/generateTestData/givenNameOptions"/>
                                                <xhtml:td>
                                                  <xf:output ref="$givenNameOptions/@displayName"/>
                                                </xhtml:td>
                                                <!-- One cell for each gender value -->
                                                <xf:repeat nodeset="$genderValueSet">
                                                  <xhtml:td>
                                                  <!-- givenName and prefix of genderValue are set from the selected option -->
                                                  <xxf:variable name="genderValue" select="."/>
                                                  <xf:select1 ref="$genderValue/@givenName">
                                                  <xf:itemset nodeset="$givenNameOptions/option">
                                                  <xf:label ref="./@displayName"/>
                                                  <xf:value ref="./@value"/>
                                                  </xf:itemset>
                                                  <xf:action ev:event="xforms-value-changed">
                                                  <xf:setvalue ref="$genderValue/@prefix"
                                                  value="$givenNameOptions/option[@value=$genderValue/@givenName]/@prefix"
                                                  />
                                                  </xf:action>
                                                  </xf:select1>
                                                  </xhtml:td>
                                                </xf:repeat>
                                            </xhtml:tr>
                                        </xhtml:tbody>
                                    </xhtml:table>
                                </xhtml:p>
                                <!-- Patient Identifier -->
                                <xhtml:p>
                                    <!-- Prefix -->
                                    <xf:output
                                        ref="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/generateTestData/identifierPrefix/@displayName"/>
                                    <xf:input
                                        ref="xxf:instance('control-instance')/generateTestData/identifierPrefix"
                                        xxf:size="{xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/generateTestData/identifierPrefix/@size}"
                                        incremental="true">
                                        <xf:action ev:event="xforms-value-changed">
                                            <!-- Identifier prefix will include the record counter, which is up to the number of records -->
                                            <xxf:variable name="counterLength"
                                                select="string-length(xs:string(xxf:instance('control-instance')/generateTestData/numberOfRecords))"/>
                                            <xf:setvalue
                                                ref="xxf:instance('control-instance')/generateTestData/identifierPrefixLength"
                                                value="string-length(xxf:instance('control-instance')/generateTestData/identifierPrefix)"/>
                                            <xxf:variable name="idPrefixLength"
                                                select="$counterLength + xxf:instance('control-instance')/generateTestData/identifierPrefixLength"/>
                                            <xf:setvalue
                                                ref="xxf:instance('control-instance')/generateTestData/identifierLengthMin"
                                                value="$idPrefixLength + xxf:instance('control-instance')/generateTestData/identifierMinimumSuffixLength"/>
                                            <xf:setvalue
                                                ref="xxf:instance('control-instance')/generateTestData/identifierLengthMax"
                                                value="$idPrefixLength + xxf:instance('control-instance')/generateTestData/identifierRandomSuffixLength"/>
                                            <!-- May need to reset the identifierLength -->
                                            <xf:setvalue
                                                ref="xxf:instance('control-instance')/generateTestData/identifierLength"
                                                value="if (not(. castable as xs:integer)) then xxf:instance('control-instance')/generateTestData/identifierLengthMin else if (xs:integer(.) lt xs:integer(xxf:instance('control-instance')/generateTestData/identifierLengthMin)) then xxf:instance('control-instance')/generateTestData/identifierLengthMin else if (xs:integer(.) gt xs:integer(xxf:instance('control-instance')/generateTestData/identifierLengthMax)) then xxf:instance('control-instance')/generateTestData/identifierLengthMax else ."
                                            />
                                        </xf:action>
                                    </xf:input>
                                    <!-- Length -->
                                    <xf:output
                                        ref="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/generateTestData/identifierLength/@displayName"/>
                                    <xf:input
                                        ref="xxf:instance('control-instance')/generateTestData/identifierLength"
                                        xxf:size="{xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/generateTestData/identifierLength/@size}">
                                        <xf:action ev:event="xforms-value-changed">
                                            <!-- May need to reset the identifierLength.
                                         First check that its an integer, then that its within range -->
                                            <xf:setvalue
                                                ref="xxf:instance('control-instance')/generateTestData/identifierLength"
                                                value="if (not(. castable as xs:integer)) then xxf:instance('control-instance')/generateTestData/identifierLengthMin else if (xs:integer(.) lt xs:integer(xxf:instance('control-instance')/generateTestData/identifierLengthMin)) then xxf:instance('control-instance')/generateTestData/identifierLengthMin else if (xs:integer(.) gt xs:integer(xxf:instance('control-instance')/generateTestData/identifierLengthMax)) then xxf:instance('control-instance')/generateTestData/identifierLengthMax else ."
                                            />
                                        </xf:action>
                                    </xf:input>
                                    <xf:output
                                        ref="concat('(',xxf:instance('control-instance')/generateTestData/identifierLengthMin,' - ',xxf:instance('control-instance')/generateTestData/identifierLengthMax,')')"
                                    />
                                </xhtml:p>
                                <!-- Patient Age.
                                     First select whether to set this, then show options if we are -->
                                <xhtml:p>
                                    <xf:input
                                        ref="xxf:instance('control-instance')/generateTestData/setBirthTime">
                                        <xf:label
                                            ref="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/generateTestData/setBirthTime/@displayName"
                                        />
                                    </xf:input>
                                    <xhtml:span
                                        class="{if (xxf:instance('control-instance')/generateTestData/setBirthTime='true') then '' else 'hidden'}">
                                        <xf:output
                                            ref="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/generateTestData/minimumAge/@displayName"/>
                                        <xf:input
                                            ref="xxf:instance('control-instance')/generateTestData/minimumAge"
                                            xxf:size="{xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/generateTestData/minimumAge/@size}">
                                            <xf:action ev:event="xforms-value-changed">
                                                <!-- Must be an integer in the plausible range and less than or equal to the maximum age -->
                                                <xf:setvalue
                                                  ref="xxf:instance('control-instance')/generateTestData/minimumAge"
                                                  value="if (not(. castable as xs:integer) or xs:integer(.) lt 0) then 0 else if (xs:integer(.) gt xs:integer(xxf:instance('control-instance')/generateTestData/maximumAge)) then xxf:instance('control-instance')/generateTestData/maximumAge else ."
                                                />
                                            </xf:action>
                                        </xf:input>
                                        <xf:output
                                            ref="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/generateTestData/maximumAge/@displayName"/>
                                        <xf:input
                                            ref="xxf:instance('control-instance')/generateTestData/maximumAge"
                                            xxf:size="{xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/generateTestData/maximumAge/@size}">
                                            <xf:action ev:event="xforms-value-changed">
                                                <!-- Must be an integer in the plausible range and greater than or equal to the minimum age -->
                                                <xf:setvalue
                                                  ref="xxf:instance('control-instance')/generateTestData/maximumAge"
                                                  value="if (not(. castable as xs:integer) or xs:integer(.) gt xs:integer(xxf:instance('control-instance')/generateTestData/maximumPlausibleAge)) then xxf:instance('control-instance')/generateTestData/maximumPlausibleAge else if (xs:integer(.) lt xs:integer(xxf:instance('control-instance')/generateTestData/minimumAge)) then xxf:instance('control-instance')/generateTestData/minimumAge else ."
                                                />
                                            </xf:action>
                                        </xf:input>
                                    </xhtml:span>
                                </xhtml:p>
                            </xhtml:span>
                            <!-- Inspect spreadsheet  or importing record from a spreadsheet -->
                            <xhtml:span
                                class="{if ($adminTask='inspectSpreadsheet' or ($adminTask='importRecords' and xxf:instance('control-instance')/importRecords/recordFormat='database')) then '' else 'hidden'}">
                                <xxf:variable name="spreadsheetInfo"
                                    select="xxf:instance('control-instance')/inspectSpreadsheet/spreadsheetInfo"/>
                                <!-- Select the active table (sheet) -->
                                <xf:select1 ref="$spreadsheetInfo/@activeTableId">
                                    <xf:itemset nodeset="$spreadsheetInfo/tableInfo">
                                        <xf:label ref="./@id"/>
                                        <xf:value ref="./@id"/>
                                    </xf:itemset>
                                    <xf:action ev:event="xforms-value-changed">
                                        <!-- Not doing anything here -->
                                    </xf:action>
                                </xf:select1>
                                <!-- Display the count of records / fields for the activeTable -->
                                <xxf:variable name="activeTableInfo"
                                    select="$spreadsheetInfo/tableInfo[@id=$spreadsheetInfo/@activeTableId]"/>
                                <xf:output
                                    ref="concat(xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/inspectSpreadsheet/records/@displayName,$activeTableInfo/@recordCount,' / ',xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/inspectSpreadsheet/fields/@displayName,$activeTableInfo/@fieldCount)"/>
                                <!-- Show the sheet (or not) -->
                                <xf:input ref="$spreadsheetInfo/@viewSheet">
                                    <xf:label
                                        ref="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/inspectSpreadsheet/viewSheet/@displayName"/>
                                    <!-- Clear messages when viewSheet is changed.
                                                 This ensures the upload messages are removed when the first sheet is viewed -->
                                    <xf:action ev:event="xforms-value-changed">
                                        <xf:delete
                                            nodeset="xxf:instance('control-instance')/statusMessage/entryList/entry"
                                        />
                                    </xf:action>
                                </xf:input>
                                <!-- Set the header records -->
                                <xf:input ref="$activeTableInfo/@headerRecordCount" xxf:size="3">
                                    <xf:label
                                        ref="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/inspectSpreadsheet/headerRecords/@displayName"/>
                                    <xf:action ev:event="xforms-value-changed">
                                        <xxf:variable name="headerRecordCount" select="."/>
                                        <xf:setvalue ref="$headerRecordCount"
                                            value="if (. castable as xs:integer and (xs:integer(.) ge 0 and xs:integer(.) le xs:integer($activeTableInfo/@recordCount))) then . else 0"
                                        />
                                    </xf:action>
                                </xf:input>
                                <!-- Export headers (or not) -->
                                <xf:input ref="$spreadsheetInfo/@exportHeaders">
                                    <xf:label
                                        ref="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/inspectSpreadsheet/exportHeaders/@displayName"/>
                                    <xf:action ev:event="xforms-value-changed">
                                        <!--Not doing anything here -->
                                    </xf:action>
                                </xf:input>
                            </xhtml:span>
                            <!-- Importing patient records -->
                            <xhtml:span
                                class="{if ($adminTask='importRecords') then '' else 'hidden'}">
                                <!-- Importing from XML file - set composition id (or not) -->
                                <xhtml:span
                                    class="{if (xxf:instance('control-instance')/importRecords/recordFormat='cda') then '' else 'hidden'}">
                                    <xf:select1
                                        ref="xxf:instance('control-instance')/importRecords/setCompositionId">
                                        <xf:label
                                            ref="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/importRecords/setCompositionId/@displayName"/>
                                        <xf:itemset
                                            nodeset="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/importRecords/setCompositionId/option">
                                            <xf:label ref="./@displayName"/>
                                            <xf:value ref="@value"/>
                                        </xf:itemset>
                                        <xf:action ev:event="xforms-value-changed">
                                            <!-- Not doing anything here -->
                                        </xf:action>
                                    </xf:select1>
                                </xhtml:span>
                                <!-- Importing from spreadsheet (cityEHR database format).
                                     These controls appear below the inspectSpreadsheet controls (hence use xhtml:p) -->
                                <xhtml:p
                                    class="{if (xxf:instance('control-instance')/importRecords/recordFormat='database') then '' else 'hidden'}">
                                    <!-- Spreadsheet controls -->
                                    <!-- Effective Time -->
                                    <xf:output
                                        ref="xxf:instance('control-instance')/importRecords/recordImportMap/@effectiveTime">
                                        <xf:label
                                            ref="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/importRecords/importRecordMapParameters/parameter[@value='effectiveTime']/@displayName"
                                        />
                                    </xf:output>
                                    <!-- Set the patientId field -->
                                    <xxf:variable name="activeTableInfo"
                                        select="$spreadsheetInfo/tableInfo[@id=$spreadsheetInfo/@activeTableId]"/>
                                    <xxf:variable name="activeTableMap"
                                        select="xxf:instance('control-instance')/importRecords/recordImportMap/tableMap[@id=$spreadsheetInfo/@activeTableId]"/>
                                    <xf:input ref="$activeTableMap/@patientIdField" xxf:size="3"
                                        incremental="true">
                                        <xf:label
                                            ref="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/importRecords/importRecordMapParameters/parameter[@value='patientIdField']/@displayName"/>
                                        <xf:action ev:event="xforms-value-changed">
                                            <!-- Must be an integer between 1 and fieldCount -->
                                            <xf:setvalue ref="$activeTableMap/@patientIdField"
                                                value="if (. castable as xs:integer and xs:integer(.) ge 1 and xs:integer(.) le xs:integer($activeTableInfo/@fieldCount)) then xs:integer(.) else 0"
                                            />
                                        </xf:action>
                                    </xf:input>
                                    <!-- Select the specialty -->
                                    <xf:select1
                                        ref="xxf:instance('control-instance')/importRecords/recordImportMap/@specialtyIRI">
                                        <xf:label
                                            ref="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/importRecords/importRecordMapParameters/parameter[@value='specialty']/@displayName"/>
                                        <xf:itemset
                                            nodeset="xxf:instance('specialtyList-instance')/iso-13606:Folder">
                                            <xf:label ref="./@displayName"/>
                                            <xf:value ref="./@id"/>
                                        </xf:itemset>
                                        <xf:action ev:event="xforms-value-changedX">
                                            <!-- Load the dictionary -->
                                        </xf:action>
                                    </xf:select1>
                                    <!-- Select the map -->
                                    <xf:select1
                                        ref="xxf:instance('control-instance')/imporRecords/selectedMapId">
                                        <xf:label
                                            ref="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/importRecords/importRecordMapParameters/parameter[@value='recordImportMap']/@displayName"/>
                                        <xf:itemset
                                            nodeset="xxf:instance('recordImportMapList-instance')/recordImportMap">
                                            <xf:label ref="./@displayName"/>
                                            <xf:value ref="./@id"/>
                                        </xf:itemset>
                                        <xf:action ev:event="xforms-value-changedX">
                                            <!-- TBD -->
                                        </xf:action>
                                    </xf:select1>
                                    <!-- Set the map displayName -->
                                    <xf:input
                                        ref="xxf:instance('control-instance')/importRecords/recordImportMap/@displayName">
                                        <xf:label
                                            ref="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/importRecords/importRecordMapParameters/parameter[@value='recordImportMap']/@displayName"/>
                                        <xf:action ev:event="xforms-value-changed">
                                            <!-- TBD -->
                                        </xf:action>
                                    </xf:input>
                                    <!-- Show map controls (or not) -->
                                    <xf:input
                                        ref="xxf:instance('control-instance')/importRecords/recordImportMap/@showMap">
                                        <xf:label
                                            ref="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/importRecords/importRecordMapParameters/parameter[@value='showMapControls']/@displayName"/>
                                        <xf:action ev:event="xforms-value-changed">
                                            <!-- TBD -->
                                        </xf:action>
                                    </xf:input>
                                </xhtml:p>
                            </xhtml:span>
                            <!-- Importing cohort searches - select the role -->
                            <xhtml:span
                                class="{if ($adminTask='importCohortSearch') then '' else 'hidden'}">
                                <xxf:variable name="roleList"
                                    select="xxf:instance('application-parameters-instance')/rbac/role"/>
                                <xf:select1
                                    ref="xxf:instance('control-instance')/importCohortSearch/roleIRI">
                                    <xf:label
                                        ref="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/importCohortSearch/roleLabel"/>
                                    <xf:itemset nodeset="$roleList">
                                        <xf:label ref="./@displayName"/>
                                        <xf:value ref="@value"/>
                                    </xf:itemset>
                                    <xf:action ev:event="xforms-value-changed">
                                        <!-- Not doing anything here -->
                                    </xf:action>
                                </xf:select1>
                            </xhtml:span>
                            <!-- Importing directory - select the specialty -->
                            <xhtml:span
                                class="{if ($adminTask='importDirectoryX') then '' else 'hidden'}">
                                <!-- Select the specialty for import -->
                                <xf:select1
                                    ref="xxf:instance('control-instance')/importDirectory/specialtyIRI">
                                    <xf:label
                                        ref="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/importDirectory/selectSpecialtyLabel"/>
                                    <xf:itemset
                                        nodeset="xxf:instance('specialtyList-instance')/iso-13606:Folder">
                                        <xf:label ref="./@displayName"/>
                                        <xf:value ref="./@id"/>
                                    </xf:itemset>
                                    <xf:action ev:event="xforms-value-changedX">
                                        <!-- Check the directory for import.
                                             Includes case where directoryIRI is blank -->
                                        <xf:dispatch name="set-directoryForSpecialty"
                                            target="main-model">
                                            <xxf:context name="specialtyIRI"
                                                select="xxf:instance('control-instance')/importDirectory/specialtyIRI"/>
                                            <xxf:context name="directoryIRI"
                                                select="xxf:instance('control-instance')/importDirectory/directoryIRI"
                                            />
                                        </xf:dispatch>
                                        <!-- Set the import status -->
                                        <xf:setvalue
                                            ref="xxf:instance('control-instance')/importStatus"
                                            value="if (exists(xxf:instance('control-instance')/importDirectory/directory)) then 'ready' else if (. = 'ready') then 'loaded' else 'waiting'"
                                        />
                                    </xf:action>
                                </xf:select1>
                            </xhtml:span>
                            <!-- Display status message -->
                            <xf:output
                                ref="xxf:instance('control-instance')/importDirectory/statusMessage"
                            />
                        </xhtml:li>

                        <!-- === Other user actions for the tasks with an uploaded file - before the file is imported - displayed on RHS === -->
                        <xhtml:li
                            class="{if (xxf:instance('control-instance')/importStatus=('loaded','ready')) then 'viewControlsActions' else 'hidden'}">
                            <!-- Inspect spreadsheet  -->
                            <xhtml:span
                                class="{if ($adminTask='inspectSpreadsheet') then '' else 'hidden'}">
                                <xxf:variable name="type" select="'export'"/>
                                <xxf:variable name="label"
                                    select="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/inspectSpreadsheet/exportDatabaseLabel"/>
                                <xxf:variable name="icon"
                                    select="concat(xxf:instance('view-parameters-instance')/staticFileRoot,'/icons/',$type,'.png?',xxf:instance('view-parameters-instance')/versionNumber/@version)"/>
                                <xf:trigger appearance="minimal" xxf:modal="true">
                                    <xf:label>
                                        <xhtml:img src="{$icon}" alt="" />
                                    </xf:label>
                                    <xf:hint ref="$label"/>
                                    <xf:action ev:event="DOMActivate">
                                        <xf:dispatch name="export-xmlCache"
                                            target="pageNavigation-model">
                                            <xxf:context name="export-instance"
                                                select="xxf:instance('import-instance')"/>
                                            <xxf:context name="exportType" select="'xml'"/>
                                        </xf:dispatch>
                                    </xf:action>
                                </xf:trigger>
                            </xhtml:span>
                            <!-- Import records from spreadsheet 
                                 Control of recordMap - new, save, save as, delete -->
                            <xhtml:span
                                class="{if ($adminTask='importRecords' and xxf:instance('control-instance')/importRecords/recordFormat='database') then '' else 'hidden'}">
                                <!-- Add record map -->
                                <xhtml:span>
                                    <xxf:variable name="type" select="'add'"/>
                                    <xxf:variable name="label"
                                        select="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/importRecords/addRecordMapLabel"/>
                                    <xxf:variable name="icon"
                                        select="concat(xxf:instance('view-parameters-instance')/staticFileRoot,'/icons/',$type,'.png?',xxf:instance('view-parameters-instance')/versionNumber/@version)"/>
                                    <xf:trigger appearance="minimal" xxf:modal="true">
                                        <xf:label>
                                            <xhtml:img src="{$icon}" alt="" />
                                        </xf:label>
                                        <xf:hint ref="$label"/>
                                        <xf:action ev:event="DOMActivate">
                                            <xf:dispatch name="add-recordMap" target="main-model"/>
                                        </xf:action>
                                    </xf:trigger>
                                </xhtml:span>
                                <!-- Save record map -->
                                <xhtml:span>
                                    <xxf:variable name="type" select="'save'"/>
                                    <xxf:variable name="label"
                                        select="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/importRecords/saveRecordMapLabel"/>
                                    <xxf:variable name="icon"
                                        select="concat(xxf:instance('view-parameters-instance')/staticFileRoot,'/icons/',$type,'.png?',xxf:instance('view-parameters-instance')/versionNumber/@version)"/>
                                    <xf:trigger appearance="minimal" xxf:modal="true">
                                        <xf:label>
                                            <xhtml:img src="{$icon}" alt="" />
                                        </xf:label>
                                        <xf:hint ref="$label"/>
                                        <xf:action ev:event="DOMActivate">
                                            <xf:dispatch name="save-recordMap" target="main-model"/>
                                        </xf:action>
                                    </xf:trigger>
                                </xhtml:span>
                                <!-- Save as record map -->
                                <xhtml:span>
                                    <xxf:variable name="type" select="'saveAs'"/>
                                    <xxf:variable name="label"
                                        select="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/importRecords/saveAsRecordMapLabel"/>
                                    <xxf:variable name="icon"
                                        select="concat(xxf:instance('view-parameters-instance')/staticFileRoot,'/icons/',$type,'.png?',xxf:instance('view-parameters-instance')/versionNumber/@version)"/>
                                    <xf:trigger appearance="minimal" xxf:modal="true">
                                        <xf:label>
                                            <xhtml:img src="{$icon}" alt="" />
                                        </xf:label>
                                        <xf:hint ref="$label"/>
                                        <xf:action ev:event="DOMActivate">
                                            <xf:dispatch name="save-recordMap" target="main-model"/>
                                        </xf:action>
                                    </xf:trigger>
                                </xhtml:span>
                                <!-- Delete record map -->
                                <xhtml:span>
                                    <xxf:variable name="type" select="'delete'"/>
                                    <xxf:variable name="label"
                                        select="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/importRecords/deleteRecordMapLabel"/>
                                    <xxf:variable name="icon"
                                        select="concat(xxf:instance('view-parameters-instance')/staticFileRoot,'/icons/',$type,'.png?',xxf:instance('view-parameters-instance')/versionNumber/@version)"/>
                                    <xf:trigger appearance="minimal" xxf:modal="true">
                                        <xf:label>
                                            <xhtml:img src="{$icon}" alt="" />
                                        </xf:label>
                                        <xf:hint ref="$label"/>
                                        <xf:action ev:event="DOMActivate">
                                            <xf:dispatch name="delete-recordMap" target="main-model"
                                            />
                                        </xf:action>
                                    </xf:trigger>
                                </xhtml:span>
                            </xhtml:span>
                            <!-- Import information model - check expressions (don't import)
                                 UI is blocked until action is done -->
                            <xhtml:span
                                class="{if ($adminTask='importInformationModel') then '' else 'hidden'}">
                                <xxf:variable name="type" select="'verify'"/>
                                <xxf:variable name="label"
                                    select="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/checkExpressionsLabel"/>
                                <xxf:variable name="icon"
                                    select="concat(xxf:instance('view-parameters-instance')/staticFileRoot,'/icons/',$type,'.png?',xxf:instance('view-parameters-instance')/versionNumber/@version)"/>
                                <xf:trigger appearance="minimal" xxf:modal="true">
                                    <xf:label>
                                        <xhtml:img src="{$icon}" alt="" />
                                    </xf:label>
                                    <xf:hint ref="$label"/>
                                    <xf:action ev:event="DOMActivate">
                                        <!-- Set flag -->
                                        <xf:setvalue
                                            ref="xxf:instance('control-instance')/importInformationModel/checkExpressions"
                                            value="true()"/>
                                        <!-- Invoke check-expressions process.
                                             This is done by invoking import-informationModel with checkExpressions set to 'true'-->
                                        <xf:dispatch name="import-informationModel"
                                            target="application-model">
                                            <xxf:context name="informationModel-instance"
                                                select="xxf:instance('import-instance')"/>
                                            <xxf:context name="applicationIRI"
                                                select="xxf:instance('control-instance')/managedApplication/applicationIRI"/>
                                            <xxf:context name="baseLanguageCode"
                                                select="xxf:instance('control-instance')/managedApplication/baseLanguage/@code"/>
                                            <xxf:context name="commonModelIRI"
                                                select="xxf:instance('control-instance')/managedApplication/commonModelIRI"/>
                                            <xxf:context name="mergeExistingModel"
                                                select="xxf:instance('control-instance')/importInformationModel/mergeExistingModel"/>
                                            <xxf:context name="mergeCommonModel"
                                                select="xxf:instance('control-instance')/importInformationModel/mergeCommonModel"/>
                                            <xxf:context name="checkExpressions" select="true()"/>
                                            <xxf:context name="status"
                                                select="xxf:instance('control-instance')/importInformationModel/status"
                                            />
                                        </xf:dispatch>
                                    </xf:action>
                                </xf:trigger>
                            </xhtml:span>
                        </xhtml:li>

                        <!-- === Other user actions for the tasks with an uploaded file - after the file is imported - displayed on RHS === -->
                        <xhtml:li
                            class="{if (not(xxf:instance('control-instance')/importStatus=('waiting','ready'))) then 'viewControlsActions' else 'hidden'}">
                            <!--  Check patient list - Set the parameters -->
                            <xhtml:span
                                class="{if ($adminTask='processPatientList') then '' else 'hidden'}">
                                <!-- Number of header rows -->
                                <xf:input
                                    ref="xxf:instance('control-instance')/processPatientList/headerRows"
                                    xxf:size="5" incremental="true">
                                    <xf:label
                                        ref="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/processPatientList/headerRows/@displayName"/>
                                    <xf:action ev:event="xforms-value-changed">
                                        <!-- Reset the patient list -->
                                        <xf:dispatch name="create-patientLists" target="main-model"
                                        />
                                    </xf:action>
                                </xf:input>
                                <!-- Maximum patient identifier length -->
                                <xf:input
                                    ref="xxf:instance('control-instance')/processPatientList/patientIdLength"
                                    xxf:size="5" incremental="true">
                                    <xf:label
                                        ref="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/processPatientList/patientIdLength/@displayName"/>
                                    <xf:action ev:event="xforms-value-changed">
                                        <!-- Reset the patient list -->
                                        <xf:dispatch name="create-patientLists" target="main-model"
                                        />
                                    </xf:action>
                                </xf:input>
                            </xhtml:span>
                            <!-- Check patient list - can assign patients to the selected care team -->
                            <xhtml:span
                                class="{if ($adminTask='processPatientList' and exists(xxf:instance('careTeamList-instance')/careTeam)) then '' else 'hidden'}">
                                <!-- Select the care team -->
                                <xf:select1
                                    ref="xxf:instance('control-instance')/processPatientList/careTeamId">
                                    <xf:label
                                        ref="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/manageCareTeams/careTeamLabel"/>
                                    <xf:itemset
                                        nodeset="xxf:instance('careTeamList-instance')/careTeam">
                                        <xf:label ref="@displayName"/>
                                        <xf:value ref="@value"/>
                                    </xf:itemset>
                                    <xf:action ev:event="xforms-value-changed">
                                        <!-- Set the displayName, handle and load the care team -->
                                        <xf:dispatch name="set-careTeam" target="careTeam-model">
                                            <xxf:context name="careTeamId"
                                                select="xxf:instance('control-instance')/processPatientList/careTeamId"
                                            />
                                        </xf:dispatch>
                                        <!-- Reset the patient list -->
                                        <xf:dispatch name="create-patientLists" target="main-model"/>
                                        <!-- Show the care team patient list -->
                                        <xf:setvalue
                                            ref="xxf:instance('control-instance')/processPatientList/patientList[@type='careTeamPatientList']/@display"
                                            value="'show'"/>
                                    </xf:action>
                                </xf:select1>
                                <!-- Add patients that are in hasRecordPatientList (i.e. on the checked list and have a record in the xmlstore -->
                                <!-- UI is blocked until action is done -->
                                <xxf:variable name="type" select="'add'"/>
                                <xxf:variable name="label"
                                    select="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/processPatientList/addCareTeamPatientsLabel"/>
                                <xxf:variable name="icon"
                                    select="concat(xxf:instance('view-parameters-instance')/staticFileRoot,'/icons/',$type,'.png?',xxf:instance('view-parameters-instance')/versionNumber/@version)"/>
                                <xxf:variable name="patientSet"
                                    select="xxf:instance('hasRecordPatientList-instance')"/>
                                <xf:trigger appearance="minimal" xxf:modal="true"
                                    class="{if (exists($patientSet/patient)) then '' else 'hidden'}">
                                    <xf:label>
                                        <xhtml:img src="{$icon}" alt="" />
                                    </xf:label>
                                    <xf:hint ref="$label"/>
                                    <xf:action ev:event="DOMActivate">
                                        <xf:dispatch name="setCareTeamPatients" target="main-model">
                                            <xxf:context name="patientSet" select="$patientSet"/>
                                        </xf:dispatch>
                                    </xf:action>
                                </xf:trigger>
                            </xhtml:span>
                            <!-- Check patient list - Export the list of patients
                                 Export patients that are in hasRecordPatientList (i.e. on the checked list and have a record in the xmlstore
                                 UI is blocked until action is done -->
                            <xhtml:span
                                class="{if ($adminTask='processPatientList') then '' else 'hidden'}">
                                <xxf:variable name="type" select="'export'"/>
                                <xxf:variable name="label"
                                    select="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/processPatientList/exportPatientsLabel"/>
                                <xxf:variable name="icon"
                                    select="concat(xxf:instance('view-parameters-instance')/staticFileRoot,'/icons/',$type,'.png?',xxf:instance('view-parameters-instance')/versionNumber/@version)"/>
                                <xxf:variable name="patientSet"
                                    select="xxf:instance('hasRecordPatientList-instance')"/>
                                <xf:trigger appearance="minimal" xxf:modal="true"
                                    class="{if (exists($patientSet/patient)) then '' else 'hidden'}">
                                    <xf:label>
                                        <xhtml:img src="{$icon}" alt="" />
                                    </xf:label>
                                    <xf:hint ref="$label"/>
                                    <xf:action ev:event="DOMActivate">
                                        <xf:dispatch name="export-patientSet"
                                            target="exportData-model">
                                            <xxf:context name="patientSet"
                                                select="$patientSet/patient/@id"/>
                                            <xxf:context name="transformationXSL" select="''"/>
                                        </xf:dispatch>
                                    </xf:action>
                                </xf:trigger>
                            </xhtml:span>
                        </xhtml:li>

                        <xhtml:li class="LayoutFooter">&#160;</xhtml:li>

                    </xhtml:ul>


                    <!-- Debugging -->
                    <!--
                    <xhtml:p class="message">Given names dictionary:<xhtml:br/>
                        <xf:output
                            ref="xxf:serialize(xxf:call-xpl('oxf:/ops/utils/formatting/format.xpl', 'data', xxf:instance('givenNames-instance'), 'data')/*, 'html')"
                            mediatype="text/html"/>
                    </xhtml:p>
-->
                    <!--
                        <xhtml:li>
                        <xf:output ref="concat(xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/importStatusLabel,xxf:instance('control-instance')/importStatus)"/>
                        </xhtml:li>
                    -->
                </xhtml:div>

                <!-- End of viewControls -->




                <!-- ======================================================================
                     viewDisplay has data displays and some interaction with lists 
                     
                     ====================================================================== -->

                <xhtml:div id="viewDisplay">
                    <xxf:variable name="adminTask"
                        select="xxf:instance('control-instance')/adminTask/adminTask"/>

                    <!-- ===Display status message - this is done for all tasks. ==================================================
                         Messages are displayed before any other display for the task.
                         Status message is built up using the results separator between entries - each entry is output on a new line
                         =========================================================================================================== -->
                    <xhtml:ol>
                        <xf:repeat id="statusReport"
                            nodeset="reverse(xxf:instance('control-instance')/statusMessage/entryList/entry)">
                            <xxf:variable name="entry" select="."/>
                            <xhtml:li>
                                <xf:output ref="normalize-space($entry)"/>
                            </xhtml:li>
                        </xf:repeat>
                    </xhtml:ol>

                    <!-- Progress of multi-action processes.
                         Only for the tasks that invoke run-process and where the process is executing or has finished (not waiting and has a start time set) -->
                    <xxf:variable name="processExecutionLog"
                        select="xxf:instance('processExecutionLog-instance')[@status!='waiting'][@startTime!='']"/>
                    <xhtml:ol
                        class="{if (exists($processExecutionLog) and $adminTask=('manageApplicationParameters','importInformationModel','manageInformationModel','newApplicationWizard','generateTestData')) then '' else 'hidden'}">

                        <!-- Show the overall process timing -->
                        <xhtml:li>
                            <xf:output
                                ref="concat($processExecutionLog/@startTime,'/',$processExecutionLog/@endTine,' (',$processExecutionLog/@elapsedTime,')')"
                            />
                        </xhtml:li>

                        <!-- Show progress (most recent action) -->
                        <xhtml:li>
                            <xf:output ref="$processExecutionLog/@progressDisplay"/>
                        </xhtml:li>

                        <!-- Show error code (if there is one) -->
                        <xhtml:li>
                            <xf:output ref="$processExecutionLog/@errorCode"/>
                        </xhtml:li>

                        <!-- Show the log in natural order, so that most recently invoked action is at the bottom -->
                        <xf:repeat nodeset="$processExecutionLog/action">
                            <xxf:variable name="action" select="."/>
                            <xxf:variable name="actionContext"
                                select="if ($action/@context='') then '' else concat(' / ',$action/@context)"/>
                            <xhtml:li>
                                <xf:output
                                    ref="concat('(',$action/@actionNumber,'/',$processExecutionLog/@actionCount,') ',$action/@processName,' / ',$action/@actionName,$actionContext,' / ',$action/@elapsedTime)"/>
                                <!-- Display any messages or errors for the action -->
                                <xhtml:ol>
                                    <xhtml:li>
                                        <xf:output ref="$action/@errorCode"/>
                                    </xhtml:li>
                                    <xf:repeat nodeset="$action/message">
                                        <xxf:variable name="message" select="."/>
                                        <xhtml:li>
                                            <xf:output ref="$message"/>
                                        </xhtml:li>
                                    </xf:repeat>
                                </xhtml:ol>
                            </xhtml:li>
                        </xf:repeat>
                    </xhtml:ol>



                    <!-- === Manage system icons === 
                         =========================== -->
                    <xhtml:div
                        class="{if ($adminTask='manageSystemIcons') then 'tableContainer' else 'hidden'}">
                        <!-- Display the list of stored icons.-->
                        <xxf:variable name="iconList" select="xxf:instance('iconList-instance')/*"/>

                        <xhtml:table>
                            <xhtml:tbody>
                                <xf:repeat nodeset="$iconList">
                                    <xxf:variable name="iconFile" select="."/>
                                    <xhtml:tr>
                                        <!-- Name of the icon -->
                                        <xhtml:td>
                                            <xf:output ref="$iconFile/@name"/>
                                        </xhtml:td>
                                        <!-- Upload control -->
                                        <xhtml:td>
                                            <xf:upload ref="$iconFile" incremental="true">
                                                <!-- Image file has been uploaded -->
                                                <xf:action ev:event="xxforms-upload-done">
                                                  <!-- Not doing anything here -->
                                                </xf:action>
                                                <!-- Set the edit flag when the image content changes.
                                                     Or the user clears the image -->
                                                <xf:action ev:event="xforms-value-changed">
                                                  <xf:setvalue
                                                  ref="xxf:instance('control-instance')/manageSystemIcons/editStatus"
                                                  value="'edited'"/>
                                                </xf:action>
                                            </xf:upload>
                                        </xhtml:td>
                                        <!-- Display the icon, if it is set -->
                                        <xhtml:td>
                                            <xf:group ref="$iconFile[.!='']"
                                                class="{if ($iconFile='') then 'hidden' else ''}">
                                                <!--
                                                <xhtml:img src="data:image/*;base64,{xs:base64Binary($iconFile)}" />
                                                -->
                                                <xf:output ref="$iconFile" mediatype="image/*"/>
                                            </xf:group>
                                        </xhtml:td>
                                    </xhtml:tr>
                                </xf:repeat>
                            </xhtml:tbody>
                        </xhtml:table>

                    </xhtml:div>


                    <!-- === Display of results from DAL operations ========
                         databaseAccessLayer 
                         =================================================== -->
                    <xhtml:div class="{if ($adminTask='databaseAccessLayer') then '' else 'hidden'}">
                        <xxf:variable name="databaseOperation"
                            select="xxf:instance('control-instance')/databaseAccessLayer/databaseOperation/@value"/>
                        <xxf:variable name="responseType"
                            select="xxf:instance('response-instance')/*/name()"/>

                        <xhtml:p
                            class="{if (xxf:instance('control-instance')/databaseAccessLayer/status='') then 'hidden' else ''}">
                            <xf:output
                                ref="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/databaseAccessLayer/resultLabel"/>
                            <xf:output
                                ref="xxf:instance('control-instance')/databaseAccessLayer/status"/>
                            <xhtml:br />
                            <!-- If the query returned a result -->
                            <xf:group
                                ref="$adminTask='databaseAccessLayer'and exists(xxf:instance('response-instance')/*[name()!='exception'])">
                                <xf:output
                                    ref="xxf:instance('control-instance')/databaseAccessLayer/queryReport/@displayName"/>
                                <xf:output
                                    ref="xxf:instance('control-instance')/databaseAccessLayer/queryReport/@duration"/>
                                <!-- Output the number of hits.
                                 Only for simple query
                                 It is assumed that each hit returns an XML element. -->
                                <xxf:variable name="hitCount"
                                    select="if (exists(xxf:instance('response-instance')/@exist:hits)) then xxf:instance('response-instance')/@exist:hits else count(xxf:instance('response-instance')/*)"/>
                                <xf:output
                                    ref="if (xxf:instance('control-instance')/databaseAccessLayer/databaseOperation/@value='query') then concat(' (',$hitCount,xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/databaseAccessLayer/hitsLabel,')') else ''"
                                />
                            </xf:group>
                            <!-- If the query returned an exception -->
                            <xf:group
                                ref="$adminTask='databaseAccessLayer' and xxf:instance('response-instance')/name()=('exception','exceptions')">
                                <xf:output ref="xxf:instance('response-instance')//message[1]"/>
                            </xf:group>
                        </xhtml:p>


                        <!-- Degugging
                            <xf:output ref="xxf:serialize(xxf:call-xpl('oxf:/ops/utils/formatting/format.xpl', 'data', xxf:instance('response-instance'), 'data')/*, 'html')" mediatype="text/html"/>
-->

                    </xhtml:div>
                    <!-- End display of DAL operation results -->



                    <!-- === Browse the physical database ============
                         browsePhysicalDatabases
                         ============================================= -->
                    <xhtml:div
                        class="{if ($adminTask='browsePhysicalDatabases') then '' else 'hidden'}">

                        <!-- Show BTU parameters for this node, if selected -->
                        <xhtml:p
                            class="{if (xxf:instance('control-instance')/browsePhysicalDatabases/showBTUs='true') then '' else 'hidden'}">
                            <xf:output
                                ref="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/browsePhysicalDatabases/btuParametersLabel"
                            />
                        </xhtml:p>

                        <!-- Show table with list of collection nodes, using the defined filter on the start of the name -->
                        <xhtml:div class="tableContainer">
                            <xxf:variable name="nodeList"
                                select="xxf:instance('collectionList-instance')/node"/>
                            <xf:output
                                ref="if (count($nodeList)=xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/browsePhysicalDatabases/maxCollectionItems) 
                                then concat(xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/browsePhysicalDatabases/maxCollectionItemsMessage,'(',count($nodeList),')') else ''"/>

                            <xhtml:table class="selectionList">
                                <xhtml:thead>
                                    <!-- Display column headers -->
                                    <xhtml:tr>
                                        <xhtml:td>
                                            <xf:output
                                                ref="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/browsePhysicalDatabases/nameLabel"
                                            />
                                        </xhtml:td>
                                        <xhtml:td>
                                            <xf:output
                                                ref="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/browsePhysicalDatabases/typeLabel"
                                            />
                                        </xhtml:td>
                                        <xhtml:td>
                                            <xf:output
                                                ref="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/browsePhysicalDatabases/sizeLabel"
                                            />
                                        </xhtml:td>
                                        <xhtml:td>
                                            <xf:output
                                                ref="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/browsePhysicalDatabases/modifiedLabel"
                                            />
                                        </xhtml:td>
                                    </xhtml:tr>
                                </xhtml:thead>

                                <!-- Display details for each collection and resource in collectionList-instance -->
                                <xhtml:tbody>
                                    <xxf:variable name="filter"
                                        select="xxf:instance('control-instance')/browsePhysicalDatabases/filter"/>
                                    <xxf:variable name="filteredNodeList"
                                        select="$nodeList[starts-with(@name,$filter)]"/>

                                    <!-- Sort the node list -->
                                    <xxf:variable name="sortCriteria"
                                        select="xxf:instance('control-instance')/browsePhysicalDatabases/sortCriteria"/>
                                    <xxf:variable name="sortDirection"
                                        select="xxf:instance('control-instance')/browsePhysicalDatabases/sortDirection"/>
                                    <xxf:variable name="dataType"
                                        select="if ($sortCriteria='size') then 'number' else 'text'"/>

                                    <xxf:variable name="sortedNodeList"
                                        select="xxf:sort($filteredNodeList,@*[name()=$sortCriteria],$dataType, $sortDirection)"/>

                                    <xf:repeat nodeset="$sortedNodeList">
                                        <xxf:variable name="node" select="."/>
                                        <xxf:variable name="nodeCount"
                                            select="if ((position() mod 2) = 0) then 'even' else 'odd'"/>
                                        <xxf:variable name="nodeClass"
                                            select="if (xxf:instance('control-instance')/browsePhysicalDatabases/node[@type='resource']/@name=$node/@name) then 'selected' else $nodeCount"/>

                                        <!-- Display node and action when node is selected -->

                                        <!-- Set the node when user clicks in row in the selection -->
                                        <xf:action ev:event="DOMActivate">
                                            <xf:dispatch name="setBrowsePhysicalDatabasesNode"
                                                target="main-model">
                                                <xxf:context name="node" select="$node"/>
                                            </xf:dispatch>
                                        </xf:action>

                                        <xhtml:tr class="{$nodeClass}">
                                            <xhtml:td>
                                                <xhtml:div>
                                                  <xf:trigger appearance="minimal" xxf:modal="true"
                                                  class="selection">
                                                  <xf:label ref="$node/@name"/>
                                                  </xf:trigger>
                                                </xhtml:div>
                                            </xhtml:td>
                                            <xhtml:td>
                                                <xhtml:div>
                                                  <xf:trigger appearance="minimal" xxf:modal="true"
                                                  class="selection">
                                                  <xf:label ref="$node/@type"/>
                                                  </xf:trigger>
                                                </xhtml:div>
                                            </xhtml:td>
                                            <xhtml:td>
                                                <xhtml:div>
                                                  <xf:trigger appearance="minimal" xxf:modal="true"
                                                  class="selection">
                                                  <xf:label ref="$node/@size"/>
                                                  </xf:trigger>
                                                </xhtml:div>
                                            </xhtml:td>
                                            <xhtml:td>
                                                <xhtml:div>
                                                  <xf:trigger appearance="minimal" xxf:modal="true"
                                                  class="selection">
                                                  <xf:label ref="$node/@lastModified"/>
                                                  </xf:trigger>
                                                </xhtml:div>
                                            </xhtml:td>
                                        </xhtml:tr>

                                    </xf:repeat>
                                </xhtml:tbody>
                            </xhtml:table>
                        </xhtml:div>
                    </xhtml:div>
                    <!-- End of browsePhysicalDatabases -->



                    <!-- === Browse the logical database ============
                         browseLogicalDatabases
                         ============================================= -->
                    <xhtml:div
                        class="{if ($adminTask='browseLogicalDatabases') then '' else 'hidden'}">
                        <xxf:variable name="nodeHierarchy"
                            select="xxf:instance('control-instance')/browseLogicalDatabases/nodeHierarchy/descendant::node"/>
                        <!-- Use tree selection for the nodeHierarchy -->
                        <xf:select1 appearance="xxf:tree"
                            ref="xxf:instance('control-instance')/browseLogicalDatabases/node/@path">
                            <xf:itemset nodeset="$nodeHierarchy">
                                <xf:label ref="@name"/>
                                <xf:value ref="@path"/>
                            </xf:itemset>
                            <xf:action ev:event="xforms-value-changed">
                                <!-- Set the node that was selected (there should be only one matching the selected path) -->
                                <xxf:variable name="selectedNode"
                                    select="$nodeHierarchy[@path=xxf:instance('control-instance')/browseLogicalDatabases/node/@path]"/>
                                <xf:dispatch name="setBrowseLogicalDatabasesNode"
                                    target="main-model">
                                    <xxf:context name="node" select="$selectedNode"/>
                                </xf:dispatch>
                            </xf:action>
                        </xf:select1>
                    </xhtml:div>
                    <!-- End of browseLogicalDatabases -->
                    <!-- Debugging -->
                    <!--
                    <xf:output
                        ref="xxf:serialize( xxf:call-xpl('oxf:/ops/utils/formatting/format.xpl', 'data', xxf:instance('control-instance')/browsePhysicalDatabases, 'data')/*, 'html')"
                        mediatype="text/html"/>
-->
                    <!--
                    <xf:output ref="xxf:serialize( xxf:call-xpl('oxf:/ops/utils/formatting/format.xpl', 'data', xxf:instance('browserResource-instance'), 'data')/*, 'html')" mediatype="text/html"/>
                    -->


                    <!-- ======================================================================
                         Select entries for the export data set.
                        These come from the specialty dictionary loaded as the dictionary
                        The entries are sorted by displayName
                        Only show this if there is a data set selected -->
                    <xhtml:div
                        class="{if ($adminTask='manageExportDataSet' and xxf:instance('exportDataSetControl-instance')/exportDataSet/id != '') then 'tableContainer' else 'hidden'}">

                        <!-- Manage EDS Display -->
                        <xi:include href="cityEHRManageExportDataSetDisplay.xhtml"/>

                    </xhtml:div>



                    <!-- ===Manage cohort searches 
                             Select user and list saved cohort searches on left hand side.
                             Select role and list saved cohort searches on right hand side.
                             User transfer buttons to copy user searches to role, or to remove a search from the role.
                             Select searches to export.
                             === -->
                    <xhtml:div
                        class="{if ($adminTask='manageCohortSearch') then 'tableContainer' else 'hidden'}">
                        <xhtml:table class="displayList">
                            <xhtml:thead>
                                <xhtml:tr>
                                    <xhtml:td>
                                        <!-- Select application user -->
                                        <xxf:variable name="userList"
                                            select="xxf:instance('userList-instance')/user"/>
                                        <xf:select1
                                            ref="xxf:instance('control-instance')/manageCohortSearch/userIRI">
                                            <xf:label
                                                ref="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/manageCohortSearch/userLabel"/>
                                            <xf:itemset nodeset="$userList">
                                                <xf:label
                                                  ref="concat(credentials/username,' (',credentials/userId,')')"/>
                                                <xf:value ref="@id"/>
                                            </xf:itemset>
                                            <!-- Load cohort searches when a user is selected -->
                                            <xf:action ev:event="xforms-value-changed">
                                                <xxf:variable name="selectedUser"
                                                  select="$userList[@id=xxf:instance('control-instance')/manageCohortSearch/userIRI]"/>
                                                <xf:setvalue
                                                  ref="xxf:instance('control-instance')/manageCohortSearch/userId"
                                                  value="$selectedUser/credentials/userId"/>
                                                <xf:dispatch name="get-user-searches"
                                                  target="manageCohortSearch-model">
                                                  <xxf:context name="userId"
                                                  select="$selectedUser/credentials/userId"/>
                                                </xf:dispatch>
                                            </xf:action>
                                        </xf:select1>
                                        <!-- Select type of cohort to display (all|search|cohort) -->
                                        <xf:select1
                                            ref="xxf:instance('control-instance')/manageCohortSearch/cohortType">
                                            <xf:label
                                                ref="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/manageCohortSearch/cohortTypeLabel"/>
                                            <xf:itemset
                                                nodeset="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/manageCohortSearch/cohortType/item">
                                                <xf:label ref="@displayName"/>
                                                <xf:value ref="@value"/>
                                            </xf:itemset>
                                            <xf:action ev:event="xforms-value-changed">
                                                <!-- Not doing anything here -->
                                            </xf:action>
                                        </xf:select1>
                                    </xhtml:td>

                                    <!-- Select application role -->
                                    <xhtml:td>
                                        <xxf:variable name="roleList"
                                            select="xxf:instance('application-parameters-instance')/rbac/role"/>
                                        <xf:select1
                                            ref="xxf:instance('control-instance')/manageCohortSearch/roleIRI">
                                            <xf:label
                                                ref="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/manageCohortSearch/roleLabel"/>
                                            <xf:itemset nodeset="$roleList">
                                                <xf:label ref="./@displayName"/>
                                                <xf:value ref="@value"/>
                                            </xf:itemset>
                                            <!-- Load cohort searches when a role is selected -->
                                            <xf:action ev:event="xforms-value-changed">
                                                <xxf:variable name="selectedRole"
                                                  select="$roleList[@value=xxf:instance('control-instance')/manageCohortSearch/roleIRI]"/>
                                                <xf:dispatch name="get-shared-searches"
                                                  target="manageCohortSearch-model">
                                                  <xxf:context name="roleList"
                                                  select="(xxf:instance('control-instance')/manageCohortSearch/roleIRI)"
                                                  />
                                                </xf:dispatch>
                                            </xf:action>
                                        </xf:select1>
                                    </xhtml:td>

                                </xhtml:tr>
                            </xhtml:thead>

                            <!-- Display lists of cohort searches for selected user and selected role.
                                 The lists are filtered by cohortType -->
                            <xhtml:tbody>
                                <xxf:variable name="cohortType"
                                    select="xxf:instance('control-instance')/manageCohortSearch/cohortType"/>
                                <xhtml:tr>
                                    <!-- Cohort searches for the selected user -->
                                    <xxf:variable name="userSearches"
                                        select="xxf:instance('userSearches-instance')/search"/>
                                    <!-- Displayed searches - cohorts, searches or both -->
                                    <xxf:variable name="displayedUserSearches"
                                        select="if ($cohortType='search') then $userSearches[searchTerms='true'] else if ($cohortType='cohort') then $userSearches[searchTerms='false'] else $userSearches"/>
                                    <xhtml:td>
                                        <!-- Selectable list of cohort searches -->
                                        <xhtml:table class="selectionList">
                                            <xhtml:tbody>
                                                <xf:repeat nodeset="$displayedUserSearches">
                                                  <xxf:variable name="searchCount"
                                                  select="if ((position() mod 2) = 0) then 'even' else 'odd'"/>
                                                  <xxf:variable name="userSearch" select="."/>
                                                  <xhtml:tr class="{$searchCount}">
                                                  <xhtml:td>
                                                  <xhtml:div>
                                                  <!-- Load search and save as shared search for role when users selects -->
                                                  <xf:trigger appearance="minimal" xxf:modal="true"
                                                  class="selection">
                                                  <xf:label ref="$userSearch/cohortName"/>
                                                  <!-- When user clicks on this row in the table -->
                                                  <xf:action ev:event="DOMActivate">
                                                  <xf:setvalue
                                                  ref="xxf:instance('control-instance')/manageCohortSearch/userSearchId"
                                                  value="$userSearch/id"/>
                                                  <xf:dispatch name="set-SharedSearchForRole"
                                                  target="main-model"/>
                                                  </xf:action>
                                                  </xf:trigger>
                                                  </xhtml:div>
                                                  </xhtml:td>
                                                  </xhtml:tr>
                                                </xf:repeat>
                                            </xhtml:tbody>
                                        </xhtml:table>
                                    </xhtml:td>

                                    <!-- Cohort searches for the selected role -->
                                    <xxf:variable name="sharedSearches"
                                        select="xxf:instance('sharedSearches-instance')/search"/>
                                    <!-- Displayed searches - cohorts, searches or both -->
                                    <xxf:variable name="displayedSharedSearches"
                                        select="if ($cohortType='search') then $sharedSearches[searchTerms='true'] else if ($cohortType='cohort') then $sharedSearches[searchTerms='false'] else $sharedSearches"/>

                                    <xhtml:td>
                                        <!-- Selectable list of cohort searches -->
                                        <xhtml:table class="selectionList">
                                            <xhtml:tbody>
                                                <xf:repeat nodeset="$displayedSharedSearches">
                                                  <xxf:variable name="searchCount"
                                                  select="if ((position() mod 2) = 0) then 'even' else 'odd'"/>
                                                  <xxf:variable name="sharedSearch" select="."/>
                                                  <xhtml:tr class="{$searchCount}">
                                                  <xhtml:td>
                                                  <xhtml:div>
                                                  <!-- Select/deselect sharedSearch directly -->
                                                  <xf:input ref="$sharedSearch/@selected"/>
                                                  <!-- Also click on name to select -->
                                                  <xf:trigger appearance="minimal" xxf:modal="true"
                                                  class="selection">
                                                  <xf:label ref="$sharedSearch/cohortName"/>
                                                  <!-- When user clicks on this row in the table -->
                                                  <xf:action ev:event="DOMActivate">
                                                  <xf:setvalue ref="$sharedSearch/@selected"
                                                  value="if (.=true()) then false() else true()"/>
                                                  </xf:action>
                                                  </xf:trigger>
                                                  </xhtml:div>
                                                  </xhtml:td>
                                                  </xhtml:tr>
                                                </xf:repeat>
                                            </xhtml:tbody>
                                        </xhtml:table>
                                    </xhtml:td>
                                </xhtml:tr>
                            </xhtml:tbody>

                        </xhtml:table>

                        <!-- Debugging -->
                        <!--
                        <p>User searches:<br/>
                            <xf:output
                                ref="xxf:serialize(xxf:call-xpl('oxf:/ops/utils/formatting/format.xpl', 'data', xxf:instance('userSearches-instance'), 'data')/*, 'html')"
                                mediatype="text/html"/>
                        </p>
                        -->

                    </xhtml:div>


                    <!-- ===View Audit Log 
                         Show the audit log for the selected user -->
                    <xhtml:div
                        class="{if ($adminTask='viewAuditLog') then 'tableContainer' else 'hidden'}">
                        <!-- Only show userId if showing log for specific user -->
                        <xxf:variable name="userIdClass"
                            select="if (xxf:instance('control-instance')/viewAuditLog/userIRI='') then '' else 'hidden'"/>
                        <xhtml:table class="selectionList">
                            <xhtml:thead>
                                <xhtml:tr>
                                    <!-- User Id - only if showing all users -->
                                    <xhtml:td class="{$userIdClass}">
                                        <xf:output
                                            ref="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/viewAuditLog/userIdLabel"
                                        />
                                    </xhtml:td>
                                    <!-- Session start -->
                                    <xhtml:td>
                                        <xf:output
                                            ref="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/viewAuditLog/sessionStartLabel"
                                        />
                                    </xhtml:td>
                                    <!-- Session end -->
                                    <xhtml:td>
                                        <xf:output
                                            ref="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/viewAuditLog/sessionEndLabel"
                                        />
                                    </xhtml:td>
                                    <!-- Pages visited -->
                                    <xhtml:td>
                                        <xf:output
                                            ref="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/viewAuditLog/pageVisitLabel"
                                        />
                                    </xhtml:td>
                                    <!-- Patients accessed -->
                                    <xhtml:td>
                                        <xf:output
                                            ref="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/viewAuditLog/patientVisitLabel"
                                        />
                                    </xhtml:td>
                                </xhtml:tr>
                            </xhtml:thead>
                            <xhtml:tbody>
                                <!-- One row for each session in the audit log -->
                                <xf:repeat
                                    nodeset="xxf:instance('auditLogSessionList-instance')/auditLogSession">
                                    <xxf:variable name="auditLogSession" select="."/>
                                    <xxf:variable name="sessionCount"
                                        select="if ((position() mod 2) = 0) then 'even' else 'odd'"/>
                                    <xxf:variable name="sessionClass"
                                        select="if ($auditLogSession/@handle=xxf:instance('control-instance')/viewAuditLog/auditLogSessionHandle) then 'selected' else $sessionCount"/>
                                    <xhtml:tr class="{$sessionClass}">
                                        <!-- User Id - only if showing all users -->
                                        <xhtml:td class="{$userIdClass}">
                                            <xhtml:div>
                                                <xf:trigger appearance="minimal" xxf:modal="true"
                                                  class="selection">
                                                  <xf:label ref="$auditLogSession/@userId"/>
                                                </xf:trigger>
                                            </xhtml:div>
                                        </xhtml:td>
                                        <!-- Session start -->
                                        <xhtml:td>
                                            <xhtml:div>
                                                <xf:trigger appearance="minimal" xxf:modal="true"
                                                  class="selection">
                                                  <xf:label ref="$auditLogSession/@start"/>
                                                </xf:trigger>
                                            </xhtml:div>
                                        </xhtml:td>
                                        <!-- Session end -->
                                        <xhtml:td>
                                            <xhtml:div>
                                                <xf:trigger appearance="minimal" xxf:modal="true"
                                                  class="selection">
                                                  <xf:label ref="$auditLogSession/@finish"/>
                                                </xf:trigger>
                                            </xhtml:div>
                                        </xhtml:td>
                                        <!-- Pages visited -->
                                        <xhtml:td>
                                            <xhtml:div>
                                                <xf:trigger appearance="minimal" xxf:modal="true"
                                                  class="selection">
                                                  <xf:label ref="$auditLogSession/@pageVists"/>
                                                </xf:trigger>
                                            </xhtml:div>
                                        </xhtml:td>
                                        <!-- Patients accessed -->
                                        <xhtml:td>
                                            <xhtml:div>
                                                <xf:trigger appearance="minimal" xxf:modal="true"
                                                  class="selection">
                                                  <xf:label ref="$auditLogSession/@patientVisits"/>
                                                </xf:trigger>
                                            </xhtml:div>
                                            <!-- If this is the selected session, list the patients -->
                                            <xhtml:span class="{$sessionCount}">
                                                <xf:repeat
                                                  nodeset="if ($auditLogSession/@handle=xxf:instance('control-instance')/viewAuditLog/auditLogSessionHandle) then $auditLogSession/patient else ()">
                                                  <xhtml:p>
                                                  <xf:output ref="./@id"/>
                                                  </xhtml:p>
                                                </xf:repeat>
                                            </xhtml:span>
                                        </xhtml:td>
                                        <!-- User selects fron the list -->
                                        <xf:action ev:event="DOMActivate">
                                            <xf:setvalue
                                                ref="xxf:instance('control-instance')/viewAuditLog/auditLogSessionHandle"
                                                value="$auditLogSession/@handle"/>
                                        </xf:action>
                                    </xhtml:tr>
                                </xf:repeat>

                            </xhtml:tbody>

                        </xhtml:table>

                    </xhtml:div>


                    <!-- ===Select users for the Care Team.
                        These come from the user list in userList-instance, without the current user (who must always be a member of the care team)
                        The users are sorted by displayName
                        Only show this if there is a care team selected === -->
                    <xhtml:div class="tableContainer">
                        <xhtml:table
                            class="{if ($adminTask='manageCareTeams' and xxf:instance('control-instance')/manageCareTeams/careTeamId != '') then 'displayList' else 'hidden'}">
                            <!-- Filter matches start of userId -->
                            <xxf:variable name="userIRI" select="xxf:instance('user-instance')/@id"/>
                            <xxf:variable name="filter"
                                select="concat('^',xxf:instance('control-instance')/manageCareTeams/filter)"/>
                            <!-- User lists exclude the users in the care team -->
                            <xxf:variable name="userList"
                                select="xxf:instance('userList-instance')/user[not(@id=xxf:instance('careTeam-instance')/user/@id)]"/>
                            <xxf:variable name="filteredUserList"
                                select="$userList[matches(credentials/userId,$filter,'i')]"/>
                            <xxf:variable name="careTeamUserList"
                                select="xxf:instance('careTeam-instance')/user[@id!=$userIRI]"/>
                            <xxf:variable name="careTeamPatientList"
                                select="xxf:instance('careTeam-instance')/patient"/>
                            <xhtml:thead>
                                <xhtml:tr>
                                    <!-- Application users, without the current user (who must always be in the care team) -->
                                    <xhtml:th>
                                        <xf:output
                                            ref="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/manageCareTeams/applicationUsersLabel"/>
                                        <xf:output
                                            ref="concat(' (',count($filteredUserList),'/',count($userList),')')"/>
                                        <!-- Filter for users -->
                                        <xf:input
                                            ref="xxf:instance('control-instance')/manageCareTeams/filter"
                                            incremental="true"/>
                                    </xhtml:th>
                                    <!-- Care Team users -->
                                    <xhtml:th>
                                        <xf:output
                                            ref="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/manageCareTeams/careTeamUsersLabel"/>
                                        <!-- Count of all users in careTeam-instance -->
                                        <xf:output
                                            ref="concat(' (',count(xxf:instance('careTeam-instance')/user),')')"
                                        />
                                    </xhtml:th>
                                    <!-- Care team patients -->
                                    <xhtml:th>
                                        <xf:output
                                            ref="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/manageCareTeams/careTeamPatientsLabel"/>
                                        <!-- Count of all patients in careTeam-instance -->
                                        <xf:output
                                            ref="concat(' (',count(xxf:instance('careTeam-instance')/patient),')')"
                                        />
                                    </xhtml:th>
                                </xhtml:tr>
                            </xhtml:thead>
                            <xhtml:tbody>
                                <xhtml:tr>
                                    <!-- Application users (from userList-instance) -->
                                    <xhtml:td>
                                        <xhtml:table class="selectionList">
                                            <xhtml:tbody>
                                                <xf:repeat nodeset="$filteredUserList">
                                                  <xxf:variable name="userCount"
                                                  select="if ((position() mod 2) = 0) then 'even' else 'odd'"/>
                                                  <xxf:variable name="user" select="."/>
                                                  <xhtml:tr class="{$userCount}">
                                                  <xhtml:td>
                                                  <xhtml:div>
                                                  <xf:trigger appearance="minimal" xxf:modal="true"
                                                  class="selection">
                                                  <xf:label
                                                  ref="concat($user/credentials/username,' (',$user/credentials/userId,')')"/>
                                                  <xf:action ev:event="DOMActivate">
                                                  <xf:setvalue
                                                  ref="xxf:instance('control-instance')/manageCareTeams/applicationUser"
                                                  value="$user/@id"/>
                                                  <xf:setvalue
                                                  ref="xxf:instance('control-instance')/manageCareTeams/careTeamUser"
                                                  value="''"/>
                                                  <xf:dispatch name="setCareTeamUsers"
                                                  target="main-model"/>
                                                  </xf:action>
                                                  </xf:trigger>
                                                  </xhtml:div>
                                                  </xhtml:td>
                                                  </xhtml:tr>
                                                </xf:repeat>
                                            </xhtml:tbody>
                                        </xhtml:table>
                                    </xhtml:td>
                                    <!-- Care Team Users (should always include the current user) -->
                                    <xhtml:td>
                                        <xhtml:table class="selectionList">
                                            <xhtml:tbody>
                                                <!-- Current user shown at top and cannot be selected to remove -->
                                                <xhtml:tr class="even">
                                                  <xhtml:td>
                                                  <xf:output
                                                  ref="concat(xxf:instance('user-instance')/credentials/username,' (',xxf:instance('user-instance')/credentials/userId,')')"
                                                  />
                                                  </xhtml:td>
                                                </xhtml:tr>
                                                <xf:repeat nodeset="$careTeamUserList">
                                                  <xxf:variable name="userCount"
                                                  select="if ((position() mod 2) = 0) then 'odd' else 'even'"/>
                                                  <xxf:variable name="userIRI" select="./@id"/>
                                                  <xxf:variable name="user"
                                                  select="xxf:instance('userList-instance')/user[@id=$userIRI]"/>
                                                  <xhtml:tr class="{$userCount}">
                                                  <xhtml:td>
                                                  <xhtml:div>
                                                  <xf:trigger appearance="minimal" xxf:modal="true"
                                                  class="selection">
                                                  <xf:label
                                                  ref="concat($user/credentials/username,' (',$user/credentials/userId,')')"/>
                                                  <xf:action ev:event="DOMActivate"
                                                  if="xxf:instance('control-instance')/manageCareTeams/careTeamUser!=''">
                                                  <xf:setvalue
                                                  ref="xxf:instance('control-instance')/manageCareTeams/careTeamUser"
                                                  value="$userIRI"/>
                                                  <xf:setvalue
                                                  ref="xxf:instance('control-instance')/manageCareTeams/applicationUser"
                                                  value="''"/>
                                                  <xf:dispatch name="setCareTeamUsers"
                                                  target="main-model"/>
                                                  </xf:action>
                                                  </xf:trigger>
                                                  </xhtml:div>
                                                  </xhtml:td>
                                                  </xhtml:tr>
                                                </xf:repeat>
                                            </xhtml:tbody>
                                        </xhtml:table>
                                    </xhtml:td>
                                    <!-- Care team patients -->
                                    <xhtml:td>
                                        <xhtml:table class="selectionList">
                                            <xhtml:tbody>
                                                <xf:repeat nodeset="$careTeamPatientList">
                                                  <xxf:variable name="patient" select="."/>
                                                  <xxf:variable name="patientCount"
                                                  select="if ((position() mod 2) = 0) then 'odd' else 'even'"/>
                                                  <xhtml:tr class="{$patientCount}">
                                                  <xhtml:td>
                                                  <xf:input ref="$patient/@selected"/>
                                                  <xf:output ref="$patient/@id"/>
                                                  </xhtml:td>
                                                  </xhtml:tr>
                                                </xf:repeat>
                                            </xhtml:tbody>
                                        </xhtml:table>
                                    </xhtml:td>
                                </xhtml:tr>
                            </xhtml:tbody>
                        </xhtml:table>
                    </xhtml:div>


                    <!-- End of select users for care team -->

                    <!-- ===Set coding for knowledge sources                        
                        ================================================== -->
                    <xhtml:div
                        class="{if ($adminTask='codeKnowledgeSources') then '' else 'hidden'}">
                        <!-- Debugging -->
                        <!--
                        <xhtml:p class="message">Knowledge Map:<xhtml:br/>
                            <xf:output
                                ref="xxf:serialize(xxf:call-xpl('oxf:/ops/utils/formatting/format.xpl', 'data', xxf:instance('knowledgeMap-instance'), 'data')/*, 'html')"
                                mediatype="text/html"/>
                        </xhtml:p>
                        -->
                        <xhtml:table
                            class="{if ($adminTask='codeKnowledgeSources') then 'selectionList' else 'hidden'}">
                            <xhtml:thead>
                                <!-- Display column headers  -->
                                <xhtml:tr>
                                    <xf:repeat
                                        nodeset="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/codeKnowledgeSources/headings/displayName">
                                        <xhtml:td>
                                            <xf:output ref="."/>
                                        </xhtml:td>
                                    </xf:repeat>
                                </xhtml:tr>
                            </xhtml:thead>

                            <!-- Enter code details -->
                            <xhtml:tbody>
                                <xxf:variable name="mapList"
                                    select="if (xxf:instance('control-instance')/codeKnowledgeSources/codeSystem='') then xxf:instance('knowledgeMap-instance')/rdf:RDF/rdf:Description else xxf:instance('knowledgeMap-instance')/rdf:RDF/rdf:Description[dc:subject/@rdf:datatype = xxf:instance('control-instance')/codeKnowledgeSources/codeSystem]"/>

                                <xf:repeat id="map-repeat" nodeset="$mapList">
                                    <xxf:variable name="map" select="."/>
                                    <xxf:variable name="selectedMapIndex"
                                        select="index('map-repeat')"/>
                                    <xhtml:tr>
                                        <xhtml:td>
                                            <xf:output ref="$map/dc:subject/@rdf:datatype"/>
                                        </xhtml:td>
                                        <xhtml:td>
                                            <xf:input ref="$map/dc:subject" xxf:size="10"
                                                incremental="true"/>
                                        </xhtml:td>
                                        <xhtml:td>
                                            <xf:input ref="$map/dc:description" xxf:size="50"
                                                incremental="true"/>
                                        </xhtml:td>
                                        <xhtml:td>
                                            <xf:input ref="$map/@rdf:about" xxf:size="50"
                                                incremental="true"/>
                                        </xhtml:td>
                                    </xhtml:tr>
                                    <!-- Value changed -->
                                    <xf:action ev:event="xforms-value-changed">
                                        <xf:setvalue
                                            ref="xxf:instance('control-instance')/codeKnowledgeSources/status"
                                            value="'edited'"/>
                                    </xf:action>
                                    <!-- Row selected -->
                                    <xf:action ev:event="DOMActivate">
                                        <xf:setvalue
                                            ref="xxf:instance('control-instance')/codeKnowledgeSources/selectedMapIndex"
                                            value="$selectedMapIndex"/>
                                    </xf:action>
                                </xf:repeat>
                            </xhtml:tbody>
                        </xhtml:table>
                    </xhtml:div>


                    <!-- ===Display list of users when managing Users === 
                         UserId is always shown 
                         Password is shown if that option is selected
                         Other credentials shown are specfied in userAccountDetails with listDisplay-'true'                        
                         ================================================== -->
                    <xhtml:div class="tableContainer">
                        <xhtml:table
                            class="{if ($adminTask='manageUsers') then 'selectionList' else 'hidden'}">
                            <xxf:variable name="userAccountDetails"
                                select="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/manageUsers/userAccountDetails/item[@listDisplay='true']"/>
                            <xxf:variable name="showPassword"
                                select="xxf:instance('control-instance')/manageUsers/showPassword"/>
                            <xxf:variable name="showPasswordClass"
                                select="if ($showPassword='true') then '' else 'hidden'"/>
                            <!-- Filter matches start of userId -->
                            <xxf:variable name="filter"
                                select="concat('^',xxf:instance('control-instance')/manageUsers/filter)"/>
                            <xxf:variable name="filteredUserList"
                                select="xxf:instance('userList-instance')/user[matches(credentials/userId,$filter,'i')]"/>
                            <xhtml:thead>
                                <!-- Display column headers for user details as specified in view-parameters -->
                                <xhtml:tr>
                                    <!-- User id -->
                                    <xhtml:td>
                                        <xf:output
                                            ref="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/manageUsers/userIdLabel"/>
                                        <!-- Filter for user id -->
                                        <xf:input
                                            ref="xxf:instance('control-instance')/manageUsers/filter"
                                            incremental="true"/>
                                    </xhtml:td>
                                    <!-- Password -->
                                    <xhtml:td class="{$showPasswordClass}">
                                        <xf:output
                                            ref="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/manageUsers/password1Label"
                                        />
                                    </xhtml:td>
                                    <!-- credentials -->
                                    <xf:repeat nodeset="$userAccountDetails">
                                        <xxf:variable name="item" select="."/>
                                        <xhtml:td>
                                            <xf:output ref="$item/@displayName"/>
                                        </xhtml:td>
                                    </xf:repeat>
                                    <xhtml:td>
                                        <xf:output
                                            ref="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/manageUsers/lastLoginLabel"
                                        />
                                    </xhtml:td>
                                    <!--
                                    <xhtml:td> Handle </xhtml:td>
                                    -->
                                </xhtml:tr>
                            </xhtml:thead>

                            <!-- Display user details for each user in userList-instance -->
                            <xhtml:tbody>
                                <xf:repeat id="user-repeat" nodeset="$filteredUserList">
                                    <xxf:variable name="recordCount"
                                        select="if ((position() mod 2) = 0) then 'even' else 'odd'"/>
                                    <xxf:variable name="user" select="."/>
                                    <xxf:variable name="credentials" select="$user/credentials"/>
                                    <xhtml:tr class="{$recordCount}">
                                        <!-- UserId and password -->
                                        <xhtml:td>
                                            <xhtml:div>
                                                <xf:trigger appearance="minimal" xxf:modal="true"
                                                  class="selection">
                                                  <xf:label ref="$credentials/userId"/>
                                                </xf:trigger>
                                            </xhtml:div>
                                        </xhtml:td>
                                        <xhtml:td class="{$showPasswordClass}">
                                            <xhtml:div>
                                                <xf:trigger appearance="minimal" xxf:modal="true"
                                                  class="selection">
                                                  <xf:label ref="$credentials/password"/>
                                                </xf:trigger>
                                            </xhtml:div>
                                        </xhtml:td>
                                        <!-- Credentials (as listed in view-parameters) -->
                                        <xf:repeat nodeset="$userAccountDetails">
                                            <xxf:variable name="item" select="."/>
                                            <xhtml:td>
                                                <xhtml:div>
                                                  <xf:trigger appearance="minimal" xxf:modal="true"
                                                  class="selection">
                                                  <xf:label
                                                  ref="$credentials/*[name(.)=$item/@name]"/>
                                                  </xf:trigger>
                                                </xhtml:div>
                                            </xhtml:td>
                                        </xf:repeat>
                                        <!-- Last logged in -->
                                        <xhtml:td>
                                            <xhtml:div>
                                                <xf:trigger appearance="minimal" xxf:modal="true"
                                                  class="selection">
                                                  <xf:label ref="$user/lastLogin/effectiveTime"/>
                                                </xf:trigger>
                                            </xhtml:div>
                                        </xhtml:td>
                                        <!-- Handle (debugging) -->
                                        <!--
                                        <xhtml:td>
                                            <xf:output ref="$user/@handle"/>
                                        </xhtml:td>
                                        -->

                                        <!-- When user makes selection from the list -->
                                        <xf:action ev:event="DOMActivate">
                                            <xf:setvalue
                                                ref="xxf:instance('control-instance')/manageUsers/managedUserId"
                                                value="$credentials/userId"/>
                                            <xf:dispatch name="load-managed-user"
                                                target="main-model"/>
                                        </xf:action>

                                    </xhtml:tr>
                                </xf:repeat>
                            </xhtml:tbody>
                        </xhtml:table>
                    </xhtml:div>
                    <!-- End of display list of users -->
                    <!-- Debugging -->
                    <!--
                    <p>User instance:<br/>
                        <xf:output
                            ref="xxf:serialize(xxf:call-xpl('oxf:/ops/utils/formatting/format.xpl', 'data', xxf:instance('user-instance'), 'data')/*, 'html')"
                            mediatype="text/html"/>
                    </p>
                    -->
                    <!--
                    <p>Managed User instance:<br/>
                        <xf:output
                            ref="xxf:serialize(xxf:call-xpl('oxf:/ops/utils/formatting/format.xpl', 'data', xxf:instance('managedUser-instance'), 'data')/*, 'html')"
                            mediatype="text/html"/>
                    </p>
                    -->
                    <!--
                    <p>Export Data Set instance:<br/>
                        <xf:output ref="xxf:serialize(xxf:call-xpl('oxf:/ops/utils/formatting/format.xpl', 'data', xxf:instance('exportDataSet-instance'), 'data')/*, 'html')" mediatype="text/html"/>
                    </p>

                    -->


                    <!-- ===Display of information on management of information models === 
                         ================================================================== -->
                    <xhtml:div
                        class="{if ($adminTask='manageInformationModel') then '' else 'hidden'}">
                        <!-- Displaying summary - no information model is loaded.
                             Displays a list of specialties in column 1 and corresponding list of models in column 2 -->
                        <xhtml:table
                            class="{if (xxf:instance('control-instance')/manageInformationModel/informationModelResource='') then 'displayList' else 'hidden'}">

                            <xxf:variable name="selectedSpecialty"
                                select="xxf:instance('control-instance')/manageInformationModel/specialtyIRI"/>
                            <xxf:variable name="specialtyList"
                                select="if ($selectedSpecialty='') then distinct-values(xxf:instance('specialtyList-instance')/iso-13606:Folder/@id) else $selectedSpecialty"/>
                            <xxf:variable name="informationModelList"
                                select="if ($selectedSpecialty='') then xxf:instance('informationModelList-instance')/informationModel else xxf:instance('informationModelList-instance')/informationModel[specialtyIRI=$selectedSpecialty]"/>
                            <xhtml:thead>
                                <xhtml:tr>
                                    <xhtml:td>
                                        <xf:output
                                            ref="if ($selectedSpecialty='') then xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/specialtiesHeader else xxf:instance('control-instance')/manageInformationModel/specialtyDisplayName"/>
                                        <xf:output
                                            ref="if ($selectedSpecialty='') then concat('(',count($specialtyList),')') else ''"
                                        />
                                    </xhtml:td>
                                    <xhtml:td>
                                        <xf:output
                                            ref="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/modelsHeader"/>
                                        <xf:output
                                            ref="concat('(',count($informationModelList),')')"/>
                                    </xhtml:td>
                                </xhtml:tr>
                            </xhtml:thead>
                            <xhtml:tbody>
                                <!-- One row for each specialty -->
                                <xf:repeat nodeset="$specialtyList">
                                    <xxf:variable name="specialtyIRI" select="."/>
                                    <xhtml:tr>
                                        <xhtml:td>
                                            <xxf:variable name="specialty"
                                                select="xxf:instance('specialtyList-instance')/iso-13606:Folder[@id=$specialtyIRI][1]"/>
                                            <xf:output
                                                ref="concat($specialty/@displayName,' (',$specialtyIRI,')')"
                                            />
                                        </xhtml:td>
                                        <!-- Information models -->
                                        <xhtml:td>
                                            <xhtml:ol>
                                                <xf:repeat
                                                  nodeset="xxf:instance('informationModelList-instance')/informationModel[specialtyIRI=$specialtyIRI]">
                                                  <xhtml:li>
                                                  <xf:output ref="./modelIRI"/>
                                                  <xhtml:br />
                                                  <xf:output ref="./informationModelType"/>
                                                  <xhtml:br />
                                                  <xf:output ref="./modelDisplayName"/>
                                                  <xhtml:br />
                                                  <xf:output ref="./importedFromFile"/>
                                                  <xhtml:br />
                                                  </xhtml:li>
                                                  <xhtml:li>
                                                  <xhtml:br />
                                                  </xhtml:li>
                                                </xf:repeat>
                                            </xhtml:ol>
                                        </xhtml:td>
                                    </xhtml:tr>
                                </xf:repeat>
                            </xhtml:tbody>
                        </xhtml:table>

                        <!-- If an information model is loaded
                             Can be a specialty or class model    
                        
                             Class information model is loaded
                             There are two cases to display, depending on ontologyView                            
                                1) Display nodes by level
                                2) Browse the class hierarchy
                                
                             Specialty model is loaded
                             There are two cases:
                                (1) Display the full data dictionary
                                (2) Browse the IS0-13606 hierarchy
                        
                             The displays are made by XSLT transformation stored in html-instance
                         -->
                        <xhtml:span
                            class="{if (xxf:instance('control-instance')/manageInformationModel/informationModelResource!='') then '' else 'hidden'}">
                            <!-- Parameters for ontology statistics are defined in view-parameters.
                                Evaluates xpaths expressions specified there.
                                But make sure these are only evaluated when the stats are being displayed -->
                            <xhtml:ol
                                class="{if (xxf:instance('control-instance')/manageInformationModel/showOntologyDetails='true') then '' else 'hidden'}">
                                <xf:repeat
                                    nodeset="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/ontologyDetails/parameter">
                                    <xxf:variable name="parameter" select="."/>
                                    <xhtml:li>
                                        <xf:output ref="$parameter"/>
                                        <xf:output
                                            ref="if ($adminTask='manageInformationModel' and $parameter/@xpath !='') then xxf:evaluate($parameter/@xpath) else ''"
                                        />
                                    </xhtml:li>
                                </xf:repeat>
                            </xhtml:ol>
                            <!-- Language Pack 
                                 Display or edit the language pack.
                                 Use xf:group to make sure controls are only active when needed.
                                 The information model is in resource-instance, the languagePack is in languagePack-instance 
                                 
                                  <ClassAssertion>
                                    <Class IRI="#CityEHR:Term"/>
                                    <NamedIndividual IRI="#CityEHR:Term:Beightonscore"/>
                                  </ClassAssertion>
                            
                                 <DataPropertyAssertion>
                                    <DataProperty IRI="#hasValue"/>
                                    <NamedIndividual IRI="#CityEHR:Term:Beightonscore"/>
                                    <Literal xml:lang="en-gb" datatypeIRI="&amp;rdf;PlainLiteral">Beighton score</Literal>
                                 </DataPropertyAssertion>
                                 -->
                            <xhtml:span
                                class="{if (xxf:instance('control-instance')/manageInformationModel/ontologyView='languagePack' and xxf:instance('control-instance')/manageInformationModel/showLanguagePack='true') then '' else 'hidden'}">
                                <xxf:variable name="showTargetLanguage"
                                    select="if (xxf:instance('control-instance')/manageInformationModel/editLanguagePack='true') then 'hidden' else ''"/>
                                <xxf:variable name="editTargetLanguage"
                                    select="if (xxf:instance('control-instance')/manageInformationModel/editLanguagePack='true') then '' else 'hidden'"/>
                                <!-- The terms in the information model (resource-instance) -->
                                <xxf:variable name="modelTermIRIList"
                                    select="xxf:instance('resource-instance')/owl:ClassAssertion[owl:Class/@IRI='#CityEHR:Term']/owl:NamedIndividual/@IRI"/>
                                <!-- The terms for the selected composition -->
                                <xxf:variable name="compositionTermIRIList"
                                    select="tokenize(xxf:instance('control-instance')/manageInformationModel/compositionTermSet,xxf:instance('view-parameters-instance')/resultSeparator)"/>
                                <!-- Full term list for display -->
                                <xxf:variable name="termIRIList"
                                    select="if (xxf:instance('control-instance')/manageInformationModel/termFilter='compositionFilter') then $compositionTermIRIList else $modelTermIRIList"/>
                                <!-- User can filter the terms to show -->
                                <xxf:variable name="termFilterText"
                                    select="xxf:instance('control-instance')/manageInformationModel/termFilterText"/>
                                <xxf:variable name="termFilter"
                                    select="upper-case(concat('#CityEHR:Term:',$termFilterText))"/>
                                <xxf:variable name="filteredTermIRIList"
                                    select="if ($termFilterText='') then $termIRIList else $termIRIList[starts-with(upper-case(.),$termFilter)]"/>
                                <!--
                                <xxf:variable name="termFilter"
                                    select="concat('#CityEHR:Term:',xxf:instance('control-instance')/manageInformationModel/termFilterText)"/>
                                <xxf:variable name="filteredTermIRIList" select="$termIRIList[matches(.,$termFilter,'i')]"/>
                                -->
                                <!-- User can sort the terms -->
                                <xxf:variable name="termSortOrder"
                                    select="xxf:instance('control-instance')/manageInformationModel/termSortOrder"/>
                                <xxf:variable name="sortedTermIRIList"
                                    select="if ($termSortOrder=('ascending','descending')) then xxf:sort($filteredTermIRIList,.,'text', $termSortOrder) else $filteredTermIRIList"/>
                                <xhtml:table class="editList">
                                    <xhtml:tbody>
                                        <!-- One row for each term in the information model -->
                                        <xf:repeat nodeset="$sortedTermIRIList">
                                            <xxf:variable name="termIRI" select="."/>
                                            <xhtml:tr>
                                                <xxf:variable name="baseLanguageLiteral"
                                                  select="(xxf:instance('resource-instance')/owl:DataPropertyAssertion[owl:DataProperty/@IRI='#hasValue'][owl:NamedIndividual/@IRI=$termIRI]/owl:Literal)[1]"/>
                                                <xxf:variable name="languagePackLiteral"
                                                  select="(xxf:instance('languagePack-instance')/owl:DataPropertyAssertion[owl:DataProperty/@IRI='#hasValue'][owl:NamedIndividual/@IRI=$termIRI]/owl:Literal)[1]"/>
                                                <xxf:variable name="translationStatus"
                                                  select="if (lower-case($languagePackLiteral/@xml:lang) = lower-case(xxf:instance('control-instance')/manageInformationModel/baseLanguage/@code)) then 'baseLanguageSet' else 'targetLanguageSet'"/>

                                                <!-- Show the base language literal,
                                                     With trigger to view its context -->
                                                <xhtml:td class="baseLanguage">
                                                  <xf:trigger>
                                                  <xf:label ref="$baseLanguageLiteral"/>
                                                  <xf:action ev:event="DOMActivate">
                                                  <xf:dispatch name="show-termContext"
                                                  target="main-model">
                                                  <xxf:context name="termIRI" select="$termIRI"/>
                                                  </xf:dispatch>
                                                  </xf:action>
                                                  </xf:trigger>
                                                </xhtml:td>

                                                <!-- Marker to show whether targetLanguage has been set {$translationStatus} -->
                                                <xhtml:td class="{$translationStatus}">
                                                  <xf:output
                                                  ref="lower-case($languagePackLiteral/@xml:lang)"/>
                                                </xhtml:td>

                                                <!-- Display or edit the languagePack variant -->
                                                <xhtml:td class="targetLanguage">
                                                  <!-- Display literal, if not editing -->
                                                  <xf:output class="{$showTargetLanguage}"
                                                  ref="$languagePackLiteral"/>
                                                  <!-- Editing - use textarea -->
                                                  <xf:textarea class="{$editTargetLanguage}"
                                                  ref="$languagePackLiteral"
                                                  appearance="xxf:autosize">
                                                  <xf:action ev:event="xforms-value-changed">
                                                  <!-- Set the language for the term literal -->
                                                  <xf:setvalue ref="$languagePackLiteral/@xml:lang"
                                                  value="xxf:instance('control-instance')/manageInformationModel/language/@code"/>
                                                  <!-- Reset the editStatus -->
                                                  <xf:setvalue
                                                  ref="xxf:instance('control-instance')/manageInformationModel/editStatus"
                                                  value="'edited'"/>
                                                  </xf:action>
                                                  </xf:textarea>
                                                </xhtml:td>
                                            </xhtml:tr>

                                        </xf:repeat>

                                    </xhtml:tbody>
                                </xhtml:table>
                            </xhtml:span>
                            <!-- Static HTML display
                                     Class information model is loaded, display nodes by level
                                     Specialty model is loaded, display the full data dictionary
                                  -->
                            <xxf:variable name="staticDisplay"
                                select="xxf:instance('control-instance')/manageInformationModel/staticDisplay"/>
                            <xhtml:span class="{$staticDisplay}">
                                <!-- Display the formatted model -->
                                <xf:output
                                    ref="if ($staticDisplay = '') then xxf:serialize(xxf:instance('html-instance'), 'html') else ''"
                                    mediatype="text/html"/>
                            </xhtml:span>
                            <!-- Display hierarchy browser for a class model
                             The hierarchy browser runs off the data dictionary.
                             So the ontologyView selection is one of the Class, nodeBrowser options
                             Currently there are three of these:
                                 CityEHR
                                 SNOMED
                                 ISO-13606 -->
                            <xhtml:span
                                class="{if (xxf:instance('control-instance')/manageInformationModel/ontologyView = xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/ontologyView/options[@type='Class']/option[@type='nodeBrowser']) then '' else 'hidden'}">
                                <xhtml:table>
                                    <!-- Enumeration class is found from the data dictionary 
                                         It is a set of iso-13606:data elements -->
                                    <xxf:variable name="codeSystem"
                                        select="xxf:instance('control-instance')/manageInformationModel/ontologyView"/>
                                    <xxf:variable name="enumerationClass"
                                        select="if ($codeSystem='CityEHR') then xxf:instance('dictionary-instance')/iso-13606:elementCollection/iso-13606:element[@extension=xxf:instance('control-instance')/manageInformationModel/classIRI][@cityEHR:elementType='#CityEHR:Property:ElementType:enumeratedClass']/descendant::iso-13606:data
                                        else xxf:instance('dictionary-instance')/iso-13606:elementCollection/iso-13606:element[@extension=xxf:instance('control-instance')/manageInformationModel/classIRI][@cityEHR:elementType='#CityEHR:ElementProperty:enumeratedClass']/descendant::iso-13606:data[iso-13606:code/@codeSystem=$codeSystem]"/>

                                    <xhtml:tr>
                                        <xhtml:td>
                                            <!-- Tree selector for enumeratedClass -->
                                            <xf:select1 appearance="xxf:tree"
                                                ref="xxf:instance('control-instance')/enumeratedClassSelection/selectedNode">
                                                <xf:itemset nodeset="$enumerationClass">
                                                  <xf:label
                                                  ref="if ($codeSystem='CityEHR') then @displayName else concat(@displayName,' (',string-join(iso-13606:code[@codeSystem=$codeSystem]/@code,'/'),')')"/>
                                                  <xf:value ref="@value"/>
                                                </xf:itemset>
                                                <xf:action ev:event="xforms-value-changed">
                                                  <!-- First get the node that was selected (note that there may be more than one match) -->
                                                  <xxf:variable name="value"
                                                  select="$enumerationClass[@code=xxf:instance('control-instance')/enumeratedClassSelection/selectedNode][1]"/>
                                                  <!-- Now use it to get displayName and suppDataSet -->
                                                  <xf:setvalue
                                                  ref="xxf:instance('control-instance')/enumeratedClassSelection/selectedNode/@displayName"
                                                  value="$value/@displayName"/>
                                                  <xf:setvalue
                                                  ref="xxf:instance('control-instance')/enumeratedClassSelection/suppDataSetId"
                                                  value="$value/@cityEHR:suppDataSet"/>
                                                  <!-- Check to see whether the element value has a supplementary data set -->
                                                  <xxf:variable name="hasSuppDataSet"
                                                  select="if (count(xxf:instance('dictionary-instance')/iso-13606:entryCollection/iso-13606:entry/cda:component[cda:observation/cda:id/@extension=$value/@cityEHR:suppDataSet]) != 0) then 'true' else 'false'"/>
                                                  <!-- Remove the current supplementary data set for this entry/element -->
                                                  <xf:delete
                                                  nodeset="xxf:instance('control-instance')/enumeratedClassSelection/suppDataSet/*"/>
                                                  <!-- Now insert the new supplementary data set -->
                                                  <xf:action if="$hasSuppDataSet='true'">
                                                  <xxf:variable name="suppDataSet"
                                                  select="xxf:instance('dictionary-instance')/iso-13606:entryCollection/iso-13606:entry/cda:component[cda:observation/cda:id/@extension=$value/@cityEHR:suppDataSet][1]"/>
                                                  <xf:insert
                                                  context="xxf:instance('control-instance')/enumeratedClassSelection/suppDataSet"
                                                  origin="$suppDataSet/*"/>
                                                  </xf:action>
                                                </xf:action>
                                            </xf:select1>
                                        </xhtml:td>

                                        <!-- supplementary data set selection -->
                                        <xhtml:td>
                                            <!-- Display supplementary data set info for debugging -->
                                            <xhtml:ol>
                                                <xhtml:li class="header">
                                                  <xf:output
                                                  ref="xxf:instance('control-instance')/enumeratedClassSelection/selectedNode/@displayName"
                                                  />
                                                </xhtml:li>
                                                <xhtml:li
                                                  class="{if ($enumerationClass[@code=xxf:instance('control-instance')/enumeratedClassSelection/selectedNode][1]/iso-13606:code[@codeSystem='SNOMED']) then '' else 'hidden'}"
                                                  > SNOMED: <xf:output
                                                  ref="string-join($enumerationClass[@code=xxf:instance('control-instance')/enumeratedClassSelection/selectedNode][1]/iso-13606:code[@codeSystem='SNOMED']/@code,' / ')"
                                                  />
                                                </xhtml:li>
                                                <xhtml:li
                                                  class="{if ($enumerationClass[@code=xxf:instance('control-instance')/enumeratedClassSelection/selectedNode][1]/iso-13606:code[@codeSystem='ICD-10']) then '' else 'hidden'}"
                                                  > ICD-10: <xf:output
                                                  ref="string-join($enumerationClass[@code=xxf:instance('control-instance')/enumeratedClassSelection/selectedNode][1]/iso-13606:code[@codeSystem='ICD-10']/@code,' / ')"
                                                  />
                                                </xhtml:li>
                                                <xhtml:li
                                                  class="{if ($enumerationClass[@code=xxf:instance('control-instance')/enumeratedClassSelection/selectedNode][1]/iso-13606:code[@codeSystem='OPCS-4']) then '' else 'hidden'}"
                                                  > OPCS-4: <xf:output
                                                  ref="string-join($enumerationClass[@code=xxf:instance('control-instance')/enumeratedClassSelection/selectedNode][1]/iso-13606:code[@codeSystem='OPCS-4']/@code,' / ')"
                                                  />
                                                </xhtml:li>
                                                <xhtml:li>
                                                  <xf:output
                                                  ref="xxf:instance('control-instance')/enumeratedClassSelection/suppDataSet/cda:observation/cda:code/@displayName"
                                                  />
                                                </xhtml:li>

                                                <xhtml:li>
                                                  <xhtml:table>
                                                  <xf:repeat
                                                  nodeset="xxf:instance('control-instance')/enumeratedClassSelection/suppDataSet/cda:observation/descendant::cda:value">
                                                  <xxf:variable name="suppDataSetItem" select="."/>
                                                  <xhtml:tr>
                                                  <xhtml:td>
                                                  <xf:output
                                                  ref="$suppDataSetItem/@cityEHR:elementDisplayName"
                                                  />
                                                  </xhtml:td>
                                                  <xhtml:td>
                                                  <xf:output
                                                  ref=" if ($suppDataSetItem/@cityEHR:elementType='#CityEHR:ElementProperty:enumeratedValue') then string-join(xxf:instance('dictionary-instance')/iso-13606:elementCollection/iso-13606:element[@extension=$suppDataSetItem/@extension]/iso-13606:data/@displayName,' / ') else ''"/>
                                                  <xf:output
                                                  ref="concat('(',substring-after($suppDataSetItem/@xsi:type,'xs:'),')')"
                                                  />
                                                  </xhtml:td>
                                                  </xhtml:tr>
                                                  </xf:repeat>
                                                  </xhtml:table>
                                                </xhtml:li>
                                            </xhtml:ol>
                                        </xhtml:td>
                                    </xhtml:tr>
                                </xhtml:table>
                            </xhtml:span>
                            <!-- Display ISO-13606 Browser for a specialty model 
                                 This runs off the ISO-13606-instance -->
                            <xhtml:span
                                class="{if (xxf:instance('control-instance')/manageInformationModel/ontologyView = 'ISO-13606') then '' else 'hidden'}">
                                <xf:select1 appearance="xxf:tree"
                                    ref="xxf:instance('control-instance')/manageInformationModel/iso-13606Node">
                                    <xf:itemset
                                        nodeset="xxf:instance('ISO-13606-instance')//descendant::iso-13606:component">
                                        <!-- Label - displayed in the selection tree -->
                                        <xf:label>
                                            <!-- Type of the node -->
                                            <xf:output ref="./@iso-13606:type"/>
                                            <xf:output
                                                ref="if (./@subClass !='') then concat(' (',./@subClass,')') else ''"/>
                                            <xf:output ref="' - '"/>
                                            <!-- Name of the node -->
                                            <xf:output
                                                ref="if (./@displayName!='') then ./@displayName else ./@code"/>
                                            <!-- Data type -->
                                            <xf:output
                                                ref="if (./@dataType!='') then concat(' (',substring-after(./@dataType,'DataType:'),')') else ''"/>
                                            <!-- Unit -->
                                            <xf:output
                                                ref="if (./@unit!='') then concat(' (',substring-after(./@unit,'Unit:'),')') else ''"/>
                                            <!-- Values (for enumeratedValue elements -->
                                            <xf:output ref="./@values"/>
                                        </xf:label>
                                        <!-- Value -->
                                        <xf:value ref="@code"/>
                                    </xf:itemset>
                                    <xf:action ev:event="xforms-value-changed">
                                        <!-- Set compositionIRI if composition is selected.
                                             Selected node is of the form #CityEHR:Form:FeatureDemo -->
                                        <xxf:variable name="node"
                                            select="xxf:instance('control-instance')/manageInformationModel/iso-13606Node"/>
                                        <xxf:variable name="nodeType"
                                            select="if (exists(tokenize($node,':')[2])) then tokenize($node,':')[2] else ''"/>
                                        <xf:setvalue
                                            ref="xxf:instance('control-instance')/manageInformationModel/compositionIRI"
                                            value="if ($nodeType = ('Form','Letter')) then $node else ''"
                                        />
                                    </xf:action>
                                </xf:select1>
                            </xhtml:span>
                        </xhtml:span>
                        <!-- End display when a model is loaded -->
                    </xhtml:div>
                    <!-- End of display of information models -->


                    <!-- === Manage media for a specialty information model === 
                         ================================================================== -->
                    <xhtml:div
                        class="{if ($adminTask='manageMedia') then 'tableContainer' else 'hidden'}">
                        <!-- Display the list of stored media. 
                             Only for the selected entry, if there is one -->
                        <xxf:variable name="entryIRI"
                            select="xxf:instance('control-instance')/manageMedia/entryIRI"/>
                        <xxf:variable name="restrictedMediaElementList"
                            select="distinct-values(xxf:instance('dictionary-instance')/iso-13606:entryCollection/iso-13606:entry[.//cda:id/@root=$entryIRI]//cda:value/@root)"/>

                        <xxf:variable name="selectableMediaList"
                            select="if ($entryIRI='') then xxf:instance('storedMediaList-instance')/mediaFile else xxf:instance('storedMediaList-instance')/mediaFile[@elementIRI=$restrictedMediaElementList]"/>

                        <xhtml:table>
                            <xhtml:tbody>
                                <xf:repeat nodeset="$selectableMediaList">
                                    <xxf:variable name="mediaFile" select="."/>
                                    <xhtml:tr>
                                        <!-- Id of the element -->
                                        <xhtml:td>
                                            <xf:output
                                                ref="substring-after($mediaFile/@elementIRI,'#ISO-13606:Element:')"/>
                                            <xhtml:br />
                                            <xf:output ref="$mediaFile/@value"/>
                                        </xhtml:td>
                                        <!-- Upload control
                                             Upload and get path, so that the file details (inc height and width) can be set -->
                                        <xhtml:td>
                                            <xf:upload ref="$mediaFile/@path" incremental="true">
                                                <xf:filename ref="../@name"/>
                                                <xf:mediatype ref="../@content-type"/>
                                                <!-- Image file has been uploaded - save to the xmlstore -->
                                                <xf:action ev:event="xxforms-upload-done">
                                                  <!-- Get uploaded data -->
                                                  <xf:setvalue
                                                  ref="xxf:instance('view-parameters-instance')/sourceHandle"
                                                  value="$mediaFile/@path"/>
                                                  <xf:setvalue
                                                  ref="xxf:instance('view-parameters-instance')/sourceType"
                                                  value="$mediaFile/@content-type"/>
                                                  <xxf:variable name="pipeline"
                                                  select="concat(xxf:instance('view-parameters-instance')/appPath,'/pipelines/cityEHRGetUploadedBinary.xpl')"/>
                                                  <xf:insert
                                                  nodeset="xxf:instance('import-instance')"
                                                  origin="xxf:call-xpl($pipeline, 'parameters', xxf:instance('view-parameters-instance'), 'data')"/>
                                                  <xf:action
                                                  if="xxf:instance('import-instance') castable as xs:base64Binary">
                                                  <xf:setvalue ref="$mediaFile"
                                                  value="xxf:instance('import-instance')"/>
                                                  <xxf:variable name="applicationIRI"
                                                  select="xxf:instance('control-instance')/managedApplication/applicationIRI"/>
                                                  <!-- Set file information for the mediaFile uploaded -->
                                                  <xf:dispatch name="set-mediaFileInformation"
                                                  target="application-model">
                                                  <xxf:context name="mediaFile" select="$mediaFile"
                                                  />
                                                  </xf:dispatch>
                                                  <!--  Save the mediaFile to the database -->
                                                  <!--
                                                        <xf:dispatch name="save-mediaFile" target="application-model">
                                                            <xxf:context name="mediaFile" select="$mediaFile"/>
                                                            <xxf:context name="applicationIRI" select="$applicationIRI"/>
                                                            <xxf:context name="status" select="xxf:instance('control-instance')/status"/>
                                                        </xf:dispatch>
                                                        -->
                                                  </xf:action>
                                                </xf:action>
                                                <!-- Set the edit flag when the image content changes.
                                                     Or the user clears the image -->
                                                <xf:action ev:event="xforms-value-changed">
                                                  <xf:setvalue
                                                  ref="xxf:instance('control-instance')/manageMedia/editStatus"
                                                  value="'edited'"/>
                                                  <!-- Reset image if it was cleared -->
                                                  <xf:setvalue ref="$mediaFile"
                                                  value="if ($mediaFile/@path='') then '' else ."/>
                                                  <!-- Reset the path to the name of the uploaded file -->
                                                  <!--
                                                    <xf:setvalue ref="$mediaFile/@path" value="if (.='') then '' else $mediaFile/@name"/>
                                                    -->
                                                </xf:action>
                                            </xf:upload>
                                        </xhtml:td>
                                        <!-- Display the image, if it is set -->
                                        <xhtml:td>
                                            <xf:group
                                                ref="$mediaFile[.!=''][. castable as xs:base64Binary]"
                                                class="{if ($mediaFile='') then 'hidden' else ''}">
                                                <xf:output ref="$mediaFile" mediatype="image/*"/>
                                            </xf:group>
                                            <xf:output ref="$mediaFile/@nane"/>
                                            <!-- Debugging 
                                            <xf:output ref="$mediaFile/@path"/>
                                            <xf:output ref="$mediaFile/@height"/>
                                            <xf:output ref="$mediaFile/@width"/>
                                            -->
                                        </xhtml:td>
                                    </xhtml:tr>
                                </xf:repeat>
                            </xhtml:tbody>
                        </xhtml:table>

                    </xhtml:div>


                    <!-- === Manage image maps for a specialty information model === 
                         ================================================================== -->
                    <xhtml:div
                        class="{if ($adminTask='manageImageMaps') then 'tableContainer' else 'hidden'}">
                        <!-- Display the list of image maps. 
                             Only for the selected entry, if there is one -->
                        <xxf:variable name="selectedEntryIRI"
                            select="xxf:instance('control-instance')/manageImageMaps/entryIRI"/>
                        <xxf:variable name="selectedEntryId"
                            select="substring-after($selectedEntryIRI,'#ISO-13606:Entry:')"/>
                        <xxf:variable name="imageMapFileList"
                            select="if ($selectedEntryId='') then xxf:instance('imageMapFileList-instance')/imageMapFile else xxf:instance('imageMapFileList-instance')/imageMapFile[svg:svg/@id=$selectedEntryId]"/>

                        <xhtml:table>
                            <xhtml:tbody>
                                <xf:repeat nodeset="$imageMapFileList">
                                    <xxf:variable name="imageMapFile" select="."/>
                                    <xxf:variable name="imageMapId"
                                        select="$imageMapFile/svg:svg/@id"/>
                                    <xhtml:tr>
                                        <!-- Id of the imageMap -->
                                        <xhtml:td valign="top">
                                            <xf:output ref="$imageMapId"/>
                                        </xhtml:td>
                                        <!-- Upload control -->
                                        <xhtml:td valign="top">
                                            <xf:upload ref="$imageMapFile/@path" incremental="true">
                                                <xf:filename ref="$imageMapFile/@fileName"/>
                                                <!-- Image map file has been uploaded - save to the xmlstore -->
                                                <xf:action ev:event="xxforms-upload-done">
                                                  <!-- Get uploaded image map -->
                                                  <xf:setvalue
                                                  ref="xxf:instance('view-parameters-instance')/sourceHandle"
                                                  value="$imageMapFile/@path"/>
                                                  <xxf:variable name="pipeline"
                                                  select="concat(xxf:instance('view-parameters-instance')/appPath,'/pipelines/cityEHRGetUploadedData.xpl')"/>
                                                  <xf:insert
                                                  nodeset="xxf:instance('import-instance')"
                                                  origin="xxf:call-xpl($pipeline, 'parameters', xxf:instance('view-parameters-instance'), 'data')"/>
                                                  <!-- Check that the file looks like SVG and has id for the entry -->
                                                  <xxf:variable name="documentElement"
                                                  select="xxf:instance('import-instance')/name()"/>
                                                  <xxf:variable name="documentId"
                                                  select="xxf:instance('import-instance')/@id"/>
                                                  <!-- SVG - transfer contents and set path -->
                                                  <xf:action
                                                  if="$documentElement='svg' and $documentId = $imageMapId">
                                                  <!-- Transfer contents of the SVG -->
                                                  <xf:dispatch name="transfer-imageMap"
                                                  target="application-model">
                                                  <xxf:context name="imageMap-instance"
                                                  select="xxf:instance('import-instance')"/>
                                                  <xxf:context name="imageMapFile"
                                                  select="$imageMapFile"/>
                                                  </xf:dispatch>
                                                  <!-- Reset the path - don't want this stored and it can't be blank -->
                                                  <xf:setvalue ref="$imageMapFile/@path"
                                                  value="$imageMapFile/@fileName"/>
                                                  <!-- Reset the error message -->
                                                  <xf:setvalue ref="$imageMapFile/@errorMessage"
                                                  value="''"/>
                                                  </xf:action>
                                                  <!-- Bad svg id - set error message -->
                                                  <xf:action if="not($documentId = $imageMapId)">
                                                  <xf:setvalue ref="$imageMapFile/@errorMessage"
                                                  value="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/manageImageMaps/errorMessageList/errorMessage[@type='badImageMapId']/@displayName"
                                                  />
                                                  </xf:action>
                                                  <!-- Not SVG - set error message (this overwrite the first errorMessage, if necessary -->
                                                  <xf:action if="not($documentElement='svg')">
                                                  <xf:setvalue ref="$imageMapFile/@errorMessage"
                                                  value="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/manageImageMaps/errorMessageList/errorMessage[@type='badFormat']/@displayName"
                                                  />
                                                  </xf:action>
                                                </xf:action>
                                                <!-- Set the edit flag when the image map content changes.
                                                     Or the user clears the image -->
                                                <xf:action ev:event="xforms-value-changed">
                                                  <!-- Set edit status -->
                                                  <xf:setvalue
                                                  ref="xxf:instance('control-instance')/manageImageMaps/editStatus"
                                                  value="'edited'"/>
                                                  <!-- User cleared the file selection -->
                                                  <xf:action if="$imageMapFile/@path=''">
                                                  <xf:dispatch name="clear-imageMapFile"
                                                  target="application-model">
                                                  <xxf:context name="imageMapFile"
                                                  select="$imageMapFile"/>
                                                  <xxf:context name="imageMapId"
                                                  select="$imageMapId"/>
                                                  </xf:dispatch>
                                                  </xf:action>
                                                </xf:action>
                                            </xf:upload>
                                        </xhtml:td>

                                        <!-- Display error or button to view SVG -->
                                        <xhtml:td valign="top">
                                            <xf:output ref="$imageMapFile/@errorMessage"/>
                                        </xhtml:td>

                                        <!-- Display list of Ids in the selected image map.
                                             Ids for cityEHR hotspots are always on svg:g elements
                                             -->
                                        <xhtml:td
                                            class="{if ($selectedEntryId='' or not(exists($imageMapFile/svg:svg/*))) then 'hidden' else ''}">
                                            <xf:output
                                                ref="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/manageImageMaps/listIdsLabel"/>
                                            <xhtml:ul>
                                                <xxf:variable name="imageMapIdList"
                                                  select="$imageMapFile/svg:svg//svg:g/@id"/>
                                                <xf:repeat nodeset="$imageMapIdList">
                                                  <xxf:variable name="imageMapId" select="."/>
                                                  <xhtml:li>
                                                  <xf:output ref="$imageMapId"/>
                                                  </xhtml:li>
                                                </xf:repeat>
                                            </xhtml:ul>
                                        </xhtml:td>
                                    </xhtml:tr>
                                </xf:repeat>
                            </xhtml:tbody>
                        </xhtml:table>

                    </xhtml:div>


                    <!-- === Purge patient records.
                         Edit the query and show the results as the list of patients to purge                        
                         ============================================================== -->
                    <xhtml:div class="{if ($adminTask='purgeRecords') then '' else 'hidden'}">
                        <!-- Edit the query, which is in  -->
                        <xf:textarea
                            ref="xxf:instance('purgePatientListXQuery-instance')/exist:text"
                            appearance="xxf:autosize" incremental="false" style="min-width: 30em;">
                            <xf:label/>
                            <xf:action ev:event="xforms-value-changed">
                                <!-- Don't need to do anything here -->
                            </xf:action>
                        </xf:textarea>

                        <!-- Show the results, if not a list of patients (i.e. probably an error) -->
                        <xf:output
                            ref="if (exists(xxf:instance('purgePatientList-instance')/patient)) then '' else xxf:instance('purgePatientList-instance')"/>

                        <!-- Show the list if less than the maximum to display -->
                        <xxf:variable name="patientCount"
                            select="count(xxf:instance('purgePatientList-instance')/patient)"/>
                        <xhtml:ul class="displayList">
                            <xf:repeat
                                nodeset="if ($patientCount le 100) then xxf:instance('purgePatientList-instance')/patient else ()">
                                <xhtml:li>
                                    <xf:output ref="."/>
                                </xhtml:li>
                            </xf:repeat>
                        </xhtml:ul>
                    </xhtml:div>


                    <!-- === New application wizard =======
                         Enter parameters for new application.
                         Note that the facility to enter the application parameters is shared with manageApplicationParameters
                         Then run wizard
                         And display progress                       
                        ============================================================== -->
                    <xhtml:div
                        class="{if ($adminTask='newApplicationWizard') then '' else 'hidden'}">
                        <xxf:variable name="newApplicationWizardParameters"
                            select="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/newApplicationWizard"/>

                        <!-- Hidden trigger for the next step in the wizard -->
                        <xf:trigger id="newApplicationWizard-step" appearance="minimal"
                            xxf:modal="true" class="hidden">
                            <xf:label/>
                            <xf:action ev:event="DOMActivate">
                                <xf:dispatch name="run-newApplicationWizard" target="main-model"/>
                            </xf:action>
                        </xf:trigger>

                        <xxf:variable name="status"
                            select="xxf:instance('control-instance')/newApplicationWizard/status"/>

                        <!-- Display status message -->
                        <xhtml:p>
                            <xf:output
                                ref="$newApplicationWizardParameters/statusMessage/status[@value=$status]/@displayName"
                            />
                        </xhtml:p>

                        <!-- Set identifier for the new application.
                             Only if status is 'waiting' or 'applicationExists'.
                             Reset the status to 'waiting' when user changes the identifier -->
                        <xhtml:p
                            class="{if ($status=('waiting','applicationExists')) then '' else 'hidden'}">
                            <!-- Input the applicationIdBase directly -->
                            <xf:input
                                ref="xxf:instance('control-instance')/newApplicationWizard/applicationIdBase"
                                incremental="true">
                                <xf:label ref="$newApplicationWizardParameters/applicationIdLabel"/>
                                <xf:action ev:event="xforms-value-changed">
                                    <!-- Remove non-allowed characters -->
                                    <xxf:variable name="pattern"
                                        select="concat('[^',$newApplicationWizardParameters/allowableCharacterString,']')"/>
                                    <xf:setvalue ref="." value="replace(.,$pattern,'')"/>
                                    <!-- Reset the status -->
                                    <xf:setvalue ref="$status" value="'waiting'"/>
                                </xf:action>
                            </xf:input>
                            <!-- Select the applicationIdBase from the shipped applications -->
                            <xxf:variable name="applicationFolderPrefix"
                                select="xxf:instance('view-parameters-instance')/applicationFolderPrefix"/>
                            <xxf:variable name="shippedApplicationEmptySelection"
                                select="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/newApplicationWizard/shippedApplicationEmptySelection/directory"/>
                            <xxf:variable name="shippedApplicationSelection"
                                select="$shippedApplicationEmptySelection | xxf:instance('shippedApplicationList-instance')/directory"/>
                            <xxf:variable name="shippedApplicationSelectionClass"
                                select="if (xxf:instance('control-instance')/newApplicationWizard/applicationIdBase = $shippedApplicationSelection/substring-after(@name,$applicationFolderPrefix)) then '' else 'hidden'"/>
                            <!-- Only show selection if applicationIdBase is set to one of its values.
                                 This means the secltion is displayed when applicationIdBase is blank
                                 or when one of its values has been selected -->
                            <xf:select1 class="{$shippedApplicationSelectionClass}"
                                ref="xxf:instance('control-instance')/newApplicationWizard/applicationIdBase">
                                <xf:itemset nodeset="$shippedApplicationSelection">
                                    <xf:label ref="@name"/>
                                    <xf:value ref="substring-after(@name,$applicationFolderPrefix)"
                                    />
                                </xf:itemset>
                                <xf:action ev:event="xforms-value-changed">
                                    <!-- TBD -->
                                </xf:action>
                            </xf:select1>
                        </xhtml:p>

                    </xhtml:div>


                    <!-- === Display system status in manageSystemParameters  ======= 
                        Show information about the current system.
                        Note that the facility to edit the system parameters is shared with newApplicationWizard and manageApplicationParameters
                        ============================================================== -->
                    <xhtml:div
                        class="{if ($adminTask='manageSystemParameters' and xxf:instance('control-instance')/managedParameters/editType='') then '' else 'hidden'}">
                        <!-- Version number of configuration -->
                        <xf:output
                            ref="concat(xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/manageSystemParameters/versionLabel,xxf:instance('working-application-parameters-instance')/@version)"/>
                        <xhtml:br />
                        <!-- Date configuration was set -->
                        <xf:output
                            ref="concat(xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/manageSystemParameters/dateLabel,xxf:instance('working-application-parameters-instance')/@date)"/>
                        <xhtml:br />
                        <!-- Applications installed -->
                        <xxf:variable name="applicationList"
                            select="xxf:instance('applicationList-instance')/iso-13606:EHR_Extract"/>
                        <xf:output
                            ref="concat(xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/manageSystemParameters/applicationsLabel,count($applicationList))"/>
                        <xhtml:ul>
                            <xf:repeat nodeset="$applicationList">
                                <xhtml:li>
                                    <xxf:variable name="application" select="."/>
                                    <xf:output ref="$application/@displayName"/>
                                </xhtml:li>
                            </xf:repeat>
                        </xhtml:ul>

                    </xhtml:div>

                    <!-- === Display application status in manageApplicationParameters ======= 
                        Show information about the current application.
                        Note that the facility to edit the application parameters is shared with newApplicationWizard and manageSystemParameters
                        ============================================================== -->
                    <xhtml:div
                        class="{if ($adminTask='manageApplicationParameters') then '' else 'hidden'}">

                        <xhtml:table
                            class="{if (xxf:instance('control-instance')/managedParameters/editType='') then '' else 'hidden'}">
                            <xhtml:tbody>
                                <xhtml:tr>
                                    <!-- Show parameters for the selected application -->
                                    <xhtml:td valign="top">
                                        <xf:output
                                            ref="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/manageApplicationParameters/selectedApplicationsLabel"/>
                                        <xhtml:div>

                                            <xhtml:p>
                                                <!-- Application name -->
                                                <xf:output
                                                  ref="concat(xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/manageApplicationParameters/displayNameLabel,xxf:instance('working-application-parameters-instance')/application/iso-13606:EHR_Extract/@displayName)"/>
                                                <xhtml:br />
                                                <!-- Base Language Code -->
                                                <xf:output
                                                  ref="concat(xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/manageApplicationParameters/baseLanguageCodeLabel,xxf:instance('working-application-parameters-instance')/application/iso-13606:EHR_Extract/@baseLanguageCode)"/>
                                                <xhtml:br />
                                                <!-- Version number of configuration -->
                                                <xf:output
                                                  ref="concat(xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/manageApplicationParameters/versionLabel,xxf:instance('working-application-parameters-instance')/@version)"/>
                                                <xhtml:br />
                                                <!-- Date configuration was set -->
                                                <xf:output
                                                  ref="concat(xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/manageApplicationParameters/dateLabel,xxf:instance('working-application-parameters-instance')/@date)"
                                                />
                                            </xhtml:p>

                                            <xhtml:p>
                                                <xf:output
                                                  ref="concat(xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/manageApplicationParameters/usersLabel,xxf:instance('control-instance')/manageApplicationParameters/userCount)"
                                                />
                                            </xhtml:p>
                                            <xhtml:p>
                                                <xf:output
                                                  ref="concat(xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/manageApplicationParameters/specialtyLabel,xxf:instance('control-instance')/manageApplicationParameters/specialtyCount)"
                                                />
                                            </xhtml:p>
                                            <xhtml:p>
                                                <xf:output
                                                  ref="concat(xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/manageApplicationParameters/informationModelLabel,xxf:instance('control-instance')/manageApplicationParameters/informationModelCount)"
                                                />
                                            </xhtml:p>
                                            <xhtml:p>
                                                <xf:output
                                                  ref="concat(xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/manageApplicationParameters/recordLabel,xxf:instance('control-instance')/manageApplicationParameters/recordCount)"
                                                />
                                            </xhtml:p>
                                            <xhtml:p>
                                                <xf:output
                                                  ref="concat(xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/manageApplicationParameters/compositionLabel,xxf:instance('control-instance')/manageApplicationParameters/compositionCount)"
                                                />
                                            </xhtml:p>
                                        </xhtml:div>
                                    </xhtml:td>

                                    <!-- Spacer -->
                                    <xhtml:td>&#160; &#160; &#160; &#160;</xhtml:td>

                                    <!-- Show the list of shipped applications -->
                                    <xhtml:td valign="top">
                                        <!--
                                        <xf:output
                                            ref="xxf:serialize(xxf:call-xpl('oxf:/ops/utils/formatting/format.xpl', 'data', xxf:instance('shippedApplicationList-instance'), 'data')/*, 'html')"
                                            mediatype="text/html"/>
                                            -->
                                        <xf:output
                                            ref="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/manageApplicationParameters/shippedApplicationsLabel"/>
                                        <xhtml:ul>
                                            <xf:repeat
                                                nodeset="xxf:instance('shippedApplicationList-instance')/directory">
                                                <xhtml:li><xf:output ref="@name"/></xhtml:li>
                                            </xf:repeat>
                                        </xhtml:ul>
                                    </xhtml:td>
                                </xhtml:tr>
                            </xhtml:tbody>
                        </xhtml:table>
                    </xhtml:div>


                    <!-- === Edit the language pack for the parameters instance =======
                         Used in manageSystemParameters and manageApplicationParameters
                         The parameters to which the language pack applies are held in managed-parameters-instance
                        ============================================================== -->
                    <xhtml:div
                        class="{if ($adminTask=('manageApplicationParameters','manageSystemParameters') and xxf:instance('control-instance')/managedParameters/editType='languagePack') then '' else 'hidden'}">
                        <!-- Languages -->
                        <xxf:variable name="baseLanguageCode"
                            select=" xxf:instance('control-instance')/managedParameters/baseLanguage/@code"/>
                        <xxf:variable name="languageCode"
                            select=" xxf:instance('control-instance')/managedParameters/language/@code"/>

                        <!-- The termLiterals in the language pack -->
                        <xxf:variable name="termLiteralList"
                            select="xxf:instance('parameterslanguagePack-instance')/term/variant[@code=$baseLanguageCode]/@literal"/>
                        <!-- User can filter the terms to show -->
                        <xxf:variable name="termFilter"
                            select="xxf:instance('control-instance')/managedParameters/termFilter"/>
                        <xxf:variable name="filteredTermLiteralList"
                            select="$termLiteralList[matches(.,$termFilter,'i')]"/>
                        <!-- User can sort the terms -->
                        <xxf:variable name="termSortOrder"
                            select="xxf:instance('control-instance')/managedParameters/termSortOrder"/>
                        <xxf:variable name="sortedTermLiteralList"
                            select="if ($termSortOrder=('ascending','descending')) then xxf:sort($filteredTermLiteralList,.,'text', $termSortOrder) else $filteredTermLiteralList"/>
                        <xhtml:table class="editList">
                            <xhtml:tbody>
                                <!-- One row for each term literal in the parameters -->
                                <xf:repeat nodeset="$sortedTermLiteralList">
                                    <xxf:variable name="termLiteral" select="."/>
                                    <xxf:variable name="term"
                                        select="xxf:instance('parameterslanguagePack-instance')/term[variant[@code=$baseLanguageCode][@literal=$termLiteral]]"/>
                                    <xhtml:tr>
                                        <xxf:variable name="languagePackLiteral"
                                            select="$term/variant[@code=$languageCode]/@literal"/>
                                        <xxf:variable name="translationStatus"
                                            select="if ($languagePackLiteral = $termLiteral) then 'baseLanguageSet' else 'targetLanguageSet'"/>

                                        <!-- Show the base language literal,
                                                 With trigger to view its context -->
                                        <xhtml:td class="baseLanguage">
                                            <xf:trigger>
                                                <xf:label ref="$termLiteral"/>
                                                <xf:action ev:event="DOMActivate">
                                                  <xf:dispatch name="show-termContext"
                                                  target="main-model">
                                                  <xxf:context name="termIRI" select="$termLiteral"
                                                  />
                                                  </xf:dispatch>
                                                </xf:action>
                                            </xf:trigger>
                                        </xhtml:td>

                                        <!-- Marker to show whether targetLanguage has been set {$translationStatus} -->
                                        <xhtml:td class="{$translationStatus}">
                                            <xf:output ref="$languageCode"/>
                                        </xhtml:td>

                                        <!-- Display or edit the languagePack variant -->
                                        <xhtml:td class="targetLanguage">
                                            <!-- Editing - use textarea -->
                                            <xf:textarea ref="$languagePackLiteral"
                                                appearance="xxf:autosize" incremental="true">
                                                <xf:action ev:event="xforms-value-changed">
                                                  <!-- Reset the editStatus -->
                                                  <xf:setvalue
                                                  ref="xxf:instance('control-instance')/managedParameters/editStatus"
                                                  value="'edited'"/>
                                                </xf:action>
                                            </xf:textarea>
                                        </xhtml:td>
                                    </xhtml:tr>

                                </xf:repeat>

                            </xhtml:tbody>
                        </xhtml:table>

                    </xhtml:div>


                    <!-- === Set/Edit parameters =======
                         Used in manageSystemParameters, newApplicationWizard and manageApplicationParameters
                         The parameters to be edited are held in managed-parameters-instance
                        ============================================================== -->
                    <xhtml:div
                        class="{if (($adminTask='newApplicationWizard' and xxf:instance('control-instance')/newApplicationWizard/status='application-parameters-built') or ($adminTask=('manageApplicationParameters','manageSystemParameters') and xxf:instance('control-instance')/managedParameters/editType='parameters') ) then '' else 'hidden'}">

                        <xi:include href="cityEHRManageParametersDisplay.xhtml"/>

                    </xhtml:div>


                    <!-- === Archive, Unarchive, Merge or Unmerge - depends on control-instance manageRecords/operation being archive|unarchive|merge|unmerge 
                             manageRecords/status is either verified, unverified or processed
                             manageRecords/source/status and manageRecords/target/status are either waiting, loaded or notFound
                         ============================================================== -->
                    <xhtml:table
                        class="{if ($adminTask='manageRecords') then 'displayList' else 'hidden'}">
                        <!-- Specify and verify the source and target -->
                        <xxf:variable name="manageRecords"
                            select="xxf:instance('control-instance')/manageRecords"/>
                        <xxf:variable name="operation"
                            select="xxf:instance('control-instance')/manageRecords/operation"/>
                        <xhtml:thead>
                            <xhtml:tr>
                                <xhtml:th></xhtml:th>
                                <!-- Source -->
                                <xhtml:th>
                                    <!-- Input source identifier -->
                                    <xf:input
                                        ref="xxf:instance('control-instance')/manageRecords/source/patientId"
                                        incremental="true">
                                        <xf:label
                                            ref="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/manageRecords/sourceLabel"/>
                                        <!-- If source is changed, then normalize-space, reset source.
                                             Also reset target for unmerge, archive and unarchive.
                                             Set overall status to unverified.-->
                                        <xf:action ev:event="xforms-value-changed">
                                            <xf:setvalue ref="." value="normalize-space(.)"/>
                                            <!-- Reset source record -->
                                            <xf:dispatch name="reset-record" target="main-model">
                                                <xxf:context name="record"
                                                  select="xxf:instance('control-instance')/manageRecords/source"/>
                                                <xxf:context name="patientId" select="."/>
                                                <xxf:context name="source" select="''"/>
                                            </xf:dispatch>
                                            <!-- Reset target record for unmerge, archive, unarchive -->
                                            <xf:action
                                                if="$operation=('unmerge','archive','unarchive')">
                                                <xf:dispatch name="reset-record" target="main-model">
                                                  <xxf:context name="record"
                                                  select="xxf:instance('control-instance')/manageRecords/target"/>
                                                  <xxf:context name="patientId" select="''"/>
                                                  <xxf:context name="source" select="''"/>
                                                </xf:dispatch>
                                            </xf:action>
                                            <!-- Overall status -->
                                            <xf:setvalue
                                                ref="xxf:instance('control-instance')/manageRecords/status"
                                                value="./@default"/>
                                        </xf:action>
                                        <!-- Retrieve source if user presses return.
                                             This is the same as pressing the Verify button (below). -->
                                        <xf:action ev:event="DOMActivate">
                                            <xf:dispatch name="retrieve-record" target="main-model">
                                                <xxf:context name="record"
                                                  select="xxf:instance('control-instance')/manageRecords/source"/>
                                                <xxf:context name="patientId"
                                                  select="xxf:instance('control-instance')/manageRecords/source/patientId"/>
                                                <xxf:context name="source" select="''"/>
                                            </xf:dispatch>
                                        </xf:action>
                                    </xf:input>
                                    <!-- Verify source -->
                                    <xxf:variable name="type" select="'verify'"/>
                                    <xxf:variable name="label"
                                        select="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/manageRecords/verifySourceLabel"/>
                                    <xxf:variable name="icon"
                                        select="concat(xxf:instance('view-parameters-instance')/staticFileRoot,'/icons/',$type,'.png?',xxf:instance('view-parameters-instance')/versionNumber/@version)"/>
                                    <!-- Button to verify source.
                                         Retrieve the source - then verify
                                         UI is blocked until action is done -->
                                    <xf:trigger appearance="minimal" xxf:modal="true"
                                        class="{if (xxf:instance('control-instance')/manageRecords/source/status='waiting' and xxf:instance('control-instance')/manageRecords/source/patientId!='') then '' else 'hidden'}">
                                        <xf:label>
                                            <xhtml:img src="{$icon}" alt="" />
                                        </xf:label>
                                        <xf:hint ref="$label"/>
                                        <xf:action ev:event="DOMActivate">
                                            <xf:dispatch name="retrieve-record" target="main-model">
                                                <xxf:context name="record"
                                                  select="xxf:instance('control-instance')/manageRecords/source"/>
                                                <xxf:context name="patientId"
                                                  select="xxf:instance('control-instance')/manageRecords/source/patientId"/>
                                                <xxf:context name="source" select="''"/>
                                            </xf:dispatch>
                                        </xf:action>
                                    </xf:trigger>
                                    <!-- Archive records - select to archive entire record (record) or selected compositions (composition)
                                        Only if the source has been found (but still want xforms-value-changed to trigger when not visible) -->
                                    <xxf:variable name="archiveOperationSelectionClass"
                                        select="if ($manageRecords/operation='archive' and $manageRecords/source/status='loaded') then '' else 'hidden'"/>
                                    <xhtml:span class="{$archiveOperationSelectionClass}">
                                        <xf:output
                                            ref="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/manageRecords/archiveOperation/@displayName"/>
                                        <!-- Select archive operation -->
                                        <xf:select1
                                            ref="xxf:instance('control-instance')/manageRecords/subOperation">
                                            <xf:itemset
                                                nodeset="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/manageRecords/archiveOperation/option">
                                                <xf:label ref="@displayName"/>
                                                <xf:value ref="@value"/>
                                            </xf:itemset>
                                            <!-- Operation selected 
                                                 Don't take action when its set to '' -->
                                            <xf:action
                                                if=".!='' and $manageRecords/operation='archive'"
                                                ev:event="xforms-value-changed">
                                                <!-- Verify the status of the overall process -->
                                                <xf:dispatch name="verify-records"
                                                  target="main-model"/>
                                            </xf:action>
                                        </xf:select1>
                                    </xhtml:span>
                                </xhtml:th>

                                <!-- Target or merge history -->
                                <xhtml:th>
                                    <!-- Merge records - input the target record.
                                         The xf:group should ensure that xforms-value-changed is only triggered when the input is visible.
                                         But also check the operation on each action, just in case. -->
                                    <xf:group
                                        ref="xxf:instance('control-instance')/manageRecords[operation='merge']">
                                        <xf:input
                                            ref="xxf:instance('control-instance')/manageRecords/target/patientId"
                                            incremental="true">
                                            <xf:label
                                                ref="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/manageRecords/targetLabel"/>
                                            <!-- If target is changed, then normalize-space, target status reverts to waiting and overall status to unverified-->
                                            <xf:action ev:event="xforms-value-changed"
                                                if="$operation='merge'">
                                                <xf:setvalue ref="." value="normalize-space(.)"/>
                                                <xf:setvalue
                                                  ref="xxf:instance('control-instance')/manageRecords/target/status"
                                                  value="./@default"/>
                                                <xf:setvalue
                                                  ref="xxf:instance('control-instance')/manageRecords/status"
                                                  value="./@default"/>
                                            </xf:action>
                                            <!-- Retrieve target if user presses return -->
                                            <xf:action ev:event="DOMActivate"
                                                if="$operation='merge'">
                                                <xf:dispatch name="retrieve-record"
                                                  target="main-model">
                                                  <xxf:context name="record"
                                                  select="xxf:instance('control-instance')/manageRecords/target"/>
                                                  <xxf:context name="patientId"
                                                  select="xxf:instance('control-instance')/manageRecords/target/patientId"/>
                                                  <xxf:context name="source" select="''"/>
                                                </xf:dispatch>
                                            </xf:action>
                                        </xf:input>
                                        <!-- Verify target -->
                                        <xxf:variable name="type" select="'verify'"/>
                                        <xxf:variable name="label"
                                            select="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/manageRecords/verifyTargetLabel"/>
                                        <xxf:variable name="icon"
                                            select="concat(xxf:instance('view-parameters-instance')/staticFileRoot,'/icons/',$type,'.png?',xxf:instance('view-parameters-instance')/versionNumber/@version)"/>
                                        <!-- Button to verify target
                                            UI is blocked until action is done -->
                                        <xf:trigger appearance="minimal" xxf:modal="true"
                                            class="{if (xxf:instance('control-instance')/manageRecords/target/status='waiting' and xxf:instance('control-instance')/manageRecords/target/patientId!='') then '' else 'hidden'}">
                                            <xf:label>
                                                <xhtml:img src="{$icon}" alt="" />
                                            </xf:label>
                                            <xf:hint ref="$label"/>
                                            <xf:action ev:event="DOMActivate">
                                                <xf:dispatch name="retrieve-record"
                                                  target="main-model">
                                                  <xxf:context name="record"
                                                  select="xxf:instance('control-instance')/manageRecords/target"/>
                                                  <xxf:context name="patientId"
                                                  select="xxf:instance('control-instance')/manageRecords/target/patientId"/>
                                                  <xxf:context name="source" select="''"/>
                                                </xf:dispatch>
                                            </xf:action>
                                        </xf:trigger>
                                    </xf:group>
                                    <!-- Unmerge records - select event from merge history or display 'no history' message
                                         Only if a source has been found
                                         But just hide selection so that value-changed event triggers when setting serviceEvent in retrieve-record for source -->
                                    <xf:group
                                        ref="xxf:instance('control-instance')/manageRecords[operation='unmerge']">
                                        <xxf:variable name="serviceEventList"
                                            select="xxf:instance('control-instance')/manageRecords/serviceEventList/cda:serviceEvent "/>
                                        <!-- Only display if a source is loaded -->
                                        <xxf:variable name="unmergeSourceClass"
                                            select="if (xxf:instance('control-instance')/manageRecords/source/status='loaded') then '' else 'hidden'"/>
                                        <xhtml:span class="{$unmergeSourceClass}">
                                            <!-- Label depends on whether there are records to unmerge -->
                                            <xf:output
                                                ref="if (exists($serviceEventList)) then xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/manageRecords/unmergeLabel else xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/manageRecords/unmergeNoHistoryLabel"/>
                                            <!-- There are records to unmerge, so select the merge event.
                                             This is hidden unless there are merge events to select.
                                             But the xforms-value-changed event will trigger whenever source is set -->
                                            <xxf:variable name="mergeEventSelectionClass"
                                                select="if (exists($serviceEventList[1])) then '' else 'hidden'"/>
                                            <xf:select1 class="{$mergeEventSelectionClass}"
                                                ref="xxf:instance('control-instance')/manageRecords/target/source">
                                                <xf:itemset nodeset="$serviceEventList">
                                                  <xf:label
                                                  ref="if (cda:code/@displayName != '') then cda:code/@displayName else cda:id/@extension"/>
                                                  <xf:value ref="cda:id/@extension"/>
                                                </xf:itemset>
                                                <!-- Set the target record that is to be unmerged.
                                                     This is cda:id/@root of the selected serviceEvent
                                                     Then retrieve-record to set details of the target for unmerge (which is the source of the original merge) -->
                                                <xf:action ev:event="xforms-value-changed">
                                                  <xxf:variable name="source"
                                                  select="xxf:instance('control-instance')/manageRecords/target/source"/>
                                                  <xxf:variable name="serviceEvent"
                                                  select="$serviceEventList[cda:id/@extension=$source]"/>
                                                  <!-- The source of the merge is stored as @root on the serviceEvent cda:id for the merge.
                                                         So set this as the target of the unmerge -->
                                                  <xf:setvalue
                                                  ref="xxf:instance('control-instance')/manageRecords/target/patientId"
                                                  value="$serviceEvent/cda:id/@root"/>
                                                  <!-- Looking to retrieve record of the target from the (merged) source, so use source/patientId -->
                                                  <xf:dispatch name="retrieve-record"
                                                  target="main-model">
                                                  <xxf:context name="record"
                                                  select="xxf:instance('control-instance')/manageRecords/target"/>
                                                  <xxf:context name="patientId"
                                                  select="xxf:instance('control-instance')/manageRecords/source/patientId"/>
                                                  <xxf:context name="source" select="$source"/>
                                                  </xf:dispatch>
                                                  <!-- The effectiveTime of the merge is stored as cda:effectiveTime/@value in the serviceEvent for the merge.
                                                         So set this as the source effectiveTime (used to find compositions added to the source since the merge)  -->
                                                  <xf:setvalue
                                                  ref="xxf:instance('control-instance')/manageRecords/source/effectiveTime"
                                                  value="$serviceEvent/cda:effectiveTime/@value"/>
                                                </xf:action>
                                            </xf:select1>
                                        </xhtml:span>
                                    </xf:group>
                                    <!-- Archive/Unarchive records - the target is set to same patientId as the source.
                                         Only active when the targetId is set
                                         so just display, but trigger action when the value changes-->
                                    <xf:group
                                        ref="xxf:instance('control-instance')/manageRecords[operation=('archive','unarchive')]">
                                        <xf:output
                                            ref="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/manageRecords/targetLabel"/>
                                        <xf:output
                                            ref="xxf:instance('control-instance')/manageRecords/target/patientId"
                                        />
                                    </xf:group>
                                </xhtml:th>
                            </xhtml:tr>
                        </xhtml:thead>

                        <!-- Display CDA Header for source and target, if verified.
                             Labels are taken from the patientRegistration.
                             Otherwise display a message, depending on the status -->
                        <xhtml:tbody>
                            <xhtml:tr>
                                <xhtml:td></xhtml:td>
                                <!-- Repeat cell for source and target -->
                                <xf:repeat
                                    nodeset="xxf:instance('control-instance')/manageRecords/source | xxf:instance('control-instance')/manageRecords/target">
                                    <xxf:variable name="record" select="."/>
                                    <xxf:variable name="recordType" select="$record/name()"/>

                                    <xhtml:td>
                                        <!-- Message based on operation, status and compositionCount -->
                                        <xf:output
                                            ref="normalize-space(xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/manageRecords/recordStatus/message[@record=$record/name()][tokenize(@operation,' ')=$operation][@status=$record/status and (not(exists(@compositionCount))or @compositionCount=$record/compositionCount)] )"/>
                                        <!-- Number of compositions.
                                             Display if loaded and compositionCount is set -->
                                        <xxf:variable name="compositionCountDisplay"
                                            select="if ($record/status='loaded' and $record/compositionCount castable as xs:integer) then '' else 'hidden'"/>
                                        <xhtml:p class="{$compositionCountDisplay}">
                                            <xf:output
                                                ref="concat(xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/manageRecords/compositionCountLabel,$record/compositionCount)"
                                            />
                                        </xhtml:p>
                                        <!-- CDA Header 
                                             Display details if patientId is set and record is loaded -->
                                        <xxf:variable name="cdaHeaderDisplay"
                                            select="if ($record/patientId!='' and $record/status='loaded') then '' else 'hidden'"/>
                                        <xhtml:table class="{$cdaHeaderDisplay}">
                                            <xhtml:tbody>
                                                <xf:repeat nodeset="$record/cdaHeader/*">
                                                  <xxf:variable name="headerElement" select="."/>
                                                  <xhtml:tr>
                                                  <xhtml:td>
                                                  <xf:output
                                                  ref="xxf:instance('application-parameters-instance')/patientRegistration/*[name(.)=name($headerElement)]/@displayName"
                                                  />
                                                  </xhtml:td>
                                                  <xhtml:td>
                                                  <xf:output ref="$headerElement"/>
                                                  </xhtml:td>
                                                  </xhtml:tr>
                                                </xf:repeat>
                                            </xhtml:tbody>
                                        </xhtml:table>
                                        <!-- For source in unmerge/archive/unarchive
                                             Show the list of compositions for selection.
                                             Can only select if the subOperation is 'composition'. -->
                                        <xf:group
                                            ref="xxf:instance('control-instance')/manageRecords[operation=('unmerge','archive','unarchive')][subOperation='composition']">
                                            <xxf:variable name="registrationCompositionIRI"
                                                select="xxf:instance('application-parameters-instance')/patientRegistration/registrationEvent/@composition"/>
                                            <xxf:variable name="systemCompositionIRI"
                                                select="xxf:instance('view-parameters-instance')/systemCompositions/composition/@compositionIRI"/>
                                            <xxf:variable name="effectiveTime"
                                                select="$record/effectiveTime"/>
                                            <!-- For archive/unarchive, compositions from the source, but only if subOperation is composition.
                                                 For unmerge, there must be a merge event and then compositions added since the merge (from the full list, held in sourceCompositionsList)
                                                 Also for unmerge, if the remaining compositions do not include a registration event, then all must be selected for the unmerge. 
                                                 This will be the case when new compositions are stored after a renumbering -->
                                            <xxf:variable name="compositionList"
                                                select="if ($recordType='source') then xxf:instance('sourceCompositionsList-instance')/composition else ()"/>
                                            <!-- Merge and registration compositions cannot be transfered in manage operations -->
                                            <xxf:variable name="transferableCompositionList"
                                                select="$compositionList[not(code=($registrationCompositionIRI | $systemCompositionIRI))]"/>
                                            <!-- For unmerge, only compositions added (not merged) after the merge event can be selected -->
                                            <xxf:variable name="selectableCompositionList"
                                                select="if ($operation=('archive','unarchive')) then $transferableCompositionList else $transferableCompositionList[$effectiveTime != '' and effectiveTime gt $effectiveTime]"/>
                                            <!-- Label for selection -->
                                            <xf:output
                                                ref="if (exists($selectableCompositionList)) then xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/manageRecords/selectCompositionLabel/label[@operation=$operation]/@displayName else ''"/>
                                            <!-- Show compositions for selection -->
                                            <xhtml:span class="ScrollingContainer">
                                                <xf:repeat nodeset="$selectableCompositionList">
                                                  <xxf:variable name="composition" select="."/>
                                                  <xhtml:p>
                                                  <xf:input ref="selected">
                                                  <xf:action ev:event="xforms-value-changed">
                                                  <!-- Set the compositionCount -->
                                                  <xxf:variable name="selectedCompositions"
                                                  select="count($selectableCompositionList[selected='true'])"/>
                                                  <xf:setvalue ref="$record/compositionCount"
                                                  value="if ($operation='unmerge') then count(xxf:instance('patientCompositionsList-instance')/composition) + $selectedCompositions else $selectedCompositions"/>
                                                  <!-- Verify the status of the overall process -->
                                                  <xf:dispatch name="verify-records"
                                                  target="main-model"/>
                                                  </xf:action>
                                                  </xf:input>
                                                  <xf:output
                                                  ref="concat(effectiveTime,' ',displayName)"/>
                                                  </xhtml:p>
                                                </xf:repeat>
                                            </xhtml:span>
                                        </xf:group>
                                    </xhtml:td>
                                </xf:repeat>
                            </xhtml:tr>
                        </xhtml:tbody>
                    </xhtml:table>
                    <!-- Debugging - have a look at patient-instance or patientDemographics-instance -->
                    <!--
                    <xf:output
                        ref="xxf:serialize(xxf:call-xpl('oxf:/ops/utils/formatting/format.xpl', 'data', xxf:instance('patientDemographics-instance'), 'data')/*, 'html')"
                        mediatype="text/html"/>
-->
                    <!-- End of merge patient records -->


                    <!-- === Import records (from cityEHR database format only)
                         Spreadsheet has been loaded in cityEHR database format:
                         
                         <database>
                            <table id="">
                                <record>
                                    <field/>
                                    <field/>
                                </record>
                            </table>
                         </database>
                         =========================== -->
                    <!-- Debugging -->
                    <!--
                    <xf:output
                        ref="xxf:serialize(xxf:call-xpl('oxf:/ops/utils/formatting/format.xpl', 'data',xxf:instance('control-instance')/importRecords, 'data')/*, 'html')"
                        mediatype="text/html"/>
                    -->
                    <xhtml:div
                        class="{if ($adminTask='importRecords' and xxf:instance('control-instance')/importStatus='loaded') then 'ScrollingContainer' else 'hidden'}">

                        <!-- Use the table (sheet) specified by the user -->
                        <xxf:variable name="activeTable"
                            select="xxf:instance('import-instance')/table[@id=xxf:instance('control-instance')/importRecords/recordImportMap/@activeTableX]"/>
                        <xhtml:table class="displayList">
                            <xxf:variable name="tableMap"
                                select="xxf:instance('control-instance')/importRecords/recordImportMap/tableMap[@id=$activeTable]"/>
                            <xhtml:thead>
                                <!-- First row has the mapping controls for each field, but only if user has selected to show them -->
                                <xhtml:tr
                                    class="{if (xxf:instance('control-instance')/importRecords/showMapControls = 'true') then '' else 'hidden'}">
                                    <xf:repeat nodeset="$tableMap/fieldMap">
                                        <xhtml:th>
                                            <xhtml:ul>
                                                <xhtml:li>
                                                  <xf:output
                                                  ref="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/importRecords/importRecordMapParameters/parameter[@value='composition']/@displayName"
                                                  />
                                                </xhtml:li>
                                                <xhtml:li>
                                                  <xf:output
                                                  ref="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/importRecords/importRecordMapParameters/parameter[@value='entry']/@displayName"
                                                  />
                                                </xhtml:li>
                                                <xhtml:li>
                                                  <xf:output
                                                  ref="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/importRecords/importRecordMapParameters/parameter[@value='element']/@displayName"
                                                  />
                                                </xhtml:li>
                                            </xhtml:ul>
                                        </xhtml:th>
                                    </xf:repeat>
                                </xhtml:tr>

                                <!-- Header rows, as specified by the user -->
                            </xhtml:thead>

                            <!-- Records - only use records with valid patientId -->
                            <xxf:variable name="identifiedRecordSet" select="$activeTable/record"/>

                            <xhtml:tbody>
                                <xf:repeat nodeset="$identifiedRecordSet">
                                    <xxf:variable name="record" select="."/>
                                    <xhtml:tr>
                                        <xf:repeat nodeset="$record/field">
                                            <xhtml:td>
                                                <xf:output ref="."/>
                                            </xhtml:td>
                                        </xf:repeat>
                                    </xhtml:tr>
                                </xf:repeat>
                            </xhtml:tbody>
                        </xhtml:table>

                    </xhtml:div>


                    <!-- === Inspect Spreadsheet or Import Records === 
                         inspectSpreadsheet
                         Also used to display the spreadsheet in importRecords
                         Display the selected table in the spreadsheet that has been loaded to import-instance
                         =========================== -->
                    <xhtml:div
                        class="{if (($adminTask='inspectSpreadsheet' or ($adminTask='importRecords' and xxf:instance('control-instance')/importRecords/recordFormat='database')) and xxf:instance('control-instance')/importStatus='loaded') then 'ScrollingContainerx' else 'hidden'}">
                        <!-- Debugging -->
                        <!--
                        <xf:output
                            ref="xxf:serialize(xxf:call-xpl('oxf:/ops/utils/formatting/format.xpl', 'data', xxf:instance('control-instance')/importRecords/recordImportMap, 'data')/*, 'html')"
                            mediatype="text/html"/>
                            -->
                        <!-- Use the table (sheet) specified by the user -->
                        <xxf:variable name="spreadsheetInfo"
                            select="xxf:instance('control-instance')/inspectSpreadsheet/spreadsheetInfo"/>
                        <xxf:variable name="activeTableId" select="$spreadsheetInfo/@activeTableId"/>
                        <xxf:variable name="activeTableInfo"
                            select="$spreadsheetInfo/tableInfo[@id=$activeTableId]"/>
                        <xxf:variable name="headerRecordCount"
                            select="$activeTableInfo/@headerRecordCount"/>
                        <xxf:variable name="table"
                            select="xxf:instance('import-instance')/table[@id=$activeTableId]"/>

                        <!-- Records - display all records, except the header records.
                             Header records are always shown
                             Other records only if viewSheet is selected (true)-->
                        <xxf:variable name="headerRecordSet"
                            select="$table/record[position() le xs:integer($headerRecordCount)]"/>
                        <xxf:variable name="recordSet"
                            select="if ($spreadsheetInfo/@viewSheet='true') then $table/record[position() gt xs:integer($headerRecordCount)] else ()"/>

                        <!-- Display record map, if importing and showMap is selected -->
                        <xxf:variable name="recordImportMap"
                            select="xxf:instance('control-instance')/importRecords/recordImportMap"/>
                        <xxf:variable name="patientIdField"
                            select="$recordImportMap/tableMap[@id=$activeTableId]/@patientIdField"/>
                        <xxf:variable name="fieldMapSet"
                            select="if ($recordImportMap/@showMap='true') then $recordImportMap/tableMap[@id=$activeTableId]/fieldMap else ()"/>

                        <!-- Display as an HTML table -->
                        <xhtml:table class="border displayList">
                            <!-- Header reocrds -->
                            <xhtml:thead>
                                <xf:repeat nodeset="$headerRecordSet">
                                    <xxf:variable name="record" select="."/>
                                    <xhtml:tr>
                                        <xf:repeat nodeset="$record/field">
                                            <xhtml:th>
                                                <xf:output ref="."/>
                                            </xhtml:th>
                                        </xf:repeat>
                                    </xhtml:tr>
                                </xf:repeat>
                            </xhtml:thead>

                            <xhtml:tbody>
                                <!-- Import map -->
                                <xhtml:tr>
                                    <xxf:variable name="blankComposition"
                                        select="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/importRecords/mapSelection/iso-13606:composition"/>
                                    <xxf:variable name="blankEntry"
                                        select="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/importRecords/mapSelection/cda:observation"/>
                                    <xxf:variable name="blankElement"
                                        select="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/importRecords/mapSelection/cda:value"/>

                                    <xxf:variable name="compositionList"
                                        select="xxf:instance('dictionary-instance')/iso-13606:folderCollection/iso-13606:folder[1]/iso-13606:composition"/>

                                    <xf:repeat nodeset="1 to $activeTableInfo/@fieldCount">
                                        <xxf:variable name="fieldNo" select="."/>
                                        <xxf:variable name="fieldMap"
                                            select="$fieldMapSet[@fieldNo=$fieldNo]"/>
                                        <xhtml:td>
                                            <xf:output
                                                ref="if ($fieldMap/@fieldNo = $patientIdField) then xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/importRecords/importRecordMapParameters/parameter[@value='patientIdField']/@displayName else ''"/>
                                            <!-- Select the composition -->
                                            <xf:select1
                                                ref="if ($fieldMap/@fieldNo = $patientIdField) then () else $fieldMap/@compositionIRI">
                                                <xf:itemset
                                                  nodeset="$blankComposition | $compositionList">
                                                  <xf:label ref="@displayName"/>
                                                  <xf:value ref="@code"/>
                                                </xf:itemset>
                                                <xf:action ev:event="xforms-value-changed">
                                                  <!-- Reset the entry and element -->
                                                  <xf:setvalue ref="$fieldMap/@entryIRI" value="''"/>
                                                  <xf:setvalue ref="$fieldMap/@elementIRI"
                                                  value="''"/>
                                                </xf:action>
                                            </xf:select1>
                                            <!-- Select the entry 
                                                 The entries for each composition are listed by their root -->
                                            <xhtml:p>
                                                <xxf:variable name="entryIRIList"
                                                  select="xxf:instance('dictionary-instance')/iso-13606:folderCollection/iso-13606:folder[1]/iso-13606:composition[@code=$fieldMap/@compositionIRI]/iso-13606:entry"/>
                                                <xxf:variable name="entryList"
                                                  select="xxf:instance('dictionary-instance')/iso-13606:entryCollection//cda:observation[cda:id/@root=$entryIRIList]"/>
                                                <xf:select1
                                                  ref="if ($fieldMap/@fieldNo = $patientIdField) then () else $fieldMap/@entryIRI">
                                                  <xf:itemset nodeset="$blankEntry | $entryList">
                                                  <xf:label ref="cda:code/@displayName"/>
                                                  <xf:value ref="cda:id/@root"/>
                                                  </xf:itemset>
                                                  <xf:action ev:event="xforms-value-changed">
                                                  <!-- Reset the element -->
                                                  <xf:setvalue ref="$fieldMap/@elementIRI"
                                                  value="''"/>
                                                  </xf:action>
                                                </xf:select1>
                                            </xhtml:p>
                                            <!-- Select the element.
                                                 Use @root for the entry and @extension for the element -->
                                            <xhtml:p>
                                                <xxf:variable name="elementList"
                                                  select="xxf:instance('dictionary-instance')/iso-13606:entryCollection//cda:observation[cda:id/@root=$fieldMap/@entryIRI]/cda:value"/>
                                                <xf:select1
                                                  ref="if ($fieldMap/@fieldNo = $patientIdField) then () else $fieldMap/@elementIRI">
                                                  <xf:itemset nodeset="$blankElement | $elementList">
                                                  <xf:label ref="@cityEHR:elementDisplayName"/>
                                                  <xf:value ref="@extension"/>
                                                  </xf:itemset>
                                                  <xf:action ev:event="xforms-value-changed">
                                                  <!-- Set the element data type -->
                                                  </xf:action>
                                                </xf:select1>
                                            </xhtml:p>
                                        </xhtml:td>
                                    </xf:repeat>
                                </xhtml:tr>

                                <!-- Records -->
                                <xf:repeat nodeset="$recordSet">
                                    <xxf:variable name="record" select="."/>
                                    <xhtml:tr>
                                        <xf:repeat nodeset="$record/field">
                                            <xhtml:td>
                                                <xf:output ref="."/>
                                            </xhtml:td>
                                        </xf:repeat>
                                    </xhtml:tr>
                                </xf:repeat>

                            </xhtml:tbody>
                        </xhtml:table>
                    </xhtml:div>


                    <!-- ===Check patient list  === 
                         =========================== -->
                    <xhtml:table
                        class="{if ($adminTask='processPatientList' and xxf:instance('control-instance')/importStatus='imported') then 'displayList' else 'hidden'}">
                        <!-- Four patient lists - importedPatientList, hasRecordPatientList, noRecordPatientList, careTeamPatientList
                             Only show the list if @display is 'show'
                             This allows the careTeamPatientList to be shown only when a care team is selected -->
                        <xxf:variable name="patientLists"
                            select="xxf:instance('control-instance')/processPatientList/patientList[@display='show']"/>

                        <!-- Should be a matching element in view-parameters to get the displayName -->
                        <xxf:variable name="patientListParameters"
                            select="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/processPatientList"/>

                        <!-- The importedPatientList is used to control the display -->
                        <xxf:variable name="importedPatientList"
                            select="xxf:instance('control-instance')/processPatientList/patientList[@type='importedPatientList']"/>
                        <xxf:variable name="importedPatientIdList"
                            select="tokenize($importedPatientList,xxf:instance('view-parameters-instance')/resultSeparator)"/>

                        <!-- Head - uses displayNames from view-parameters -->
                        <xhtml:thead>
                            <xhtml:tr>
                                <xf:repeat nodeset="$patientLists">
                                    <xxf:variable name="type" select="./@type"/>
                                    <xxf:variable name="count" select="./@count"/>
                                    <xxf:variable name="patientList"
                                        select="$patientListParameters/patientList[@type=$type]"/>
                                    <xxf:variable name="displayName"
                                        select="if (exists($patientList)) then $patientList/@displayName else ''"/>
                                    <xhtml:th>
                                        <xf:output ref="concat($displayName,' (',$count,')')"/>
                                    </xhtml:th>
                                </xf:repeat>
                            </xhtml:tr>
                        </xhtml:thead>
                        <!-- Body - patients lists are set up as strings of ids with @@@ separator.
                             In each column, the comparison is made with the importedPatientList-->
                        <xhtml:tbody>
                            <xhtml:tr>
                                <xf:repeat nodeset="$patientLists">
                                    <xxf:variable name="patientList" select="."/>
                                    <xxf:variable name="patientIdList"
                                        select="tokenize($patientList,xxf:instance('view-parameters-instance')/resultSeparator)"/>
                                    <xhtml:td>
                                        <xf:repeat nodeset="$importedPatientIdList">
                                            <xxf:variable name="patientId" select="."/>
                                            <xf:output
                                                ref="if ($patientId = $patientIdList) then $patientId else ''"/>
                                            <xhtml:br />
                                        </xf:repeat>
                                    </xhtml:td>
                                </xf:repeat>
                            </xhtml:tr>
                        </xhtml:tbody>
                    </xhtml:table>
                    <!-- Debugging - hasRecordPatientList -->
                    <!--
                    <xf:output
                        ref="xxf:serialize(xxf:call-xpl('oxf:/ops/utils/formatting/format.xpl', 'data', xxf:instance('hasRecordPatientList-instance'), 'data')/*, 'html')"
                        mediatype="text/html"/>
                    -->
                    <!-- Debugging - checkPatientListQuery-instance -->
                    <!--
                    <xf:output
                        ref="xxf:serialize(xxf:call-xpl('oxf:/ops/utils/formatting/format.xpl', 'data', xxf:instance('checkPatientListQuery-instance'), 'data')/*, 'html')"
                        mediatype="text/html"/>
                    -->


                    <!-- === Import Letter Templates === 
                         storedLetterTemplateList-instance has the set of letterTemplate elements, without binary content (just the stub of letterTemplateFile)
                         ============================== -->
                    <xhtml:table
                        class="{if ($adminTask='importLetterTemplates') then '' else 'hidden'}">
                        <xxf:variable name="letterTemplateList"
                            select="xxf:instance('storedLetterTemplateList-instance')/letterTemplate"/>
                        <xxf:variable name="applicationIRI"
                            select="xxf:instance('control-instance')/managedApplication/applicationIRI"/>

                        <xhtml:thead>
                            <xhtml:tr>
                                <xhtml:th>
                                    <xf:output
                                        ref="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/manageLetterTemplates/templateLabel"
                                    />
                                </xhtml:th>
                                <xhtml:th>
                                    <xf:output
                                        ref="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/manageLetterTemplates/templateFileLabel"
                                    />
                                </xhtml:th>
                                <xhtml:th>
                                    <xf:output
                                        ref="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/manageLetterTemplates/templateContentTypeLabel"
                                    />
                                </xhtml:th>
                            </xhtml:tr>
                        </xhtml:thead>


                        <xhtml:tbody>
                            <xf:repeat nodeset="$letterTemplateList">
                                <xxf:variable name="letterTemplate" select="."/>
                                <xxf:variable name="letterTemplateFile"
                                    select="$letterTemplate/letterTemplateFile"/>
                                <xhtml:tr>
                                    <xhtml:td>
                                        <xf:input ref="$letterTemplate/@displayName">
                                            <!-- Need to save the template when the displayName changes.
                                                 But the content for the letterTemplateFile isn't loaded, so need to load that, then save -->
                                            <xf:action ev:event="xforms-value-changed">
                                                <xf:setvalue
                                                  ref="xxf:instance('control-instance')/manageLetterTemplates/editStatus"
                                                  value="'edited'"/>
                                                <!-- Load the letterTemplate content -->
                                                <xf:dispatch name="load-letterTemplateContent"
                                                  target="dictionary-model">
                                                  <xxf:context name="letterTemplate"
                                                  select="$letterTemplate"/>
                                                  <xxf:context name="applicationIRI"
                                                  select="$applicationIRI"/>
                                                </xf:dispatch>
                                                <!-- Save the letterTemplate -->
                                                <xf:dispatch name="save-letterTemplate"
                                                  target="application-model">
                                                  <xxf:context name="letterTemplate"
                                                  select="$letterTemplate"/>
                                                  <xxf:context name="applicationIRI"
                                                  select="$applicationIRI"/>
                                                </xf:dispatch>
                                            </xf:action>
                                        </xf:input>
                                    </xhtml:td>
                                    <xhtml:td>
                                        <xf:upload ref="$letterTemplateFile/@path"
                                            incremental="true">
                                            <xf:filename ref="../@name"/>
                                            <xf:mediatype ref="../@content-type"/>
                                            <!-- Template file has been uploaded -->
                                            <xf:action ev:event="xxforms-upload-done">
                                                <!-- Get uploaded data -->
                                                <xf:setvalue
                                                  ref="xxf:instance('view-parameters-instance')/sourceHandle"
                                                  value="$letterTemplateFile/@path"/>
                                                <xf:setvalue
                                                  ref="xxf:instance('view-parameters-instance')/sourceType"
                                                  value="$letterTemplateFile/@content-type"/>
                                                <xf:delete nodeset="$letterTemplateFile/*"/>
                                                <xxf:variable name="pipeline"
                                                  select="concat(xxf:instance('view-parameters-instance')/appPath,'/pipelines/cityEHRGetUploadedBinary.xpl')"/>
                                                <!--
                                                <xf:message ref="xxf:instance('view-parameters-instance')/sourceHandle"/>
                                                <xf:message ref="xxf:instance('view-parameters-instance')/sourceType"/>
                                                -->
                                                <xf:insert nodeset="xxf:instance('import-instance')"
                                                  origin="xxf:call-xpl($pipeline, 'parameters', xxf:instance('view-parameters-instance'), 'data')"/>
                                                <!-- Set the letterTemplate binary content -->
                                                <xf:dispatch name="set-letterTemplateBinaryContent"
                                                  target="application-model">
                                                  <xxf:context name="letterTemplate"
                                                  select="$letterTemplate"/>
                                                  <xxf:context name="letterTemplateBinaryContent"
                                                  select="xxf:instance('import-instance')"/>
                                                </xf:dispatch>
                                            </xf:action>
                                            <!-- Save the template when the templateFile content changes.
                                                 Or the user clears the template -->
                                            <xf:action ev:event="xforms-value-changed">
                                                <xf:setvalue
                                                  ref="xxf:instance('control-instance')/manageLetterTemplates/editStatus"
                                                  value="'edited'"/>
                                                <xf:dispatch name="save-letterTemplate"
                                                  target="application-model">
                                                  <xxf:context name="letterTemplate"
                                                  select="$letterTemplate"/>
                                                  <xxf:context name="applicationIRI"
                                                  select="$applicationIRI"/>
                                                </xf:dispatch>
                                            </xf:action>
                                        </xf:upload>
                                    </xhtml:td>
                                    <xhtml:td>
                                        <!-- Display content type or the error message -->
                                        <xxf:variable name="statusMessage"
                                            select="if ($letterTemplate/@errorMessage != '') then $letterTemplate/@errorMessage else xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/manageLetterTemplates/templateContent/mime[@type=$letterTemplateFile/@content-type]/@displayName"/>
                                        <xf:output ref="$statusMessage"/>
                                    </xhtml:td>
                                </xhtml:tr>
                            </xf:repeat>
                        </xhtml:tbody>

                    </xhtml:table>


                    <!-- === Associate Letter Templates === 
                         Displays compositions assigned to this template
                         With the option to assign all compositions
                         And to remove compositions already assigned
                         ============================== -->
                    <xhtml:table width="100%"
                        class="{if ($adminTask='associateLetterTemplates') then '' else 'hidden'}">
                        <!-- The selected letter template -->
                        <xxf:variable name="letterTemplateId"
                            select="xxf:instance('control-instance')/manageLetterTemplates/letterTemplateId"/>
                        <xxf:variable name="letterTemplateList"
                            select="xxf:instance('storedLetterTemplateList-instance')/letterTemplate"/>
                        <xxf:variable name="letterTemplate"
                            select="$letterTemplateList[@value=$letterTemplateId]"/>

                        <!-- Dictionary holds list of the compositions for the selected specialty - compositionIRI is in the @code -->
                        <xxf:variable name="compositionList"
                            select="xxf:instance('dictionary-instance')/iso-13606:folderCollection/iso-13606:folder[1]/iso-13606:composition"/>
                        <!-- Compositions associated with this template -->
                        <xxf:variable name="associatedCompositionList"
                            select="$letterTemplate/compositions/composition"/>
                        <!-- Selectable compositions -->
                        <xxf:variable name="selectableCompositionList"
                            select="$compositionList[not(@code=$associatedCompositionList/@compositionIRI)]"/>
                        <xxf:variable name="blankComposition"
                            select="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/manageLetterTemplates/compositionSelection/iso-13606:composition"/>

                        <xhtml:thead>
                            <xhtml:tr>
                                <xhtml:th width="50%">
                                    <xf:output
                                        ref="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/manageLetterTemplates/templateVariablesLabel"
                                    />
                                </xhtml:th>
                                <xhtml:th>
                                    <xf:output
                                        ref="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/manageLetterTemplates/templateAssociationsLabel"
                                    />
                                </xhtml:th>
                            </xhtml:tr>
                        </xhtml:thead>

                        <xhtml:tbody>
                            <xhtml:tr>
                                <!-- List the variables found in this template -->
                                <xhtml:td style="vertical-align:top">
                                    <xf:repeat
                                        nodeset="$letterTemplate/letterTemplateVariables/variable">
                                        <xhtml:br />
                                        <xf:output ref="@ref"/>
                                    </xf:repeat>
                                </xhtml:td>

                                <!-- List/select the associated compositions -->
                                <xhtml:td style="vertical-align:top">
                                    <!-- Associate all compositions -->
                                    <xhtml:p>
                                        <xf:input ref="$letterTemplate/compositions/@all">
                                            <xf:label
                                                ref="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/manageLetterTemplates/allCompositionsLabel"/>
                                            <xf:action ev:event="xforms-value-changed">
                                                <!-- Save the letterTemplate -->
                                                <xf:dispatch name="save-letterTemplate"
                                                  target="application-model">
                                                  <xxf:context name="letterTemplate"
                                                  select="$letterTemplate"/>
                                                  <xxf:context name="applicationIRI"
                                                  select="$applicationIRI"/>
                                                </xf:dispatch>
                                            </xf:action>
                                        </xf:input>
                                    </xhtml:p>
                                    <!-- Associate individual compositions 
                                         Include a button to delete any composition -->
                                    <xhtml:p>
                                        <xxf:variable name="type" select="'remove'"/>
                                        <xxf:variable name="label"
                                            select="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/manageLetterTemplates/deleteCompositionLabel"/>
                                        <xxf:variable name="icon"
                                            select="concat(xxf:instance('view-parameters-instance')/staticFileRoot,'/icons/',$type,'.png?',xxf:instance('view-parameters-instance')/versionNumber/@version)"/>
                                        <xf:repeat nodeset="$associatedCompositionList">
                                            <xxf:variable name="associatedComposition" select="."/>
                                            <xhtml:br />
                                            <!-- Button to remove the composition -->
                                            <xf:trigger appearance="minimal">
                                                <xf:label>
                                                  <xhtml:img src="{$icon}" alt="" />
                                                </xf:label>
                                                <xf:hint ref="$label"/>
                                                <!-- Delete the composition -->
                                                <xf:action ev:event="DOMActivate">
                                                  <xf:delete nodeset="$associatedComposition"/>
                                                  <xf:dispatch name="save-letterTemplate"
                                                  target="application-model">
                                                  <xxf:context name="letterTemplate"
                                                  select="$letterTemplate"/>
                                                  <xxf:context name="applicationIRI"
                                                  select="$applicationIRI"/>
                                                  </xf:dispatch>
                                                </xf:action>
                                            </xf:trigger>
                                            <!-- Select the composition -->
                                            <xf:select1 ref="$associatedComposition/@compositionIRI">
                                                <xf:itemset
                                                  nodeset="$blankComposition | $compositionList">
                                                  <xf:label ref="@displayName"/>
                                                  <xf:value ref="@code"/>
                                                </xf:itemset>
                                                <!-- User has selected the composition.
                                                     Don't want repeats, so reset to '' if the composition is already associated -->
                                                <xf:action ev:event="xforms-value-changed">
                                                  <!-- Save the letterTemplate -->
                                                  <xf:dispatch name="save-letterTemplate"
                                                  target="application-model">
                                                  <xxf:context name="letterTemplate"
                                                  select="$letterTemplate"/>
                                                  <xxf:context name="applicationIRI"
                                                  select="$applicationIRI"/>
                                                  </xf:dispatch>
                                                </xf:action>
                                            </xf:select1>
                                        </xf:repeat>
                                    </xhtml:p>
                                </xhtml:td>
                            </xhtml:tr>
                        </xhtml:tbody>

                    </xhtml:table>


                    <!-- === Display Monthly schedule === 
                         ============================== -->
                    <xhtml:table
                        class="{if ($adminTask='manageSchedule') then 'scheduleTable' else 'hidden'}">
                        <!-- Pattern for monthlySchedule -->
                        <xxf:variable name="scheduleDays"
                            select="xxf:instance('view-parameters-instance')/scheduling/monthlySchedule/day"/>
                        <!-- Schedule header -->
                        <xhtml:thead>
                            <xhtml:tr>
                                <xf:repeat nodeset="$scheduleDays">
                                    <xhtml:th>
                                        <xf:output ref="./@displayName"/>
                                    </xhtml:th>
                                </xf:repeat>
                                <!--
                                <xhtml:th>
                                    <xf:output ref="'Excluded Days'"/>
                                </xhtml:th>  
                                -->
                            </xhtml:tr>
                        </xhtml:thead>

                        <!-- Schedule by week/day -->
                        <xhtml:tbody>
                            <!--
                            <xhtml:tr>
                                <xhtml:td colspan="7"/>
                                <xhtml:td rowspan="7">excluded days</xhtml:td>
                            </xhtml:tr>
                            -->
                            <xxf:variable name="monthlySchedule"
                                select="xxf:instance('control-instance')/manageSchedule/monthlySchedule"/>
                            <!-- Iterate through weeks -->
                            <xf:repeat nodeset="$monthlySchedule/week">
                                <xxf:variable name="week" select="."/>
                                <xhtml:tr>
                                    <xf:repeat nodeset="$week/day">
                                        <xxf:variable name="day" select="."/>
                                        <xxf:variable name="activeClass"
                                            select="if ($day/@exclude='true') then 'excluded' else if ($day/@active='true') then 'active' else 'inactive'"/>
                                        <xhtml:td class="{$activeClass}">
                                            <xf:output ref="$day/@date"/>
                                            <xhtml:br />
                                            <xhtml:br />
                                            <xf:input
                                                ref="if ($day/@active = 'true') then $day/@exclude else ()">
                                                <xf:label
                                                  ref="xxf:instance('view-parameters-instance')/scheduling/excludedDayLabel"
                                                />
                                            </xf:input>
                                        </xhtml:td>
                                    </xf:repeat>
                                </xhtml:tr>
                            </xf:repeat>
                        </xhtml:tbody>
                    </xhtml:table>

                    <!-- Debugging -->
                    <!--
                    <xf:output
                        ref="xxf:serialize(xxf:call-xpl('oxf:/ops/utils/formatting/format.xpl', 'data', xxf:instance('control-instance')/manageSchedule/monthlySchedule, 'data')/*, 'html')"
                        mediatype="text/html"/>
                        -->


                    <!-- === Display clinic schedule === 
                             Uses the clinicSchedule imported from the template clinicSchedule.xml
                             ============================== -->
                    <xhtml:div class="{if ($adminTask='createClinic') then '' else 'hidden'}">
                        <!-- Set parameters for the clinic schedule -->
                        <xxf:variable name="clinicSchedule"
                            select="xxf:instance('control-instance')/createClinic/clinicSchedule"/>

                        <xhtml:table>
                            <!-- Two columns - clinic schedule and daily schedule -->
                            <xhtml:thead>
                                <xhtml:tr>
                                    <xhtml:th>
                                        <xf:output
                                            ref="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/createClinic/clinicScheduleLabel"
                                        />
                                    </xhtml:th>
                                    <xhtml:th>
                                        <xf:output
                                            ref="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/createClinic/dailyScheduleLabel"
                                        />
                                    </xhtml:th>
                                </xhtml:tr>
                            </xhtml:thead>

                            <!-- Controls for setting up the schedules -->
                            <xhtml:body>
                                <xhtml:tr>
                                    <!-- Clinic schedule -->
                                    <xhtml:td>
                                        <!-- Booking horizon -->
                                        <xf:input
                                            ref="$clinicSchedule/bookingHorizon/startDate/@value">
                                            <xf:label ref="../@displayName"/>
                                        </xf:input>
                                        <xf:input
                                            ref="$clinicSchedule/bookingHorizon/horizon/@value"
                                            xxf:size="3">
                                            <xf:label ref="../@displayName"/>
                                        </xf:input>
                                        <xf:input
                                            ref="$clinicSchedule/bookingHorizon/rollingHorizon/@value">
                                            <xf:label ref="../@displayName"/>
                                        </xf:input>
                                        <!-- Schedule Pattern - months, weeks, days -->
                                        <xxf:variable name="schedulePattern"
                                            select="$clinicSchedule/schedulePattern/*"/>
                                        <xf:repeat nodeset="$schedulePattern">
                                            <xxf:variable name="schedulePatternPeriodType"
                                                select="."/>
                                            <xhtml:p>
                                                <xf:output
                                                  ref="$schedulePatternPeriodType/@displayName"/>
                                                <xhtml:br />
                                                <xf:repeat nodeset="$schedulePatternPeriodType/*">
                                                  <xxf:variable name="schedulePatternPeriod"
                                                  select="."/>
                                                  <xf:input ref="$schedulePatternPeriod/@selected">
                                                  <xf:label
                                                  ref="$schedulePatternPeriod/@displayName"/>
                                                  <xf:action ev:event="xforms-value-changed">
                                                  <!-- If 'all' was selected then select all other values -->
                                                  <xf:action
                                                  if="$schedulePatternPeriod/@value='all' and $schedulePatternPeriod/@selected='true'"
                                                  xxf:iterate="$schedulePatternPeriodType/*">
                                                  <xf:setvalue ref="./@selected" value="'true'"/>
                                                  </xf:action>
                                                  <!-- If any value was deselected, then all must also be deselected -->
                                                  <xf:action
                                                  if="$schedulePatternPeriod/@value!='all' and $schedulePatternPeriod/@selected='false'">
                                                  <xf:setvalue
                                                  ref="$schedulePatternPeriodType/*[@value='all']/@selected"
                                                  value="'false'"/>
                                                  </xf:action>
                                                  </xf:action>
                                                  </xf:input>
                                                </xf:repeat>
                                            </xhtml:p>
                                        </xf:repeat>
                                        <xf:output
                                            ref="xxf:instance('control-instance')/createClinic/status"
                                        />
                                    </xhtml:td>

                                    <!-- Daily schedule -->
                                    <xhtml:td> dailySchedule </xhtml:td>
                                </xhtml:tr>
                            </xhtml:body>


                        </xhtml:table>

                    </xhtml:div>



                    <!-- === Display clinic daily details === 
                         ============================== -->
                    <xhtml:div
                        class="{if ($adminTask=('createClinic','manageClinic')) then '' else 'hidden'}">

                        <xi:include href="cityEHRClinicDisplay.xhtml"/>
                    </xhtml:div>




                    <!-- ===Redirect notifications === 
                         ============================== -->
                    <xhtml:table
                        class="{if ($adminTask='redirectNotifications' and xxf:instance('control-instance')/redirectNotifications/notificationCount != '0') then 'displayList' else 'hidden'}">
                        <!-- List of notifications or annotations which match the specified pattern -->
                        <xxf:variable name="notificationDisplayItems"
                            select="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/redirectNotifications/notificationDisplay/item"/>
                        <xhtml:thead>
                            <xhtml:tr>
                                <xf:repeat nodeset="$notificationDisplayItems">
                                    <xhtml:th>
                                        <xf:output ref="./@displayName"/>
                                    </xhtml:th>
                                </xf:repeat>
                            </xhtml:tr>
                        </xhtml:thead>
                        <!-- The list of notifications is either from notification-actions-instance or notification-annotations-instance
                             Depending on the type selected
                             One row for each notification -->
                        <xxf:variable name="notificationType"
                            select="xxf:instance('control-instance')/redirectNotifications/notificationType"/>
                        <xxf:variable name="notificationList"
                            select="if ($notificationType='#CityEHR:Annotation') then xxf:instance('notification-annotations-instance')/notification else xxf:instance('notification-actions-instance')/notification"/>
                        <xhtml:tbody>
                            <xf:repeat nodeset="$notificationList">
                                <xxf:variable name="notification" select="."/>
                                <xhtml:tr>
                                    <xf:repeat nodeset="$notificationDisplayItems">
                                        <xxf:variable name="item" select="."/>
                                        <xhtml:td>
                                            <xf:output ref="$notification/*[name(.)=$item/@name]"/>
                                        </xhtml:td>
                                    </xf:repeat>
                                </xhtml:tr>
                            </xf:repeat>
                        </xhtml:tbody>
                    </xhtml:table>
                    <!-- End of redirect notifications display -->
                    <!-- Debugging - show parameters -->
                    <!--
                    <xf:output
                        ref="xxf:serialize(xxf:call-xpl('oxf:/ops/utils/formatting/format.xpl', 'data', xxf:instance('control-instance')/redirectNotifications, 'data')/*, 'html')"
                        mediatype="text/html"/>
                        -->
                    <!--
                    <xhtml:p class="message">
                        <xf:output ref="xxf:serialize(xxf:call-xpl('oxf:/ops/utils/formatting/format.xpl', 'data', xxf:instance('notification-actions-instance'), 'data')/*, 'html')" mediatype="text/html"/>
                    </xhtml:p> 
                    -->
                    <!--
                    <xhtml:p class="message">
                        <xf:output
                            ref="xxf:serialize(xxf:call-xpl('oxf:/ops/utils/formatting/format.xpl', 'data', xxf:instance('getNotificationsXQuery-instance'), 'data')/*, 'html')"
                            mediatype="text/html"/>
                    </xhtml:p>
                    -->


                    <!-- ===Manage Patient Access === 
                        ============================== -->
                    <xhtml:table
                        class="{if ($adminTask='managePatientAccess') then 'displayList' else 'hidden'}">
                        <xhtml:thead>
                            <xhtml:th>
                                <xf:output
                                    ref="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/managePatientAccess/selectCompositionsLabel"
                                />
                            </xhtml:th>
                            <xhtml:th>
                                <xf:output
                                    ref="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/managePatientAccess/dataTransferLabel"
                                />
                            </xhtml:th>
                        </xhtml:thead>
                        <xhtml:tbody>
                            <!-- Select compositions for patient input -->
                            <xhtml:td>
                                <xf:repeat
                                    nodeset="xxf:instance('control-instance')/managePatientAccess/patientCompositionSet/composition">
                                    <xxf:variable name="composition" select="."/>
                                    <xf:input ref="$composition/@selected">
                                        <xf:action ev:event="xforms-value-changed">
                                            <xf:setvalue
                                                ref="xxf:instance('control-instance')/managePatientAccess/selectedCompositionCount"
                                                value="count(xxf:instance('control-instance')/managePatientAccess/patientCompositionSet/composition[@selected='true'])"
                                            />
                                        </xf:action>
                                    </xf:input>
                                    <xf:output
                                        ref="concat($composition/@displayName,' (',$composition/@id,')')"/>
                                    <xhtml:br />
                                </xf:repeat>
                            </xhtml:td>
                            <!-- Show patients with data ready for input -->
                            <xhtml:td>
                                <xhtml:table>
                                    <xhtml:tbody>
                                        <xf:repeat
                                            nodeset="xxf:instance('patientSessionList-instance')/session">
                                            <xxf:variable name="session" select="."/>
                                            <xhtml:tr>
                                                <!-- Debugging -->
                                                <!--
                                                <xhtml:td>
                                                    <xf:output ref="$session/@handle"/>
                                                </xhtml:td>
                                                -->
                                                <xhtml:td>
                                                  <xf:output ref="$session/@patientId"/>
                                                </xhtml:td>
                                                <xhtml:td>
                                                  <xf:output ref="$session/@family"/>
                                                </xhtml:td>
                                                <xhtml:td>
                                                  <xf:output ref="$session/@annotationCount"/> /
                                                  <xf:output ref="$session/@dataCount"/>
                                                </xhtml:td>
                                            </xhtml:tr>
                                        </xf:repeat>
                                    </xhtml:tbody>
                                </xhtml:table>
                            </xhtml:td>
                        </xhtml:tbody>

                    </xhtml:table>


                    <!-- ===Test Web Service === 
                         testWebService
                         ============================== -->
                    <xhtml:div
                        class="{if ($adminTask='testWebService') then 'message' else 'hidden'}">
                        <!-- If there are no web services -->
                        <xf:output
                            ref="if (not(exists(xxf:instance('application-parameters-instance')/webServices/service))) then xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/testWebService/noWebServices else ''"/>
                        <!-- Web service call -->
                        <xhtml:p>
                            <xf:output ref="xxf:instance('webServiceControl-instance')/serviceCall"
                            />
                        </xhtml:p>
                        <!-- If a return exists -->
                        <xhtml:p>
                            <xf:output
                                ref="if (exists(xxf:instance('webServiceReturn-instance')/*)) then xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/testWebService/webServiceReturnLabel else ''"/>
                            <xhtml:br />
                            <xf:output
                                ref="if (exists(xxf:instance('webServiceReturn-instance')/*)) then xxf:serialize(xxf:call-xpl('oxf:/ops/utils/formatting/format.xpl', 'data', xxf:instance('webServiceReturn-instance'), 'data')/*, 'html') else ''"
                                mediatype="text/html"/>
                        </xhtml:p>
                    </xhtml:div>


                    <!-- ===Display of directories of entry/element ===
                         The currently selected directory is held in import-instance
                        ================================================ -->
                    <!-- Show table for entry directory -->
                    <xhtml:table
                        class="{if ($adminTask='manageDirectory' and xxf:instance('control-instance')/manageDirectory/directory/@type='entry') then 'selectionList' else 'hidden'}">
                        <!-- Template values -->
                        <xxf:variable name="templateEntry"
                            select="xxf:instance('applicationControl-instance')/directoryParameters/iso-13606:entry"/>
                        <xxf:variable name="templateValues"
                            select="$templateEntry/cda:component/cda:observation/descendant::cda:value[@value]"/>

                        <!-- Set up variables for the key.
                             The key should be in the current dictionary -->
                        <xxf:variable name="key"
                            select="xxf:instance('control-instance')/manageDirectory/directory/@key"/>
                        <xxf:variable name="keyElement"
                            select="xxf:instance('dictionary-instance')/iso-13606:elementCollection/iso-13606:element[@root=$key]"/>
                        <xxf:variable name="keyType" select="$keyElement/@cityEHR:elementType"/>
                        <xxf:variable name="keyTypeEnumerated"
                            select="if ($keyType=('#CityEHR:ElementProperty:enumeratedValue','#CityEHR:ElementProperty:enumeratedDirectory','#CityEHR:ElementProperty:enumeratedClass')) then 'true' else 'false'"/>

                        <!-- Display column headers.
                             Use the template entry to get displayNames 
                             If the element does not have a displayName then use its id -->
                        <xhtml:thead>
                            <xhtml:tr>
                                <!-- Select to edit the elementDisplayName -->
                                <xhtml:td>
                                    <xf:output
                                        ref="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/manageDirectory/editElementDisplayNameLabel"/>
                                    <xhtml:br />
                                    <xf:input
                                        ref="xxf:instance('control-instance')/manageDirectory/editElementDisplayName"
                                    />
                                </xhtml:td>
                                <!-- Look for descendant values that have @value attribute, so that clusters are handled -->
                                <xf:repeat nodeset="$templateValues">
                                    <xxf:variable name="value" select="."/>
                                    <xxf:variable name="valueIRI" select="$value/@root"/>
                                    <xhtml:td>
                                        <!-- element id
                                             Add marker for the key element -->
                                        <xxf:variable name="elementId"
                                            select="substring-after($valueIRI,'#ISO-13606:Element:')"/>
                                        <xxf:variable name="keyElementMarker"
                                            select="if (xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/manageDirectory/keyElementLabel/@marker) then xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/manageDirectory/keyElementLabel/@marker else ''"/>
                                        <xf:output
                                            ref="if ($value/@root=$key) then concat($elementId,$keyElementMarker) else $elementId"/>
                                        <!-- elementDisplayName is editable
                                             But only if editElementDisplayName has been set to true -->
                                        <xxf:variable name="editElementDisplayNameClass"
                                            select="if (xxf:instance('control-instance')/manageDirectory/editElementDisplayName = 'true') then '' else 'hidden'"/>
                                        <xxf:variable name="displayElementDisplayNameClass"
                                            select="if ($editElementDisplayNameClass = 'hidden') then '' else 'hidden'"/>
                                        <xf:output class="{$displayElementDisplayNameClass}"
                                            ref="$value/@cityEHR:elementDisplayName"/>
                                        <xf:input class="{$editElementDisplayNameClass}"
                                            ref="$value/@cityEHR:elementDisplayName">
                                            <!-- Set the elementDisplayName for all directory entries when the template is changed
                                                 And mark the directory as edited -->
                                            <xf:action ev:event="xforms-value-changed">
                                                <xf:action
                                                  xxf:iterate="xxf:instance('import-instance')/descendant::cda:value[@root=$valueIRI]">
                                                  <xxf:variable name="storedValue" select="."/>
                                                  <xf:setvalue
                                                  ref="$storedValue/@cityEHR:elementDisplayName"
                                                  value="$value/@cityEHR:elementDisplayName"/>
                                                </xf:action>
                                                <xf:setvalue
                                                  ref="xxf:instance('control-instance')/manageDirectory/editStatus"
                                                  value="'edited'"/>
                                            </xf:action>
                                        </xf:input>
                                    </xhtml:td>
                                </xf:repeat>
                            </xhtml:tr>
                        </xhtml:thead>

                        <!-- Display each entry in the directory -->
                        <xhtml:tbody>
                            <!-- Set up delete button.
                                 The key value cannot be deleted if the key is of type 
                                 enumeratedValue, enumeratedDirectory, enumeratedClass
                              -->
                            <xxf:variable name="type" select="'remove'"/>
                            <xxf:variable name="label"
                                select="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/manageDirectory/deleteEntryLabel"/>
                            <xxf:variable name="icon"
                                select="concat(xxf:instance('view-parameters-instance')/staticFileRoot,'/icons/',$type,'.png?',xxf:instance('view-parameters-instance')/versionNumber/@version)"/>
                            <xxf:variable name="deleteButtonClass"
                                select="if ($keyTypeEnumerated='true') then 'hidden' else ''"/>

                            <!-- One row for each entry in the directory -->
                            <xf:repeat
                                nodeset="xxf:instance('import-instance')/iso-13606:entryCollection/iso-13606:entry">
                                <xxf:variable name="directoryEntry" select="."/>
                                <xhtml:tr>
                                    <!-- Delete button -->
                                    <xhtml:td>
                                        <xf:trigger class="{$deleteButtonClass}"
                                            appearance="minimal">
                                            <xf:label>
                                                <xhtml:img src="{$icon}" alt="" />
                                            </xf:label>
                                            <xf:hint ref="$label"/>
                                            <!-- Delete the entry -->
                                            <xf:action ev:event="DOMActivate">
                                                <xf:delete nodeset="$directoryEntry"/>
                                                <xf:setvalue
                                                  ref="xxf:instance('control-instance')/manageDirectory/editStatus"
                                                  value="'edited'"/>
                                            </xf:action>
                                        </xf:trigger>
                                    </xhtml:td>

                                    <!-- Use same pattern as the header row - look for descendant values that have @value attribute, so that clusters are handled.
                                         The key value cannot be edited if the key is of type 
                                         enumeratedValue, enumeratedDirectory, enumeratedClass -->

                                    <xf:repeat nodeset="$templateValues">
                                        <xxf:variable name="templateValue" select="."/>

                                        <!-- Get the matching value in the directoryEntry -->
                                        <xxf:variable name="directoryValue"
                                            select="$directoryEntry/descendant::cda:value[@extension=$templateValue/@extension]"/>
                                        <xxf:variable name="fieldLength"
                                            select="if (exists($directoryValue/@cityEHR:fieldLength)) then $directoryValue/@cityEHR:fieldLength else ''"/>
                                        <xhtml:td>
                                            <!-- Input value, unless key and type is one of:
                                                 enumeratedValue, enumeratedDirectory, enumeratedClass
                                            -->
                                            <xxf:variable name="inputClass"
                                                select="if ($directoryValue/@root=$key and $keyTypeEnumerated='true') then 'hidden' else if ($directoryValue/@code=xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/manageDirectory/errorCode) then 'inputError' else ''"/>
                                            <xf:input ref="$directoryValue/@value"
                                                class="{$inputClass}" xxf:size="{$fieldLength}"
                                                incremental="true">
                                                <!-- Displayname is set to same as value for directory entries, code is blank -->
                                                <xf:action ev:event="xforms-value-changed">
                                                  <xf:setvalue ref="$directoryValue/@displayName"
                                                  value="$directoryValue/@value"/>
                                                  <xf:setvalue
                                                  ref="xxf:instance('control-instance')/manageDirectory/editStatus"
                                                  value="'edited'"/>
                                                </xf:action>
                                            </xf:input>
                                            <!-- Just show the enumerated key value if input is hidden -->
                                            <xf:output
                                                ref="if ($inputClass='hidden') then $directoryValue/@value else ''"
                                            />
                                        </xhtml:td>
                                    </xf:repeat>
                                </xhtml:tr>
                            </xf:repeat>
                        </xhtml:tbody>
                    </xhtml:table>


                    <!-- Show table for element directory -->
                    <xhtml:table
                        class="{if ($adminTask='manageDirectory' and xxf:instance('control-instance')/manageDirectory/directory/@type='element') then 'selectionList' else 'hidden'}">
                        <xxf:variable name="displayNameInputWidth"
                            select="if (xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/manageDirectory/elementDisplayNameLabel/@width castable as xs:integer) then xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/manageDirectory/elementDisplayNameLabel/@width else ''"/>
                        <xxf:variable name="rootIRI"
                            select="xxf:instance('control-instance')/manageDirectory/directory/@root"/>

                        <!-- The templateElement contains the element for the current directory, as defined in the data dictionary -->
                        <xxf:variable name="templateElement"
                            select="xxf:instance('applicationControl-instance')/directoryParameters/iso-13606:element"/>
                        <xxf:variable name="definedValueList"
                            select="$templateElement/iso-13606:data/@value"/>

                        <xhtml:thead>
                            <!-- Display column headers for element directory as specified in view-parameters -->
                            <xhtml:tr>
                                <xhtml:td></xhtml:td>
                                <xhtml:td>
                                    <xf:output
                                        ref="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/manageDirectory/elementDisplayNameLabel"
                                    />
                                </xhtml:td>
                                <xhtml:td>
                                    <xf:output
                                        ref="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/manageDirectory/elementValueLabel"
                                    />
                                </xhtml:td>
                            </xhtml:tr>
                        </xhtml:thead>
                        <xhtml:tbody>
                            <!-- Set up delete button -->
                            <xxf:variable name="type" select="'remove'"/>
                            <xxf:variable name="label"
                                select="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/manageDirectory/deleteValueLabel"/>
                            <xxf:variable name="icon"
                                select="concat(xxf:instance('view-parameters-instance')/staticFileRoot,'/icons/',$type,'.png?',xxf:instance('view-parameters-instance')/versionNumber/@version)"/>

                            <xf:repeat
                                nodeset="xxf:instance('import-instance')/iso-13606:elementCollection/iso-13606:element/iso-13606:data">
                                <xxf:variable name="value" select="."/>
                                <xxf:variable name="definedValue"
                                    select="if($value/@value = $definedValueList) then 'true' else 'false'"/>
                                <xhtml:tr>
                                    <!-- Delete button.
                                         Can't delete values that are defined in the information model. -->
                                    <xhtml:td>
                                        <xxf:variable name="deleteButtonClass"
                                            select="if($definedValue = 'true') then 'hidden' else ''"/>
                                        <xf:trigger class="{$deleteButtonClass}"
                                            appearance="minimal">
                                            <xf:label>
                                                <xhtml:img src="{$icon}" alt="" />
                                            </xf:label>
                                            <xf:hint ref="$label"/>
                                            <!-- Delete the value -->
                                            <xf:action ev:event="DOMActivate">
                                                <xf:delete nodeset="$value"/>
                                                <xf:setvalue
                                                  ref="xxf:instance('control-instance')/manageDirectory/editStatus"
                                                  value="'edited'"/>
                                            </xf:action>
                                        </xf:trigger>
                                    </xhtml:td>
                                    <!-- Input displayName.
                                         Either input or memo depending on the length of the displayName. -->
                                    <xhtml:td>
                                        <xxf:variable name="displayNameClass"
                                            select="if ($value/@code=xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/manageDirectory/errorCode) then 'inputError' else ''"/>
                                        <xxf:variable name="displayNameLength"
                                            select="string-length($value/@displayName)"/>
                                        <!-- Input control -->
                                        <xxf:variable name="inputClass"
                                            select="if (xs:integer($displayNameLength) le xs:integer($displayNameInputWidth)) then $displayNameClass else 'hidden'"/>
                                        <xf:input ref="$value/@displayName" class="{$inputClass}"
                                            incremental="true" xxf:size="{$displayNameInputWidth}">
                                            <!-- This will trigger for both the input and the memo -->
                                            <xf:action ev:event="xforms-value-changed">
                                                <xf:setvalue
                                                  ref="xxf:instance('control-instance')/manageDirectory/editStatus"
                                                  value="'edited'"/>
                                            </xf:action>
                                        </xf:input>
                                        <!-- memo control -->
                                        <xxf:variable name="memoClass"
                                            select="if (xs:integer($displayNameLength) gt xs:integer($displayNameInputWidth)) then $displayNameClass else 'hidden'"/>
                                        <xf:textarea ref="$value/@displayName" class="{$memoClass}"
                                            appearance="xxf:autosize" incremental="true"
                                            style="min-width: 30em;">
                                            <xf:label/>
                                            <xf:action ev:event="xforms-value-changed">
                                                <!-- Don't need to do anything here, since the one in xf:input above will always get triggered -->
                                            </xf:action>
                                        </xf:textarea>
                                    </xhtml:td>
                                    <!-- Input value 
                                        Can't input/change values that are defined in the information model. -->
                                    <xhtml:td>
                                        <xf:input ref="$value/@value[not(.=$definedValueList)]"
                                            incremental="true">
                                            <xf:action ev:event="xforms-value-changed">
                                                <xf:setvalue
                                                  ref="xxf:instance('control-instance')/manageDirectory/editStatus"
                                                  value="'edited'"/>
                                            </xf:action>
                                        </xf:input>
                                        <xf:output
                                            ref="if ($value/@value='' and $value/@displayName!='') then concat(' (',$value/@displayName,')') else if ($value/@value=$definedValueList) then $value/@value else ''"
                                        />
                                    </xhtml:td>
                                </xhtml:tr>
                            </xf:repeat>
                        </xhtml:tbody>
                    </xhtml:table>
                    <!-- End of directory display -->


                    <!-- === Display of file upload and import information.
                             Only display this once the import instance has loaded 
                             and before the Import button is pressed  
                         ============================================= -->
                    <xhtml:table
                        class="{if (xxf:instance('control-instance')/adminTask/adminTaskLoadFile!='' and xxf:instance('control-instance')/uploadStatus=('loaded','failed') and xxf:instance('control-instance')/importStatus=('waiting','ready')) then '' else 'hidden'}">
                        <xhtml:tbody>

                            <!-- Information on the uploaded file. -->
                            <xhtml:tr>
                                <xhtml:td class="control"></xhtml:td>
                                <xhtml:td>
                                    <xf:output
                                        ref="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/fileUpload/filenameLabel"/>
                                    <xf:output ref="xxf:instance('file-instance')/file/filename"/>
                                </xhtml:td>
                            </xhtml:tr>
                            <xhtml:tr>
                                <xhtml:td class="control"></xhtml:td>
                                <xhtml:td>
                                    <xf:output
                                        ref="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/fileUpload/fileTypeLabel"/>
                                    <xf:output ref="xxf:instance('file-instance')/file/mediatype"/>
                                </xhtml:td>
                            </xhtml:tr>
                            <xhtml:tr>
                                <xhtml:td class="control"></xhtml:td>
                                <xhtml:td>
                                    <xf:output
                                        ref="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/fileUpload/fileSizeLabel"/>
                                    <xf:output ref="xxf:instance('file-instance')/file/size"/>
                                </xhtml:td>
                            </xhtml:tr>
                            <xhtml:tr>
                                <xhtml:td class="control"></xhtml:td>
                                <xhtml:td>
                                    <xf:output
                                        ref="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/fileUpload/fileContentLabel"/>
                                    <xf:output ref="xxf:instance('file-instance')/file/content"/>
                                </xhtml:td>
                            </xhtml:tr>

                            <!-- Information on the import instance. -->
                            <xhtml:tr>
                                <xhtml:td class="control"></xhtml:td>

                                <xhtml:td
                                    class="{if (xxf:instance('control-instance')/uploadStatus='loaded') then 'control' else 'hidden'}">
                                    <xxf:variable name="root"
                                        select="xxf:instance('control-instance')/importXMLRoot"/>
                                    <xhtml:p>
                                        <xf:output
                                            ref="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/fileUpload/rootElementLabel"/>
                                        <xf:output ref="$root"/>
                                    </xhtml:p>
                                    <xhtml:p>
                                        <xf:output
                                            ref="xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/fileUpload/contentsInfoLabel"
                                        />
                                    </xhtml:p>
                                    <!-- Not an ontology - list first level elements -->
                                    <xhtml:span
                                        class="{if ($root!='Ontology') then '' else 'hidden'}">
                                        <xhtml:ol>
                                            <xf:repeat
                                                nodeset="xxf:instance('import-instance')[name(.)!='Ontology']/*"
                                                id="node-repeat">
                                                <xxf:variable name="node" select="."/>
                                                <xhtml:li>
                                                  <xf:output ref="concat(name($node),': ')"/>
                                                  <!-- This will find patient ids when importing record sets -->
                                                  <xf:output ref="$node/@patientId"/>
                                                  <!-- This will find patient ids when checking patient lists -->
                                                  <xf:output ref="$node/@id"/>
                                                  <!-- This will find user ids when importing users -->
                                                  <xf:output
                                                  ref="if (exists($node/credentials/userId)) then concat($node/credentials/userId,'(',$node/credentials/username,')') else ''"/>
                                                  <!-- This will find careTeam and dataSet ids when importing care teams or export data sets -->
                                                  <xf:output
                                                  ref="if (exists($node/@displayName)) then concat($node/@displayName,'(',$node/@id,')') else ''"/>
                                                  <!-- This will find names when importing forms or views -->
                                                  <xf:output ref="$node/cda:code/@displayName"/>
                                                  <!-- This will find specialty context when importing forms or dictionary -->
                                                  <xf:output
                                                  ref="$node/iso-13606:context/iso-13606:specialtyCollection/iso-13606:specialty"/>
                                                  <!-- This will find worksheet names when importing spreadsheets -->
                                                  <xf:output ref="$node/@ss:Name"/>
                                                </xhtml:li>
                                            </xf:repeat>
                                        </xhtml:ol>
                                    </xhtml:span>
                                    <!-- Information on the import-instance when importing an ontology.
                                         Note that importing models as spreadsheets or graphml will generate the import-instance as an ontology sonce the import button is pressed.
                                         Show whether this is a unique specialty information model or a common model -->
                                    <xhtml:span
                                        class="{if ($root='Ontology') then '' else 'hidden'}">
                                        <!-- Display information about the ontology -->
                                        <xxf:variable name="specialtyIRI"
                                            select="xxf:instance('control-instance')/importInformationModel/specialtyIRI"/>
                                        <xxf:variable name="commonModelIRI"
                                            select="xxf:instance('control-instance')/managedApplication/commonModelIRI"/>
                                        <xf:output
                                            ref="if ($specialtyIRI=$commonModelIRI) then xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/fileUpload/commonModel else xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/fileUpload/uniqueModel"/>
                                        <xhtml:br />
                                        <xf:output
                                            ref="xxf:instance('control-instance')/importInformationModel/applicationIRI"/>
                                        <xhtml:br />
                                        <xf:output ref="$specialtyIRI"/>
                                        <xhtml:br />
                                        <xf:output
                                            ref="xxf:instance('control-instance')/manageInformationModel/informationModelType"/>
                                        <xhtml:br />
                                        <xf:output
                                            ref="xxf:instance('control-instance')/importInformationModel/baseLanguageCode"/>
                                        <xhtml:br />
                                        <xf:output
                                            ref="xxf:instance('control-instance')/importInformationModel/classIRI"/>
                                        <xhtml:br />
                                        <!-- This will find errors when importing information models -->
                                        <xf:output
                                            value="concat(count(xxf:instance('import-instance')/owl:ClassAssertion/owl:Class[@IRI='#CityEHR:Error']),' errors.')"/>
                                        <xhtml:ol>
                                            <xf:repeat
                                                nodeset="xxf:instance('import-instance')/owl:ClassAssertion[owl:Class/@IRI='#CityEHR:Error']/owl:NamedIndividual">
                                                <xxf:variable name="errorIRI" select="./@IRI"/>
                                                <xhtml:li>
                                                  <xf:output
                                                  value="xxf:instance('import-instance')/owl:DataPropertyAssertion[owl:DataProperty/@IRI='#hasValue'][owl:NamedIndividual/@IRI=$errorIRI]/owl:Literal"
                                                  />
                                                </xhtml:li>
                                            </xf:repeat>
                                        </xhtml:ol>
                                    </xhtml:span>
                                    <!-- List warnings if import instance is an ontology -->
                                    <xhtml:span
                                        class="{if ($root='Ontology') then '' else 'hidden'}">
                                        <!-- This will find warnings when importing information models -->
                                        <xf:output
                                            value="concat(count(xxf:instance('import-instance')/owl:ClassAssertion/owl:Class[@IRI='#CityEHR:Warning']),' warnings.')"/>
                                        <xhtml:ol>
                                            <xf:repeat
                                                nodeset="xxf:instance('import-instance')/owl:ClassAssertion[owl:Class/@IRI='#CityEHR:Warning']/owl:NamedIndividual">
                                                <xxf:variable name="warningIRI" select="./@IRI"/>
                                                <xhtml:li>
                                                  <xf:output
                                                  value="xxf:instance('import-instance')/owl:DataPropertyAssertion[owl:DataProperty/@IRI='#hasValue'][owl:NamedIndividual/@IRI=$warningIRI]/owl:Literal"
                                                  />
                                                </xhtml:li>
                                            </xf:repeat>
                                        </xhtml:ol>
                                    </xhtml:span>
                                </xhtml:td>

                            </xhtml:tr>

                        </xhtml:tbody>
                    </xhtml:table>
                    <!-- End of file upload and import information -->


                    <!-- === Display of errors in checkExpressions-instance when checking expressions.
                         Displayed after loading of information model and pressing to checkExpressions
                         ============================================================================= -->
                    <xhtml:div
                        class="{if ($adminTask='importInformationModel' and xxf:instance('control-instance')/importInformationModel/checkExpressions='true') then '' else 'hidden'}">
                        <xxf:variable name="expressionErrors"
                            select="xxf:instance('checkExpressions-instance')/expression[@error!='']"/>
                        <!-- Report error count -->
                        <xhtml:p>
                            <xf:output
                                ref="if (count($expressionErrors)=0) then xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/statusMessage/message[@processingProgress='noExpressionErrors'] else xxf:instance('view-parameters-instance')/staticParameters/cityEHRAdmin/statusMessage/message[@processingProgress='expressionErrors']"
                            />
                        </xhtml:p>
                        <!-- Information on the errors. -->
                        <xhtml:table>
                            <xhtml:tbody>
                                <xf:repeat nodeset="$expressionErrors">
                                    <xxf:variable name="expression" select="."/>
                                    <xhtml:tr>
                                        <xhtml:td>
                                            <xf:output ref="$expression/@context"/>
                                        </xhtml:td>
                                        <xhtml:td>
                                            <xf:output ref="$expression/@type"/>
                                        </xhtml:td>
                                        <xhtml:td>
                                            <xf:output ref="$expression/@error"/>
                                        </xhtml:td>
                                        <xhtml:td>
                                            <xf:output ref="$expression"/>
                                        </xhtml:td>
                                    </xhtml:tr>
                                </xf:repeat>
                            </xhtml:tbody>
                        </xhtml:table>
                    </xhtml:div>




                    <!-- ===Uncomment these outputs for debugging === 
                    ============================================= -->
                    <!--
                        <xhtml:p> applicationId: <xf:output ref="xxf:instance('view-parameters-instance')/applicationId"/>
                        </xhtml:p>
                        <xhtml:p> applicationIRI: <xf:output ref="xxf:instance('view-parameters-instance')/applicationIRI"/>
                        </xhtml:p>
                        <xhtml:p> specialtyId: <xf:output ref="xxf:instance('view-parameters-instance')/specialtyId"/>
                        </xhtml:p>
                        <xhtml:p> informationModelType: <xf:output ref="xxf:instance('control-instance')/manageInformationModel/informationModelType"/>
                        </xhtml:p>
                        <xhtml:p> Static file root: <xf:output ref="xxf:instance('view-parameters-instance')/staticFileRoot"/>
                        </xhtml:p>
                        <xhtml:p> Logo: <xf:output ref="xxf:instance('application-parameters-instance')/application/logo"/>
                        </xhtml:p>
-->

                    <!--
                    
                    <xhtml:p class="message">dalQuery-instance:<xhtml:br />
                        <xf:output
                            ref="xxf:serialize(xxf:call-xpl('oxf:/ops/utils/formatting/format.xpl', 'data', xxf:instance('dalQuery-instance'), 'data')/*, 'html')"
                            mediatype="text/html"/>
                    </xhtml:p>   
                    -->

                    <!--
                    <xhtml:p class="message">System parameters instance:<xhtml:br />
                        <xf:output
                            ref="xxf:serialize(xxf:call-xpl('oxf:/ops/utils/formatting/format.xpl', 'data', xxf:instance('system-parameters-instance'), 'data')/*, 'html')"
                            mediatype="text/html"/>
                    </xhtml:p>
                    -->
                    <!--
                    <xhtml:p class="message">Collection List:<xhtml:br />
                        <xf:output
                            ref="xxf:serialize(xxf:call-xpl('oxf:/ops/utils/formatting/format.xpl', 'data', xxf:instance('collectionList-instance'), 'data')/*, 'html')"
                            mediatype="text/html"/>
                    </xhtml:p>

                    <xhtml:p class="message">Node Hierarchy:<xhtml:br />
                        <xf:output
                            ref="xxf:serialize(xxf:call-xpl('oxf:/ops/utils/formatting/format.xpl', 'data', xxf:instance('control-instance')/browseLogicalDatabases/nodeHierarchy, 'data')/*, 'html')"
                            mediatype="text/html"/>
                    </xhtml:p>
-->
                    <!--
                    <xhtml:p class="message">Managed database:<xhtml:br />
                        <xf:output
                            ref="xxf:serialize(xxf:call-xpl('oxf:/ops/utils/formatting/format.xpl', 'data', xxf:instance('control-instance')/managedDatabase, 'data')/*, 'html')"
                            mediatype="text/html"/>
                    </xhtml:p>
                    -->
                    <!--
                    <xhtml:p class="message">Import instance:<xhtml:br/>
                        <xf:output
                            ref="xxf:serialize(xxf:call-xpl('oxf:/ops/utils/formatting/format.xpl', 'data', xxf:instance('import-instance'), 'data')/*, 'html')"
                            mediatype="text/html"/>
                    </xhtml:p>
-->
                    <!--
                    <xhtml:p class="message">Resource instance:<xhtml:br/>
                        <xf:output
                            ref="xxf:serialize(xxf:call-xpl('oxf:/ops/utils/formatting/format.xpl', 'data', xxf:instance('resource-instance'), 'data')/*, 'html')"
                            mediatype="text/html"/>
                    </xhtml:p>
-->
                    <!--
                    <xhtml:p class="message">Import instance:<xhtml:br/>
                        <xf:output
                            ref="xxf:serialize(xxf:call-xpl('oxf:/ops/utils/formatting/format.xpl', 'data', xxf:instance('control-instance')/generateTestData/cdaHeaderSet, 'data')/*, 'html')"
                            mediatype="text/html"/>
                    </xhtml:p>
                    -->
                    <!--
                    <xhtml:p class="message">patientCompositionsList:<xhtml:br/>
                        <xf:output
                            ref="xxf:serialize(xxf:call-xpl('oxf:/ops/utils/formatting/format.xpl', 'data', xxf:instance('patientCompositionsList-instance'), 'data')/*, 'html')"
                            mediatype="text/html"/>
                    </xhtml:p>
                    -->
                    <!--
                    <xhtml:p class="message">sourceCompositionsList:<xhtml:br/>
                        <xf:output
                            ref="xxf:serialize(xxf:call-xpl('oxf:/ops/utils/formatting/format.xpl', 'data', xxf:instance('sourceCompositionsList-instance'), 'data')/*, 'html')"
                            mediatype="text/html"/>
                    </xhtml:p>                    
                    -->
                    <!--
                    <xhtml:p class="message">patient-instance:<xhtml:br/>
                        <xf:output
                            ref="xxf:serialize(xxf:call-xpl('oxf:/ops/utils/formatting/format.xpl', 'data', xxf:instance('patient-instance'), 'data')/*, 'html')"
                            mediatype="text/html"/>
                    </xhtml:p>

                    <xhtml:p class="message">patientDemographicsXQuery-instance:<xhtml:br/>
                        <xf:output
                            ref="xxf:serialize(xxf:call-xpl('oxf:/ops/utils/formatting/format.xpl', 'data', xxf:instance('patientDemographicsXQuery-instance'), 'data')/*, 'html')"
                            mediatype="text/html"/>
                    </xhtml:p>
                    -->
                    <!--
                    <xhtml:p class="message">Template element:<xhtml:br/>
                        <xf:output ref="xxf:serialize(xxf:call-xpl('oxf:/ops/utils/formatting/format.xpl', 'data', xxf:instance('control-instance')/manageDirectory/templateElement, 'data')/*, 'html')" mediatype="text/html"/>
                    </xhtml:p>                 
                    -->
                    <!--
                    <xhtml:p class="message">manageDirectory Parameters<xhtml:br />
                        <xf:output
                            ref="xxf:serialize(xxf:call-xpl('oxf:/ops/utils/formatting/format.xpl', 'data', xxf:instance('control-instance')/manageDirectory, 'data')/*, 'html')"
                            mediatype="text/html"/>
                    </xhtml:p>

                    <xhtml:p class="message">Directory Parameters<xhtml:br />
                        <xf:output
                            ref="xxf:serialize(xxf:call-xpl('oxf:/ops/utils/formatting/format.xpl', 'data', xxf:instance('applicationControl-instance')/directoryParameters, 'data')/*, 'html')"
                            mediatype="text/html"/>
                    </xhtml:p>
                    -->
                    <!--
                    <xhtml:p class="message">Directory<xhtml:br />
                        <xf:output
                            ref="xxf:serialize(xxf:call-xpl('oxf:/ops/utils/formatting/format.xpl', 'data', xxf:instance('import-instance'), 'data')/*, 'html')"
                            mediatype="text/html"/>
                    </xhtml:p>
-->
                    <!-- Debugging -->
                    <!--
                    <xhtml:p class="message">Model dictionary:<xhtml:br />
                        <xf:output
                            ref="xxf:serialize(xxf:call-xpl('oxf:/ops/utils/formatting/format.xpl', 'data', xxf:instance('dictionary-instance'), 'data')/*, 'html')"
                            mediatype="text/html"/>
                    </xhtml:p>
-->
                    <!--
                    <xhtml:p class="message">Common model dictionary:<xhtml:br />
                        <xf:output
                            ref="xxf:serialize(xxf:call-xpl('oxf:/ops/utils/formatting/format.xpl', 'data', xxf:instance('commonModelDictionary-instance'), 'data')/*, 'html')"
                            mediatype="text/html"/>
                    </xhtml:p>
-->
                    <!--
                    <xhtml:p class="message">Manage dictionary:<xhtml:br/>
                        <xf:output ref="xxf:serialize(xxf:call-xpl('oxf:/ops/utils/formatting/format.xpl', 'data', xxf:instance('control-instance')/manageDirectory, 'data')/*, 'html')" mediatype="text/html"/>
                    </xhtml:p>                   
                    -->
                    <!--
                    <xhtml:p class="message">Manage directory:<xhtml:br />
                        <xf:output
                            ref="xxf:serialize(xxf:call-xpl('oxf:/ops/utils/formatting/format.xpl', 'data', xxf:instance('import-instance'), 'data')/*, 'html')"
                            mediatype="text/html"/>
                    </xhtml:p>
-->
                    <!--
                    <xhtml:p class="message">Directory list:<xhtml:br/>
                        <xf:output ref="xxf:serialize(xxf:call-xpl('oxf:/ops/utils/formatting/format.xpl', 'data', xxf:instance('directoryList-instance'), 'data')/*, 'html')" mediatype="text/html"/>
                    </xhtml:p>
                    -->
                    <!--
                    <xhtml:p class="message">Directory template entry:<xhtml:br/>
                        <xf:output ref="xxf:serialize(xxf:call-xpl('oxf:/ops/utils/formatting/format.xpl', 'data', xxf:instance('control-instance')/manageDirectory/templateEntry, 'data')/*, 'html')" mediatype="text/html"/>
                    </xhtml:p>                   
-->
                    <!--
                    <xhtml:p class="message">Care team list:<xhtml:br/>
                        <xf:output
                            ref="xxf:serialize(xxf:call-xpl('oxf:/ops/utils/formatting/format.xpl', 'data', xxf:instance('careTeamList-instance'), 'data')/*, 'html')"
                            mediatype="text/html"/>
                    </xhtml:p>

                    <xhtml:p class="message">Care team:<xhtml:br/>
                        <xf:output
                            ref="xxf:serialize(xxf:call-xpl('oxf:/ops/utils/formatting/format.xpl', 'data', xxf:instance('careTeam-instance'), 'data')/*, 'html')"
                            mediatype="text/html"/>
                    </xhtml:p>
-->
                    <!--
                    <xf:output class="message" ref="xxf:instance('control-instance')/manageInformationModel/informationModelType"/>                 
                    -->
                    <!--
                    <xhtml:p class="message">Specialty List:<xhtml:br />
                        <xf:output
                            ref="xxf:serialize(xxf:call-xpl('oxf:/ops/utils/formatting/format.xpl', 'data', xxf:instance('specialtyList-instance'), 'data')/*, 'html')"
                            mediatype="text/html"/>
                    </xhtml:p>
-->
                    <!--
                    <xhtml:p class="message">managedApplication<xhtml:br/>
                        <xf:output
                            ref="xxf:serialize(xxf:call-xpl('oxf:/ops/utils/formatting/format.xpl', 'data', xxf:instance('control-instance')/managedApplication, 'data')/*, 'html')"
                            mediatype="text/html"/>
                    </xhtml:p>
                    -->

                    <!--
                    <xhtml:p class="message">Information model List:<xhtml:br />
                        <xf:output
                            ref="xxf:serialize(xxf:call-xpl('oxf:/ops/utils/formatting/format.xpl', 'data', xxf:instance('informationModelList-instance'), 'data')/*, 'html')"
                            mediatype="text/html"/>
                    </xhtml:p>
-->
                    <!--
                    <xhtml:p class="message">Application List:<xhtml:br />
                        <xf:output
                            ref="xxf:serialize(xxf:call-xpl('oxf:/ops/utils/formatting/format.xpl', 'data', xxf:instance('applicationList-instance'), 'data')/*, 'html')"
                            mediatype="text/html"/>
                    </xhtml:p>
                    -->
                    <!--
                    <xhtml:p class="message">Language pack List:<xhtml:br/>
                        <xf:output
                            ref="xxf:serialize(xxf:call-xpl('oxf:/ops/utils/formatting/format.xpl', 'data', xxf:instance('languagePackList-instance'), 'data')/*, 'html')"
                            mediatype="text/html"/>
                    </xhtml:p>
                    -->
                    <!--
                    <xhtml:p class="message">notifications-query-instance<xhtml:br/>
                        <xf:output
                            ref="xxf:serialize(xxf:call-xpl('oxf:/ops/utils/formatting/format.xpl', 'data', xxf:instance('notifications-query-instance'), 'data')/*, 'html')"
                            mediatype="text/html"/>
                    </xhtml:p>                   
                    -->
                    <!--
                    <xhtml:p>User list:<xhtml:br/>
                        <xf:output
                            ref="xxf:serialize(xxf:call-xpl('oxf:/ops/utils/formatting/format.xpl', 'data', xxf:instance('userList-instance'), 'data')/*, 'html')"
                            mediatype="text/html"/>
                    </xhtml:p>
                    -->
                    <!--
                    <xf:output ref="
                        xxf:instance('view-parameters-instance')/viewDisplayLayout"/>
                    -->
                    <!--
                    <xhtml:p>demographics-query-instance:<xhtml:br/>
                        <xf:output
                            ref="xxf:serialize(xxf:call-xpl('oxf:/ops/utils/formatting/format.xpl', 'data', xxf:instance('demographics-query-instance'), 'data')/*, 'html')"
                            mediatype="text/html"/>
                    </xhtml:p>
                    -->
                    <!--
                    <xhtml:p>application-parameters-instance:<xhtml:br/>
                        <xf:output
                            ref="xxf:serialize(xxf:call-xpl('oxf:/ops/utils/formatting/format.xpl', 'data', xxf:instance('application-parameters-instance'), 'data')/*, 'html')"
                            mediatype="text/html"/>
                    </xhtml:p>
                    -->
                    <!--
                    <xhtml:p>manifest-instance:<xhtml:br/>
                        <xf:output
                            ref="xxf:serialize(xxf:call-xpl('oxf:/ops/utils/formatting/format.xpl', 'data', xxf:instance('manifest-instance'), 'data')/*, 'html')"
                            mediatype="text/html"/>
                    </xhtml:p>
                    -->
                    <!--
                    <xhtml:p>response-instance:<xhtml:br />
                        <xf:output
                            ref="xxf:serialize(xxf:call-xpl('oxf:/ops/utils/formatting/format.xpl', 'data', xxf:instance('response-instance'), 'data')/*, 'html')"
                            mediatype="text/html"/>
                    </xhtml:p>
                    -->
                    <!--
                    <xhtml:p class="message">Gender Value Set<xhtml:br />
                        <xf:output
                            ref="xxf:serialize(xxf:call-xpl('oxf:/ops/utils/formatting/format.xpl', 'data', xxf:instance('control-instance')/generateTestData/genderValueSet, 'data')/*, 'html')"
                            mediatype="text/html"/>
                    </xhtml:p>
-->
                    <!--
                    <xhtml:p class="message">CDA Header Set<xhtml:br />
                        <xf:output
                            ref="xxf:serialize(xxf:call-xpl('oxf:/ops/utils/formatting/format.xpl', 'data', xxf:instance('control-instance')/generateTestData/cdaHeaderSet, 'data')/*, 'html')"
                            mediatype="text/html"/>
                    </xhtml:p>
-->
                    <!--
                    <xhtml:p class="message">test-record-instance<xhtml:br />
                        <xf:output
                            ref="xxf:serialize(xxf:call-xpl('oxf:/ops/utils/formatting/format.xpl', 'data', xxf:instance('test-record-instance'), 'data')/*, 'html')"
                            mediatype="text/html"/>
                    </xhtml:p>
                    -->
                    <!--
                    <xhtml:p class="message">system-parameters-instance<xhtml:br />
                        <xf:output
                            ref="xxf:serialize(xxf:call-xpl('oxf:/ops/utils/formatting/format.xpl', 'data', xxf:instance('system-parameters-instance'), 'data')/*, 'html')"
                            mediatype="text/html"/>
                    </xhtml:p>                    
                    
                    <xhtml:p class="message">database-parameters-instance<xhtml:br />
                        <xf:output
                            ref="xxf:serialize(xxf:call-xpl('oxf:/ops/utils/formatting/format.xpl', 'data', xxf:instance('database-parameters-instance'), 'data')/*, 'html')"
                            mediatype="text/html"/>
                    </xhtml:p>
-->
                    <!--
                    <xhtml:p class="message">storedMediaList:<xhtml:br/>
                        <xf:output
                            ref="xxf:serialize(xxf:call-xpl('oxf:/ops/utils/formatting/format.xpl', 'data', xxf:instance('storedMediaList-instance'), 'data')/*, 'html')"
                            mediatype="text/html"/>
                    </xhtml:p> 
-->
                    <!--
                    <xhtml:p class="message">shippedMediaList:<xhtml:br />
                        <xf:output
                            ref="xxf:serialize(xxf:call-xpl('oxf:/ops/utils/formatting/format.xpl', 'data', xxf:instance('shippedMediaList-instance'), 'data')/*, 'html')"
                            mediatype="text/html"/>
                    </xhtml:p>                   
                    -->
                    <!--
                    <xhtml:p class="message">application-media-instance:<xhtml:br />
                        <xf:output
                            ref="xxf:serialize(xxf:call-xpl('oxf:/ops/utils/formatting/format.xpl', 'data', xxf:instance('application-media-instance'), 'data')/*, 'html')"
                            mediatype="text/html"/>
                    </xhtml:p>
                    -->
                    <!--
                    <xhtml:p class="message">directoryElements-instance:<xhtml:br />
                        <xf:output
                            ref="xxf:serialize(xxf:call-xpl('oxf:/ops/utils/formatting/format.xpl', 'data', xxf:instance('directoryElements-instance'), 'data')/*, 'html')"
                            mediatype="text/html"/>
                    </xhtml:p>
-->
                    <!--
                    <xhtml:p class="message">iconList-instance:<xhtml:br />
                        <xf:output
                            ref="xxf:serialize(xxf:call-xpl('oxf:/ops/utils/formatting/format.xpl', 'data', xxf:instance('iconList-instance'), 'data')/*, 'html')"
                            mediatype="text/html"/>
                    </xhtml:p>                   
                    -->
                    <!--
                    <xhtml:p class="message">storedMediaList-instance:<xhtml:br />
                        <xf:output
                            ref="xxf:serialize(xxf:call-xpl('oxf:/ops/utils/formatting/format.xpl', 'data', xxf:instance('storedMediaList-instance'), 'data')/*, 'html')"
                            mediatype="text/html"/>
                    </xhtml:p>
-->
                    <!--
                    <xhtml:p class="message">application-mediaInformation-instance:<xhtml:br />
                        <xf:output
                            ref="xxf:serialize(xxf:call-xpl('oxf:/ops/utils/formatting/format.xpl', 'data', xxf:instance('application-mediaInformation-instance'), 'data')/*, 'html')"
                            mediatype="text/html"/>
                    </xhtml:p>                   
 -->
                    <!--
                    <xhtml:p class="message">import-instance:<xhtml:br />
                        <xf:output
                            ref="xxf:serialize(xxf:call-xpl('oxf:/ops/utils/formatting/format.xpl', 'data', xxf:instance('import-instance'), 'data')/*, 'html')"
                            mediatype="text/html"/>
                    </xhtml:p>
-->
                    <!--
                    <xhtml:p class="message">storedLetterTemplateList:<xhtml:br />
                        <xf:output
                            ref="xxf:serialize(xxf:call-xpl('oxf:/ops/utils/formatting/format.xpl', 'data', xxf:instance('storedLetterTemplateList-instance'), 'data')/*, 'html')"
                            mediatype="text/html"/>
                    </xhtml:p>
-->
                    <!--
                    <xhtml:p class="message">storedImageMapFileList:<xhtml:br />
                        <xf:output
                            ref="xxf:serialize(xxf:call-xpl('oxf:/ops/utils/formatting/format.xpl', 'data', xxf:instance('storedImageMapFileList-instance'), 'data')/*, 'html')"
                            mediatype="text/html"/>
                    </xhtml:p>

                    <xhtml:p class="message">imageMapFileList:<xhtml:br />
                        <xf:output
                            ref="xxf:serialize(xxf:call-xpl('oxf:/ops/utils/formatting/format.xpl', 'data', xxf:instance('imageMapFileList-instance'), 'data')/*, 'html')"
                            mediatype="text/html"/>
                    </xhtml:p>
-->
                    <!--
                    <xhtml:p class="message">shippedInformationModelList:<xhtml:br />
                        <xf:output
                            ref="xxf:serialize(xxf:call-xpl('oxf:/ops/utils/formatting/format.xpl', 'data', xxf:instance('shippedInformationModelList-instance'), 'data')/*, 'html')"
                            mediatype="text/html"/>
                    </xhtml:p>               
                    -->
                    <!--
                    <xhtml:p class="message">dalStaticFile:<xhtml:br />
                        <xf:output
                            ref="xxf:serialize(xxf:call-xpl('oxf:/ops/utils/formatting/format.xpl', 'data', xxf:instance('dalStaticFile-instance'), 'data')/*, 'html')"
                            mediatype="text/html"/>
                    </xhtml:p>                      
                    -->
                    <!--
                    <xhtml:p class="message">dalStaticFileList:<xhtml:br />
                        <xf:output
                            ref="xxf:serialize(xxf:call-xpl('oxf:/ops/utils/formatting/format.xpl', 'data', xxf:instance('dalStaticFileList-instance'), 'data')/*, 'html')"
                            mediatype="text/html"/>
                    </xhtml:p>  
                    -->
                    <!--
                    <xhtml:p class="message">application-letterTemplate-instance:<xhtml:br />
                        <xf:output
                            ref="xxf:serialize(xxf:call-xpl('oxf:/ops/utils/formatting/format.xpl', 'data', xxf:instance('application-letterTemplate-instance'), 'data')/*, 'html')"
                            mediatype="text/html"/>
                    </xhtml:p>                    
                    -->

                    <!--                     
                    <xhtml:p>auditLogSessionList instance:<xhtml:br />
                        <xf:output
                            ref="xxf:serialize(xxf:call-xpl('oxf:/ops/utils/formatting/format.xpl', 'data', xxf:instance('auditLogSessionList-instance'), 'data')/*, 'html')"
                            mediatype="text/html"/>
                    </xhtml:p>
                    -->

                    <!--
                    <xhtml:p>compositionSet-instance:<xhtml:br />
                        <xf:output
                            ref="xxf:serialize(xxf:call-xpl('oxf:/ops/utils/formatting/format.xpl', 'data', xxf:instance('compositionSet-instance'), 'data')/*, 'html')"
                            mediatype="text/html"/>
                    </xhtml:p>
                    
                    -->
                    <!--
                    <xhtml:p>ISO-13606-instance:<xhtml:br />
                        <xf:output
                            ref="xxf:serialize(xxf:call-xpl('oxf:/ops/utils/formatting/format.xpl', 'data', xxf:instance('ISO-13606-instance'), 'data')/*, 'html')"
                            mediatype="text/html"/>
                    </xhtml:p>
                    -->

                </xhtml:div>
                <!-- End of viewDisplay -->

            </xhtml:div>
            <!-- End of ehrView -->

            <!-- EHR Info
                Contains    infoType, infoDisplay 
                ===================================================================== -->
            <!--
        <xhtml:div id="ehrInfo">
            <xhtml:div id="infoType"> </xhtml:div>
            <xhtml:div id="infoDisplay"> </xhtml:div>
        </xhtml:div>
            -->
            <xi:include href="cityEHRInformation.xhtml"/>
        </xhtml:div>
        <!-- Fixed footer -->
        <xi:include href="cityEHRFooter.xhtml"/>
    </xhtml:body>
</xhtml:html>
