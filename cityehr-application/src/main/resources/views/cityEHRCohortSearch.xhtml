<?xml version="1.0" encoding="UTF-8"?> 
<!-- 
    *********************************************************************************************************
    cityEHR
    cityEHRCohortSearch.xhtml
    
    Construct and submit searches to return cohort subsets, display results, combine sets and save/view searches/cohorts
    
    The full set of search terms (with results) are stored in cohort-search-instance
    The parameters for the current search are held in cohort-search-parameters
    The cohort of patients (the union of the selected of search results) is held in patient-cohort-instance (in cohortSetModel)
    Cohorts of patients are stored and loaded from cohort-instance (defined in manageCohortSearchModel)
    
    Each search is always for a specific value of an entry.
    This may be qualified by conditions on the supplementaty data for the entry
    
    The user can select the specialty for this view - this is set in set-specialty.
    
    Tabs for Search (displayType='search') and Cohort (displayType='cohort'):
        Search
            Contained in cohort-search-instance (defined in this file)
        Cohort
            Contained in patient-cohort-instance (defined in cohortSetModel)
            patient-cohort-instance either contains patients in selected cohorts from cohort-search-instance
            or patients loaded in cohort-instance
    
    Lists of saved searches/cohorts are loaded in userSearches-instance and sharedSearches-instance as a set of search elements.
    These are defined in manageCohortSearchModel and loaded through get-user-searches and get-shared-searches
    In the lists, search/searchTerms='true' is a search, search/searchTerms='false' is a cohort
    
    
    Copyright (C) 2013-2021 John Chelsom.
    
    This program is free software; you can redistribute it and/or modify it under the terms of the
    GNU Lesser General Public License as published by the Free Software Foundation; either version
    2.1 of the License, or (at your option) any later version.
    
    This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
    without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
    See the GNU Lesser General Public License for more details.
    
    The full text of the license is available at http://www.gnu.org/copyleft/lesser.html
    **********************************************************************************************************
-->
<xhtml:html lang="{xxf:instance('session-parameters-instance')/languageCode}" xmlns:xf="http://www.w3.org/2002/xforms"
    xmlns:exf="http://www.exforms.org/exf/1-0" xmlns:ev="http://www.w3.org/2001/xml-events" xmlns:xxf="http://orbeon.org/oxf/xml/xforms"
    xmlns:fr="http://orbeon.org/oxf/xml/form-runner" xmlns:exforms="http://www.exforms.org/exf/1-0" xmlns:widget="http://orbeon.org/oxf/xml/widget"
    xmlns:f="http://orbeon.org/oxf/xml/formatting" xmlns:xhtml="http://www.w3.org/1999/xhtml" xmlns:xi="http://www.w3.org/2001/XInclude"
    xmlns:exist="http://exist.sourceforge.net/NS/exist" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xxi="http://orbeon.org/oxf/xml/xinclude"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:cda="urn:hl7-org:v3"
    xmlns:iso-13606="http://www.iso.org/iso-13606" xmlns:cityEHR="http://openhealthinformatics.org/ehr">

    <xhtml:head>

        <!-- Try this to force compatibility mode -->
        <xhtml:meta http-equiv="X-UA-Compatible" content="IE=10" />

        <!-- HTML Title is the displayName of the current application -->
        <xhtml:title>
            <xf:output ref="xxf:instance('view-parameters-instance')/applicationDisplayName"/>
        </xhtml:title>

        <!-- Stylesheet -->
        <xhtml:link rel="stylesheet" type="text/css"
            href="../resources/styles/cityEHRSkin.css?{xxf:instance('view-parameters-instance')/versionNumber/@version}" media="screen" />


        <!-- ========= System Parameters ===================================================== 
             ================================================================================= -->
        <xi:include href="../models/systemParametersModel.xml" xxi:omit-xml-base="true"/>

        <!-- ========= Database Access Layer model contains parameters of the eXist database ==== 
            ================================================================================== -->
        <xi:include href="../models/databaseAccessLayer.xml" xxi:omit-xml-base="true"/>

        <!-- ========= Session model contains stuff for handling of user sessions ============ 
            ================================================================================== -->
        <xi:include href="../models/sessionModel.xml" xxi:omit-xml-base="true"/>

        <!-- ========= Audit log model contains stuff for audit of user actions ============== 
            ================================================================================== -->
        <xi:include href="../models/auditLogModel.xml" xxi:omit-xml-base="true"/>

        <!-- ========= Page navigation model contains stuff for navigation between pages =====
        ====================================================================================== -->
        <xi:include href="../models/pageNavigationModel.xml" xxi:omit-xml-base="true"/>

        <!-- ========= Configuration model contains standard configuration of the page ======= 
            ================================================================================== -->
        <xi:include href="../models/configurationModel.xml" xxi:omit-xml-base="true"/>


        <!-- ========= Dictionary model contains the specialty dictionary ========= 
            ======================================================================= -->
        <xi:include href="../models/dictionaryModel.xml" xxi:omit-xml-base="true"/>

        <!-- ========= Reference data - directories of entries and elements ==== 
            =================================================================== -->
        <xi:include href="../models/directoryModel.xml" xxi:omit-xml-base="true"/>

        <!-- ========= Release Notes ========= 
            ============================================================================ -->
        <xi:include href="../models/releaseNotesModel.xml" xxi:omit-xml-base="true"/>

        <!-- ========= Class dictionary model contains stuff for loading and accessing class dictionaries ========= 
             ====================================================================================================== -->
        <xi:include href="../models/classDictionaryModel.xml" xxi:omit-xml-base="true"/>

        <!-- ========= Cohort Set model contains stuff for managing cohorts of patients ========= 
            ============================================================================ -->
        <xi:include href="../models/cohortSetModel.xml" xxi:omit-xml-base="true"/>

        <!-- ========= Manage cohort search model - load, save, delete cohort searches ========= 
             =================================================================================== -->
        <xi:include href="../models/manageCohortSearchModel.xml" xxi:omit-xml-base="true"/>

        <!-- ========= Export data set model ========= 
        =================================================================================== -->
        <xi:include href="../models/exportDataSetModel.xml" xxi:omit-xml-base="true"/>

        <!-- ========= exportDataModel model contains stuff for exporting patient records ==== 
            =================================================================================== -->
        <xi:include href="../models/exportDataModel.xml" xxi:omit-xml-base="true"/>

        <!-- ========= cdaModel model contains stuff for loading CDA documents ==== 
            =================================================================================== -->
        <xi:include href="../models/cdaModel.xml" xxi:omit-xml-base="true"/>

        <!-- ======== Care Teams ==================
             ====================================== -->
        <xi:include href="../models/careTeamModel.xml" xxi:omit-xml-base="true"/>

        <!-- === Applications
            === -->
        <xi:include href="../models/applicationModel.xml" xxi:omit-xml-base="true"/>


        <!-- ========= View Controls actions model contains actions for view control ========= 
            These actions are specific to this page, so the model is implemented directly.           
            There must be one event handler for each action defined in the <viewControlsActions> for this page in application-parameters
            The viewControlsActions-instance holds the actions for this view, inserted from parameters-instance for this view
            ===================================================================================== -->
        <xf:model id="viewControlsActions-model">

            <xf:instance id="viewControlsActions-instance">
                <control xmlns=""/>
            </xf:instance>

            <!-- Bindings for dynamic change of display of view controls  -->
            <xf:bind nodeset="xxf:instance('viewControlsActions-instance')/view">
                <!-- Only show these when viewing searches and there is a term under construction -->
                <xf:bind nodeset="action[@id='search']/@display"
                    calculate="if (xxf:instance('control-instance')/displayType='search' and xxf:instance('cohort-search-parameters')/term/searchType!='') then 'show' else 'hidden'"/>
                <xf:bind nodeset="select[@id='specialty']/@display"
                    calculate="if (xxf:instance('control-instance')/displayType='search') then 'show' else 'hidden'"/>
                <!-- Only show these when  viewing searches and there is at least one search term -->
                <xf:bind nodeset="action[@id=('undo','new','refresh')]/@display"
                    calculate="if ((xxf:instance('control-instance')/displayType='search') and (xxf:instance('control-instance')/terms != '0')) then 'show' else 'hidden'"/>
                <!-- Only show these when there is a search with terms which has been edited, and it is new or existing with name unchanged, or a new cohort with patients-->
                <xf:bind nodeset="action[@id='save']/@display"
                    calculate="if ((xxf:instance('control-instance')/displayType='search' and xxf:instance('control-instance')/terms != '0' and xxf:instance('control-instance')/editStatus='edited' and (xxf:instance('cohort-search-instance')/id = '' or xxf:instance('cohort-search-instance')/cohortName = xxf:instance('userSearches-instance')/search[id=xxf:instance('cohort-search-instance')/id]/cohortName)) or (xxf:instance('control-instance')/displayType='cohort' and xxf:instance('cohort-instance')/id = '' and xxf:instance('cohort-instance')/cohortPatientString != '')) then 'show' else 'hidden'"/>
                <!-- Only show saveAs when displayName is changed on existing (previously saved) search or cohort and does not match any other saved search/cohort name -->
                <xf:bind nodeset="action[@id='saveAs']/@display"
                    calculate="if ((xxf:instance('control-instance')/displayType='search' and xxf:instance('cohort-search-instance')/id != '' and not(xxf:instance('cohort-search-instance')/cohortName = xxf:instance('userSearches-instance')/search/cohortName)) or (xxf:instance('control-instance')/displayType='cohort' and xxf:instance('cohort-instance')/id != '' and not(xxf:instance('cohort-instance')/cohortName = xxf:instance('userSearches-instance')/search/cohortName))) then 'show' else 'hidden'"/>
                <!-- Only show these when there are searches with terms or cohort with patients -->
                <xf:bind nodeset="action[@id=('print','export')]/@display"
                    calculate="if ((xxf:instance('control-instance')/displayType='search' and xxf:instance('control-instance')/terms != '0') or (xxf:instance('control-instance')/displayType='cohort' and xxf:instance('cohort-instance')/cohortPatientCount!='0')) then 'show' else 'hidden'"/>
                <!-- Can only delete a search/cohort that has been saved (or reloaded from a saved search) and not for sharedSearches/sharedCohorts -->
                <xf:bind nodeset="action[@id='delete']/@display"
                    calculate="if ((xxf:instance('control-instance')/currentSearchHandle!='' and xxf:instance('view-parameters-instance')/viewNavigationType='search') or (xxf:instance('control-instance')/currentCohortHandle!='' and xxf:instance('view-parameters-instance')/viewNavigationType='cohort')) then 'show' else 'hidden'"/>
                <!-- Cohort name is only shown when there are searches with terms or cohort with patients -->
                <xf:bind nodeset="input[@id='cohortName']/@display"
                    calculate="if ((xxf:instance('control-instance')/displayType='search' and xxf:instance('control-instance')/terms != '0') or (xxf:instance('control-instance')/displayType='cohort' and xxf:instance('cohort-instance')/cohortPatientCount!='0')) then 'show' else 'hidden'"/>
                <!-- Only show these when there are patients in the selected cohort -->
                <xf:bind nodeset="action[@id=('statistics','analysis')]/@display"
                    calculate="if (xxf:instance('cohort-search-instance')/cohortPatientCount != '0') then 'show' else 'hidden'"/>
                <!-- Only show when there are patients in the selected cohort and pathways in the model -->
                <xf:bind nodeset="action[@id='pathwayVariance']/@display"
                    calculate="if (xxf:instance('cohort-search-instance')/cohortPatientCount != '0') then 'show' else 'hidden'"/>
                <!-- Show XML and XQuery only when debugging and in search view -->
                <xf:bind nodeset="action[@id=('xml','xquery')]/@display"
                    calculate="if (xxf:instance('control-instance')/displayType='search' and xxf:instance('session-parameters-instance')/debug='true') then 'show' else 'hidden'"
                />
            </xf:bind>

            <!-- This proves that we need to do xf:rebuild to refresh bindings when the model changes -->
            <xf:action ev:event="test">
                <xf:message ref="'Recalculating'"/>
                <xf:recalculate model="main-model"/>
                <xf:rebuild model="main-model"/>
                <xf:refresh model="main-model"/>
            </xf:action>

            <!-- Debugging mode - user pressed to view search results -->
            <xf:action ev:event="xml">
                <!-- Display the search results -->
                <xf:dispatch name="display-formatted-xml" target="pageNavigation-model">
                    <xxf:context name="title" select="''"/>
                    <xxf:context name="displayXML" select="xxf:instance('response-instance')"/>
                </xf:dispatch>
            </xf:action>

            <!-- Debugging mode - user pressed to view xquery -->
            <xf:action ev:event="xquery">
                <!-- Create formatted-xquery from the last query submitted -->
                <xf:setvalue ref="xxf:instance('control-instance')/formatted-xquery" value="normalize-space(xxf:instance('cohort-query-instance'))"/>
                <xf:setvalue ref="xxf:instance('control-instance')/formatted-xquery" value="replace(.,';',';&#13;')"/>
                <xf:setvalue ref="xxf:instance('control-instance')/formatted-xquery"
                    value="replace(.,'(xquery |declare |let |for |return )','&#13;$1')"/>
                <xf:setvalue ref="xxf:instance('control-instance')/formatted-xquery" value="replace(.,'&lt;','&amp;lt;')"/>

                <!-- Display the search results -->
                <xf:dispatch name="display-formatted-xml" target="pageNavigation-model">
                    <xxf:context name="title" select="''"/>
                    <xxf:context name="displayXML" select="xxf:instance('control-instance')/formatted-xquery"/>
                </xf:dispatch>
            </xf:action>

            <!-- User selected the specialty.
                 This is only called when the values changes.
                 Sets up specialty for query formulation and export. 
                 Does not change the specialtyIRI for the session -->
            <xf:action ev:event="specialty">

                <xxf:variable name="selectedSpecialty" select="xxf:instance('viewControls-input-instance')/select[@id='specialty']/@value"/>

                <xf:dispatch name="set-specialty" target="main-model">
                    <xxf:context name="specialtyIRI" select="$selectedSpecialty"/>
                </xf:dispatch>

            </xf:action>

            <!-- User pressed the Search button.
            Search can be for a new term or to update an existing term. -->
            <xf:action ev:event="search">
                <!-- New term -->
                <xf:action if="xxf:instance('cohort-search-parameters')/term/id=''">
                    <!-- Set id -->
                    <xf:setvalue ref="xxf:instance('cohort-search-parameters')/term/id" value="xs:integer(xxf:instance('control-instance')/terms) + 1"/>

                    <!-- Add the term to the search instance. -->
                    <!-- Insert new term into cohort-search-instance -->
                    <xf:insert context="xxf:instance('cohort-search-instance')/searchTerms" origin="xxf:instance('cohort-search-parameters')/term"/>

                    <!-- Update the term count. -->
                    <xf:setvalue ref="xxf:instance('control-instance')/terms" value="count(xxf:instance('cohort-search-instance')/searchTerms/term)"/>

                    <!-- Check whether Combine search is active -->
                    <xf:dispatch name="set-active-searches" target="main-model"/>
                </xf:action>

                <!-- Get term, set search parameters and perform search.
                     The term (new or existing) is now identified by the id in cohort-search-parameters -->
                <xxf:variable name="term"
                    select="xxf:instance('cohort-search-instance')/searchTerms/term[id=xxf:instance('cohort-search-parameters')/term/id]"/>

                <!-- Updating existing term.
                     Need to transfer parameters back to the term-->
                <xf:action if="xxf:instance('cohort-search-parameters')/term/id!=''">
                    <xf:delete nodeset="$term/*"/>
                    <!-- Insert parameters from cohort-search-instance -->
                    <xf:action xxf:iterate="xxf:instance('cohort-search-parameters')/term/*">
                        <xxf:variable name="parameter" select="."/>
                        <xf:insert context="$term" origin="$parameter"/>
                    </xf:action>
                </xf:action>

                <!-- Set up the selected cohorts if this is combineSelected -->
                <xf:action if="$term/searchType='CombineSelected'">
                    <xxf:variable name="selectedTerms" select="xxf:instance('cohort-search-instance')/searchTerms/descendant::term[selected='true']"/>
                    <xf:setvalue ref="$term/combineSet"
                        value="string-join($selectedTerms/id,xxf:instance('view-parameters-instance')/resultSeparator)"/>
                </xf:action>

                <!-- Clear out parameters in the term (needed when updating an existing term) -->
                <xf:delete nodeset="$term/parameters/*"/>

                <!-- Insert parameters from cohort-search-instance -->
                <xf:action xxf:iterate="xxf:instance('cohort-search-parameters')/*[name()!='term']">
                    <xxf:variable name="parameter" select="."/>
                    <xf:insert context="$term/parameters" origin="$parameter"/>
                </xf:action>

                <!-- Now perform the cohort search -->
                <xf:action>
                    <xf:dispatch name="perform-cohort-search" target="main-model">
                        <xxf:context name="term" select="$term"/>
                    </xf:dispatch>
                </xf:action>

                <!-- If replacing an existing term, need to update all combination searches which have higher ids.
                    This is because the results count of the existing search will have changed when it was updated.
                    Only combine and combineSelected terms need to be rerun -->
                <xxf:variable name="rerunTermSet"
                    select="xxf:instance('cohort-search-instance')/searchTerms/term[number(id) gt number(xxf:instance('cohort-search-parameters')/term/id)][searchType=('Combine','CombineSelected')]"/>
                <xf:action if="exists($rerunTermSet)">
                    <xf:dispatch name="rerun-cohort-searches" target="main-model">
                        <xxf:context name="termSet" select="$rerunTermSet"/>
                    </xf:dispatch>
                </xf:action>

                <!-- Now reset the term and searchType so that a new term is prepared for the next search -->
                <xf:setvalue ref="xxf:instance('control-instance')/currentTerm" value="''"/>
                <xf:dispatch name="clear-query-parameters" target="main-model">
                    <xxf:context name="id" select="xxf:instance('control-instance')/currentTerm"/>
                    <xxf:context name="searchType" select="''"/>
                    <xxf:context name="searchSubType" select="''"/>
                    <xxf:context name="specialtyIRI" select="$term/specialtyIRI"/>
                </xf:dispatch>

                <!-- Check active combine searches -->
                <xf:dispatch name="set-active-searches" target="main-model"/>

                <!-- Set editStatus -->
                <xf:setvalue ref="xxf:instance('control-instance')/editStatus" value="'edited'"/>

                <!-- Need recalculate so that viewControlsActions binds are refreshed -->
                <xf:action>
                    <xf:recalculate model="viewControlsActions-model"/>
                </xf:action>

            </xf:action>

            <!-- User pressed the Undo button. 
                 If there is only one term then this is the same as starting a new search.
                 If there is more than one term, just remove the last search that was done.
                 Then reset count of terms and the aggregated results (in case the last search has been included in aggegated results).
                 -->
            <xf:action ev:event="undo">
                <!-- One (or none, although this should never happen) term.
                     Just start a whole new search -->
                <xf:action if="xxf:instance('control-instance')/terms = ('1','0')">
                    <xf:dispatch name="new" target="viewControlsActions-model"/>
                </xf:action>

                <!-- More than one term -->
                <xf:action if="xxf:instance('control-instance')/terms != '1'">
                    <!-- Get the term in searchTerms to remove.
                         This is the term last added, which will have id = count of the terms -->
                    <xxf:variable name="removeTerm"
                        select="xxf:instance('cohort-search-instance')/searchTerms/term[id = count(xxf:instance('cohort-search-instance')/searchTerms/term)]"/>

                    <!-- If the currentTerm (selected) is the one about to be removed, then need to reset parameters (i.e. a new term) -->
                    <xf:action if="$removeTerm/id =xxf:instance('control-instance')/currentTerm">
                        <xf:setvalue ref="xxf:instance('control-instance')/currentTerm" value="''"/>
                        <xf:dispatch name="clear-query-parameters" target="main-model">
                            <xxf:context name="id" select="''"/>
                            <xxf:context name="searchType" select="''"/>
                            <xxf:context name="searchSubType" select="''"/>
                            <xxf:context name="specialtyIRI" select="xxf:instance('cohort-search-parameters')/term/specialtyIRI"/>
                        </xf:dispatch>
                    </xf:action>


                    <!-- Delete the most recently added term, identified as removeTerm.
                         Terms are deleted one by one from the top of the stack if the user repeatedly presses undo -->
                    <xf:delete nodeset="$removeTerm"/>
                    <xf:setvalue ref="xxf:instance('control-instance')/terms" value="count(xxf:instance('cohort-search-instance')/searchTerms/term)"/>

                    <!-- Reset aggregated results -->
                    <xf:dispatch name="aggregate-patient-set" target="main-model"/>

                    <!-- Check whether Combine search is still active -->
                    <xf:dispatch name="set-active-searches" target="main-model"/>

                    <!-- Set editStatus -->
                    <xf:setvalue ref="xxf:instance('control-instance')/editStatus" value="'edited'"/>

                    <!-- Refresh the bindings on the viewControlsActions-model -->
                    <xf:recalculate model="viewControlsActions-model"/>
                </xf:action>
            </xf:action>

            <!-- Application defined action to save the current cohort search or cohort.
                 The Save button should only be active if the search/cohort is new (i.e. has no id set).
                 But make that check again here, just in case. -->
            <xf:action ev:event="save">
                <!-- If saved search already exists then display confirmation before saving -->
                <xf:action if="xxf:instance('control-instance')/displayType='search' and xxf:instance('cohort-search-instance')/id != ''">
                    <!-- Show confirmation dialogue.
                         This calls save-after-confirmation -->
                    <xf:dispatch name="confirm-action" target="pageNavigation-model">
                        <xxf:context name="action" select="'saveCohortSearch'"/>
                    </xf:dispatch>
                </xf:action>

                <!-- Set the id for saving -->
                <xxf:variable name="timeStamp" select="replace(replace(string(current-dateTime()),':','-'),'\+','*')"/>
                <xxf:variable name="id" select="concat(xxf:instance('view-parameters-instance')/userId,$timeStamp)"/>

                <!-- Save search, if not already set (i.e. this is a new search) -->
                <xf:action if="xxf:instance('control-instance')/displayType='search' and xxf:instance('cohort-search-instance')/id = ''">
                    <!-- Save the cohort search.
                         Searches are always saved for the user.
                         If a shared search was loaded and then saved then it will be saved as a new search for the user. -->
                    <xf:dispatch name="save-search" target="viewControlsActions-model">
                        <xxf:context name="id" select="$id"/>
                    </xf:dispatch>
                </xf:action>

                <!-- Save cohort, if not already set (i.e. this is a new cohort) -->
                <xf:action if="xxf:instance('control-instance')/displayType='cohort' and xxf:instance('cohort-instance')/id = ''">
                    <!-- Save the cohort.
                         Cohort are always saved for the user.
                         If a shared cohort was loaded and then saved then it will be saved as a new cohort for the user. -->
                    <xf:dispatch name="save-cohort" target="viewControlsActions-model">
                        <xxf:context name="id" select="$id"/>
                    </xf:dispatch>
                </xf:action>

            </xf:action>

            <!-- Application defined action to save an existing cohort search.
                 After confirmation that the user wants to overwrite it. -->
            <xf:action ev:event="save-after-confirmation">
                <xf:dispatch name="save-search" target="viewControlsActions-model">
                    <xxf:context name="id" select="xxf:instance('cohort-search-instance')/id"/>
                </xf:dispatch>
            </xf:action>


            <!-- Application defined action to save the current cohort search as a new search. -->
            <xf:action ev:event="saveAs">

                <!-- Set the search id - always do this, since its saveAs -->
                <xxf:variable name="timeStamp" select="replace(replace(string(current-dateTime()),':','-'),'\+','*')"/>
                <xxf:variable name="id" select="concat(xxf:instance('view-parameters-instance')/userId,$timeStamp)"/>

                <!-- Save the cohort search.
                     Searches are always saved for the user.
                     If a shared search was loaded and then saved then it will be saved as a new search for the user. -->
                <xf:action if="xxf:instance('control-instance')/displayType='search'">
                    <xf:dispatch name="save-search" target="viewControlsActions-model">
                        <xxf:context name="id" select="$id"/>
                    </xf:dispatch>
                </xf:action>

                <!-- Save the cohort -->
                <xf:action if="xxf:instance('control-instance')/displayType='cohort'">
                    <xf:dispatch name="save-cohort" target="viewControlsActions-model">
                        <xxf:context name="id" select="$id"/>
                    </xf:dispatch>
                </xf:action>

            </xf:action>


            <!-- Application defined action to save the current cohort search.
                 The cohort-search-instance/id is passed as a parameter.
                 -->
            <xf:action ev:event="save-search">
                <xxf:variable name="id" select="event('id')"/>

                <xf:setvalue ref="xxf:instance('cohort-search-instance')/id" value="$id"/>

                <!-- All searches are saved for the user, even if originally loaded from the shared system searches -->
                <xf:dispatch name="save-cohort-search-for-user" target="manageCohortSearch-model">
                    <xxf:context name="userIRI" select="xxf:instance('user-instance')/@id"/>
                    <xxf:context name="searchInstance" select="xxf:instance('cohort-search-instance')"/>
                </xf:dispatch>

                <!-- Update the list of saved searches -->
                <xf:dispatch name="get-user-searches" target="manageCohortSearch-model">
                    <xxf:context name="userId" select="xxf:instance('view-parameters-instance')/userId"/>
                </xf:dispatch>

                <!-- Set the viewNavigationType.
                     Needed in case the user saves a shared search (which becomes a user search after saving),
                     Also reset the currentSearchHandle to the one that has just been saved. -->
                <xf:setvalue ref="xxf:instance('view-parameters-instance')/viewNavigationType" value="'search'"/>
                <xf:setvalue ref="xxf:instance('control-instance')/currentSearchHandle"
                    value="xxf:instance('manageCohortSearchControl-instance')/xmlstoreHandle"/>

                <!-- Set editStatus -->
                <xf:setvalue ref="xxf:instance('control-instance')/editStatus" value="'unedited'"/>

                <!-- Refresh the bindings on the viewControlsActions-model -->
                <xf:recalculate model="viewControlsActions-model"/>
            </xf:action>


            <!-- Application defined action to save the current cohort.
                 The cohort-instance/id is passed as a parameter.
            -->
            <xf:action ev:event="save-cohort">
                <xxf:variable name="id" select="event('id')"/>

                <xf:setvalue ref="xxf:instance('cohort-instance')/id" value="$id"/>

                <!-- All cohorts are saved for the user, even if originally loaded from the shared system cohorts -->
                <xf:dispatch name="save-cohort-for-user" target="manageCohortSearch-model">
                    <xxf:context name="userIRI" select="xxf:instance('user-instance')/@id"/>
                    <xxf:context name="cohortInstance" select="xxf:instance('cohort-instance')"/>
                </xf:dispatch>

                <!-- Update the list of saved searches -->
                <xf:dispatch name="get-user-searches" target="manageCohortSearch-model">
                    <xxf:context name="userId" select="xxf:instance('view-parameters-instance')/userId"/>
                </xf:dispatch>

                <!-- Set the viewNavigationType.
                     Needed in case the user saves a shared search (which becomes a user search after saving),
                     Also reset the currentSearchHandle to the one that has just been saved. -->
                <xf:setvalue ref="xxf:instance('view-parameters-instance')/viewNavigationType" value="'cohort'"/>
                <xf:setvalue ref="xxf:instance('control-instance')/currentCohortHandle"
                    value="xxf:instance('manageCohortSearchControl-instance')/xmlstoreHandle"/>

                <!-- Refresh the bindings on the viewControlsActions-model -->
                <xf:recalculate model="viewControlsActions-model"/>
            </xf:action>


            <!-- Application defined action to delete the current search/cohort after it has been loaded
                 Can only delete searches for the current user (viewNavigationType = search or cohort) (not sharedSearch/sharedCohort).
                 The delete button shouldn't be displayed for shared searches/cohorts, but check again here jus in case. -->
            <xf:action ev:event="delete">
                <xf:action if="xxf:instance('view-parameters-instance')/viewNavigationType=('search','cohort')">
                    <!-- Show confirmation dialogue.
                         This calls delete-after-confirmation -->
                    <xxf:variable name="activeDialogue"
                        select="if (xxf:instance('control-instance')/displayType='search') then 'deleteCohortSearch' else 'deleteCohort'"/>
                    <xxf:variable name="cohortName"
                        select="if (xxf:instance('view-parameters-instance')/viewNavigationType='search') then xxf:instance('cohort-search-instance')/cohortName else xxf:instance('cohort-instance')/cohortName"/>

                    <xf:dispatch name="confirm-action" target="pageNavigation-model">
                        <xxf:context name="action" select="$activeDialogue"/>
                        <xxf:context name="messageSet" select="$cohortName"/>
                    </xf:dispatch>

                </xf:action>
            </xf:action>

            <!-- Application defined action to delete the current cohort search after user has confirmed -->
            <xf:action ev:event="delete-after-confirmation">
                <!-- Delete the cohort search -->
                <xf:dispatch name="delete-cohortSearch" target="manageCohortSearch-model">
                    <xxf:context name="handle"
                        select="if (xxf:instance('control-instance')/displayType='search') then xxf:instance('control-instance')/currentSearchHandle else xxf:instance('control-instance')/currentCohortHandle"/>
                    <xxf:context name="id"
                        select="if (xxf:instance('control-instance')/displayType='search') then xxf:instance('cohort-search-instance')/id else xxf:instance('cohort-instance')/id"
                    />
                </xf:dispatch>

                <!-- Clear the patient-cohort-instance (displayed cohort) and cohort-instance (loaded cohort) -->
                <xf:dispatch name="clear-cohort" target="cohortSet-model"/>
                <xf:delete nodeset="xxf:instance('cohort-instance')/*"/>
                <xf:setvalue ref="xxf:instance('control-instance')/currentCohortHandle" value="''"/>

                <!-- Set up a new search, since selected cohort search no longer exists.
                But only if viewing searches - don't need to do this if viewing cohorts -->
                <xf:action if="xxf:instance('control-instance')/displayType='search'">
                    <xf:dispatch name="new" target="viewControlsActions-model"/>
                </xf:action>
                <!-- Update the list of saved searches -->
                <xf:dispatch name="get-user-searches" target="manageCohortSearch-model">
                    <xxf:context name="userId" select="xxf:instance('view-parameters-instance')/userId"/>
                </xf:dispatch>

                <!-- Refresh the bindings on the viewControlsActions-model -->
                <xf:recalculate model="viewControlsActions-model"/>
            </xf:action>


            <!-- Application defined action to generate cohort statistics
                 Build the statistics, create graph and display in dialogue box 
                 
                 Works with the selected cohort, which is already set up in cohort-search-instance:
                    cohortPatientString
                    cohortPatientCount
                
                <set name="Template" value="0" color="FFFFFF"/>
                <graph bgcolor="e1f5ff" caption="" subCaption="" yaxismaxvalue="0" yaxisminvalue="0" yaxisname="" xaxisname="" decimalPrecision="0"  hovercapbg="FFFFDD" hovercapborder="000000" numdivlines="4" numberSuffix="">
                    <set name="Template" value="10" color="FFFFFF"/>
                    <trendlines>
                        <line startvalue="10" displayValue="" color="FFFFFF" thickness="1" isTrendZone="0"/>
                    </trendlines>
                </graph> 
              -->
            <xf:action ev:event="statistics">
                <!-- Reset chart parameters -->
                <xf:delete nodeset="xxf:instance('cohort-search-parameters')/graph/set"/>
                <xf:delete nodeset="xxf:instance('control-instance')/graph"/>

                <!-- Set up bar charts of individual cohort results.
                     TBD - need SVG charts here now -->
                <!--
                <xf:action xxf:iterate="xxf:instance('cohort-search-instance')/searchTerms/term[selected='true']">
                    <xxf:variable name="term" select="."/>

                    <xf:setvalue ref="xxf:instance('control-instance')/set/@name" value="$term/description"/>
                    <xf:setvalue ref="xxf:instance('control-instance')/set/@value" value="$term/count"/>

                    <xf:insert context="xxf:instance('cohort-search-parameters')/graph" origin="xxf:instance('control-instance')/set"/>
                </xf:action>
                -->

                <!-- Set the cohort to be the selected results cohort -->
                <xf:dispatch name="initialize-cohort-set" target="cohortSet-model">
                    <xxf:context name="patientCohort" select="xxf:instance('cohort-search-instance')/cohortPatientString"/>
                    <xxf:context name="cohortName" select="'patient search'"/>
                </xf:dispatch>

                <!-- Now get the cohort information -  put in patient-cohort-instance -->
                <xf:dispatch name="load-cohort" target="cohortSet-model"/>

                <!-- Set up graph and insert into control-instance -->
                <!--
                <xf:setvalue ref="xxf:instance('cohort-search-parameters')/graph/trendlines/line/@startvalue"
                    value="xxf:instance('cohort-search-instance')/cohortPatientCount"/>
                <xf:setvalue ref="xxf:instance('cohort-search-parameters')/graph/@yaxismaxvalue"
                    value="max(xxf:instance('cohort-search-parameters')/graph/set/@value)"/>
                <xf:insert context="xxf:instance('control-instance')" origin="xxf:instance('cohort-search-parameters')/graph"/>
                -->


                <!-- Now set the cohort statistics from the cohort information.
                    
                    <statistics>
                        <count displayName="Count">0</count>
                        <female displayName="Female">0</female>
                        <male displayName="Male">0</male>
                        <averageAge displayName="Mean Age">0</averageAge>
                        <minAge displayName="Min Age">0</minAge>
                        <maxAge displayName="Max Age">0</maxAge>
                    </statistics>
                -->
                <!-- Count - total, gender subcategory -->
                <xf:setvalue ref="xxf:instance('control-instance')/cohortStatistics/statistics/count/@value"
                    value="xxf:instance('cohort-search-instance')/cohortPatientCount"/>

                <xxf:variable name="genderEntry"
                    select="xxf:instance('application-parameters-instance')/patientRegistration/administrativeGenderCode/@entry"/>
                <xxf:variable name="genderElement"
                    select="xxf:instance('application-parameters-instance')/patientRegistration/administrativeGenderCode/@element"/>

                <!-- Insert one count for each value of the gender entry/element.
                     The insert adds a new value element as the last in the nodeset. -->
                <xf:delete nodeset="xxf:instance('control-instance')/cohortStatistics/statistics/gender/value"/>
                <xxf:variable name="genderValueSet"
                    select="xxf:instance('dictionary-instance')/iso-13606:elementCollection/iso-13606:element[@extension=$genderElement]/iso-13606:data/@value"/>
                <xf:action xxf:iterate="$genderValueSet">
                    <xxf:variable name="genderValue" select="."/>

                    <xf:insert context="xxf:instance('control-instance')/cohortStatistics/statistics/gender"
                        origin="xxf:instance('control-instance')/cohortStatistics/value"/>
                    <xf:setvalue ref="xxf:instance('control-instance')/cohortStatistics/statistics/gender/value[1]/@displayName" value="$genderValue"/>
                    <xf:setvalue ref="xxf:instance('control-instance')/cohortStatistics/statistics/gender/value[1]/@value"
                        value="count(xxf:instance('patient-cohort-instance')//patientInfo/cda:entry[descendant::cda:id/@extension=$genderEntry]/descendant::cda:value[@extension=$genderElement][@value=$genderValue])"
                    />
                </xf:action>

                <!-- Age -->
                <xxf:variable name="patientAges" select="xxf:instance('patient-cohort-instance')//patientInfo/age"/>
                <xf:setvalue ref="xxf:instance('control-instance')/cohortStatistics/statistics/averageAge/@value" value="avg($patientAges)"/>
                <xf:setvalue ref="xxf:instance('control-instance')/cohortStatistics/statistics/minAge/@value" value="min($patientAges)"/>
                <xf:setvalue ref="xxf:instance('control-instance')/cohortStatistics/statistics/maxAge/@value" value="max($patientAges)"/>

                <xf:setfocus control="cancel-cohortStatisticsDialog"/>
                <xxf:show ev:event="DOMActivate" dialog="cohortStatisticsDialog"/>

            </xf:action>


            <xf:action ev:event="analysis">
                <!-- Check that the cohort-search-instance contains cohortAnalysis element (added 2017-09-17) -->
                <xf:action if="not(exists(xxf:instance('cohort-search-instance')/cohortAnalysis))">
                    <xf:insert nodeset="xxf:instance('cohort-search-instance')"
                        origin="xxf:instance('manageCohortSearchControl-instance')/cohortSearch/cohortAnalysis"/>
                </xf:action>
                <!-- Set up the cohortAnalysis -->
                <xf:dispatch name="set-cohortAnalysis" target="main-model"/>
                <!-- Show the analysis dialogue -->
                <xf:setfocus control="cancel-cohortAnalysisDialog"/>
                <xxf:show ev:event="DOMActivate" dialog="cohortAnalysisDialog"/>
            </xf:action>


            <!-- Application defined action to print the current view.
                 Either print a summary of the search results or the cohort -->
            <xf:action ev:event="print">

                <!-- Print search results -->
                <xf:action if="xxf:instance('control-instance')/displayType='search'">
                    <xf:dispatch name="print-search-results" target="main-model"/>
                </xf:action>

                <!-- Print cohort -->
                <xf:action if="xxf:instance('control-instance')/displayType='cohort'">
                    <xf:dispatch name="print-cohort" target="main-model"/>
                </xf:action>

            </xf:action>


            <!-- Application defined action to export the search results or cohort -->
            <xf:action ev:event="export">

                <!-- Export search results.
                     First copy -->
                <xf:action if="xxf:instance('control-instance')/displayType='search'">
                    <!-- Set up cohortSearchResults-instance -->
                    <xf:dispatch name="set-up-cohortSearchResults" target="main-model"/>
                    <!-- Show dialog for export -->
                    <xxf:show ev:event="DOMActivate" dialog="exportResultsDialog"/>
                </xf:action>

                <!-- Export patient cohort -->
                <xf:action if="xxf:instance('control-instance')/displayType='cohort'">
                    <!-- Set default name for the export data -->
                    <xf:setvalue ref="xxf:instance('control-instance')/exportData/cohortName" value="xxf:instance('cohort-instance')/cohortName"/>

                    <!-- Set default effective time for the export data -->
                    <xf:setvalue ref="xxf:instance('control-instance')/exportData/effectiveTime"
                        value="xxf:instance('view-parameters-instance')/staticParameters/cityEHRExportDataDialog/effectiveTime/option[1]/@value"/>

                    <!-- Export type and format -->
                    <xf:dispatch name="initialise-exportType" target="main-model"/>

                    <xf:setvalue ref="xxf:instance('control-instance')/exportData/exportDataFormat"
                        value="xxf:instance('view-parameters-instance')/staticParameters/cityEHRExportDataDialog/exportDataFormat/option[contains(@context,xxf:instance('control-instance')/exportData/exportType)][1]/@value"/>
                    <xf:setvalue ref="xxf:instance('control-instance')/exportData/spreadsheetFormat"
                        value="xxf:instance('view-parameters-instance')/staticParameters/cityEHRExportDataDialog/spreadsheetFormat/option[1]/@value"/>

                    <!-- Export data set - already set by initialiseDataSetForSpecialty -->
                    <!--
                    <xf:setvalue ref="xxf:instance('exportDataSetControl-instance')/exportDataSet/id"
                        value="xxf:instance('exportDataSetList-instance')/iso-13606:entryCollection[1]/@id"/>
                        -->

                    <!-- Show dialog to export cohort data -->
                    <xxf:show ev:event="DOMActivate" dialog="exportDataDialog"/>

                </xf:action>
            </xf:action>

            <!-- Application defined action to initialise a new cohort search -->
            <xf:action ev:event="new">
                <!-- Set up the cohort-search-instance -->
                <xf:insert nodeset="xxf:instance('cohort-search-instance')" origin="xxf:instance('manageCohortSearchControl-instance')/cohortSearch"/>

                <!-- Reset cohort search name.
                     Should trigger cohortName action, but doesn't seem to, so set the cohortName directly as well  -->
                <xxf:variable name="cohortName"
                    select="concat(xxf:instance('view-parameters-instance')/staticParameters/cityEHRCohortSearch/cohortName,' ',current-dateTime())"/>
                <xf:setvalue ref="xxf:instance('viewControls-input-instance')/input[@id='cohortName']" value="$cohortName"/>
                <xf:setvalue ref="xxf:instance('cohort-search-instance')/cohortName" value="$cohortName"/>

                <!-- Reset the search terms -->
                <xf:setvalue ref="xxf:instance('control-instance')/terms" value="'0'"/>

                <!-- Reset the currentTerm -->
                <xf:setvalue ref="xxf:instance('control-instance')/currentTerm" value="''"/>

                <!-- No terms, so Combine and CombineSelected are inactive -->
                <xf:dispatch name="set-active-searches" target="main-model"/>

                <!-- Set up the search term
                     searchLocation is set to 'records'
                     searchType set to the first on the selection list - should be the blank Select Search Type, but may not be.
                     searchSubType depends on searchType
                -->
                <xf:setvalue ref="xxf:instance('cohort-search-parameters')/term/searchLocation" value="'records'"/>
                <xf:setvalue ref="xxf:instance('cohort-search-parameters')/term/searchLocation/@displayName" value="''"/>
                <xf:setvalue ref="xxf:instance('cohort-search-parameters')/term/searchType"
                    value="xxf:instance('control-instance')/searchType/options/item[1]/@value"/>
                <!-- Set the searchSubType, based on the searchType just set -->
                <xf:setvalue ref="xxf:instance('cohort-search-parameters')/term/searchSubType"
                    value="xxf:instance('control-instance')/searchSubType/options[@searchType=xxf:instance('cohort-search-parameters')/term/searchType]/item[1]/@value"/>

                <!-- Initialise the default query (now set up in searchType and searchSubType).
                     The assumption here is that the default searchType is blank, Demographics or Administration
                     This will also set specialtyIRI of the term to the current user selection -->
                <xf:dispatch name="initialize-query-parameters" target="main-model"/>

                <!-- Set the searchHandle -->
                <xf:setvalue ref="xxf:instance('control-instance')/currentSearchHandle" value="''"/>

                <!-- Reset system status -->
                <xf:setvalue ref="xxf:instance('view-parameters-instance')/systemStatus" value="''"/>

                <!-- Make sure the search view is shown -->
                <xf:setvalue ref="xxf:instance('control-instance')/displayType" value="'search'"/>

                <!-- Set editStatus -->
                <xf:setvalue ref="xxf:instance('control-instance')/editStatus" value="'unedited'"/>

                <!-- Refresh the bindings on the viewControlsActions-model -->
                <xf:recalculate model="viewControlsActions-model"/>

            </xf:action>

            <!-- Application defined action to rerun the cohort search.
                 Need to iterate through each search term and rerun the query-->
            <xf:action ev:event="refresh">
                <xf:dispatch name="rerun-cohort-searches" target="main-model">
                    <xxf:context name="termSet" select="xxf:instance('cohort-search-instance')/searchTerms/term"/>
                </xf:dispatch>
            </xf:action>

            <!-- User selected changed the cohort search displayName.
                 This is only called when the value changes (incrementally). -->
            <xf:action ev:event="cohortName">
                <!-- Set cohort search name -->
                <xf:action if="xxf:instance('control-instance')/displayType='search'">
                    <xf:setvalue ref="xxf:instance('cohort-search-instance')/cohortName"
                        value="normalize-space(xxf:instance('viewControls-input-instance')/input[@id='cohortName'])"/>
                </xf:action>
                <!-- Set cohort name -->
                <xf:action if="xxf:instance('control-instance')/displayType='cohort'">
                    <xf:setvalue ref="xxf:instance('cohort-instance')/cohortName"
                        value="normalize-space(xxf:instance('viewControls-input-instance')/input[@id='cohortName'])"/>
                </xf:action>

                <!-- Refresh the bindings on the viewControlsActions-model -->
                <xf:recalculate model="viewControlsActions-model"/>
            </xf:action>

        </xf:model>


        <!-- ========= Main model contains stuff specific to this page ========= 
            =================================================================== -->
        <xf:model id="main-model">

            <!-- Control of the view -->
            <xf:instance id="control-instance">
                <control xmlns="">
                    <!-- For display in debugging mode, viewXML dialogue -->
                    <formatted-xquery/>

                    <!-- editStatus - for searches.
                         Controls when the Save button is active -->
                    <editStatus>unedited</editStatus>

                    <!-- User interface can be switched active|inactive 
                         so that changes made to search parameters do not trigger value-changed events -->
                    <interfaceStatus>active</interfaceStatus>

                    <!-- Used in hidden input when a cohort is selected -->
                    <selectedCohort/>

                    <!-- Used in hidden input when a term is selected -->
                    <selectedTerm/>

                    <!-- Selections made by user to control the view -->
                    <displayType/>
                    <currentSearchHandle/>
                    <currentCohortHandle/>
                    <currentTerm/>
                    <terms>0</terms>
                    <sortOrder>descending</sortOrder>

                    <!-- Values for let clauses if scope or age conditions are specified in search -->
                    <effectiveTimeLetClause>let $effectiveTime := $document/cda:effectiveTime/@value</effectiveTimeLetClause>
                    <ageLetClause>let $age := local:patientAge($document/descendant::cda:birthTime/@value,$effectiveTime)</ageLetClause>

                    <!-- searchLocation - can search data as well as records.
                         Normally the user can't select to search data
                         Only available to the roles listed in view-parameters staticParameters/cityEHRCohortSearch/searchLocation
                         From 2017-11-20 the searchLocation is stored in the serach term, but is still set in the control-instance prior to the search submission -->
                    <searchLocation/>

                    <!-- Graph for cohort statistics -->
                    <set name="Template" value="0" color="FFFFFF"/>
                    <!--
                    <graph bgcolor="e1f5ff" caption="" subCaption="" yaxismaxvalue="0" yaxisminvalue="0" yaxisname="" xaxisname="" hovercapbg="FFFFDD" hovercapborder="000000" numdivlines="4" numberSuffix="">
                        
                        <trendlines>
                            <line startvalue="10" displayValue="" color="FFFFFF" thickness="1" isTrendZone="0"/>
                        </trendlines>
                    </graph>
-->

                    <!-- Export data parameters.
                         The options for these are defined in cityEHRExportDataDialog in view-parameters -->
                    <exportData>
                        <cohortName><!-- Name of the export data set, input by the user --></cohortName>
                        <specialtyIRI/>
                        <longitudinalDataOutput><!-- currentData | allData | firstData --></longitudinalDataOutput>
                        <anonymisationType><!-- patientIdentifiable | pseudoAnonymised | anonymised --></anonymisationType>
                        <exportType/>
                        <exportTypeSelection/>
                        <exportReport>
                            <!-- Selected export report -->
                        </exportReport>
                        <exportReportCompositionIRI/>
                        <exportPathwayCompositionIRI/>
                        <exportDataFormat>
                            <!-- CDA, Spreadhseet, CSV, etc -->
                        </exportDataFormat>
                        <outputHeaderRow>false</outputHeaderRow>
                        <spreadsheetFormat>
                            <!-- singleSheet, multipleSheet -->
                        </spreadsheetFormat>
                    </exportData>

                    <!-- Export data set parameters - these are held in the exportDataSetModel -->

                    <!-- <searchType/> - inserted from view-parameters -->

                    <!-- <searchSubType/> - inserted from view-parameters -->

                    <!-- <cohortStatistics/> - inserted from view-parameters controlParameters. -->

                    <!-- <cohortAnalysis/> - inserted from view-parameters controlParameters -->

                    <!-- <queryDefinition/> - inserted from view-parameters controlParameters -->

                </control>
            </xf:instance>

            <!-- Binding for exportData parameters -->
            <xf:bind nodeset="xxf:instance('control-instance')">
                <xf:bind nodeset="exportData/outputHeaderRow" type="xs:boolean"/>
            </xf:bind>


            <!-- Application defined action to download XML - called from the viewXML dialogue -->
            <xf:action ev:event="download-xml">
                <xf:dispatch name="export-xmlCache" target="pageNavigation-model">
                    <xxf:context name="export-instance" select="xxf:instance('form-instance')"/>
                    <xxf:context name="exportType" select="'PatientComposition'"/>
                </xf:dispatch>
            </xf:action>

            <!-- Add the list of PrimarySearch entries for the searchType.
                These are found from dictionary entries of the form:
                
                <entry cityEHR:cohortSearch="#CityEHR:EntryProperty:PrimarySearch" cityEHR:labelWidth="18">
                <component xmlns="urn:hl7-org:v3">
                <observation>
                <typeId root="cityEHR" extension="#HL7-CDA:Observation"/>
                <id root="#ISO-13606:Entry:Diagnosis" extension="#ISO-13606:Entry:Diagnosis" cityEHR:origin=""/>
                
                And result in items of the form:
                
                <item value="#ISO-13606:Entry:Diagnosis" displayName="Diagnosis"/>
                
                Use the root of the entry so that different searches can be defined for the same entry (search is made on @extension)
                
            -->
            <xf:action ev:event="set-searchTypeSelection">
                <!-- Reset the base searchType from view-parameters -->
                <xf:delete nodeset="xxf:instance('control-instance')/searchType"/>
                <xf:insert context="xxf:instance('control-instance')"
                    origin="xxf:instance('view-parameters-instance')/staticParameters/cityEHRCohortSearch/searchType"/>

                <!-- Reset the base searchSubType from view-parameters. -->
                <xf:delete nodeset="xxf:instance('control-instance')/searchSubType"/>
                <xf:insert context="xxf:instance('control-instance')"
                    origin="xxf:instance('view-parameters-instance')/staticParameters/cityEHRCohortSearch/searchSubType"/>

                <!-- Note that the search for Gender can only be made if the dictionary for the current specialty contains the gender entry/element.
                     This is because we need to know what values to select and these come from the dictionary -->
                <xxf:variable name="genderEntry"
                    select="xxf:instance('application-parameters-instance')/patientRegistration/administrativeGenderCode/@entry"/>
                <xxf:variable name="genderElement"
                    select="xxf:instance('application-parameters-instance')/patientRegistration/administrativeGenderCode/@element"/>
                <xf:action
                    if="not(exists(xxf:instance('dictionary-instance')/iso-13606:entryCollection/iso-13606:entry/cda:component/cda:observation[cda:id/@root=$genderEntry]/descendant::cda:value[@root=$genderElement]))">
                    <xf:delete nodeset="xxf:instance('control-instance')/searchSubType/descendant::item[@value='Gender']"/>
                </xf:action>

                <!-- Set primary search entries from dictionary -->
                <xxf:variable name="primarySearchEntries"
                    select="xxf:instance('dictionary-instance')/iso-13606:entryCollection/iso-13606:entry[@cityEHR:cohortSearch='#CityEHR:EntryProperty:PrimarySearch']/cda:component/cda:observation"/>
                <xf:action xxf:iterate="$primarySearchEntries">
                    <xxf:variable name="entry" select="."/>
                    <xf:insert nodeset="xxf:instance('control-instance')/searchType/options/item" at="last()" position="after"/>
                    <xf:setvalue ref="xxf:instance('control-instance')/searchType/options/item[last()]/@value" value="$entry/cda:id/@root"/>
                    <xf:setvalue ref="xxf:instance('control-instance')/searchType/options/item[last()]/@displayName"
                        value="$entry/cda:code[@codeSystem='cityEHR']/@displayName"/>
                    <xf:setvalue ref="xxf:instance('control-instance')/searchType/options/item[last()]/@status" value="'active'"/>
                </xf:action>

                <!-- Demographics search can only be selected if the dictionary contains at least one registration entry.
                     Not using the registration entry in search, so don't need this any more -->
                <!--
                <xxf:variable name="registrationCompositionSet"
                select="xxf:instance('application-parameters-instance')/patientRegistration/registrationEvent/@composition"/>
                <xxf:variable name="dictionaryCompositionSet"
                    select="xxf:instance('dictionary-instance')/iso-13606:folderCollection/descendant::iso-13606:composition/@code"/>
                <xf:action if="not($dictionaryCompositionSet=$registrationCompositionSet)">
                    <xf:delete
                        nodeset="xxf:instance('control-instance')/searchType/options/item[@value='Demographics']"
                    />
                </xf:action>
                -->

                <!-- Set the search type to the first on the selection list.
                     Should be Demographics, unless this has been removed above -->
                <!--
                <xf:setvalue ref="xxf:instance('cohort-search-parameters')/term/searchType"
                    value="xxf:instance('control-instance')/searchType/options/item[1]/@value"/>
                <xf:setvalue
                    ref="xxf:instance('cohort-search-parameters')/term/searchSubType"
                    value="xxf:instance('control-instance')/searchSubType/options[@searchType=xxf:instance('cohort-search-parameters')/term/searchType]/item[1]/@value"/>
                -->

            </xf:action>


            <!-- Application defined action to set the control instance from elements in the view-parameters -->
            <xf:action ev:event="setControl-instance">
                <xf:action xxf:iterate="xxf:instance('view-parameters-instance')/staticParameters/cityEHRCohortSearch/controlParameters/*">
                    <xxf:variable name="parameter" select="."/>
                    <xf:insert context="xxf:instance('control-instance')" origin="$parameter"/>
                </xf:action>
            </xf:action>

            <!-- Application defined action to set the active searches. 
                 Called whenever the number of search terms changes (i.e. added or undone)
                 Or when the user selects/deselects a term -->
            <xf:action ev:event="set-active-searches">
                <!-- Combine search is active if there are two or more terms 
                     (which have results set [result!='']) 
                     2016-06-16 Changed to remove results set condition, since may want to set up searches which currently don't have results) -->
                <xf:setvalue ref="xxf:instance('control-instance')/searchType/options/item[@value='Combine']/@status"
                    value="if (exists((xxf:instance('cohort-search-instance')/searchTerms/term)[2])) then 'active' else 'inactive'"/>

                <!-- CombineSelected is active if two or more terms (which have results set) are selected -->
                <xf:setvalue ref="xxf:instance('control-instance')/searchType/options/item[@value='CombineSelected']/@status"
                    value="if (exists((xxf:instance('cohort-search-instance')/searchTerms/term[selected='true'])[2])) then 'active' else 'inactive'"/>

                <!-- IncludeCohort is active if there are stored cohorts for this user -->
                <xxf:variable name="savedCohortList"
                    select="(xxf:instance('userSearches-instance')/search | xxf:instance('sharedSearches-instance')/search)[searchTerms='false']"/>
                <xf:setvalue ref="xxf:instance('control-instance')/searchType/options/item[@value='IncludeCohort']/@status"
                    value="if (exists($savedCohortList[1])) then 'active' else 'inactive'"/>
            </xf:action>


            <!-- ========= Specialties =================================================== 
                The cohort search is set up for the current specialty, defined in control-instance/specialtyIRI
                Default is the specialty passed in through view-parameters
                But use can choose any specialty that is defined for this application.
                ================================================================================ -->

            <!-- Application defined action to set the specialty selection.
                 Sets the (user input) specialty to the default passed in to the page.
                 (This does not trigger load of the specialty dictionary, because set-specialty-selection is called before the xform is ready).
                 Sets up the selection list for the user to choose the speciality. -->
            <xf:action ev:event="set-specialty-selection">
                <!-- Default specialty is the one passed in the session -->
                <xxf:variable name="defaultSpecialty" select="xxf:instance('view-parameters-instance')/specialtyIRI"/>

                <!-- Set the specialty input to the default. -->
                <xf:setvalue ref="xxf:instance('viewControls-input-instance')/select[@id='specialty']/@value" value="$defaultSpecialty"/>

                <!-- Set up current (default) specialty in the user selection -->
                <xf:setvalue ref="xxf:instance('viewControls-input-instance')/select[@id='specialty']/item[1]/@value" value="$defaultSpecialty"/>
                <xf:setvalue ref="xxf:instance('viewControls-input-instance')/select[@id='specialty']/item[1]/@displayName"
                    value="xxf:instance('specialtyList-instance')/iso-13606:Folder[@id=$defaultSpecialty]/@displayName"/>

                <!-- Now add all other specialties -->
                <xf:action xxf:iterate="xxf:instance('specialtyList-instance')/iso-13606:Folder[@id!=$defaultSpecialty]">
                    <xxf:variable name="specialty" select="."/>
                    <xf:insert nodeset="xxf:instance('viewControls-input-instance')/select[@id='specialty']/item" at="last()" position="after"/>
                    <xf:setvalue ref="xxf:instance('viewControls-input-instance')/select[@id='specialty']/item[last()]/@value" value="$specialty/@id"/>
                    <xf:setvalue ref="xxf:instance('viewControls-input-instance')/select[@id='specialty']/item[last()]/@displayName"
                        value="$specialty/@displayName"/>
                </xf:action>

            </xf:action>


            <!-- Application defined action to set up specialty.
                 Called on page load and when the user selects to change the specialty.
                 user selection is in the main view-controls or in the exportDataDialog -->
            <xf:action ev:event="set-specialty">
                <xxf:variable name="specialtyIRI" select="event('specialtyIRI')"/>

                <!-- Set the specialty in the two (possible) user selections.
                     Only one of these will be active at any time, so setting will not retrigger the set-specialty action
                     since xforms-value-changed event only fires if the control is active -->
                <xf:setvalue ref="xxf:instance('viewControls-input-instance')/select[@id='specialty']/@value" value="$specialtyIRI"/>
                <!--
                <xf:setvalue ref="xxf:instance('control-instance')/exportData/specialtyIRI"
                    value="$specialtyIRI"/>
                    -->

                <!-- Set up specialty for use in data export -->
                <xf:action>
                    <xf:dispatch name="set-specialty-for-data-export" target="main-model">
                        <xxf:context name="specialtyIRI" select="$specialtyIRI"/>
                    </xf:dispatch>
                </xf:action>

                <!-- Load dictionary for selected specialty              
                     This is language dependent -->
                <xf:dispatch name="load-dictionary" target="dictionary-model">
                    <xxf:context name="specialtyIRI" select="$specialtyIRI"/>
                    <xxf:context name="languageCode" select="xxf:instance('session-parameters-instance')/languageCode"/>
                    <xxf:context name="baseLanguageCode" select="xxf:instance('session-parameters-instance')/baseLanguageCode"/>
                </xf:dispatch>

                <!-- Set up the dictionary for enumeratedDirectory elements -->
                <xf:action>
                    <xf:dispatch name="load-directoryElementsForSpecialty" target="directory-model">
                        <xxf:context name="specialtyIRI" select="$specialtyIRI"/>
                    </xf:dispatch>
                </xf:action>

                <!-- Set up searchType, to include primary search entries from current dictionary -->
                <xf:action>
                    <xf:dispatch name="set-searchTypeSelection" target="main-model"/>
                </xf:action>

                <!-- Set the specialty of the search term -->
                <xf:setvalue ref="xxf:instance('cohort-search-parameters')/term/specialtyIRI" value="$specialtyIRI"/>

            </xf:action>


            <!-- Application defined action to set up specialty for use in data export.
                 Called when the page loads and when the user selects a specialty -->
            <xf:action ev:event="set-specialty-for-data-export">
                <xxf:variable name="specialtyIRI" select="event('specialtyIRI')"/>

                <!-- Selection in data export dialog -->
                <xf:setvalue ref="xxf:instance('control-instance')/exportData/specialtyIRI" value="$specialtyIRI"/>

                <!-- Export data set control -->
                <xf:dispatch name="initialiseDataSetForSpecialty" target="exportDataSet-model">
                    <xxf:context name="specialtyIRI" select="$specialtyIRI"/>
                </xf:dispatch>

                <!-- cda-instance control (for generating reports) -->
                <xf:setvalue ref="xxf:instance('cdaControl-instance')/specialtyIRI" value="$specialtyIRI"/>
                <xf:setvalue ref="xxf:instance('cdaControl-instance')/specialtyId" value="replace(substring($specialtyIRI,2),':','-')"/>
            </xf:action>


            <!-- ========= Patient Cohort  ===================================================                 
                 ============================================================================= -->

            <!-- Application defined action to get the aggregate patient set from the selected cohorts.
                 The aggregate set is in resultString
                 This includes cohorts specified as sub-categories in enumerated class searches (so use //term) -->
            <xf:action ev:event="aggregate-patient-set">
                <!-- Clear aggregated results -->
                <xf:setvalue ref="xxf:instance('cohort-search-instance')/cohortPatientString" value="''"/>

                <!-- Get concatenation of selected results.
                     Make sure empty results strings are exclusded, 
                     otherwise we get an extra @@@ in selectedResultsString and cohortPatientCount is one more than it should be -->
                <xxf:variable name="selectedResultsString"
                    select="string-join(xxf:instance('cohort-search-instance')/descendant::term[selected='true']/result[.!=''],xxf:instance('view-parameters-instance')/resultSeparator)"/>

                <!-- Set the cohort of patients -->
                <xxf:variable name="cohortPatients"
                    select="distinct-values(tokenize($selectedResultsString,xxf:instance('view-parameters-instance')/resultSeparator))"/>
                <xf:setvalue ref="xxf:instance('cohort-search-instance')/cohortPatientString"
                    value="string-join($cohortPatients,xxf:instance('view-parameters-instance')/resultSeparator)"/>
                <xf:setvalue ref="xxf:instance('cohort-search-instance')/cohortPatientCount" value="count($cohortPatients)"/>

                <!-- Check whether Combine search is still active -->
                <xf:dispatch name="set-active-searches" target="main-model"/>

                <!-- Set the Cohort navigation control (tab) -->
                <!-- 2017-01-18 This is always shown now -->
                <!--
                <xf:setvalue
                    ref="xxf:instance('application-parameters-instance')/cohortSearchNavigationControls/control[@displayType='cohort']/@display"
                    value="if ($cohortPatients[1]) then 'show' else 'hidden'"/>
                -->

                <!-- Refresh the bindings on the viewControlsActions-model -->
                <xf:rebuild model="viewControlsActions-model"/>
            </xf:action>


            <!-- Application defined action to load a saved cohort.
                 After user has selected the saved cohort from the cohort view
                 Handle has been stored in control-instance/currentCohortHandle
                 Load into saved-search-instance, then set up cohort and display -->
            <xf:action ev:event="load-saved-cohort">
                <!-- Any search must be cleared (by starting a new search) -->
                <xf:dispatch name="new" target="viewControlsActions-model"/>

                <!-- Load saved cohort as selected by user -->
                <xf:dispatch name="load-saved-search" target="manageCohortSearch-model">
                    <xxf:context name="searchHandle" select="xxf:instance('control-instance')/currentCohortHandle"/>
                </xf:dispatch>

                <!-- Set the cohort-instance.
                     The cohort will have been loaded into saved-cohort-search-instance-->
                <xf:insert nodeset="xxf:instance('cohort-instance')" origin="xxf:instance('saved-cohort-search-instance')"/>

                <!-- Cohort name for user input/edit -->
                <xf:setvalue ref="xxf:instance('viewControls-input-instance')/input[@id='cohortName']"
                    value="xxf:instance('cohort-instance')/cohortName"/>

                <!-- Initialise the cohort set for display -->
                <xf:dispatch name="initialize-cohort-set" target="cohortSet-model">
                    <xxf:context name="patientCohort" select="xxf:instance('cohort-instance')/cohortPatientString"/>
                    <xxf:context name="cohortName" select="xxf:instance('cohort-instance')/cohortName"/>
                </xf:dispatch>

                <!-- Load the first page of the cohort -->
                <xf:dispatch name="load-cohort-page" target="cohortSet-model"/>

                <!-- Set the display to 'cohort' (gets set to 'search' by the 'new' event. -->
                <xf:setvalue ref="xxf:instance('control-instance')/displayType" value="'cohort'"/>

                <!-- Refresh the bindings on the viewControlsActions-model -->
                <xf:recalculate model="viewControlsActions-model"/>

            </xf:action>


            <!-- ========= Export - results summary or cohort ================ 
                 ============================================================= -->

            <!-- Application defined action to export the summary of search results.
                 This is called from exportResultsDialog where the user can select the terms to export.
                 So generate-html-search-results from selected terms in cohortSearchResults-instance -->
            <xf:action ev:event="export-search-results">

                <!-- Generate the HTML instance -->
                <xf:dispatch name="generate-html-search-results" target="main-model">
                    <xxf:context name="searchTerms" select="xxf:instance('cohortSearchResults-instance')/term[selected='true']"/>
                </xf:dispatch>

                <!-- Set externalId for the cohort -->
                <xf:dispatch name="set-externalId" target="pageNavigation-model">
                    <xxf:context name="type" select="xxf:instance('control-instance')/exportData/cohortName"/>
                    <xxf:context name="externalId" select="xxf:instance('view-parameters-instance')/externalId"/>
                </xf:dispatch>

                <!-- Export the HTML instance as a spreasdheet -->
                <xf:dispatch name="export-html" target="configuration-model"/>
            </xf:action>


            <!-- Application defined action to initialise data export parameters -->
            <xf:action ev:event="initialise-dataExport-parameters">

                <!-- longitudinalDataOutput - i.e. currentData, firstData, allData -->
                <xf:setvalue ref="xxf:instance('control-instance')/exportData/longitudinalDataOutput"
                    value="xxf:instance('view-parameters-instance')/staticParameters/cityEHRExportDataDialog/longitudinalDataOutput/option[1]/@value"/>

                <!-- Anonymisation type -->
                <xf:setvalue ref="xxf:instance('control-instance')/exportData/anonymisationType"
                    value="xxf:instance('view-parameters-instance')/staticParameters/cityEHRExportDataDialog/anonymisationType/option[1]/@value"/>

                <!-- Set anonymisation parameters in the export pipeline.
                    These come from the application-parameters since they are model specific.
                    But they are passed in view-parameters, so need to set them up there -->
                <xf:action if="exists(xxf:instance('application-parameters-instance')/anonymisation)">
                    <xf:delete nodeset="xxf:instance('view-parameters-instance')/exportPipeline/anonymisation"/>
                    <xf:insert context="xxf:instance('view-parameters-instance')/exportPipeline"
                        origin="xxf:instance('application-parameters-instance')/anonymisation"/>
                </xf:action>
                <xf:setvalue ref="xxf:instance('view-parameters-instance')/exportPipeline/anonymisation/anonymisationType"
                    value="xxf:instance('control-instance')/exportData/anonymisationType"/>

                <!-- Set the initial exportType - depends on anonymisationType and number of patients in the cohort -->
                <xf:dispatch name="initialise-exportType" target="main-model"/>

                <!-- Set the exportDataFormat - depends on exportType -->
                <xxf:variable name="exportDataFormatSelection"
                    select="xxf:instance('view-parameters-instance')/staticParameters/cityEHRExportDataDialog/exportDataFormat/option[contains(@context,xxf:instance('control-instance')/exportData/exportType)][1]"/>
                <xf:setvalue ref="xxf:instance('control-instance')/exportData/exportDataFormat"
                    value="if (exists($exportDataFormatSelection/@value)) then $exportDataFormatSelection/@value else ''"/>

                <xf:setvalue ref="xxf:instance('exportDataSetControl-instance')/exportDataSet/specialtyId"
                    value="xxf:instance('view-parameters-instance')/specialtyId"/>

                <xf:send submission="exportDataSetList-submission" target="exportDataSet-model"/>


                <!-- Set the current data set to the first on the list and load it -->
                <xf:action if="exists(xxf:instance('exportDataSetList-instance')/iso-13606:entryCollection)">
                    <xf:setvalue ref="xxf:instance('control-instance')/exportData/exportDataSet"
                        value="xxf:instance('exportDataSetList-instance')/iso-13606:entryCollection[1]/@id"/>
                    <xf:setvalue ref="xxf:instance('exportDataSetControl-instance')/exportDataSet/handle"
                        value="xxf:instance('exportDataSetList-instance')/iso-13606:entryCollection[1]/@handle"/>
                    <xf:send submission="load-exportDataSet-submission" target="exportDataSet-model"/>
                </xf:action>
            </xf:action>

            <!-- Application defined action to initialise the exportType parameter and selection.
                 The context attribute (if present) restricts by the anonymisationType
                 The maxRecords attribute (if present) restricts by xxf:instance('cohort-search-instance')/cohortPatientCount-->
            <xf:action ev:event="initialise-exportType">
                <xxf:variable name="exportTypeOptions"
                    select="xxf:instance('view-parameters-instance')/staticParameters/cityEHRExportDataDialog/exportType/option"/>

                <xxf:variable name="exportTypeOptionsForContext"
                    select="$exportTypeOptions[contains(@context,xxf:instance('control-instance')/exportData/anonymisationType)]"/>

                <xxf:variable name="cohortPatientCount"
                    select="if (xxf:instance('cohort-search-instance')/cohortPatientCount castable as xs:integer) then xs:integer(xxf:instance('cohort-search-instance')/cohortPatientCount) else '0'"/>

                <xxf:variable name="exportTypeSelection"
                    select="$exportTypeOptionsForContext[not(exists(@maxRecords)) or (exists(@maxRecords) and @maxRecords castable as xs:integer and xs:integer($cohortPatientCount) le xs:integer(@maxRecords))]/@value"/>

                <!-- Set exportType as the first allowable selection -->
                <xf:setvalue ref="xxf:instance('control-instance')/exportData/exportType" value="$exportTypeSelection[1]"/>

                <!-- Set the string (exportTypeSelection) that defines the allowable selection -->
                <xf:setvalue ref="xxf:instance('control-instance')/exportData/exportTypeSelection"
                    value="string-join($exportTypeSelection,xxf:instance('view-parameters-instance')/resultSeparator)"/>

                <!-- The format is restricted by type of export                      
                     Need to reset it if the current value is not allowed -->
                <xxf:variable name="restrictedExportDataFormatList"
                    select="xxf:instance('view-parameters-instance')/staticParameters/cityEHRExportDataDialog/exportDataFormat/option[contains(@context,xxf:instance('control-instance')/exportData/exportType)]/@value"/>
                <xf:setvalue ref="xxf:instance('control-instance')/exportData/exportDataFormat"
                    value="if (. = $restrictedExportDataFormatList) then . else $restrictedExportDataFormatList[1]"/>

            </xf:action>


            <!-- Application defined action to export patient data after confirmation in exportDataDialog.
                 The cohort is in cohort-instance.
                 If the user does not have access to all patients in the cohort, then this will need to be restricted -->
            <xf:action ev:event="export-data">

                <!-- Set externalId for the cohort -->
                <xf:dispatch name="set-externalId" target="pageNavigation-model">
                    <xxf:context name="type" select="'cohort'"/>
                    <xxf:context name="externalId" select="xxf:instance('view-parameters-instance')/externalId"/>
                </xf:dispatch>

                <!-- Patient cohort for export may be retricted if the anonymisationType is patientIdentifiable 
                     and the user is restricted to viewing care team patients only -->
                <xxf:variable name="patientCohort" select="xxf:instance('cohort-instance')/cohortPatientString"/>
                <xxf:variable name="fullCohort" select="tokenize($patientCohort,xxf:instance('view-parameters-instance')/resultSeparator)"/>

                <!-- Accessible patients will only be found if xxf:instance('user-instance')/rbac/restrictPatientAccess/@value='careTeam' -->
                <xxf:variable name="accessiblePatients" select="xxf:instance('careTeamPatients-instance')/patient/@id"/>
                <!-- If the user is restricted to access only patients in their care team(s)
                     Then need to restrict the patients in the cohort set. -->
                <xxf:variable name="restrictedCohort"
                    select="if (xxf:instance('user-instance')/rbac/restrictPatientAccess/@value!='careTeam') then $fullCohort else for $p in $fullCohort return if ($p=$accessiblePatients) then $p else ()"/>

                <!-- Only need to use the resitriced cohort for patient identifiable export -->
                <xxf:variable name="exportCohort"
                    select="if (xxf:instance('control-instance')/anonymisationType='patientIdentifiable') then $restrictedCohort else $fullCohort"/>

                <!-- Export, but only if the exportCohort is not empty -->
                <xf:action if="exists($exportCohort)">

                    <!-- Export the full CDA record for each patient in the cohort.
                         Note that this may be a very large document and the processing may consume significant resources.
                         So should limit to a defined maximum of records.
                         There is a better way to do this by iterating in the pipeline and exporting a zip of files (TBD) -->
                    <xf:action if="xxf:instance('control-instance')/exportData/exportType='full'">
                        <xf:dispatch name="export-patientSet" target="exportData-model">
                            <xxf:context name="patientSet" select="$exportCohort"/>
                            <xxf:context name="transformationXSL" select="''"/>
                        </xf:dispatch>
                    </xf:action>

                    <!-- Export demographics or dataSet to XML or spreadsheet
                         First set up query to get the data for patients in the cohort.
                         Then submit to pipeline that runs query and returns result to browser as a zip file or a spreadsheet
                     -->
                    <xf:action if="xxf:instance('control-instance')/exportData/exportType=('demographics','dataSet')">

                        <!-- Set query parameters.
                             Need to pass in the list of patients in the cohort and the list of entries in the data set (if there is one) -->
                        <xxf:variable name="exportCohortString"
                            select="string-join($exportCohort,xxf:instance('view-parameters-instance')/resultSeparator)"/>
                        <xxf:variable name="dataSetEntryList"
                            select="if (xxf:instance('control-instance')/exportData/exportType='dataSet' and exists(xxf:instance('exportDataSet-instance')/iso-13606:entry)) then concat('''',string-join(xxf:instance('exportDataSet-instance')/iso-13606:entry/@extension,''','''),'''') else ''"/>

                        <xf:dispatch name="set-getPatientCohortXQuery-parameters" target="cohortSet-model">
                            <xxf:context name="patientCohort" select="$exportCohortString"/>
                            <xxf:context name="dataSetEntryList" select="$dataSetEntryList"/>
                            <xxf:context name="longitudinalDataOutput" select="xxf:instance('control-instance')/exportData/longitudinalDataOutput"/>
                        </xf:dispatch>

                        <!-- Set query text and context to pass to pipeline -->
                        <xf:setvalue ref="xxf:instance('view-parameters-instance')/exportPipeline/queryText"
                            value="xxf:instance('getPatientCohortXQuery-instance')"/>
                        <xf:setvalue ref="xxf:instance('view-parameters-instance')/exportPipeline/queryContext"
                            value="concat(xxf:instance('view-parameters-instance')/applicationStorageLocation,'/records')"/>
                        <!-- Set output type to pass to pipeline -->
                        <xf:setvalue ref="xxf:instance('view-parameters-instance')/exportPipeline/exportDataFormat"
                            value="xxf:instance('control-instance')/exportData/exportDataFormat"/>
                        <xf:setvalue ref="xxf:instance('view-parameters-instance')/exportPipeline/spreadsheetFormat"
                            value="xxf:instance('control-instance')/exportData/spreadsheetFormat"/>

                        <!-- Call submission to run query and export cohort data set as a zip file or spreadsheet -->
                        <xf:send submission="export-cohortData-submission" target="exportData-model"/>
                    </xf:action>

                    <!-- Generate the report.
                         The report is built in patientSet-instance, defined in exportData-model -->
                    <xf:action if="xxf:instance('control-instance')/exportData/exportType='report'">
                        <!-- First generate the report  -->
                        <xf:dispatch name="generate-report" target="exportData-model">
                            <xxf:context name="reportIRI" select="xxf:instance('control-instance')/exportData/exportReportCompositionIRI"/>
                            <xxf:context name="patientCohort" select="$exportCohort"/>
                            <xxf:context name="exportDataFormat" select="xxf:instance('control-instance')/exportData/exportDataFormat"/>
                            <xxf:context name="outputHeaderRow" select="xxf:instance('control-instance')/exportData/outputHeaderRow"/>
                        </xf:dispatch>

                        <!-- patientSet-instance has now been created, so export through pipeline.
                             Transforms (if necessary) and returns as a zip to the browser -->
                        <xf:send submission="export-patientSet-submission" target="exportData-model"/>

                    </xf:action>

                </xf:action>

            </xf:action>


            <!-- ========= Print - results summary or cohort  ====================== 
                 =================================================================== -->

            <!-- Instance for cohortSearchResults.
                 Results from cohort-search-instance are copied here -->
            <xf:instance id="cohortSearchResults-instance">
                <results xmlns=""/>
            </xf:instance>

            <!-- Binding for cohortSearchResults parameters -->
            <xf:bind nodeset="xxf:instance('cohortSearchResults-instance')">
                <xf:bind nodeset="term/selected" type="xs:boolean"/>
            </xf:bind>

            <!-- Application defined action to set up cohortSearchResults-instance
                 Starts with a copy of the terms in cohort-search-instance
                 Initially, if user hasn't selected any terms then mark terms with a shortDescription as selected.
                 The user can then select (and re-order) the results in exportResultsDialog
                 before the HTML for export is created in generate-html-search-results -->
            <xf:action ev:event="set-up-cohortSearchResults">

                <!-- Clear the cohortSearchResults-instance -->
                <xf:delete nodeset="xxf:instance('cohortSearchResults-instance')/*"/>

                <!-- The sort order will get reversed when terms are inserted into cohortSearchResults-instance -->
                <xxf:variable name="sortOrder" select="xxf:instance('control-instance')/sortOrder"/>
                <xxf:variable name="searchTerms"
                    select="reverse(xxf:sort(xxf:instance('cohort-search-instance')/searchTerms/term,id,'number',$sortOrder))"/>

                <!-- See if the user has selected any terms already -->
                <xxf:variable name="userSelectionMade" select="if ($searchTerms/selected='true') then 'true' else 'false'"/>

                <!-- Copy terms to cohortSearchResults-instance -->
                <xf:action xxf:iterate="$searchTerms">
                    <xxf:variable name="term" select="."/>

                    <!-- Set term as selected, or not -->
                    <xf:setvalue ref="$term/selected" value="if (not($userSelectionMade='true') and $term/shortDescription!='') then 'true' else ."/>

                    <xf:insert context="xxf:instance('cohortSearchResults-instance')" origin="$term"/>
                </xf:action>

                <!-- Set default name for the export data -->
                <xf:setvalue ref="xxf:instance('control-instance')/exportData/cohortName"
                    value="xxf:instance('viewControls-input-instance')/input[@id='cohortName']"/>

            </xf:action>



            <!-- Submission to load the search results HTML template.
                 The template is put in html-instance, ready to print or export
                 For some reason this submission only works if:
                    cohortSearchResults.xml has .xml file extension (not .html, .xhtml)
                     -->
            <xf:submission id="load-searchResultsTemplate-submission"
                resource="{xxf:instance('view-parameters-instance')/staticFileURL}/templates/cohortSearchResults.xml" method="get" replace="instance"
                xxf:instance="html-instance" validate="false" serialization="none">
                <xf:action ev:event="xforms-submit-error">
                    <!-- Not doing anything on fail -->
                </xf:action>
                <xf:action ev:event="xforms-submit-done">
                    <!-- Not doing anything here now -->
                </xf:action>
            </xf:submission>

            <!-- Application defined action to generate the summary of search results in HTML-->
            <xf:action ev:event="generate-html-search-results">
                <xxf:variable name="searchTerms" select="event('searchTerms')"/>

                <!-- Get (refresh) the HTML template for printing search results -->
                <xf:send submission="load-searchResultsTemplate-submission"/>
                <xxf:variable name="htmlSearchResults" select="xxf:instance('html-instance')"/>

                <xxf:variable name="formattedDateTime"
                    select="format-dateTime(xs:dateTime(current-dateTime()),xxf:instance('view-parameters-instance')/dateTimeDisplayFormat, xxf:instance('session-parameters-instance')/languageCode, (), ())"/>

                <!-- Meta data for externalId, header and footer -->
                <xxf:variable name="head" select="$htmlSearchResults/descendant::head"/>
                <xf:setvalue ref="$head/meta[@name='externalId']/@content" value="xxf:instance('view-parameters-instance')/externalId"/>
                <xf:setvalue ref="$head/meta[@name='headerText']/@content"
                    value="concat(xxf:instance('view-parameters-instance')/externalId,' / ',xxf:instance('cohort-search-instance')/cohortName)"/>
                <xf:setvalue ref="$head/meta[@name='footerText']/@content"
                    value="concat(xxf:instance('user-instance')/credentials/username,' / ',$formattedDateTime)"/>

                <!-- Header block -->
                <xxf:variable name="header" select="$htmlSearchResults/descendant::p[@id='header']"/>
                <xf:setvalue ref="$header/span[@id='cohortName']" value="xxf:instance('cohort-search-instance')/cohortName"/>
                <xf:setvalue ref="$header/span[@id='searchPrintPrefix']"
                    value="xxf:instance('view-parameters-instance')/staticParameters/cityEHRCohortSearch/searchPrintPrefix"/>
                <xf:setvalue ref="$header/span[@id='user']" value="xxf:instance('user-instance')/credentials/username"/>
                <xf:setvalue ref="$header/span[@id='searchPrintSuffix']"
                    value="xxf:instance('view-parameters-instance')/staticParameters/cityEHRCohortSearch/searchPrintSuffix"/>
                <xf:setvalue ref="$header/span[@id='dateTime']" value="$formattedDateTime"/>

                <!-- Table of search results -->
                <xxf:variable name="resultsTable" select="$htmlSearchResults/descendant::table[@id='results']"/>
                <xxf:variable name="headRow" select="$resultsTable/thead/tr"/>
                <xxf:variable name="resultsBody" select="$resultsTable/tbody"/>

                <!-- Set up header -->
                <xf:setvalue ref="$headRow/th[1]" value="."/>
                <xf:setvalue ref="$headRow/th[2]" value="."/>
                <xf:setvalue ref="$headRow/th[3]" value="."/>

                <!-- Set up rows for search results.
                    Iterate through the search results which are now in cohortSearchResults-instance.
                    ** Only use the terms that have been selected, if scope is 'selected' **
                    Insert a row for each one on the HTML table and set values:
                    id, description, count -->
                <xf:action xxf:iterate="$searchTerms">
                    <xxf:variable name="term" select="."/>
                    <xxf:variable name="position" select="position()"/>

                    <!-- Insert new row for all but the first -->
                    <xf:action if="$position gt 1">
                        <xf:insert nodeset="$resultsBody/tr"/>
                    </xf:action>

                    <!-- Set cells in the last row -->
                    <xxf:variable name="resultsRow" select="$resultsBody/tr[last()]"/>
                    <xf:setvalue ref="$resultsRow/td[1]" value="$term/id"/>
                    <xf:setvalue ref="$resultsRow/td[2]" value="if ($term/shortDescription!='') then $term/shortDescription else $term/description"/>
                    <xf:setvalue ref="$resultsRow/td[3]"
                        value="if ($term/percentage!='') then concat($term/percentage,'%') else if ($term/count!='') then $term/count else xxf:instance('view-parameters-instance')/staticParameters/cityEHRCohortSearch/noCohortLabel"
                    />
                </xf:action>
            </xf:action>

            <!-- Application defined action to print the summary of search results -->
            <xf:action ev:event="print-search-results">

                <!-- Generate the HTML instance.
                     Print shows all the terms in cohort-search-instance -->
                <xf:dispatch name="generate-html-search-results" target="main-model">
                    <xxf:context name="searchTerms" select="xxf:instance('cohort-search-instance')/searchTerms/term"/>
                </xf:dispatch>

                <!-- Set externalId for the cohort -->
                <xf:dispatch name="set-externalId" target="pageNavigation-model">
                    <xxf:context name="type" select="xxf:instance('cohort-search-instance')/cohortName"/>
                    <xxf:context name="externalId" select="xxf:instance('view-parameters-instance')/externalId"/>
                </xf:dispatch>

                <!-- Print the HTML instance -->
                <xf:dispatch name="print-html" target="pageNavigation-model"/>
            </xf:action>


            <!-- Application defined action to print the patient cohort -->
            <xf:action ev:event="print-cohort">

                <!-- Get the cohort information -  put in patient-cohort-instance -->
                <xf:dispatch name="load-cohort" target="cohortSet-model"/>

                <!-- Set externalId for the cohort -->
                <xf:dispatch name="set-externalId" target="pageNavigation-model">
                    <xxf:context name="type" select="xxf:instance('cohort-search-instance')/cohortName"/>
                    <xxf:context name="externalId" select="xxf:instance('view-parameters-instance')/externalId"/>
                </xf:dispatch>

                <!-- If the cohort is selected by user from search results then
                     Add description elements to the cohort.
                     Iterate through all selected terms in the cohort -->
                <xxf:variable name="cohortDescriptionSet"
                    select="xxf:instance('cohort-search-instance')/searchTerms/term[selected='true']/description"/>
                <xf:action if="exists($cohortDescriptionSet)">
                    <!-- Add description elements to the cohort -->
                    <xf:action xxf:iterate="$cohortDescriptionSet">
                        <xxf:variable name="description" select="."/>
                        <xf:insert context="xxf:instance('patient-cohort-instance')" nodeset="*" origin="$description" at="1" position="before"/>
                    </xf:action>
                    <!-- Add the connector for description elements.
                         The cohort is the combination of all selected terms, using OR -->
                    <xf:insert context="xxf:instance('patient-cohort-instance')" nodeset="*"
                        origin="xxf:instance('control-instance')/queryDefinition/combineType/options/item[@value='OR']" at="1" position="before"/>
                </xf:action>

                <!-- Print the cohort set -->
                <xf:dispatch name="print-cohort" target="cohortSet-model"/>

            </xf:action>


            <!-- ========= Cohort analysis  ====================== 
                 ================================================== -->

            <!-- Instance for cohortAnalysis results -->
            <xf:instance id="cohortAnalysis-instance">
                <cohortAnalysis/>
            </xf:instance>

            <!-- Submission to get data for cohort analysis -->
            <xf:instance id="cohortAnalysisXQuery-instance" src="oxf:/apps/ehr/xquery/cohortAnalysisXQuery.xml"/>

            <xf:submission id="cohortAnalysis-submission" ref="xxf:instance('query-instance')"
                action="{xxf:instance('view-parameters-instance')/applicationDatabaseLocation}/records" method="post" replace="instance"
                instance="cohortAnalysis-instance">
                <xf:action ev:event="xforms-submit-done">
                    <!-- Not doing anything here -->
                </xf:action>
                <!-- Something went wrong -->
                <xf:action ev:event="xforms-submit-error">
                    <!-- Not doing anything here yet -->
                </xf:action>
            </xf:submission>

            <!-- Application defined action to run cohort analysis query.
                 The cohort for analysis is in 'cohort-search-instance'/cohortPatientString
                 The parameters for the analysis are passed in as parameter
            -->
            <xf:action ev:event="run-cohortAnalysis-query">
                <xxf:variable name="parameter" select="event('parameter')"/>

                <!-- Set parameters in the query -->
                <xxf:variable name="patientCohort"
                    select="tokenize(xxf:instance('cohort-search-instance')/cohortPatientString,xxf:instance('view-parameters-instance')/resultSeparator)"/>
                <xf:setvalue ref="xxf:instance('cohortAnalysisXQuery-instance')/patientIdList"
                    value="concat('''',string-join($patientCohort,''','''),'''')"/>

                <xf:setvalue ref="xxf:instance('cohortAnalysisXQuery-instance')/valueSelector"
                    value="concat('//cda:observation[cda:id/@extension=''',$parameter/@entry,''']/descendant::cda:value[@extension=''',$parameter/@element,''']')"/>

                <!-- Set up the query text for eXist -->
                <xf:setvalue ref="xxf:instance('query-instance')/exist:text" value="xxf:instance('cohortAnalysisXQuery-instance')"/>
                <!-- Now submit the search -->
                <xf:send submission="cohortAnalysis-submission"/>

                <!-- Clear any previous results -->
                <xf:delete nodeset="$parameter/result"/>

                <!-- Perform the analysis, put result in $parameter/result/@value.
                     Method of analysis depends on the scope -->
                <xxf:variable name="precision" select="if ($parameter/@precision castable as xs:integer) then $parameter/@precision else 2"/>

                <!-- Set up the full set of results (will be filtered by the scope) -->
                <xxf:variable name="returnValueSet" select="xxf:instance('cohortAnalysis-instance')/value"/>

                <!-- Scope is not count or distinctCount -->
                <xf:action if="not($parameter/@scope=('count','distinctCount'))">
                    <!-- Remove any return values that are not numbers.
                         number($v) returns NaN if $v is not a number. NaN is never equal to anything (including itself) -->
                    <xf:delete nodeset="xxf:instance('cohortAnalysis-instance')/value[not(number(@value)=number(@value))]"/>

                    <!-- Apply the scope - all | currentData | firstData -->
                    <xxf:variable name="scopedReturnValueSet"
                        select="if ($parameter/@scope='currentData') then for $p in $patientCohort return ($returnValueSet[@id=$p])[last()]/@value
                        else if ($parameter/@scope='firstData') then for $p in $patientCohort return ($returnValueSet[@id=$p])[1]/@value
                        else $returnValueSet/@value"/>

                    <!-- Insert a new, empty, result -->
                    <xf:insert context="$parameter" origin="xxf:instance('control-instance')/cohortAnalysis/parameter/result"/>
                    <!-- Set the result of the analysis -->
                    <xxf:variable name="result" select="$parameter/result[1]"/>

                    <!-- Sum -->
                    <xf:setvalue ref="$result/@value"
                        value="if ($parameter/@operation='sum') then round-half-to-even(sum($scopedReturnValueSet),$precision) else ."/>
                    <!-- Max -->
                    <xf:setvalue ref="$result/@value"
                        value="if ($parameter/@operation='max') then round-half-to-even(max($scopedReturnValueSet),$precision) else ."/>
                    <!-- Min -->
                    <xf:setvalue ref="$result/@value"
                        value="if ($parameter/@operation='min') then round-half-to-even(min($scopedReturnValueSet),$precision) else ."/>
                    <!-- Average -->
                    <xf:setvalue ref="$result/@value"
                        value="if ($parameter/@operation='average') then round-half-to-even(avg($scopedReturnValueSet),$precision) else ."/>
                </xf:action>

                <!-- Scope count or distinctCount.
                     Get the distinct values returned by the query.
                     Iterate through the values
                        Get the count of that value for each patient
                        Then perform the operation and set the result -->
                <xf:action if="$parameter/@scope=('count','distinctCount')">
                    <xxf:variable name="distinctReturnValues" select="distinct-values($returnValueSet/@value)"/>

                    <xf:action xxf:iterate="$distinctReturnValues">
                        <xxf:variable name="returnValue" select="."/>

                        <xf:insert context="$parameter" origin="xxf:instance('control-instance')/cohortAnalysis/parameter/result"/>
                        <xxf:variable name="result" select="$parameter/result[1]"/>

                        <!-- Set the category -->
                        <xf:setvalue ref="$result/@category" value="$returnValue"/>

                        <!-- Get the count for each patient.
                             For distinctCount the count will be 0 or 1 -->
                        <xxf:variable name="valueCountSet"
                            select="if ($parameter/@scope='count') then for $p in $patientCohort return count($returnValueSet[@id=$p][@value=$returnValue])
                            else for $p in $patientCohort return count($returnValueSet[@id=$p][@value=$returnValue][1])"/>

                        <!-- Perform analysis on the valueCountSet  -->
                        <!-- Sum -->
                        <xf:setvalue ref="$result/@value"
                            value="if ($parameter/@operation='sum') then round-half-to-even(sum($valueCountSet),$precision) else ."/>
                        <!-- Max -->
                        <xf:setvalue ref="$result/@value"
                            value="if ($parameter/@operation='max') then round-half-to-even(max($valueCountSet),$precision) else ."/>
                        <!-- Min -->
                        <xf:setvalue ref="$result/@value"
                            value="if ($parameter/@operation='min') then round-half-to-even(min($valueCountSet),$precision) else ."/>
                        <!-- Average -->
                        <xf:setvalue ref="$result/@value"
                            value="if ($parameter/@operation='average') then round-half-to-even(avg($valueCountSet),$precision) else ."/>
                    </xf:action>

                </xf:action>


            </xf:action>

            <!-- Application defined action to (re)set cohort analysis query.
                 When user launches the cohort analysis dialogue.
                 Uses the same variables to find entry and element as in cityEHRCohortAnalysisDialog.
                 
                 Sets the template parameter and inserts into the cohortAnalysis if it is empty.
                 Or if not empty, rerun all the analysis queries
            -->
            <xf:action ev:event="set-cohortAnalysis">
                <xxf:variable name="parameter" select="xxf:instance('control-instance')/cohortAnalysis/parameter"/>
                <xxf:variable name="observationSet"
                    select="xxf:sort(xxf:instance('dictionary-instance')/iso-13606:entryCollection/iso-13606:entry[@cityEHR:cohortSearch=('#CityEHR:EntryProperty:Searchable','#CityEHR:EntryProperty:PrimarySearch')]/cda:component/cda:observation[cda:id/@root=cda:id/@extension][descendant::cda:value/@xsi:type=('xs:integer','xs:double')],cda:code[@codeSystem='cityEHR']/@displayName,'text', 'ascending')"/>

                <!-- Entry - first entry -->
                <xf:setvalue ref="$parameter/@entry" value="$observationSet[1]/cda:id/@extension"/>

                <!-- Element - first element of the entry -->
                <xf:setvalue ref="$parameter/@element"
                    value="($observationSet[cda:id/@extension=$parameter/@entry]/descendant::cda:value[@xsi:type=('xs:integer','xs:double')])[1]/@extension"/>

                <!-- Scope - first on selection -->
                <xf:setvalue ref="$parameter/@scope"
                    value="(xxf:instance('view-parameters-instance')/staticParameters/cityEHRCohortSearch/searchScope/options/item)[1]/@value"/>

                <!-- Operation is reset -->
                <xf:setvalue ref="$parameter/@operation" value="''"/>

                <!-- Iterate through existing parameters to rerun each query.
                     There may be existing parameters if the cohortAnalysis has previously been launched -->
                <xf:action xxf:iterate="xxf:instance('cohort-search-instance')/cohortAnalysis/parameter">
                    <xf:dispatch name="run-cohortAnalysis-query" target="main-model">
                        <xxf:context name="parameter" select="."/>
                    </xf:dispatch>
                </xf:action>

                <!-- If 'cohort-search-instance')/cohortAnalysis is empty, insert the reset parameter as the initial item  -->
                <xf:action if="empty(xxf:instance('cohort-search-instance')/cohortAnalysis/parameter)">
                    <xf:insert context="xxf:instance('cohort-search-instance')/cohortAnalysis" origin="$parameter"/>
                </xf:action>

            </xf:action>

            <!-- Application defined action to reset a cohortAnalysis parameter.
                 Must be invoked when the scope changes (since entry and/or element may now be out of scope)
            -->
            <xf:action ev:event="reset-cohortAnalysis-parameter">
                <xxf:variable name="parameter" select="event('parameter')"/>

                <!-- Scope is not reset, unless its blank -->
                <xxf:variable name="defaultScope"
                    select="(xxf:instance('view-parameters-instance')/staticParameters/cityEHRCohortSearch/searchScope/options/item)[1]/@value"
                    value=""/>
                <xf:setvalue ref="$parameter/@scope" value="if (.='') then $defaultScope else ."/>

                <!-- Operation is always reset to blank -->
                <xf:setvalue ref="$parameter/@operation" value="''"/>

                <!-- Results are always reset -->
                <xf:delete nodeset="$parameter/result"/>

                <!-- Observations for selection -->
                <xxf:variable name="searchableObservations"
                    select="xxf:instance('dictionary-instance')/iso-13606:entryCollection/iso-13606:entry[@cityEHR:cohortSearch=('#CityEHR:EntryProperty:Searchable','#CityEHR:EntryProperty:PrimarySearch')]/cda:component/cda:observation[cda:id/@root=cda:id/@extension]"/>
                <xxf:variable name="inScopeObservations"
                    select="if ($parameter/@scope=('count','distinctCount')) then $searchableObservations else $searchableObservations[descendant::cda:value/@xsi:type=('xs:integer','xs:double')]"/>
                <xxf:variable name="observationSet"
                    select="xxf:sort($inScopeObservations,cda:code[@codeSystem='cityEHR']/@displayName,'text', 'ascending')"/>

                <!-- Entry is reset if out of scope (or blank).
                     Setting the entry will trigger xforms-value-changed on the element selection, 
                     so don't need to do anything else with the element -->
                <xf:setvalue ref="$parameter/@entry"
                    value="if (. = $observationSet/cda:id/@extension) then . else $observationSet[1]/cda:id/@extension"/>

            </xf:action>

            <!-- ========= Cohort Search Instance ================================== 
                 =================================================================== -->

            <!-- Cohort search instance contains the set of search terms and the results for each individual search.
                 The template for cohortSearch is inserted from manageCohortSearchModel
                 The template for each term is specified in cohort-search-parameters -->
            <xf:instance id="cohort-search-instance">
                <cohortSearch/>
            </xf:instance>

            <!-- Selected term is boolean type -->
            <xf:bind nodeset="xxf:instance('cohort-search-instance')">
                <xf:bind nodeset="searchTerms/term/selected" type="xs:boolean"/>
                <xf:bind nodeset="searchTerms/term/categorySet/term/selected" type="xs:boolean"/>
            </xf:bind>

            <!-- Submission to load the cohort search instance -->
            <xf:submission id="load-search-submission" serialization="none"
                action="{xxf:instance('view-parameters-instance')/databaseLocation}{xxf:instance('control-instance')/currentSearchHandle}"
                validate="false" method="get" replace="instance" instance="cohort-search-instance" f:url-type="resource">
                <!-- Reset the search when loaded -->
                <xf:action ev:event="xforms-submit-done">

                    <!-- Set the control-instance -->
                    <xf:setvalue ref="xxf:instance('control-instance')/terms" value="count(xxf:instance('cohort-search-instance')/searchTerms/term)"/>

                    <!-- Set the view control inputs -->
                    <xf:setvalue ref="xxf:instance('viewControls-input-instance')/input[@id='cohortName']"
                        value="xxf:instance('cohort-search-instance')/cohortName"/>

                    <!-- Rerun the queries, so that current results are shown.
                         Only do this if configuration is set. -->
                    <xf:action if="xxf:instance('view-parameters-instance')/staticParameters/cityEHRCohortSearch/rerunSearchOnLoad='true'">
                        <xf:dispatch name="rerun-cohort-searches" target="main-model">
                            <xxf:context name="termSet" select="xxf:instance('cohort-search-instance')/searchTerms/term"/>
                        </xf:dispatch>
                    </xf:action>

                    <!-- If queries weren't rerun, then none of them can be selected -->
                    <xf:action if="xxf:instance('view-parameters-instance')/staticParameters/cityEHRCohortSearch/rerunSearchOnLoad!='true'">
                        <!-- Deselect all terms -->
                        <xf:action xxf:iterate="xxf:instance('cohort-search-instance')/searchTerms/term">
                            <xxf:variable name="term" select="."/>
                            <xf:setvalue ref="$term/selected" value="false()"/>
                        </xf:action>
                        <!-- Reset aggregated results -->
                        <xf:dispatch name="aggregate-patient-set" target="main-model"/>
                    </xf:action>

                    <!-- Now reset the term and searchType so that a new term is prepared for the next search -->
                    <xf:setvalue ref="xxf:instance('control-instance')/currentTerm" value="''"/>
                    <xf:dispatch name="clear-query-parameters" target="main-model">
                        <xxf:context name="id" select="xxf:instance('control-instance')/currentTerm"/>
                        <xxf:context name="searchType" select="''"/>
                        <xxf:context name="searchSubType" select="''"/>
                        <xxf:context name="specialtyIRI" select="xxf:instance('cohort-search-parameters')/term/specialtyIRI"/>
                    </xf:dispatch>

                    <!-- Check active combine searches -->
                    <xf:dispatch name="set-active-searches" target="main-model"/>

                    <!-- Set editStatus -->
                    <xf:setvalue ref="xxf:instance('control-instance')/editStatus" value="'unedited'"/>

                    <!-- Refresh the bindings on the viewControlsActions-model,
                         Also forces xforms-value-changed on cohortName -->
                    <xf:action>
                        <xf:recalculate model="viewControlsActions-model"/>
                        <xf:rebuild model="viewControlsActions-model"/>
                    </xf:action>

                </xf:action>
            </xf:submission>




            <!-- ========= Cohort Search Parameters Instance ================================== 
                 ============================================================================== -->

            <!-- Template used to store the empty cohort-search-parameter instance.
                 Used to reset the parameters in clear-query-parameters -->
            <xf:instance id="cohort-search-parameters-template">
                <parameters/>
            </xf:instance>

            <!-- Cohort search parameters holds the parameters for the current search 
                 <query> holds the parameters of the query set by the user and sent to eXist
                 <term> is the template for search terms that are populated and added as children of <searchTerms> in the cohort-search-instance
            -->
            <xf:instance id="cohort-search-parameters">
                <parameters>
                    <!-- template for search terms
                         the result is a string containing a list of patientIds, separated by the defined separator
                         Contains an element <parameters/> that holds all the other query parameters when executed.
                    -->
                    <term>
                        <selected>false</selected>
                        <expanded>true</expanded>
                        <id/>
                        <specialtyIRI/>
                        <searchLocation displayName=""/>
                        <searchType/>
                        <searchSubType/>
                        <description><!-- X is Y--></description>
                        <shortDescription><!-- Created by user --></shortDescription>
                        <xquery><!-- Full xQuery submitted to the database --></xquery>
                        <xqueryWhere><!-- [selector for resource (composition) with parameters matching entry/elements specified] --></xqueryWhere>
                        <xqueryEffectiveTime><!-- [selector for effectiveTime] --></xqueryEffectiveTime>
                        <xqueryLet><!-- [selector for entry and supplementary data set (organizer) based on id of the entry] in enumerated class searches only --></xqueryLet>
                        <xqueryReturn><!-- sub categories for supplementary data set items in enumerated class searches only --></xqueryReturn>
                        <combineSet/>
                        <result/>
                        <count/>
                        <percentage/>
                        <categorySet>
                            <!-- terms are inserted here (recursive) for subcategories of search with enumerated class -->
                        </categorySet>
                        <parameters>
                            <!-- All other elements in cohort-search-parameters are inserted here when the query is executed -->
                        </parameters>
                    </term>

                    <!-- General query parameters -->
                    <query>
                        <id><!--For Supplementary Data queries--></id>
                        <comparatorType/>
                        <searchEntry displayName="" type="" code=""/>
                        <searchTerm2 displayName="" type="" code=""/>
                        <searchTerm3 displayName="" type="" code=""/>
                        <searchTerm4 displayName="" type="" code=""/>
                        <searchTerm5 displayName="" type="" code=""/>
                        <searchTermDate1 displayName=""/>
                        <searchTermDate2 displayName=""/>
                        <searchOperator1 selection="" displayName=""/>
                        <searchOperator2 selection="" displayName=""/>
                        <ageUnits/>
                        <suppDataSet/>
                        <suppDataQuery/>
                        <searchScope/>
                        <searchContext displayName=""/>
                        <effectiveTime/>
                        <effectiveTime2/>
                        <effectiveTimeComparator selection="" displayName=""/>
                        <effectiveTimeComparator2 displayName=""/>
                        <age type="xs:integer"/>
                        <age2 type="xs:integer"/>
                        <ageComparator selection="" displayName=""/>
                        <ageComparator2 displayName=""/>
                        <searchHitCount1 type="xs:integer"/>
                        <searchHitCount2 type="xs:integer"/>
                        <searchHitCountComparator selection="" displayName=""/>
                        <searchHitCountComparator2 displayName=""/>
                    </query>

                    <!-- template for search categories -->
                    <categorySet>
                        <term>
                            <selected>false</selected>
                            <id/>
                            <categoryId/>
                            <description><!-- X is Y--></description>
                            <result/>
                            <count/>
                        </term>
                    </categorySet>

                    <!-- Selection list for  search context -->
                    <searchContextSelection>
                        <item value="dummy" displayName="dummy"/>
                    </searchContextSelection>

                    <!-- Set of element queries for a given entry.
                         These are used for the input of all element data, including for demographics queries. -->
                    <elementQuery>
                        <!-- <query> </query> -->
                    </elementQuery>

                    <!-- Template query for 'or' on element values -->
                    <elementValueOr>
                        <query>
                            <comparatorType/>
                            <searchEntry displayName="" type="" code=""/>
                            <searchTerm2 displayName="" type="" code=""/>
                            <searchTerm3 displayName="" type="" code=""/>
                            <searchTerm4 displayName="" type="" code=""/>
                            <searchTerm5 displayName="" type="" code=""/>
                            <searchOperator1 selection="" displayName=""/>
                            <searchOperator2 selection="" displayName=""/>
                        </query>
                    </elementValueOr>

                    <!-- Set of elements that can be selected for an entry.
                         Uses the <element/> template -->
                    <elementSelection>
                        <!--
                        <element id="" displayName="" elementIRI="" elementDisplayName="" type="" elementType="" clusterId="" clusterDisplayName=""/>
                        -->
                    </elementSelection>
                    <element id="" displayName="" elementIRI="" elementDisplayName="" type="" elementType="" clusterId="" clusterDisplayName=""/>


                    <suppDataQuery><!-- Set of <query> elements made for all supplementary data sets in the entry (may be more than one)--></suppDataQuery>

                    <enumeratedClassSelection>
                        <elementQueryPosition/>
                        <class/>
                        <entryNode/>
                        <classDisplayName/>
                        <selectedNode displayName=""/>
                        <suppDataSetId/>
                        <suppDataSet/>
                        <suppDataQuery><!-- Set of <query> elements for the Supplementary Data of the selected class node --></suppDataQuery>
                        <!-- Template query element for the Supplementary Data -->
                        <query>
                            <id/>
                            <origin/>
                            <comparatorType/>
                            <searchEntry displayName="" type="" code=""/>
                            <searchTerm2 displayName="" type="" code=""/>
                            <searchTerm3 displayName="" type="" code=""/>
                            <searchTerm4 displayName="" type="" code=""/>
                            <searchTerm5 displayName="" type="" code=""/>
                            <searchOperator1 selection="" displayName=""/>
                            <searchOperator2 selection="" displayName=""/>
                        </query>
                    </enumeratedClassSelection>

                    <!-- Template for graph
                    -->
                    <graph bgcolor="e1f5ff" caption="" subCaption="" yaxismaxvalue="0" yaxisminvalue="0" yaxisname="" xaxisname=""
                        decimalPrecision="0" hovercapbg="FFFFDD" hovercapborder="000000" numdivlines="0" numberSuffix="">
                        <set name="Template" value="10" color="FFFFFF"/>
                        <trendlines>
                            <line startvalue="10" displayValue="" color="FFFFFF" thickness="1" isTrendZone="0"/>
                        </trendlines>
                    </graph>


                </parameters>
            </xf:instance>

            <!-- Bindings for query parameters -->
            <xf:bind nodeset="xxf:instance('cohort-search-parameters')/query">
                <xf:bind nodeset="searchTermDate1" type="xs:date"/>
                <xf:bind nodeset="searchTermDate2" type="xs:date"/>
                <xf:bind nodeset="effectiveTime" type="xs:date"/>
                <xf:bind nodeset="effectiveTime2" type="xs:date"/>
            </xf:bind>
            <xf:bind nodeset="xxf:instance('cohort-search-parameters')/elementQuery/query/*">
                <xf:bind nodeset=".[@type='xs:integer']" type="xs:integer"/>
                <xf:bind nodeset=".[@type='xs:double']" type="xs:double"/>
                <xf:bind nodeset=".[@type='xs:date']" type="xs:date"/>
                <xf:bind nodeset=".[@type='xs:date']" type="xs:date"/>
                <xf:bind nodeset=".[@type='xs:string']" type="xs:string"/>
                <xf:bind nodeset=".[@type='xs:boolean']" type="xs:boolean"/>
            </xf:bind>
            <xf:bind nodeset="xxf:instance('cohort-search-parameters')/elementQuery/query/query/*">
                <xf:bind nodeset=".[@type='xs:integer']" type="xs:integer"/>
                <xf:bind nodeset=".[@type='xs:double']" type="xs:double"/>
                <xf:bind nodeset=".[@type='xs:date']" type="xs:date"/>
                <xf:bind nodeset=".[@type='xs:date']" type="xs:date"/>
                <xf:bind nodeset=".[@type='xs:string']" type="xs:string"/>
                <xf:bind nodeset=".[@type='xs:boolean']" type="xs:boolean"/>
            </xf:bind>

            <!-- Bindings for dynamic change of suppDataSet -->
            <xf:bind nodeset="xxf:instance('cohort-search-parameters')/enumeratedClassSelection/suppDataQuery/query">
                <xf:bind nodeset="*[@type='xs:date']" type="xs:date"/>
                <xf:bind nodeset="*[@type='xs:dateTime']" type="xs:dateTime"/>
                <xf:bind nodeset="*[@type='xs:time']" type="xs:time"/>
                <xf:bind nodeset="*[@type='xs:string']" type="xs:string"/>
                <xf:bind nodeset="*[@type='xs:integer']" type="xs:integer"/>
                <xf:bind nodeset="*[@type='xs:double']" type="xs:double"/>
                <xf:bind nodeset="*[@type='xs:boolean']" type="xs:boolean"/>
            </xf:bind>


            <!-- === Initialise the query parameters for different types of cohort search === 
                 These are called when each type of query is selected
                 ============================================================================ -->

            <!-- Application defined action to clear query parameters.
                 All parameters are reset to the ones in cohort-search-parameters-template
                 i.e. cohort-search-parameters as defined in the main-model before it was loaded
                 
                 After clearing parameters, reset the id/searchType/searchSubType that were passed
                 -->
            <xf:action ev:event="clear-query-parameters">
                <xxf:variable name="id" select="event('id')"/>
                <xxf:variable name="searchType" select="event('searchType')"/>
                <xxf:variable name="searchSubType" select="event('searchSubType')"/>
                <xxf:variable name="specialtyIRI" select="event('specialtyIRI')"/>

                <!-- Replace cohort-search-parameters with template created on page load -->
                <xf:insert nodeset="xxf:instance('cohort-search-parameters')" origin="xxf:instance('cohort-search-parameters-template')"/>

                <!-- Set parameters passed - all are in term -->
                <xf:setvalue ref="xxf:instance('cohort-search-parameters')/term/id" value="$id"/>
                <xf:setvalue ref="xxf:instance('cohort-search-parameters')/term/searchType" value="$searchType"/>
                <xf:setvalue ref="xxf:instance('cohort-search-parameters')/term/searchSubType" value="$searchSubType"/>
                <xf:setvalue ref="xxf:instance('cohort-search-parameters')/term/specialtyIRI" value="$specialtyIRI"/>


                <!-- The old way - until 2016-05-10 -->
                <!--
                <xf:action
                    xxf:iterate="xxf:instance('cohort-search-parameters')/query/*[name(.) !='searchScope']">
                    <xf:setvalue ref="." value="''"/>
                    <xf:setvalue ref="./@displayName" value="''"/>
                    <xf:setvalue ref="./@selection" value="''"/>
                </xf:action>
                <xf:delete nodeset="xxf:instance('cohort-search-parameters')/elementQuery/*"
                />
                -->
            </xf:action>

            <!-- Application defined action to initialize query parameters for searchType blank (''), Demographics or Administration 
                 Uses the searchType and searchSubType, which must already be set.
                 -->
            <xf:action ev:event="initialize-query-parameters">
                <!-- Get the searchType and searchSubType (if appropriate) -->
                <xxf:variable name="searchType" select="xxf:instance('cohort-search-parameters')/term/searchType"/>
                <xxf:variable name="searchSubType" select="xxf:instance('cohort-search-parameters')/term/searchSubType"/>

                <!-- Set specialty for term to the current user selection -->
                <xxf:variable name="specialtyIRI" select="xxf:instance('viewControls-input-instance')/select[@id='specialty']/@value"/>

                <!-- Clear parameters before setting up for the new query.-->
                <xf:dispatch name="clear-query-parameters" target="main-model">
                    <xxf:context name="id" select="xxf:instance('control-instance')/currentTerm"/>
                    <xxf:context name="searchType" select="$searchType"/>
                    <xxf:context name="searchSubType" select="$searchSubType"/>
                    <xxf:context name="specialtyIRI" select="$specialtyIRI"/>
                </xf:dispatch>

                <!-- Demographics - Gender 
                     Set searchEntry, 2, 3 and comparator. 
                     **Note the assumption here that the gender element is an enumeratedValue type -->
                <xf:action if="$searchType='Demographics' and $searchSubType='Gender'">
                    <!-- Get the gender entry/element from the configuration file -->
                    <xxf:variable name="genderEntry"
                        select="xxf:instance('application-parameters-instance')/patientRegistration/administrativeGenderCode/@entry"/>
                    <xxf:variable name="genderElement"
                        select="xxf:instance('application-parameters-instance')/patientRegistration/administrativeGenderCode/@element"/>

                    <!-- First search term is gender entry.
                         Don't assume here that the dictionary for the current specialty contains the gender entry -->
                    <xf:setvalue ref="xxf:instance('cohort-search-parameters')/query/searchEntry" value="$genderEntry"/>
                    <xxf:variable name="genderEntryDisplayName"
                        select="xxf:instance('application-parameters-instance')/patientRegistration/administrativeGenderCode/@displayName"/>
                    <xf:setvalue ref="xxf:instance('cohort-search-parameters')/query/searchEntry/@displayName" value="$genderEntryDisplayName"/>

                    <!-- Comparator is first for enumerated values -->
                    <xxf:variable name="firstOption"
                        select="xxf:instance('control-instance')/queryDefinition/comparators/comparator[@type='#CityEHR:ElementProperty:enumeratedValue']/options/item[1]"/>
                    <xf:setvalue ref="xxf:instance('cohort-search-parameters')/query/searchOperator1/@selection" value="$firstOption/@selection"/>
                    <xf:setvalue ref="xxf:instance('cohort-search-parameters')/query/searchOperator1" value="$firstOption/@value"/>
                    <xf:setvalue ref="xxf:instance('cohort-search-parameters')/query/searchOperator1/@displayName" value="$firstOption/@displayName"/>

                    <!-- Second search term is gender element.
                         displayName for gender element is always blank. -->
                    <xf:setvalue ref="xxf:instance('cohort-search-parameters')/query/searchTerm2" value="$genderElement"/>
                    <xf:setvalue ref="xxf:instance('cohort-search-parameters')/query/searchTerm2/@displayName" value="''"/>

                    <!-- Third search term is first gender value from data dictionary -->
                    <xxf:variable name="elementValue"
                        select="xxf:instance('dictionary-instance')/iso-13606:elementCollection/iso-13606:element[@extension=$genderElement]/iso-13606:data[1]/@value"/>
                    <xf:setvalue ref="xxf:instance('cohort-search-parameters')/query/searchTerm3" value="$elementValue"/>
                    <xxf:variable name="elementValueDisplayName"
                        select="xxf:instance('dictionary-instance')/iso-13606:elementCollection/iso-13606:element[@extension=$genderElement]/iso-13606:data[1]/@displayName"/>
                    <xf:setvalue ref="xxf:instance('cohort-search-parameters')/query/searchTerm3/@displayName" value="$elementValueDisplayName"/>

                    <!-- Set the selection of the gender value -->

                </xf:action>

                <!-- Demographics - date of birth or age -->
                <xf:action if="$searchType='Demographics' and $searchSubType=('DoB','Age')">

                    <xxf:variable name="birthTimeEntry" select="xxf:instance('application-parameters-instance')/patientRegistration/birthTime/@entry"/>
                    <xxf:variable name="birthTimeElement"
                        select="xxf:instance('application-parameters-instance')/patientRegistration/birthTime/@element"/>

                    <!-- Set up searchEntry
                         Displayname of search term is Age or Dob.
                         Add units if searching on age -->
                    <xf:setvalue ref="xxf:instance('cohort-search-parameters')/query/searchEntry" value="$birthTimeEntry"/>
                    <xf:setvalue ref="xxf:instance('cohort-search-parameters')/query/searchEntry/@displayName"
                        value="xxf:instance('control-instance')/searchSubType/options[@searchType=$searchType]/item[@value=xxf:instance('cohort-search-parameters')/term/searchSubType]/@displayName"/>
                    <xf:setvalue ref="xxf:instance('cohort-search-parameters')/query/searchEntry/@displayName"
                        value="if ($searchSubType='Age') then concat(.,' ',xxf:instance('control-instance')/queryDefinition/ageUnits/options/option[1]/@displayName) else ."/>

                    <!-- Set ageUnits -->
                    <xf:setvalue ref="xxf:instance('cohort-search-parameters')/query/ageUnits"
                        value="xxf:instance('control-instance')/queryDefinition/ageUnits/options/option[1]/@value"/>

                    <!-- Comparator - always comparing xs:date, even for age -->
                    <xxf:variable name="firstOption"
                        select="xxf:instance('control-instance')/queryDefinition/comparators/comparator[@type='xs:date']/options/item[1]"/>
                    <xf:setvalue ref="xxf:instance('cohort-search-parameters')/query/searchOperator1/@selection" value="$firstOption/@selection"/>
                    <xf:setvalue ref="xxf:instance('cohort-search-parameters')/query/searchOperator1" value="$firstOption/@value"/>
                    <xf:setvalue ref="xxf:instance('cohort-search-parameters')/query/searchOperator1/@displayName" value="$firstOption/@displayName"/>

                    <!-- searchTerm2 is the element -->
                    <xf:setvalue ref="xxf:instance('cohort-search-parameters')/query/searchTerm2" value="$birthTimeElement"/>
                    <xxf:variable name="elementDisplayName"
                        select="xxf:instance('dictionary-instance')/iso-13606:entryCollection/iso-13606:entry/cda:component/cda:observation[cda:id/@root=$birthTimeEntry]/cda:value[@root=$birthTimeElement]/@displayName"/>
                    <xf:setvalue ref="xxf:instance('cohort-search-parameters')/query/searchTerm2/@displayName" value="$elementDisplayName"/>

                </xf:action>

                <!-- Administration - Author 
                    Set searchTerm3 and comparator. 
                    **Note there are only authors to select if there is at least one care team -->
                <xf:action if="$searchType='Administration' and $searchSubType='Author'">
                    <!-- Comparator is first for enumerated values -->
                    <xxf:variable name="firstOption"
                        select="xxf:instance('control-instance')/queryDefinition/comparators/comparator[@type='#CityEHR:ElementProperty:enumeratedValue']/options/item[1]"/>
                    <xf:setvalue ref="xxf:instance('cohort-search-parameters')/query/searchOperator1/@selection" value="$firstOption/@selection"/>
                    <xf:setvalue ref="xxf:instance('cohort-search-parameters')/query/searchOperator1" value="$firstOption/@value"/>
                    <xf:setvalue ref="xxf:instance('cohort-search-parameters')/query/searchOperator1/@displayName" value="$firstOption/@displayName"/>

                    <!-- Third search term is first value from userSelection list -->
                    <xxf:variable name="user" select="xxf:instance('userSelection-instance')/user[1]"/>
                    <xf:setvalue ref="xxf:instance('cohort-search-parameters')/query/searchTerm3" value="$user/@value"/>
                    <xf:setvalue ref="xxf:instance('cohort-search-parameters')/query/searchTerm3/@displayName" value="$user/@displayName"/>

                    <!-- Query context selection depends on the searchEntry, which is blank so will return all compositions for the specialty -->
                    <xf:dispatch name="set-query-context-selection" target="main-model"/>

                </xf:action>

                <!-- Administration - EffectiveTime -->
                <xf:action if="$searchType='Administration' and $searchSubType='EffectiveTime'">
                    <!-- Set up searchEntry
                         Displayname of search term is Effective time -->
                    <xf:setvalue ref="xxf:instance('cohort-search-parameters')/query/searchEntry/@displayName"
                        value="xxf:instance('control-instance')/queryDefinition/demographics/options/item[@selection=xxf:instance('cohort-search-parameters')/term/searchSubType]/@displayName"/>

                    <!-- Comparator - comparing xs:date -->
                    <xxf:variable name="firstOption"
                        select="xxf:instance('control-instance')/queryDefinition/comparators/comparator[@type='xs:date']/options/item[1]"/>
                    <xf:setvalue ref="xxf:instance('cohort-search-parameters')/query/searchOperator1/@selection" value="$firstOption/@selection"/>
                    <xf:setvalue ref="xxf:instance('cohort-search-parameters')/query/searchOperator1" value="$firstOption/@value"/>
                    <xf:setvalue ref="xxf:instance('cohort-search-parameters')/query/searchOperator1/@displayName" value="$firstOption/@displayName"/>

                    <!-- Query context selection depends on the searchEntry, which is blank so will return all compositions for the specialty -->
                    <xf:dispatch name="set-query-context-selection" target="main-model"/>
                </xf:action>

            </xf:action>

            <!-- Application defined action to initialize query parameters for observation search
                 Set searchEntry, set the elementSelection then set-observation-query. 
                 These are set up whenever observation search is selected.
                 -->
            <xf:action ev:event="initialize-observation-query">
                <xxf:variable name="defaultObservation"
                    select="xxf:sort(xxf:instance('dictionary-instance')/iso-13606:entryCollection/iso-13606:entry[@cityEHR:cohortSearch='#CityEHR:EntryProperty:Searchable']/cda:component/cda:observation[cda:code[@codeSystem='cityEHR']/@displayName!=''],cda:code/@displayName,'text', 'ascending')[1]"/>
                <xf:setvalue ref="xxf:instance('cohort-search-parameters')/query/searchEntry" value="$defaultObservation/cda:id/@extension"/>
                <!-- No need to do these two here, since they are invoked by the value-changed event on xxf:instance('cohort-search-parameters')/query/searchEntry -->
                <!--
                <xf:dispatch name="set-observation-element-selection" target="main-model"/>
                <xf:dispatch name="set-observation-query" target="main-model"/>
                -->
            </xf:action>

            <!-- Application defined action to initialize query parameters for PrimarySearch entries
                 Set searchEntry, set the elementSelection then set-observation-query. 
                 These are set up whenever a PrimarySearch search is selected.
                 
                 Note that searchEntry is set as the root of the entry (not the extension which is what will be needed for searching the xmlstore 
            -->
            <xf:action ev:event="initialize-primarySearch-query">
                <xxf:variable name="entryIRI" select="xxf:instance('cohort-search-parameters')/term/searchType"/>
                <xxf:variable name="entry"
                    select="xxf:instance('dictionary-instance')/iso-13606:entryCollection/iso-13606:entry[cda:component/cda:observation/cda:id/@root=$entryIRI]"/>
                <xf:setvalue ref="xxf:instance('cohort-search-parameters')/query/searchEntry" value="$entryIRI"/>
                <xf:setvalue ref="xxf:instance('cohort-search-parameters')/query/searchEntry/@displayName"
                    value="$entry/cda:code[@codeSystem='cityEHR']/@displayName"/>

                <!-- No need to do these two here, since they are invoked by the value-changed event on xxf:instance('cohort-search-parameters')/query/searchEntry -->
                <!--
                <xf:dispatch name="set-observation-element-selection" target="main-model"/>
                <xf:dispatch name="set-observation-query" target="main-model"/>
                -->
            </xf:action>

            <!-- Application defined action to initialize enumerated class query -->
            <xf:action ev:event="initialize-enumeratedClass-query">
                <!-- Now set what is needed -->
                <xxf:variable name="class"
                    select="xxf:instance('dictionary-instance')/iso-13606:elementCollection/iso-13606:element[@extension=xxf:instance('cohort-search-parameters')/term/searchType][@cityEHR:elementType='#CityEHR:ElementProperty:enumeratedClass']"/>

                <!-- Comparator is first for enumerated class -->
                <xxf:variable name="firstOption"
                    select="xxf:instance('control-instance')/queryDefinition/comparators/comparator[@type='#CityEHR:ElementProperty:enumeratedClass']/options/item[1]"/>
                <xf:setvalue ref="xxf:instance('cohort-search-parameters')/query/searchOperator1/@selection" value="$firstOption/@selection"/>
                <xf:setvalue ref="xxf:instance('cohort-search-parameters')/query/searchOperator1" value="$firstOption/@value"/>
                <xf:setvalue ref="xxf:instance('cohort-search-parameters')/query/searchOperator1/@displayName" value="$firstOption/@displayName"/>
            </xf:action>


            <!-- === Set the query parameters for different types of cohort search === 
                 These are called when parameters for the query change
                 ============================================================================ -->

            <!-- Application defined action to set context for the search.
                 Finds the set of compositions containing the entry specified in searchEntry 
                 If searchEntry is not set (='') then finds all compositions
                 Uses the dictionary entry for the specialty folder.
            -->
            <xf:action ev:event="set-query-context-selection">
                <xxf:variable name="entry" select="xxf:instance('cohort-search-parameters')/query/searchEntry"/>
                <!-- Get folder -->
                <xxf:variable name="specialtyFolder"
                    select="xxf:instance('dictionary-instance')/iso-13606:folderCollection/iso-13606:folder[@code=xxf:instance('cohort-search-parameters')/term/specialtyIRI]"/>
                <!-- Get compositions for the entry -->
                <xxf:variable name="compositionSet"
                    select="if ($entry!='') then distinct-values($specialtyFolder/iso-13606:composition[iso-13606:entry=$entry]/@code) else distinct-values($specialtyFolder/iso-13606:composition/@code)"/>
                <!-- Clear the context selection -->
                <xf:delete nodeset="xxf:instance('cohort-search-parameters')/searchContextSelection/item"/>

                <xf:action xxf:iterate="xxf:instance('view-parameters-instance')/staticParameters/cityEHRCohortSearch/searchContext/options/item">
                    <xxf:variable name="item" select="."/>
                    <xf:insert context="xxf:instance('cohort-search-parameters')/searchContextSelection" origin="$item"/>
                </xf:action>

                <!-- Set up the context selection list -->
                <xf:action xxf:iterate="$specialtyFolder/iso-13606:composition[@code=$compositionSet]">
                    <xxf:variable name="composition" select="."/>
                    <xf:insert nodeset="xxf:instance('cohort-search-parameters')/searchContextSelection/item" at="last()" position="after"/>
                    <xf:setvalue ref="xxf:instance('cohort-search-parameters')/searchContextSelection/item[last()]/@value" value="$composition/@code"/>
                    <xf:setvalue ref="xxf:instance('cohort-search-parameters')/searchContextSelection/item[last()]/@displayName"
                        value="$composition/@displayName"/>

                </xf:action>

            </xf:action>

            <!-- Application defined action to set query parameters for age search
                
                The actual searches are performed on dates of birth, calculated from the current date.
                The terms and comparator used for the search are different from the ones entered.
                
                The time interval for the search is found by multiplying the age by the ageUnits and casting to xs:dayTimeDuration or xs:yearMonthDuration
                interval1 is based on the first age entered by the user (searchTerm3), interval2 is based on the second (searchTerm4)
                
                If searching for 
                1. age=X then DoB is > current-date() - (interval1+1) and =< current-date() - interval1
                2. age!=X then DoB is =< current-date() - (interval1+1) and > current-date() - interval1
                3. age<X then DoB > current-date() - interval1
                4. age=<X then DoB >= current-date() - (interval1+1)
                5. age>X then DoB < current-date() - (interval1+1)
                6. age>=X then DoB =< current-date() - interval1
                7. age in range X to Y then DoB < current-date() - interval1 and >= current-date() - (interval2+1)
                
                The ages for the search are set in searchTerm3 and searchTerm4.
                The dates of birth for the search are set in searchTermDate1 and searchTermDate2
            -->
            <xf:action ev:event="set-age-query">
                <!-- Settings depend on the selection of the comparator (as listed above) -->
                <xxf:variable name="comparator" select="xxf:instance('cohort-search-parameters')/query/searchOperator1/@selection"/>

                <!-- Set value/displayName for searchOperator1 and searchOperator2.
                     The selected value has been set for 'age' and we need to get the comparator(s) -->
                <xxf:variable name="searchOperator"
                    select="xxf:instance('control-instance')/queryDefinition/comparators/comparator[@type='age']/options/item[@selection=$comparator]"/>
                <xf:setvalue ref="xxf:instance('cohort-search-parameters')/query/searchOperator1" value="$searchOperator/@value"/>
                <xf:setvalue ref="xxf:instance('cohort-search-parameters')/query/searchOperator1/@displayName" value="$searchOperator/@displayName"/>

                <xf:setvalue ref="xxf:instance('cohort-search-parameters')/query/searchOperator2"
                    value="if (exists($searchOperator/@value2)) then $searchOperator/@value2 else ''"/>

                <!-- Search operator2 display is based on xs:integer (since that is what age is expressed as), rather than the second operator that is actually used -->
                <xf:setvalue ref="xxf:instance('cohort-search-parameters')/query/searchOperator2/@displayName"
                    value="if ($comparator='7') then xxf:instance('control-instance')/queryDefinition/comparators/comparator[@type='xs:integer']/options/item[@selection='7']/@displayName2 else ''"/>

                <!-- Make sure the search terms are sensible integers -->
                <xf:setvalue ref="xxf:instance('cohort-search-parameters')/query/searchTerm3"
                    value="if (. castable as xs:integer) then xs:integer(.) else 0"/>
                <xf:setvalue ref="xxf:instance('cohort-search-parameters')/query/searchTerm3/@displayName"
                    value="xxf:instance('cohort-search-parameters')/query/searchTerm3"/>

                <xf:setvalue ref="xxf:instance('cohort-search-parameters')/query/searchTerm4"
                    value="if (. castable as xs:integer and xs:integer(.) gt xs:integer(xxf:instance('cohort-search-parameters')/query/searchTerm3)) then xs:integer(.) else xs:integer(xxf:instance('cohort-search-parameters')/query/searchTerm3)"/>
                <xf:setvalue ref="xxf:instance('cohort-search-parameters')/query/searchTerm4/@displayName"
                    value="if ($comparator='7') then xxf:instance('cohort-search-parameters')/query/searchTerm4 else ''"/>

                <!-- Get the interval units for calculations -->
                <xxf:variable name="intervalUnits" select="xxf:instance('cohort-search-parameters')/query/ageUnits"/>
                <!--
                <xxf:variable name="intervalUnits" select="if ($selectedIntervalUnits castable as xs:dayTimeDuration) then xs:dayTimeDuration($selectedIntervalUnits) else xs:yearMonthDuration($selectedIntervalUnits)"/>
                -->

                <!-- Search term entered is an integer number of ageUnits - now need to set searchTermDate1, based on current date -->
                <xxf:variable name="selectedInterval"
                    select="if ($comparator=('1','2','4','5')) then (xxf:instance('cohort-search-parameters')/query/searchTerm3 + 1) else xxf:instance('cohort-search-parameters')/query/searchTerm3"/>
                <xxf:variable name="interval"
                    select="if ($intervalUnits castable as xs:dayTimeDuration) then xs:dayTimeDuration(xs:dayTimeDuration($intervalUnits) * $selectedInterval)  else xs:yearMonthDuration(xs:yearMonthDuration($intervalUnits) * $selectedInterval)"/>

                <!--
                <xxf:variable name="interval" select="if ($intervalUnits castable as xs:dayTimeDuration) then xs:dayTimeDuration(xs:dayTimeDuration($intervalUnits) * $selectedInterval)  else xs:yearMonthDuration(xs:yearMonthDuration($intervalUnits) * $selectedInterval)"/>
                <xf:setvalue ref="xxf:instance('cohort-search-parameters')/query/searchTermDate1" value="if ($interval castable as xs:dayTimeDuration) then (current-date() - xs:dayTimeDuration($interval)) else (current-date() - xs:yearMonthDuration($interval))"/>
-->
                <xf:setvalue ref="xxf:instance('cohort-search-parameters')/query/searchTermDate1" value="current-date() - $interval"/>

                <!-- And now searchTermDate2 -->
                <xxf:variable name="selectedInterval2"
                    select="if ($comparator=('1','2')) then xxf:instance('cohort-search-parameters')/query/searchTerm3 else (xxf:instance('cohort-search-parameters')/query/searchTerm4 + 1)"/>
                <xxf:variable name="interval2"
                    select="if ($intervalUnits castable as xs:dayTimeDuration) then xs:dayTimeDuration(xs:dayTimeDuration($intervalUnits) * $selectedInterval2)  else xs:yearMonthDuration(xs:yearMonthDuration($intervalUnits) * $selectedInterval2)"/>
                <xf:setvalue ref="xxf:instance('cohort-search-parameters')/query/searchTermDate2" value="current-date() - $interval2"/>

            </xf:action>

            <!-- Application defined action to set query parameters for observation search
                 Sets the elements in elementSelection, for the entry specified in searchEntry
                 Note that this uses the root attribute to locate the entry.
                 
                 Element template in cohort-search-parameters is of the form:
                 
                 <element id="" displayName="" elementIRI="" elementDisplayName="" type="" elementType="" clusterId="" clusterDisplayName=""/>
                 
                -->
            <xf:action ev:event="set-observation-element-selection">
                <xxf:variable name="entry"
                    select="xxf:instance('dictionary-instance')/iso-13606:entryCollection/iso-13606:entry/cda:component/cda:observation[cda:id/@root=xxf:instance('cohort-search-parameters')/query/searchEntry]"/>

                <!-- Clear the element selection -->
                <xf:delete nodeset="xxf:instance('cohort-search-parameters')/elementSelection/*"/>
                <!-- Add the elements.
                     These are all descendant cda:value that have a value attribute (clusters have no value attribute) 
                     Use the element from the cohort-search-parameters-template (2018-01-22 - ensures change to @elementIRI is enforced for saved searches) -->
                <xxf:variable name="elementTemplate" select="xxf:instance('cohort-search-parameters-template')/element"/>
                <xf:action xxf:iterate="$entry/descendant::cda:value[@value]">
                    <xxf:variable name="dictionaryElement" select="."/>
                    <xxf:variable name="count" select="position()"/>

                    <!-- Insert template element -->
                    <xf:insert context="xxf:instance('cohort-search-parameters')/elementSelection" nodeset="element" origin="$elementTemplate"
                        at="last()" position="after"/>
                    <xxf:variable name="element" select="xxf:instance('cohort-search-parameters')/elementSelection/element[last()]"/>

                    <xf:setvalue ref="$element/@id" value="$count"/>
                    <xf:setvalue ref="$element/@elementIRI" value="$dictionaryElement/@extension"/>
                    <xf:setvalue ref="$element/@elementDisplayName"
                        value="if ($dictionaryElement/@cityEHR:elementDisplayName!='') then $dictionaryElement/@cityEHR:elementDisplayName else concat('(',substring-after($dictionaryElement/@extension,'#ISO-13606:Element:'),')')"/>
                    <xf:setvalue ref="$element/@type" value="$dictionaryElement/@xsi:type"/>
                    <xf:setvalue ref="$element/@elementType" value="$dictionaryElement/@cityEHR:elementType"/>
                    <xf:setvalue ref="$element/@clusterId"
                        value="if (exists($dictionaryElement/../@extension)) then $dictionaryElement/../@extension else ''"/>
                    <xf:setvalue ref="$element/@clusterDisplayName"
                        value="if (exists($element/../@cityEHR:elementDisplayName)) then $dictionaryElement/../@cityEHR:elementDisplayName else ''"/>

                    <xf:setvalue ref="$element/@displayName"
                        value="if ($element/@clusterDisplayName!='') then concat($element/@clusterDisplayName,' - ',$element/@elementDisplayName) else $element/@elementDisplayName"
                    />
                </xf:action>

            </xf:action>

            <!-- Application defined action to set query parameters for observation search
                 Sets up the observation query, based on the entry specified in searchEntry
                 Creates the set of elementSelection
                 Note that the entry is selected on the root of its id (extension may have multiple entries in the dictionary if there are aiiased entries)
                 Set searchTerm, 2, 3 and comparator. 
                 These are set up whenever observation search entry is changed.
            -->
            <xf:action ev:event="set-observation-query">
                <xxf:variable name="entry"
                    select="xxf:instance('dictionary-instance')/iso-13606:entryCollection/iso-13606:entry/cda:component/cda:observation[cda:id/@root=xxf:instance('cohort-search-parameters')/query/searchEntry]"/>
                <xf:setvalue ref="xxf:instance('cohort-search-parameters')/query/searchEntry/@displayName"
                    value="$entry/cda:code[@codeSystem='cityEHR']/@displayName"/>

                <!-- Set up the element selection for the entry -->
                <xf:dispatch name="set-observation-element-selection" target="main-model"/>

                <!-- Set the selection for query context -->
                <xf:dispatch name="set-query-context-selection" target="main-model"/>

                <!-- Clear the elementQuery -->
                <xf:delete nodeset="xxf:instance('cohort-search-parameters')/elementQuery/*"/>

                <!-- Add the first (required) element query -->
                <xf:dispatch name="add-element-query" target="main-model"/>

            </xf:action>

            <!-- Application defined action to add a query to elementQuery.
                 Needed when an observation query is set or when the user adds a new element query
                -->
            <xf:action ev:event="add-element-query">
                <!-- Insert new query into elementQuery, using the template -->
                <xf:insert context="xxf:instance('cohort-search-parameters')/elementQuery" nodeset="query"
                    origin="xxf:instance('cohort-search-parameters-template')/query" at="last()" position="after"/>
                <xxf:variable name="query" select="xxf:instance('cohort-search-parameters')/elementQuery/query[last()]"/>

                <!-- Get the initial element and set the element query -->
                <xxf:variable name="initialElementIRI" select="xxf:instance('cohort-search-parameters')/elementSelection/element[1]/@elementIRI"/>
                <xf:dispatch name="set-element-condition" target="main-model">
                    <xxf:context name="query" select="$query"/>
                    <xxf:context name="elementIRI" select="$initialElementIRI"/>
                </xf:dispatch>

            </xf:action>


            <!-- Application defined action to set query parameters for an element condition.
                 The element condition is in a query element, which is passed in as a parameter.
                 The elementIRI is passed as the other parameter
                 
                 xxf:instance('cohort-search-parameters')/elementSelection must already be set
                 (by set-observation-element-selection) so that the element can be found using $elementIRI
                 
                 searchTerm3 is the element and its type is set to the elementType
                 the comparator(s) are set from queryDefinition/comparators, depending on the type of the element 
                 searchTerm4 and searchTerm5 are the values of the element and their type is set to the xs:type of the element
                 These are therefore bound to the correct type for data input.
            
            -->
            <xf:action ev:event="set-element-condition">
                <xxf:variable name="query" select="event('query')"/>
                <xxf:variable name="elementIRI" select="event('elementIRI')"/>

                <!-- Remove any additional 'or' conditions on the element value -->
                <xf:delete nodeset="$query/query"/>

                <!-- Get the element from the elementSelection -->
                <xxf:variable name="element" select="xxf:instance('cohort-search-parameters')/elementSelection/element[@elementIRI=$elementIRI]"/>

                <!-- Can only set the condition if the element is found (it is a system error if not) -->
                <xf:action if="exists($element)">
                    <!-- Not using clusters any more 2018-01-20 -->
                    <!--
                    <xf:setvalue ref="xxf:instance('cohort-search-parameters')/query/searchTerm2" value="$element/@clusterId"/>
                    <xf:setvalue ref="xxf:instance('cohort-search-parameters')/query/searchTerm2/@displayName"
                    value="$element/@clusterDisplayName"/>
                -->

                    <xf:setvalue ref="$query/searchTerm3" value="$element/@elementIRI"/>
                    <xf:setvalue ref="$query/searchTerm3/@displayName" value="$element/@elementDisplayName"/>
                    <xf:setvalue ref="$query/searchTerm3/@type" value="$element/@elementType"/>
                    <xf:setvalue ref="$query/searchTerm4/@type" value="$element/@type"/>
                    <xf:setvalue ref="$query/searchTerm4/@displayName" value="''"/>
                    <xf:setvalue ref="$query/searchTerm4" value="''"/>
                    <xf:setvalue ref="$query/searchTerm5/@type" value="$element/@type"/>
                    <xf:setvalue ref="$query/searchTerm5/@displayName" value="''"/>
                    <xf:setvalue ref="$query/searchTerm5" value="''"/>

                    <!-- Set the initial comparator (based on type of first element).
                    Get the type of the comparator and the selections for that type
                    Get the first selection in the options
                    Set the @selection, value and @displayName for searchOperator1 -->
                    <xxf:variable name="initialComparatorType"
                        select="if ($element/@elementType=('#CityEHR:ElementProperty:enumeratedValue','#CityEHR:ElementProperty:enumeratedCalculatedValue','#CityEHR:ElementProperty:enumeratedDirectory','#CityEHR:ElementProperty:enumeratedClass')) then $element/@elementType else $element/@type"/>
                    <xxf:variable name="searchOperator1"
                        select="xxf:instance('control-instance')/queryDefinition/comparators/comparator[@type=$initialComparatorType]/options/item[1]"/>
                    <xf:setvalue ref="$query/searchOperator1/@selection" value="$searchOperator1/@selection"/>
                    <xf:setvalue ref="$query/searchOperator1" value="$searchOperator1/@value"/>
                    <xf:setvalue ref="$query/searchOperator1/@displayName" value="$searchOperator1/@displayName"/>

                    <!-- Assume here that the first option for the comparator does not have a value2 attribute -->

                    <!-- Reset the initial search term if this is an enumeratedValue or enumeratedDirectory.
                         But not if the searchOperator is 'any' -->
                    <xf:action
                        if="$searchOperator1/@value!='any' and $element/@elementType = ('#CityEHR:ElementProperty:enumeratedValue','#CityEHR:ElementProperty:enumeratedCalculatedValue','#CityEHR:ElementProperty:enumeratedDirectory')">
                        <xxf:variable name="elementValues"
                            select="if ($element/@elementType=('#CityEHR:ElementProperty:enumeratedValue','#CityEHR:ElementProperty:enumeratedCalculatedValue')) then xxf:instance('dictionary-instance')/iso-13606:elementCollection/iso-13606:element[@root=$element/@elementIRI]/iso-13606:data
                        else if ($element/@elementType='#CityEHR:ElementProperty:enumeratedDirectory') then xxf:instance('directoryElements-instance')/iso-13606:elementCollection/iso-13606:element[@root=$element/@elementIRI]/iso-13606:data
                        else ()"/>
                        <xf:setvalue ref="$query/searchTerm4" value="$elementValues[1]/@value"/>
                        <xf:setvalue ref="$query/searchTerm4/@displayName" value="$elementValues[1]/@displayName"/>
                    </xf:action>

                    <!-- Reset the initial search term if this is an enumeratedClass -->
                    <!-- Actually, blanks set above are OK -->
                    <!--
                    <xf:action if="$element/@elementType='#CityEHR:ElementProperty:enumeratedClass'">
                    <xf:setvalue ref="$query/searchTerm4" value="''"/>
                    <xf:setvalue ref="$query/searchTerm4/@displayName" value="''"/>
                    </xf:action>
                -->

                    <!-- Reset the initial selection if this is a boolean
                         But not if the searchOperator is 'any' -->
                    <xf:action
                        if="$searchOperator1/@value!='any' and $element/@elementType='#CityEHR:ElementProperty:simpleType' and $element/@type='xs:boolean'">
                        <xxf:variable name="parameters" select="xxf:instance('view-parameters-instance')"/>
                        <xf:setvalue ref="$query/searchTerm4" value="false()"/>
                        <xf:setvalue ref="$query/searchTerm4/@displayName"
                            value="if (exists($parameters/displayBoolean/value[@value=$query/searchTerm4])) then $parameters/displayBoolean/value[@value=$query/searchTerm4] else false()"
                        />
                    </xf:action>

                    <!-- Rebuild, so that bindings on data types are made -->
                    <xf:rebuild model="main-model"/>

                </xf:action>

                <!-- System error if element not found in elementSelection-->
                <xf:action if="not(exists($element))">
                    <!-- TBD -->
                </xf:action>

            </xf:action>



            <!-- === Application defined action to perform the search. === 
                     Activated when the user presses the Search button.
                     The parameters for the search have been set by the user in xxf:instance('cohort-search-parameters')/query
                     A new search term is built in xxf:instance('cohort-search-parameters')/term and is added to the once the query has been executed
                 ======================================================== -->

            <xf:action ev:event="perform-cohort-search">
                <xxf:variable name="term" select="event('term')"/>

                <!-- Reset the system status -->
                <xf:setvalue ref="xxf:instance('view-parameters-instance')/systemStatus" value="''"/>

                <xxf:variable name="parameters" select="$term/parameters"/>

                <!-- Various search parameters -->
                <xxf:variable name="searchType" select="$term/searchType"/>
                <xxf:variable name="searchSubType" select="$term/searchSubType"/>
                <xxf:variable name="searchQuery" select="$parameters/query"/>
                <xxf:variable name="searchScope" select="$parameters/query/searchScope"/>
                <xxf:variable name="searchStartTime" select="current-time()"/>

                <!-- Reset the search term, ready to be built -->
                <xf:setvalue ref="$term/xquery" value="''"/>
                <xf:setvalue ref="$term/xqueryWhere" value="''"/>
                <xf:setvalue ref="$term/xqueryEffectiveTime" value="''"/>
                <xf:setvalue ref="$term/xqueryLet" value="''"/>
                <xf:setvalue ref="$term/xqueryReturn" value="''"/>

                <xf:setvalue ref="$term/description" value="''"/>
                <xf:setvalue ref="$term/result" value="''"/>
                <xf:setvalue ref="$term/count" value="''"/>
                <xf:setvalue ref="$term/percentage" value="''"/>
                <xf:delete nodeset="$term/categorySet/*"/>

                <!-- == Search type is Combine - result is formed by set operations == -->
                <xf:action if="$term[searchType='Combine']">

                    <!-- Set details of combine search.
                         The ids of the two terms to be combined are held in searchEntry and searchTerm2-->
                    <xf:setvalue ref="$term/combineSet"
                        value="string-join(($parameters/query/searchEntry,$parameters/query/searchTerm2),xxf:instance('view-parameters-instance')/resultSeparator)"/>

                    <!-- Set the search parameters
                         Get the two terms to be combined - the ids of the two terms are held in searchEntry and searchTerm2 -->
                    <xxf:variable name="term1" select="xxf:instance('cohort-search-instance')/searchTerms/term[id = $parameters/query/searchEntry]"/>
                    <xxf:variable name="term2" select="xxf:instance('cohort-search-instance')/searchTerms/term[id = $parameters/query/searchTerm2]"/>

                    <xf:dispatch name="setCombineSearchDescription" target="main-model">
                        <xxf:context name="term" select="$term"/>
                        <xxf:context name="descriptionList" select="($term1/description,$term2/description)"/>
                        <xxf:context name="searchOperator" select="$parameters/query/searchOperator1"/>
                    </xf:dispatch>

                    <!-- Get results sets for combination 
                        These results sets are sequences of patient identifiers -->

                    <xxf:variable name="results1" select="$term1/result"/>
                    <xxf:variable name="results2" select="$term2/result"/>

                    <xxf:variable name="resultsSet1" select="tokenize($results1,xxf:instance('view-parameters-instance')/resultSeparator)"/>
                    <xxf:variable name="resultsSet2" select="tokenize($results2,xxf:instance('view-parameters-instance')/resultSeparator)"/>

                    <!-- Operator is OR i.e. union of 1 and 2 
                        Returns set of patients that are in either resultsSet1 or resultsSet2 -->
                    <xf:action if="$parameters/query[searchOperator1='OR']">

                        <xf:dispatch name="combineCohortsWithOR" target="main-model">
                            <xxf:context name="resultsSetList" select="($results1,$results2)"/>
                            <xxf:context name="term" select="$term"/>
                        </xf:dispatch>

                    </xf:action>

                    <!-- Operator is AND i.e. intersection of 1 and 2 
                        Returns set of patients that are in both results1 and results2 -->
                    <xf:action if="$parameters/query[searchOperator1='AND']">

                        <xf:dispatch name="combineCohortsWithAND" target="main-model">
                            <xxf:context name="resultsSetList" select="($results1,$results2)"/>
                            <xxf:context name="term" select="$term"/>
                        </xf:dispatch>

                    </xf:action>

                    <!-- Operator is (AND) NOT i.e. complement of 2 in 1 
                         Returns set of patients in resultsSet1 that are not in resultsSet2 -->
                    <xf:action if="$parameters/query[searchOperator1='NOT']">
                        <xf:dispatch name="combineCohortsWithANDNOT" target="main-model">
                            <xxf:context name="resultsSetList" select="($results1,$results2)"/>
                            <xxf:context name="term" select="$term"/>
                        </xf:dispatch>
                    </xf:action>


                    <!-- Operator is percentage 
                         Returns number of patients in resultsSet1 as a percentage of number in resultsSet2 -->
                    <xf:action if="$parameters/query[searchOperator1='PERCENTAGE']">
                        <xf:dispatch name="combineCohortsAsPercentage" target="main-model">
                            <xxf:context name="resultsSetList" select="($results1,$results2)"/>
                            <xxf:context name="term" select="$term"/>
                        </xf:dispatch>
                    </xf:action>

                </xf:action>

                <!-- == Search type is CombineSelected - result is formed by set operations == -->
                <xf:action if="$term[searchType='CombineSelected']">

                    <!-- Get results sets for combination
                         These results sets are sequences of patient identifiers 
                         Need the set of results sets for each selected search term, including empty sets (so that AND works) -->
                    <xxf:variable name="selectedTermIds" select="tokenize($term/combineSet,xxf:instance('view-parameters-instance')/resultSeparator)"/>
                    <xxf:variable name="selectedTerms"
                        select="xxf:instance('cohort-search-instance')/searchTerms/descendant::term[id=$selectedTermIds]"/>
                    <xxf:variable name="resultsSetList" select="$selectedTerms/result"/>


                    <!-- Set the search description -->
                    <xxf:variable name="descriptionList" select="$selectedTerms/description"/>
                    <xf:dispatch name="setCombineSearchDescription" target="main-model">
                        <xxf:context name="term" select="$term"/>
                        <xxf:context name="descriptionList" select="$descriptionList"/>
                        <xxf:context name="searchOperator" select="$parameters/query/searchOperator1"/>
                    </xf:dispatch>

                    <!-- Operator is OR i.e. union of all results.
                         The list of resultsSetList is a list of strings with patientId separated by @@@
                         Join the ones that aren't empty (otherwise we will get an extra empty token caused by @@@@@@)
                         Returns set of patients that are in any selected resultsSet -->
                    <xf:action if="$parameters/query[searchOperator1='OR']">

                        <xf:dispatch name="combineCohortsWithOR" target="main-model">
                            <xxf:context name="resultsSetList" select="$resultsSetList"/>
                            <xxf:context name="term" select="$term"/>
                        </xf:dispatch>

                    </xf:action>

                    <!-- Operator is AND i.e. intersection of all results 
                         Returns set of patients that are in every selected resultsSet 
                         Start by setting result to the first results set in the list.
                         Then iterate through the remaining results sets and return the matches in both -->
                    <xf:action if="$parameters/query[searchOperator1='AND']">
                        <xf:dispatch name="combineCohortsWithAND" target="main-model">
                            <xxf:context name="resultsSetList" select="$resultsSetList"/>
                            <xxf:context name="term" select="$term"/>
                        </xf:dispatch>
                    </xf:action>

                </xf:action>

                <!-- == Search type is IncludeCohort - result is formed retrieving the saved cohort ==  -->
                <xf:action if="$term[searchType='IncludeCohort']">
                    <xf:dispatch name="includeCohort" target="main-model">
                        <xxf:context name="term" select="$term"/>
                        <xxf:context name="cohortHandle" select="$parameters/query/searchEntry"/>
                    </xf:dispatch>
                </xf:action>

                <!-- === Search type is Observation or PrimarySearch entry  ===
                         Need to iterate through all the element search clauses -->
                <xf:action if="$term[searchType='Observation' or starts-with(searchType,'#ISO-13606:Entry')]">
                    <!-- Set the start of the search term description, ready to be built -->
                    <xf:setvalue ref="$term/description" value="normalize-space($parameters/query/searchEntry/@displayName)"/>

                    <!-- Set up the let clause (only needed if the search includes supplementary data set items).
                        This means there must be at least one supplementary data set with a search specified (has a value set for searchTerm4) -->
                    <xf:action if="exists($parameters/elementQuery/query/suppDataQuery/query[searchTerm4!=''])">
                        <xxf:variable name="entryLet"
                            select="concat('let $entry := $resource/descendant::cda:entry','[descendant::cda:id/@extension=''',$parameters/query/searchEntry,'''] ')"/>
                        <xxf:variable name="suppDataLet"
                            select="'let $suppDataEntrySet := $entry/descendant::cda:organizer[@classCode=''EnumeratedClassEntry'']/cda:component[2]/cda:organizer/cda:component/cda:observation'"/>
                        <xf:setvalue ref="$term/xqueryLet" value="concat($entryLet,$suppDataLet)"/>
                    </xf:action>

                    <!-- Set up the where clause and return clauses.
                         Use decendant observation so that both single and multiple entries are found (including observations within organizers for enumerated class elements with suppData).
                         Note that this relies on templates in the ME being removed when compositions are published.
                         The values may be not be quoted for types xs:integer ot xs:double, but must be quoted for all others -->

                    <!-- Set start of where clause. 
                         This finds the observation specified in searchEntry -->
                    <xxf:variable name="observationWhere"
                        select="concat('/descendant::cda:observation[cda:id/@extension eq ''',$parameters/query/searchEntry,''']')"/>
                    <xf:setvalue ref="$term/xqueryWhere" value="$observationWhere"/>

                    <!-- Iterate through the search terms for each element, building xqueryWhere and xQueryReturn 
                         The first element is the descendant::cda:value of the specified cda:observation
                         Subsequent elements are found relative to that 
                           up to 2016-03-22 - these go back to the ancestor cda:entry so that multiple entries are found in context.
                           from 2016-03-22 these go back to the ancestor cda:observation - multiple element clauses must be on the same observation (otherwise multiple entries can give the wrong results) -->
                    <xf:action xxf:iterate="$parameters/elementQuery/query">
                        <xxf:variable name="query" select="."/>
                        <xxf:variable name="position" select="position()"/>
                        <xxf:variable name="descriptionConnector" select="if ($position gt 1) then ' AND ' else ''"/>

                        <xxf:variable name="elementPath"
                            select="if ($position gt 1) then '/ancestor::cda:observation/descendant::cda:value' else '/descendant::cda:value'"/>

                        <!-- Set the query description (up to the element displayName) -->
                        <xf:setvalue ref="$term/description"
                            value="normalize-space(concat(.,' ',$descriptionConnector,$query/searchTerm2/@displayName,' ',$query/searchTerm3/@displayName))"/>

                        <!-- If the search is for the simple value of the element (i.e. any elements that are not enumeratedClass type)
                             Also check that searchOperator1 is set (which it always should be) -->
                        <xf:action if="$query/searchTerm3[@type!='#CityEHR:ElementProperty:enumeratedClass'] and $query/searchOperator1!=''">

                            <!-- First extend xqueryWhere to include the path to the element value -->
                            <xf:setvalue ref="$term/xqueryWhere" value="concat(.,$elementPath,'[@extension eq ''',$query/searchTerm3,''']')"/>

                            <!-- Predicate start for value conditions -->
                            <xf:setvalue ref="$term/xqueryWhere" value="concat(.,'[')"/>

                            <!-- Get all the value conditions -->
                            <xxf:variable name="elementValueConditions" select="($query | $query/query)"/>

                            <!-- More than one condition, then enclose description in ( ) and connect with 'or' -->
                            <xxf:variable name="conditionDescriptionPrefix" select="if (count($elementValueConditions) gt 1) then '(' else ''"/>
                            <xxf:variable name="conditionDescriptionSuffix" select="if (count($elementValueConditions) gt 1) then ')' else ''"/>

                            <!-- Iterate through the value conditions.
                                 Multiple conditions are joined with 'or' -->
                            <xf:action xxf:iterate="$elementValueConditions">
                                <xxf:variable name="valueCondition" select="."/>
                                <xxf:variable name="conditionPosition" select="position()"/>
                                <xxf:variable name="conditionConnector" select="if ($conditionPosition gt 1) then ' or ' else ''"/>
                                <xxf:variable name="conditionDescriptionConnector" select="if ($conditionPosition gt 1) then ' OR ' else ' '"/>

                                <!-- Only process condition if the operator is set (which it should be) -->
                                <xf:action if="$valueCondition/searchOperator1 != ''">

                                    <!-- This is using quotes for all values, except numbers which are number('..') -->
                                    <xxf:variable name="openQuote"
                                        select="if ($valueCondition/searchTerm4/@type = ('xs:integer','xs:double')) then 'number(''' else '''' "/>
                                    <xxf:variable name="closeQuote"
                                        select="if ($valueCondition/searchTerm4/@type = ('xs:integer','xs:double')) then ''')' else '''' "/>

                                    <!-- The value attribute needs to be compared as a number for numeric types -->
                                    <xxf:variable name="valueAttribute"
                                        select="if ($valueCondition/searchTerm4/@type = ('xs:integer','xs:double')) then 'number(@value)' else '@value' "/>

                                    <!-- Value condition epxpression
                                     Check condition for 'not equal' since ne and != don't work as expected.
                                     The value comparison uses number() for numeric types.
                                     Also set the special case where the operator is 'any' which is looking for any value that is not blank ('') -->
                                    <xxf:variable name="condition1"
                                        select="if ($valueCondition/searchOperator1='any') then 'not(@value='''')' else if ($valueCondition/searchOperator1=('ne','!=')) then concat('not(',$valueAttribute,' eq ',$openQuote,$valueCondition/searchTerm4,$closeQuote,')') else concat($valueAttribute,' ',$valueCondition/searchOperator1,' ',$openQuote,$valueCondition/searchTerm4,$closeQuote)"/>
                                    <xxf:variable name="condition2"
                                        select="if ($valueCondition/searchOperator2='') then '' else if ($valueCondition/searchOperator2=('ne','!=')) then concat(' and not(',$valueAttribute,' eq ',$openQuote,$valueCondition/searchTerm5,$closeQuote,')') else concat(' and ',$valueAttribute,' ',$valueCondition/searchOperator2,' ',$openQuote,$valueCondition/searchTerm5,$closeQuote)"/>

                                    <xf:setvalue ref="$term/xqueryWhere" value="concat(.,$conditionConnector,'(',$condition1,$condition2,')')"/>

                                    <!-- Set the query description for the condition -->
                                    <xf:setvalue ref="$term/description"
                                        value="normalize-space(concat(.,$conditionDescriptionConnector,$valueCondition/searchOperator1/@displayName,' ',$valueCondition/searchTerm4/@displayName, ' ',$valueCondition/searchOperator2/@displayName,' ',$valueCondition/searchTerm5/@displayName))"
                                    />
                                </xf:action>
                            </xf:action>

                            <!-- Predicate end for value conditions -->
                            <xf:setvalue ref="$term/xqueryWhere" value="concat(.,']')"/>
                        </xf:action>


                        <!-- If the search is for node in a class hierarchy -->
                        <!-- Get the list of level leaf nodes for the Class to search.
                                In the data dictionary look for:
                                    element defined by searchTerm3
                                    from this get the enumerated class and find the class hierachy
                                    then get the set of leaf node descendants of searchTerm4/@code which defines the value of the node being searched for
                                    
                                    To get the details of the element defined by searchTerm3, find the matching @root in the dictionary entry like:
                                    <element root="#ISO-13606:Element:BacterialDiagnosis" extension="#ISO-13606:Element:BacterialDiagnosis" displayName="Bacterial" cityEHR:elementType="#CityEHR:ElementProperty:enumeratedClass">
                                    <value code="#CityEHR:Class:Diagnosis" codeSystem="CityEHR" value="#CityEHR:Class:Diagnosis:BacterialInfection" displayName="Bacterial Infection"/>
                                    </element>
                                
                                searchTerm4/@code the CityEHR class code for a node, set either by selecting the node or by specifying its code (e.g. SNOMED) and looking up the term
                                BUT if searchTerm4/@code is itself a leaf node then it doesn't have any descendents               
                                Leaf nodes have an entry in the dictionary like:
                                
                                <element root="cityEHR" extension="#CityEHR:Class:Diagnosis" displayName="Diagnosis" cityEHR:elementType="#CityEHR:ElementProperty:enumeratedValue">
                                <value code="#CityEHR:Class:Diagnosis:Autoimmunedisease" codeSystem="CityEHR" value="Auto immune disease" cityEHR:suppDataSet=""/>
                                </element>
                                
                                All terms (leaf or not) have an entry like:
                                
                                <element root="cityEHR" extension="#CityEHR:Class:Diagnosis" displayName="Diagnosis" cityEHR:elementType="#CityEHR:ElementProperty:enumeratedClass">
                                <value code="#CityEHR:Class:Diagnosis:Autoimmunedisease" codeSystem="CityEHR" value="Auto immune disease" displayName="Auto immune disease" cityEHR:suppDataSet="">
                                <value code="#CityEHR:Class:Diagnosis:ConnectiveTissueDisease" codeSystem="CityEHR" value="Connective Tissue Disease" displayName="Connective Tissue Disease" cityEHR:suppDataSet=""/> 
                                    </value>
                                </element>
                                
                                Leaf nodes have no child <value> elements in this structure.
                                
                                
                                <xxf:variable name="enumerationClass" select="xxf:instance('dictionary-instance')/iso-13606:elementCollection/iso-13606:element[@extension=$term/searchType][@cityEHR:elementType='#CityEHR:ElementProperty:enumeratedClass']/descendant::iso-13606:data"/>
                                
                                **** NEW - Search for the selected node and all its decendants. Although enumeratedClass values should only be recorded at level 3
                                this caters for the situation where a node was recorded as a level 3 but then got children added in the model to make in a level 2 node
                                
                            -->

                        <xf:action if="$query/searchTerm3[@type='#CityEHR:ElementProperty:enumeratedClass']">
                            <xxf:variable name="elementDefinition"
                                select="xxf:instance('dictionary-instance')/iso-13606:elementCollection/iso-13606:element[@root=$query/searchTerm3][@cityEHR:elementType='#CityEHR:ElementProperty:enumeratedClass']"/>
                            <xxf:variable name="elementExtension" select="$elementDefinition/@extension"/>
                            <xxf:variable name="elementValueClass" select="$elementDefinition/iso-13606:data[1]/@code"/>

                            <xxf:variable name="elementClassHierarchy"
                                select="xxf:instance('dictionary-instance')/iso-13606:elementCollection/iso-13606:element[@extension=$elementValueClass][@cityEHR:elementType='#CityEHR:ElementProperty:enumeratedClass']"/>
                            <xxf:variable name="descendantNodes"
                                select="$elementClassHierarchy/descendant::iso-13606:data[@value=$query/searchTerm4/@code]/descendant::iso-13606:data/@value"/>

                            <xxf:variable name="nodeSet"
                                select="if (count($descendantNodes) gt 0) then string-join($descendantNodes,xxf:instance('view-parameters-instance')/resultSeparator) else $query/searchTerm4/@code"/>
                            <xxf:variable name="elementValue"
                                select="concat(xxf:instance('view-parameters-instance')/resultSeparator,$nodeSet,xxf:instance('view-parameters-instance')/resultSeparator)"/>

                            <!-- Set up the clauses to find the entry and sub-categories of results matching any supplementary data set queries
                                
                                We are searching for the entry and terms in its supplementary data set, represented in an organizer as follows:
                                The entry id/@extension does not matter - we are only interested in the value from the enumeratedClass
                                
                                <entry cityEHR:Sequence="Unranked" cityEHR:rendition="#CityEHR:EntryProperty:Form" cityEHR:initialValue="#CityEHR:EntryProperty:Default" cityEHR:labelWidth="16">
                                    <organizer moodCode="EVN" classCode="EnumeratedClassEntry">
                                        <component>
                                            <observation>
                                                <typeId root="cityEHR" extension="#HL7-CDA:Observation"/>
                                                <id root="cityEHR" extension="#ISO-13606:Entry:Diagnosis"/>
                                                <code code="xxxx" codeSystem="2.16.840.1.113883.2.1.3.2.4.15" displayName="Diagnosis"/>
                                                <value xsi:type="xs:string" value="#CityEHR:Class:Diagnosis:MadCowDisease" units="" code="#CityEHR:Class:Diagnosis:MadCowDisease" codeSystem="CityEHR" displayName="Mad Cow Disease" cityEHR:elementDisplayName="Primary" extension="#ISO-13606:Element:Diagnosis" root="cityEHR" cityEHR:elementType="#CityEHR:ElementProperty:enumeratedClass" cityEHR:valueRequired="#CityEHR:ElementProperty:Required" cityEHR:suppDataSet="#ISO-13606:Entry:Infection"/>
                                            </observation>
                                        </component>
                                        <component>
                                            <organizer>
                                                <component>
                                                    <observation>
                                                        <typeId root="cityEHR" extension=""/>
                                                        <id root="cityEHR" extension="#ISO-13606:Entry:Infection" cityEHR:origin="#ISO-13606:Element:Diagnosis"/>
                                                        <code code="xxxx" codeSystem="2.16.840.1.113883.2.1.3.2.4.15" displayName="Infection"/>
                                                        <value xsi:type="xs:string" value="First episode" displayName="First episode" units="" code="#ISO-13606:Data:Episode:Firstepisode" codeSystem="cityEHR" extension="#ISO-13606:Element:Episode" root="cityEHR" cityEHR:elementType="#CityEHR:ElementProperty:enumeratedValue" cityEHR:elementDisplayName="Episode"/>
                                                        <value xsi:type="xs:string" value="Acute" displayName="Acute" units="" code="#ISO-13606:Data:ClinicalCourse:Acute" codeSystem="cityEHR" extension="#ISO-13606:Element:ClinicalCourse" root="cityEHR" cityEHR:elementType="#CityEHR:ElementProperty:enumeratedValue" cityEHR:elementDisplayName="Clinical Course"/>
                                                        <value xsi:type="xs:string" value="Moderate" displayName="Moderate" units="" code="#ISO-13606:Data:Severity:Moderate" codeSystem="cityEHR" extension="#ISO-13606:Element:Severity" root="cityEHR" cityEHR:elementType="#CityEHR:ElementProperty:enumeratedValue" cityEHR:elementDisplayName="Severity"/>
                                                        <value xsi:type="xs:string" value="Suspected" displayName="Suspected" units="" code="#ISO-13606:Data:Status:Suspected" codeSystem="cityEHR" extension="#ISO-13606:Element:Status" root="cityEHR" cityEHR:elementType="#CityEHR:ElementProperty:enumeratedValue" cityEHR:elementDisplayName="Status"/>
                                                    </observation>
                                                </component>
                                            </organizer>
                                        </component>
                                    </organizer>
                                </entry>                    
                            -->

                            <!-- Set up the where clause. ***this query can be made more efficient***
                                 Search is for the @extension of the element (i.e. the recorded element, not its root definition) -->
                            <xf:action>
                                <xxf:variable name="elementWhere1" select="concat('/descendant::cda:value[@extension eq ''',$elementExtension,''']')"/>

                                <!-- searchOperator1 is set to compare the value of the node, or one of its clinical codes
                                 Comparision may be equal, 'not equal' or any.
                                 Search from a code is always 'eq' so interested in searchOperator1 != 'ne' 
                                 Set elementWhere2/3 to cater for each case -->

                                <xxf:variable name="elementWhere2"
                                    select="if ($query/searchOperator1='any') then '[not(@value='''')]' else if ($query/searchOperator1!='ne') then concat('[contains(''',$elementValue,''',@value)]') else ''"/>
                                <xxf:variable name="elementWhere3"
                                    select="if ($query/searchOperator1='ne') then concat('[not(contains(''',$elementValue,''',@value))]') else ''"/>

                                <!-- Set the complete where clause -->
                                <xf:setvalue ref="$term/xqueryWhere" value="concat(.,$elementWhere1,$elementWhere2,$elementWhere3)"/>
                            </xf:action>

                            <!-- Set up return clause if there are supplementary data set items to categorise -** need to set categoryTest properly.
                                 The categoryTest matches the supplementary data set value that meets conditions in the search term.
                                 This currently checks that ANY CDA value matches the criteria - should it only match values that are for the suppData of the correct origin? 
                                 This is only an issue for entries that contain more than one enumeratedClass element and two or more of those elements have duplicate supplementary data set items. -->
                            <xf:action xxf:iterate="$query/suppDataQuery/query[searchTerm4!='']">
                                <xxf:variable name="suppDataQuery" select="."/>
                                <xxf:variable name="categoryTest"
                                    select="concat('$suppDataEntrySet/descendant::cda:value[@extension eq ''',$suppDataQuery/searchTerm3,'''][@value ',$suppDataQuery/searchOperator1,'''',$suppDataQuery/searchTerm4,''']')"/>
                                <xf:setvalue ref="$term/xqueryReturn"
                                    value="concat(.,'{if (',$categoryTest,') then &lt;term id=''',$suppDataQuery/id,'''/>  else ()}')"/>
                                <!-- Add the category to the search term.
                                     This is done before the search is run and then the results for each category are filled in from the returned items -->
                                <xf:insert context="$term/categorySet" origin="$parameters/categorySet/term"/>
                                <xxf:variable name="term" select="$term/categorySet/term[1]"/>
                                <xf:setvalue ref="$term/categoryId" value="$suppDataQuery/id"/>
                                <xf:setvalue ref="$term/description"
                                    value="normalize-space(concat(.,$descriptionConnector,$suppDataQuery/searchTerm2/@displayName,' ',$suppDataQuery/searchTerm3/@displayName,' ',$suppDataQuery/searchOperator1/@displayName,' ',$suppDataQuery/searchTerm4/@displayName, ' ',$suppDataQuery/searchOperator2/@displayName,' ',$suppDataQuery/searchTerm5/@displayName))"
                                />
                            </xf:action>

                        </xf:action>
                        <!-- End of enumeratedClass type -->


                    </xf:action>
                    <!-- End iteration through elements -->

                    <!-- Set up effectiveTime clause.
                         Need to cater for the fact that effectiveTime is recorded as xs:dateTime, whereas the search criteria are input as xs:date.
                         
                         Adjustments for:
                         
                         3. less than
                         7. greater than or equal to
                         
                         <xxf:variable name="adjustedEffectiveTimeToCriteria"
                         select="if ($effectiveTimeCriteriaInput/@to castable as xs:date) then xs:string(xs:date($effectiveTimeCriteriaInput/@to)+xs:dayTimeDuration('P1D')) else ''"/>
                         
                         -->
                    <xf:action if="$parameters/query/effectiveTimeComparator !='' and $parameters/query/effectiveTime !=''">

                        <xxf:variable name="entryEffectiveTime1"
                            select="concat('[ancestor::cda:ClinicalDocument/cda:effectiveTime/@value ',$parameters/query/effectiveTimeComparator,' ''',$parameters/query/effectiveTime,''']')"/>
                        <xxf:variable name="entryEffectiveTime2"
                            select="if ($parameters/query/effectiveTimeComparator2='' or $parameters/query/effectiveTime2='') then '' else concat('[ancestor::cda:ClinicalDocument/cda:effectiveTime/@value ',$parameters/query/effectiveTimeComparator2,' ''',$parameters/query/effectiveTime2,''']')"/>

                        <xf:setvalue ref="$term/xqueryEffectiveTime" value="concat($entryEffectiveTime1,$entryEffectiveTime2)"/>

                    </xf:action>


                    <!-- Now set up the query instance -->
                    <xf:setvalue ref="xxf:instance('cohort-query-instance')/whereClause" value="$term/xqueryWhere"/>
                    <xf:setvalue ref="xxf:instance('cohort-query-instance')/effectiveTimeClause" value="$term/xqueryEffectiveTime"/>
                    <xf:setvalue ref="xxf:instance('cohort-query-instance')/letClause" value="$term/xqueryLet"/>
                    <xf:setvalue ref="xxf:instance('cohort-query-instance')/returnClause" value="$term/xqueryReturn"/>

                </xf:action>

                <!-- === Search type is Demographics or Administration === 
                    Five cases here:
                    Gender
                    DoB
                    Age
                    EffectiveTime
                    Author
                -->
                <xf:action if="$searchType=('Demographics','Administration')">

                    <!-- The type of search -  Gender | Age | DoB | EffectiveTime | Author -->
                    <xxf:variable name="searchSubType" select="$term/searchSubType"/>

                    <!-- Set comparator -->
                    <xxf:variable name="comparator" select="$parameters/query/searchOperator1"/>

                    <!-- Search for Gender -->
                    <xf:action if="$searchSubType='Gender'">
                        <!-- Set the search term description -->
                        <xf:setvalue ref="$term/description"
                            value="concat($parameters/query/searchEntry/@displayName,' ',$parameters/query/searchOperator1/@displayName,' ',$parameters/query/searchTerm3/@displayName)"/>

                        <!-- Set up the where clause. 
                             Assumes range index is being used.
                        -->
                        <!-- Set entryIRI and elementIRI -->
                        <xxf:variable name="entryIRI" select="$parameters/query/searchEntry"/>
                        <xxf:variable name="elementIRI" select="$parameters/query/searchTerm2"/>

                        <!-- Set value -->
                        <xxf:variable name="value" select="$parameters/query/searchTerm3"/>

                        <!-- Query finds value first, since this is most restrictive on results found for enumerated values
                             Set value predicate for 'not equal' since ne and != don't work as expected
                             Also set the special case where the comparator is 'any' -->
                        <xxf:variable name="valuePredicate"
                            select="if ($comparator='any') then '[not(@value='''')]' else if ($comparator=('ne','!=')) then concat('[not(@value eq ''',$value,''')]') else concat('[@value ',$comparator,' ''',$value,''']')"/>
                        <xf:setvalue ref="$term/xqueryWhere"
                            value="concat('/descendant::cda:value',$valuePredicate,'[@extension eq ''',$elementIRI,''']','[ancestor::cda:observation/cda:id/@extension eq ''',$entryIRI,''']')"/>


                        <xf:setvalue ref="xxf:instance('cohort-query-instance')/whereClause" value="$term/xqueryWhere"/>
                    </xf:action>

                    <!-- Search for DoB or Age.
                         Assuming here that the range index is being used.
                         Without this, then this search needs to be set up in the same way as gender -->
                    <xf:action if="$searchSubType=('Age','DoB')">
                        <!-- Set the search term description -->
                        <xxf:variable name="firstTermDescription"
                            select="if ($searchSubType = 'Age') then $parameters/query/searchTerm3/@displayName else $parameters/query/searchTermDate1/@displayName"/>
                        <xxf:variable name="secondTermDescription"
                            select="if ($searchSubType = 'Age') then $parameters/query/searchTerm4/@displayName else $parameters/query/searchTermDate2/@displayName"/>
                        <xf:setvalue ref="$term/description"
                            value="concat($parameters/query/searchEntry/@displayName,' ',$parameters/query/searchOperator1/@displayName,' ',$firstTermDescription,' ',$parameters/query/searchOperator2/@displayName,' ',$secondTermDescription)"/>

                        <!-- Set entryIRI and elementIRI -->
                        <xxf:variable name="entryIRI" select="$parameters/query/searchEntry"/>
                        <xxf:variable name="elementIRI" select="$parameters/query/searchTerm2"/>

                        <!-- Set value  -->
                        <xxf:variable name="value" select="$parameters/query/searchTermDate1"/>

                        <!-- Set second value and comparator -->
                        <xxf:variable name="value2" select="$parameters/query/searchTermDate2"/>
                        <xxf:variable name="comparator2" select="$parameters/query/searchOperator2"/>


                        <!-- Set up the where clause  - look for birthTime.
                             Exclude any birthTime that is not set
                             For dates its more efficient to filter by the extension first
                             When setting , also look for the special case when  the comparator is 'any' -->
                        <xxf:variable name="valuePredicate"
                            select="if ($comparator='any') then '[not(@value='''')]' else if ($comparator=('ne','!=') and $searchSubType = 'Age') then concat('[not(@value eq '''')][@value le ''',$value,''' or @value gt ''',$value2,''']') else if ($comparator=('ne','!=')) then concat('[not(@value eq '''')][not(@value eq ''',$value,''')]') else concat('[not(@value eq '''')][@value ',$comparator,' ''',$value,''']')"/>
                        <xxf:variable name="valueWhere1" select=" concat('/descendant::cda:value[@extension eq ''',$elementIRI,''']',$valuePredicate)"/>

                        <xxf:variable name="valueWhere2"
                            select="if ($comparator2='') then '' else concat('[@value ',$comparator2,' ''',$value2,''']')"/>

                        <xxf:variable name="entryWhere" select="concat('[ancestor::cda:observation/cda:id/@extension eq ''',$entryIRI,''']')"/>

                        <xf:setvalue ref="$term/xqueryWhere" value="concat($valueWhere1,$valueWhere2,$entryWhere)"/>

                        <xf:setvalue ref="xxf:instance('cohort-query-instance')/whereClause" value="$term/xqueryWhere"/>
                    </xf:action>

                    <!-- Search for effectiveTime -->
                    <xf:action if="$searchSubType='EffectiveTime'">

                        <!-- Search context -->
                        <xxf:variable name="searchContext" select="$parameters/query/searchContext"/>
                        <xxf:variable name="searchContextDisplayName"
                            select="if ($searchContext!='') then $parameters/query/searchContext/@displayName else ''"/>
                        <xxf:variable name="searchContextDescription"
                            select="if ($searchContextDisplayName!='') then concat(xxf:instance('view-parameters-instance')/staticParameters/cityEHRCohortSearch/contextDescription/@prefix,$searchContextDisplayName,xxf:instance('view-parameters-instance')/staticParameters/cityEHRCohortSearch/contextDescription/@suffix) else ''"/>

                        <!-- Set the search term description -->
                        <xf:setvalue ref="$term/description"
                            value="concat($searchContextDescription,xxf:instance('control-instance')/searchSubType/options/item[@value='EffectiveTime']/@displayName,' ',$parameters/query/searchOperator1/@displayName,' ',$parameters/query/searchTermDate1/@displayName,' ',$parameters/query/searchOperator2/@displayName,' ',$parameters/query/searchTermDate2/@displayName)"/>

                        <!-- Set the search context - composition type -->
                        <xxf:variable name="contextWhere"
                            select="if ($parameters/query/searchContext!='') then concat('/cda:ClinicalDocument[cda:typeId/@extension=''',$parameters/query/searchContext,''']') else ''"/>

                        <!-- Searching for effectiveTime in CDA Header
                             The effectiveTime searchTermDate1 and searchTermDate2 are input as xs:date, 
                             whereas the effectiveTime recorded may be (probably is) an xs:dateTime
                             
                             For comparisions of lt or le need to add one day to the search term date and then use the lt comparator
                             This is because (e.g) a dateTime of 2016-01-27T10:39:24.238Z is greater than 2016-01-27 but less than 2016-01-28
                             For comparison of eq we need to search for dates greater than the search term and less than the search term plus one day
                             This is because we want any effective time on that day, regardless of what time.
                             -->
                        <xxf:variable name="valuePredicate"
                            select="if ($comparator='any') then '[not(@value='''')]' else if ($comparator = ('ne','!=')) then concat('[not(@value eq ''',$parameters/query/searchTermDate1,''']') else concat('[@value ',$comparator,' ''',$parameters/query/searchTermDate1,''']')"/>

                        <xxf:variable name="entryWhere1" select="$valuePredicate"/>
                        <xxf:variable name="entryWhere2"
                            select="if ($parameters/query/searchOperator2='' or $parameters/query/searchTermDate2='') then ''  else concat('[@value ',$parameters/query/searchOperator2,' ''',$parameters/query/searchTermDate2,''']')"/>

                        <xf:setvalue ref="$term/xqueryWhere" value="concat($contextWhere,'/descendant::cda:effectiveTime',$entryWhere1,$entryWhere2)"/>
                        <xf:setvalue ref="xxf:instance('cohort-query-instance')/whereClause" value="$term/xqueryWhere"/>
                    </xf:action>

                    <!-- Search for Author -->
                    <xf:action if="$searchSubType='Author'">
                        <!-- Search context -->
                        <xxf:variable name="searchContext" select="$parameters/query/searchContext"/>
                        <xxf:variable name="searchContextDisplayName"
                            select="if ($searchContext!='' and exists(xxf:instance('dictionary-instance')/descendant::iso-13606:composition[@code=$searchContext])) then (xxf:instance('dictionary-instance')/descendant::iso-13606:composition[@code=$searchContext]/@displayName)[1] else ''"/>
                        <xxf:variable name="searchContextDescription"
                            select="if ($searchContextDisplayName!='') then concat(xxf:instance('view-parameters-instance')/staticParameters/cityEHRCohortSearch/contextDescription/@prefix,$searchContextDisplayName,xxf:instance('view-parameters-instance')/staticParameters/cityEHRCohortSearch/contextDescription/@suffix) else ''"/>

                        <!-- Set the search term description -->
                        <xf:setvalue ref="$term/description"
                            value="concat($searchContextDescription,xxf:instance('control-instance')/searchSubType/options/item[@value='Author']/@displayName,' ',$parameters/query/searchOperator1/@displayName,' ',$parameters/query/searchTerm3/@displayName)"/>

                        <!-- Set the search context - composition type -->
                        <xxf:variable name="contextWhere"
                            select="if ($parameters/query/searchContext!='') then concat('/cda:ClinicalDocument[cda:typeId/@extension=''',$parameters/query/searchContext,''']') else ''"/>

                        <!-- Searching for assignedAuthor in CDA Header -->
                        <xxf:variable name="extensionPredicate"
                            select="if ($comparator = ('ne','!=')) then concat('[not(@extension eq ''',$parameters/query/searchTerm3,''')]') else concat('[@extension ',$comparator,' ''',$parameters/query/searchTerm3,''']')"/>

                        <xxf:variable name="entryWhere" select="concat('/descendant::cda:assignedAuthor/cda:id',$extensionPredicate)"/>

                        <xf:setvalue ref="$term/xqueryWhere" value="concat($contextWhere,$entryWhere)"/>
                        <xf:setvalue ref="xxf:instance('cohort-query-instance')/whereClause" value="$term/xqueryWhere"/>

                    </xf:action>

                </xf:action>


                <!-- === Set the let clauses to return effective time and age, if needed.
                         Effective time is needed if scope of search is currentData or firstData or if age criteria are set
                         Age is needed if age criteria are set in the search
                         === -->
                <xf:setvalue ref="xxf:instance('cohort-query-instance')/effectiveTimeLetClause"
                    value="if($searchScope=('currentData','firstData','minData','maxData') or $parameters/query/ageComparator != '') then xxf:instance('control-instance')/effectiveTimeLetClause else ."/>
                <xf:setvalue ref="xxf:instance('cohort-query-instance')/ageLetClause"
                    value="if ($parameters/query/ageComparator != '') then xxf:instance('control-instance')/ageLetClause else ."/>

                <!-- === Submit the search to the database 
                         Don't need to do this for Combine searches or IncludeCohort
                     === -->
                <xf:action if="not($searchType=('Combine','CombineSelected','IncludeCohort'))">
                    <!-- Clear the results set -->
                    <xf:delete nodeset="xxf:instance('response-instance')/*"/>

                    <!-- Record the xQuery to be submitted -->
                    <xf:setvalue ref="$term/xquery" value="xxf:instance('cohort-query-instance')"/>
                    <!-- Set up the query text for eXist -->
                    <xf:setvalue ref="xxf:instance('query-instance')/exist:text" value="xxf:instance('cohort-query-instance')"/>

                    <!-- Set the search location -->
                    <xf:setvalue ref="xxf:instance('control-instance')/searchLocation"
                        value="if ($term/searchLocation != '') then $term/searchLocation else 'records'"/>

                    <!-- Now submit the search -->
                    <xf:send submission="query-submission"/>
                </xf:action>

                <!-- === Submit the current entry search to the database
                         Only if the current or first data scope is selected and don't need to do this for Combine searches.
                         The results are returned in scopedEntry-instance for comparison with the results returned in response-instance
                     === -->
                <xf:action
                    if="$searchScope=('currentData','firstData','minData','maxData') and not($searchType=('Combine','CombineSelected','IncludeCohort'))">
                    <!-- Get the list of patients in the full results set (all data) -->
                    <xxf:variable name="allResultsSet" select="distinct-values(xxf:instance('response-instance')/patient/@id)"/>

                    <!-- Set up query for currentData/firstData -->
                    <xf:action if="$searchScope=('currentData','firstData')">
                        <!-- Set up the query to get effectiveTime for current or first values of the entry -->
                        <xf:setvalue ref="xxf:instance('getCurrentEntryEffectiveTime-query-instance')/patientIdList"
                            value="string-join($allResultsSet,''',''')"/>
                        <xf:setvalue ref="xxf:instance('getCurrentEntryEffectiveTime-query-instance')/entryIRI" value="$parameters/query/searchEntry"/>
                        <!-- The order clause determines the effective time that is returned -->
                        <xf:setvalue ref="xxf:instance('getCurrentEntryEffectiveTime-query-instance')/order"
                            value="if ($searchScope='currentData') then ' descending' else ' ascending'"/>
                        <!-- Set up the query text for eXist -->
                        <xf:setvalue ref="xxf:instance('query-instance')/exist:text"
                            value="xxf:instance('getCurrentEntryEffectiveTime-query-instance')"/>
                    </xf:action>

                    <!-- Set up query for minData/maxData.
                         The scope is always searched for on the first element of the query -->
                    <xf:action if="$searchScope=('minData','maxData')">
                        <!-- Set up the query to get effectiveTime for maximum/minimum values of the entry/element -->
                        <xf:setvalue ref="xxf:instance('getMaxMinValueEffectiveTimeXQuery-query-instance')/patientIdList"
                            value="string-join($allResultsSet,''',''')"/>
                        <!-- Entry and Element.
                             The element used is the first element in the $parameters/elementQuery -->
                        <xf:setvalue ref="xxf:instance('getMaxMinValueEffectiveTimeXQuery-query-instance')/entryIRI"
                            value="$parameters/query/searchEntry"/>
                        <xf:setvalue ref="xxf:instance('getMaxMinValueEffectiveTimeXQuery-query-instance')/elementIRI"
                            value="$parameters/elementQuery/query[1]/searchTerm3"/>
                        <!-- The order clause determines the effective time that is returned -->
                        <xf:setvalue ref="xxf:instance('getMaxMinValueEffectiveTimeXQuery-query-instance')/order"
                            value="if ($searchScope='maxData') then ' descending' else ' ascending'"/>
                        <!-- Set up the query text for eXist -->
                        <xf:setvalue ref="xxf:instance('query-instance')/exist:text"
                            value="xxf:instance('getMaxMinValueEffectiveTimeXQuery-query-instance')"/>
                    </xf:action>

                    <!-- Set the search location -->
                    <xf:setvalue ref="xxf:instance('control-instance')/searchLocation"
                        value="if ($term/searchLocation != '') then $term/searchLocation else 'records'"/>
                    <!-- Now submit the search -->
                    <xf:send submission="scopedEntry-query-submission"/>
                </xf:action>

                <!-- === Tidy up cohort search instance after database query has completed
                         Don't need to do this for Combine searches
                     === -->
                <xf:action if="not($searchType=('Combine','CombineSelected','IncludeCohort'))">

                    <!-- Response instance contains a set of patient elements, with repeats (possibly) of the patient identifier (in the id attribute)
                         Here we apply constraints on patient age and scope.
                         Age is applied first using conditions (if any) entered by the user.
                         If searchScope is 'currentData' or 'firstData' then results are restricted to patients appearing in both response-instance and scopedEntry-instance 
                         If searchScope is count or distinctCount then the number of hits for each patient is counted and the conditon applied
                         Set the result as a string separated by the defined separator to create a string like:
                                63636363@@@96956868@@@4939494
                         This is done by getting the set of unique id tokens and joining with @@@     
                         The result string in this form can then be used to return a set of patient id tokens using tokenize
                         Also can concatenate additional separators to the begining and end to get a string suitable for xquery searches
                    -->

                    <!-- ageConstainedResultsSet is set if age criteria have been set.
                    If no age constraints then its just the searchResults -->
                    <xxf:variable name="ageConstraintsPredicate1"
                        select="if ($parameters/query/ageComparator != '' and $parameters/query/age castable as xs:integer) then concat('[if (@age castable as xs:integer) then xs:integer(@age) ',$parameters/query/ageComparator,' ',$parameters/query/age,' else false()]') else ''"/>
                    <xxf:variable name="ageConstraintsPredicate2"
                        select="if ($parameters/query/ageComparator2 != '' and $parameters/query/age2 castable as xs:integer) then concat('[if (@age castable as xs:integer) then xs:integer(@age) ',$parameters/query/ageComparator2,' ',$parameters/query/age2,' else false()]') else ''"/>
                    <xxf:variable name="ageConstraintsExpression"
                        select="concat('xxf:instance(''response-instance'')/patient',$ageConstraintsPredicate1,$ageConstraintsPredicate2)"/>
                    <xxf:variable name="ageConstraintedResultsSet"
                        select="if ($parameters/query/ageComparator != '') then xxf:evaluate($ageConstraintsExpression) else xxf:instance('response-instance')/patient"/>

                    <!-- longitudinalResultsSet is set of patients filtered by the scopedEntry-instance if looking for currentData or firstData -->
                    <xxf:variable name="longitudinalResultsSet"
                        select="if ($searchScope=('currentData','firstData','minData','maxData')) then (for $p in xxf:instance('scopedEntry-instance')/patient return if ($ageConstraintedResultsSet[@id=$p/@id][@effectiveTime=$p/@effectiveTime]) then $p else ()) else $ageConstraintedResultsSet"/>

                    <!-- countedResultsSet is set if looking for count or distinctCount.
                         This returns a set of patients meeting the count/distinctCount criteria.
                         Or is not looking for count/distinctCount then its just the $longitudinalResultsSet 
                    
                         The xxf:evaulation does not work with a variable, so need to put $longitudinalResultsSet into xxf:instance('longitudinalResults-instance')
                         count finds patients where the number of hits matches the count criteria 
                         distinct count finds patients the number of distinct hits (ie. hits with distintc, rtaher than repeated values) matches the count criteria -->

                    <!-- Set up if needed -->
                    <xf:action
                        if="$searchScope=('count','distinctCount') and $searchQuery/searchHitCountComparator !='' and $searchQuery/searchHitCount1 castable as xs:integer">
                        <xf:delete nodeset="xxf:instance('longitudinalResults-instance')/*"/>
                        <xf:action xxf:iterate="$longitudinalResultsSet">
                            <xxf:variable name="patient" select="."/>
                            <xf:insert context="xxf:instance('longitudinalResults-instance')" origin="$patient"/>
                        </xf:action>
                    </xf:action>


                    <xxf:variable name="countedResultsCount"
                        select="if ($searchScope='count') then 'count(xxf:instance(''longitudinalResults-instance'')/patient[@id=$id]/@value)' else if ($searchScope='distinctCount') then 'count(distinct-values(xxf:instance(''longitudinalResults-instance'')/patient[@id=$id]/@value))' else 'xxf:instance(''longitudinalResults-instance'')/patient'"/>
                    <xxf:variable name="countedResultsPredicate1"
                        select="if ($searchScope=('count','distinctCount') and $searchQuery/searchHitCountComparator !='' and $searchQuery/searchHitCount1 castable as xs:integer) then concat('[. ',$searchQuery/searchHitCountComparator,' ',$searchQuery/searchHitCount1,']') else ''"/>
                    <xxf:variable name="countedResultsPredicate2"
                        select="if ($searchScope=('count','distinctCount') and $searchQuery/searchHitCountComparator2 !='' and $searchQuery/searchHitCount2 castable as xs:integer) then concat('[. ',$searchQuery/searchHitCountComparator2,' ',$searchQuery/searchHitCount2,']') else ''"/>

                    <xxf:variable name="countedResultsExpression"
                        select="concat('for $id in distinct-values(xxf:instance(''longitudinalResults-instance'')/patient/@id) return if (',$countedResultsCount,$countedResultsPredicate1,$countedResultsPredicate2,') then xxf:instance(''longitudinalResults-instance'')/patient[@id=$id] else ()')"/>
                    <xxf:variable name="countedResultsSet"
                        select="if ($searchScope=('count','distinctCount') and $searchQuery/searchHitCountComparator !='' and $searchQuery/searchHitCount1 castable as xs:integer) then xxf:evaluate($countedResultsExpression) else $longitudinalResultsSet"/>

                    <!-- resultsSet has the searchScope and age constraints applied
                         Here we just need the distinct values of the patient id -->
                    <xxf:variable name="resultsSet" select="distinct-values($countedResultsSet/@id)"/>

                    <!-- Add age constraints to the description -->
                    <xxf:variable name="applyAgeConstraints" select="if ($parameters/query/ageComparator != '') then true() else false()"/>
                    <xxf:variable name="ageConstraintsDescription"
                        select="if ($applyAgeConstraints) then normalize-space(concat(xxf:instance('view-parameters-instance')/staticParameters/cityEHRCohortSearch/patientAge/@description,' ',$searchQuery/ageComparator/@displayName,' ',$searchQuery/age,' ',$searchQuery/ageComparator2/@displayName,' ',$searchQuery/age2)) else ''"/>
                    <xf:setvalue ref="$term/description" value="concat(.,' ',$ageConstraintsDescription)"/>

                    <!-- Add scope of search to the description.
                         Note that suffix only applies if count was used to restrict results -->
                    <xxf:variable name="applyScope"
                        select="if ($searchScope=('currentData','firstData','minData','maxData') or ($searchScope=('count','distinctCount') and $countedResultsPredicate1 != '')) then true() else false()"/>
                    <xxf:variable name="scopePrefix"
                        select="if ($applyScope) then xxf:instance('view-parameters-instance')/staticParameters/cityEHRCohortSearch/searchScope/options/item[@value=$searchScope]/@prefix else ''"/>
                    <xxf:variable name="scopeSuffix"
                        select="if ($applyScope) then normalize-space(concat(xxf:instance('view-parameters-instance')/staticParameters/cityEHRCohortSearch/searchScope/options/item[@value=$searchScope]/@suffix,' ',$searchQuery/searchHitCountComparator/@displayName,' ',$searchQuery/searchHitCount1,' ',$searchQuery/searchHitCountComparator2/@displayName,' ',$searchQuery/searchHitCount2)) else ''"/>
                    <xf:setvalue ref="$term/description" value="concat($scopePrefix,.,$scopeSuffix)"/>

                    <!-- Add the context of the search to the description - only if searching saved data or archive -->
                    <xf:action if="$term/searchLocation = ('data','archive')">
                        <xxf:variable name="searchLocation" select="$term/searchLocation/@displayName"/>
                        <xxf:variable name="searchContextDescription" select="if ($searchLocation='') then '' else concat($searchLocation,': ')"/>
                        <xf:setvalue ref="$term/description" value="concat($searchContextDescription,.)"/>
                    </xf:action>

                    <!-- Add the effectiveTime to the description -->
                    <xf:action if="$parameters/query/effectiveTimeComparator !='' and $parameters/query/effectiveTime !=''">
                        <xxf:variable name="effectiveTimeDescription"
                            select="concat(xxf:instance('view-parameters-instance')/staticParameters/cityEHRCohortSearch/effectiveTime/@description,' ',$parameters/query/effectiveTimeComparator/@displayName,' ',$parameters/query/effectiveTime)"/>
                        <xxf:variable name="effectiveTimeDescription2"
                            select="if ($parameters/query/effectiveTime2 = '') then '' else concat(' ',$parameters/query/effectiveTimeComparator2/@displayName,' ',$parameters/query/effectiveTime2)"/>
                        <xf:setvalue ref="$term/description" value="concat(.,$effectiveTimeDescription,$effectiveTimeDescription2)"/>
                    </xf:action>


                    <!-- Set the results string and count -->
                    <xf:setvalue ref="$term/result" value="string-join($resultsSet,xxf:instance('view-parameters-instance')/resultSeparator)"/>
                    <xf:setvalue ref="$term/count" value="count($resultsSet)"/>


                    <!-- Set the sub-categories of results.
                         This is only required for observation searches that include supplementary data set items -->
                    <xf:action xxf:iterate="$term/categorySet/*">
                        <xxf:variable name="categoryTerm" select="."/>
                        <xxf:variable name="categoryNumber" select="position()"/>
                        <xxf:variable name="categoryId" select="$categoryTerm/categoryId"/>
                        <xf:setvalue ref="$categoryTerm/id" value="concat($term/id,'.',$categoryNumber)"/>
                        <xxf:variable name="categoryResultsSet"
                            select="distinct-values(xxf:instance('response-instance')/patient[term/@id=$categoryId]/@id)"/>
                        <xf:setvalue ref="$categoryTerm/result"
                            value="string-join($categoryResultsSet,xxf:instance('view-parameters-instance')/resultSeparator)"/>
                        <xf:setvalue ref="$categoryTerm/count" value="count($categoryResultsSet)"/>
                    </xf:action>

                </xf:action>

                <!-- If logging, then show the time taken for the searches -->
                <xf:action if="exists(xxf:instance('view-parameters-instance')/staticParameters/cityEHRCohortSearch/logPerformance['true'])">
                    <xxf:variable name="searchEndTime" select="current-time()"/>
                    <xxf:variable name="searchTime" select="xs:time($searchEndTime) - xs:time($searchStartTime)"/>
                    <xf:setvalue ref="xxf:instance('view-parameters-instance')/systemStatus"
                        value="concat(.,xxf:instance('view-parameters-instance')/staticParameters/cityEHRCohortSearch/logPerformance/@displayName,$searchTime)"
                    />
                </xf:action>

            </xf:action>
            <!-- End of perform-cohort-search -->

            <!-- === Application defined action to rerun the searches === 
                 Activated when a saved search is loaded or the user presses 'refresh'.
                 Iterate through each term, starting with the first run (lowest id)
                 Then rerun the xquery or recombine the specified cohorts
                ======================================================== -->

            <xf:action ev:event="rerun-cohort-searches">
                <xxf:variable name="termSet" select="event('termSet')"/>

                <!-- Sort terms in ascending id -->
                <xxf:variable name="sortedTermSetId" select="xxf:sort($termSet/id,.,'number','ascending')"/>

                <!-- Iterate through the terms -->
                <xf:action xxf:iterate="$sortedTermSetId">
                    <xxf:variable name="termId" select="."/>
                    <xxf:variable name="term" select="$termSet[id=$termId]"/>

                    <!-- Legacy - from 2016-07-29 - add shortDescription if its not already there -->
                    <xf:action if="not(exists($term/shortDescription))">
                        <xf:insert context="$term" origin="xxf:instance('cohort-search-parameters-template')/term/shortDescription"/>
                    </xf:action>

                    <!-- Legacy - from 2017-11-20 - add searchLocation if its not already there. -->
                    <xf:action if="not(exists($term/searchLocation))">
                        <xf:insert context="$term" origin="xxf:instance('cohort-search-parameters-template')/term/searchLocation"/>
                        <xf:setvalue ref="$term/searchLocation" value="'records'"/>
                    </xf:action>


                    <!-- Need to rerun the xquery -->
                    <xf:dispatch name="perform-cohort-search" target="main-model">
                        <xxf:context name="term" select="$term"/>
                    </xf:dispatch>
                </xf:action>

                <!-- Reset the search parameters -->
                <xf:setvalue ref="xxf:instance('control-instance')/terms" value="count(xxf:instance('cohort-search-instance')/searchTerms/term)"/>

                <!-- Reset aggregated results -->
                <xf:dispatch name="aggregate-patient-set" target="main-model"/>

                <!-- Need recalculate so that viewControlsActions binds are refreshed -->
                <xf:action>
                    <xf:recalculate model="viewControlsActions-model"/>
                </xf:action>

            </xf:action>


            <xf:action ev:event="includeCohort">
                <xxf:variable name="term" select="event('term')"/>
                <xxf:variable name="cohortHandle" select="event('cohortHandle')"/>

                <!-- Get the saved cohort from the xmlstore.
                The handle is in searchEntry -->
                <xf:dispatch name="load-saved-search" target="manageCohortSearch-model">
                    <xxf:context name="searchHandle" select="$cohortHandle"/>
                </xf:dispatch>

                <!-- Set the search term description -->
                <xf:setvalue ref="$term/description"
                    value="concat(xxf:instance('view-parameters-instance')/staticParameters/cityEHRCohortSearch/retrievedCohortLabel,xxf:instance('saved-cohort-search-instance')/cohortName)"/>

                <!-- Set results to the loaded cohort -->
                <xf:setvalue ref="$term/result" value="xxf:instance('saved-cohort-search-instance')/cohortPatientString"/>

                <!-- Set results count -->
                <xxf:variable name="resultsSet"
                    select="distinct-values(tokenize($term/result,xxf:instance('view-parameters-instance')/resultSeparator))"/>
                <xf:setvalue ref="$term/count" value="count($resultsSet)"/>
            </xf:action>



            <!-- === Application defined actions to combine search cohorts ===
                        combineCohortsWithOR
                        combineCohortsWithAND
                        combineCohortsWithANDNOT
                        combineCohortsAsPercentage
                ============================================================= -->

            <!-- Set the description for a combine search, using the list of descriptions for each term to be combined -->
            <xf:action ev:event="setCombineSearchDescription">
                <xxf:variable name="term" select="event('term')"/>
                <xxf:variable name="descriptionList" select="event('descriptionList')"/>
                <xxf:variable name="searchOperator" select="event('searchOperator')"/>

                <!-- Get the displayName for the operator -->
                <xxf:variable name="searchOperatorDisplayName"
                    select="xxf:instance('control-instance')/queryDefinition/combineType/options/item[@value=$searchOperator]/@displayName"/>

                <xxf:variable name="descriptionConnector" select="concat(') ',$searchOperatorDisplayName,' (')"/>

                <xf:setvalue ref="$term/description" value="concat('(',string-join($descriptionList,$descriptionConnector),')')"/>
            </xf:action>

            <!-- OR 
                 Get the distinct values across all results sets -->
            <xf:action ev:event="combineCohortsWithOR">
                <xxf:variable name="resultsSetList" select="event('resultsSetList')"/>
                <xxf:variable name="term" select="event('term')"/>

                <!-- Combine the results sets -->
                <xxf:variable name="resultsSetWithRepeats"
                    select="string-join($resultsSetList[.!=''],xxf:instance('view-parameters-instance')/resultSeparator)"/>

                <!-- Form the set of distinct values -->
                <xxf:variable name="resultsSet"
                    select="distinct-values(tokenize($resultsSetWithRepeats,xxf:instance('view-parameters-instance')/resultSeparator))"/>

                <!-- Set the results string and count -->
                <xf:setvalue ref="$term/result" value="string-join($resultsSet,xxf:instance('view-parameters-instance')/resultSeparator)"/>
                <xf:setvalue ref="$term/count" value="count($resultsSet)"/>

            </xf:action>

            <!-- AND
                 Iterate through all results sets, eliminating results that aren't shared.
                 The resultsSetList is a set of strings, each with patientIds separated by @@@ -->
            <xf:action ev:event="combineCohortsWithAND">
                <xxf:variable name="resultsSetList" select="event('resultsSetList')"/>
                <xxf:variable name="term" select="event('term')"/>

                <!-- Set up first pass of the results set -->
                <xf:setvalue ref="$term/result" value="$resultsSetList[1]"/>

                <!-- Iterate though the other results sets (i.e. other than the first one) -->
                <xf:action xxf:iterate="$resultsSetList[position() gt 1]">
                    <xxf:variable name="resultsSetString" select="."/>

                    <!-- Get current iteration of results as a sequence -->
                    <xxf:variable name="resultsSet" select="tokenize($resultsSetString,xxf:instance('view-parameters-instance')/resultSeparator)"/>

                    <xxf:variable name="resultsSetSoFar" select="tokenize($term/result,xxf:instance('view-parameters-instance')/resultSeparator)"/>

                    <!-- Return patients which have a match in the existing results string -->
                    <xxf:variable name="iterativeResultsSet" select="for $p in $resultsSet return if ($p=$resultsSetSoFar) then $p else ()"/>

                    <!-- Reset the results string for the next iteration -->
                    <xf:setvalue ref="$term/result" value="string-join($iterativeResultsSet,xxf:instance('view-parameters-instance')/resultSeparator)"
                    />
                </xf:action>

                <!-- Iteration finished, so result now contains the required AND -->
                <xxf:variable name="resultsSet"
                    select="distinct-values(tokenize($term/result,xxf:instance('view-parameters-instance')/resultSeparator))"/>
                <xf:setvalue ref="$term/count" value="count($resultsSet)"/>
            </xf:action>


            <!-- AND NOT
                 Can only do this if there are two results sets -->
            <xf:action ev:event="combineCohortsWithANDNOT">
                <xxf:variable name="resultsSetList" select="event('resultsSetList')"/>
                <xxf:variable name="term" select="event('term')"/>

                <xf:action if="count($resultsSetList) eq 2">

                    <xxf:variable name="resultsSet1" select="tokenize($resultsSetList[1],xxf:instance('view-parameters-instance')/resultSeparator)"/>
                    <xxf:variable name="resultsSet2" select="tokenize($resultsSetList[2],xxf:instance('view-parameters-instance')/resultSeparator)"/>

                    <xxf:variable name="resultsSet" select="for $p in $resultsSet1 return if ($p=$resultsSet2) then () else $p"/>

                    <xf:setvalue ref="$term/result" value="string-join($resultsSet,xxf:instance('view-parameters-instance')/resultSeparator)"/>
                    <xf:setvalue ref="$term/count" value="count($resultsSet)"/>

                </xf:action>

            </xf:action>


            <!-- Percentage
                 Can only do this if there are two results sets
                 First find the patients in resultsSet1 that are in resultsSet2 (AND)
                 Then set the percentage (i.e. the number of resultsSet1 in resultsSet2 as a percentage of resultsSet2 -->
            <xf:action ev:event="combineCohortsAsPercentage">
                <xxf:variable name="resultsSetList" select="event('resultsSetList')"/>
                <xxf:variable name="term" select="event('term')"/>

                <xf:action if="count($resultsSetList) eq 2">
                    <!-- Get results sets to combine -->
                    <xxf:variable name="resultsSet1" select="tokenize($resultsSetList[1],xxf:instance('view-parameters-instance')/resultSeparator)"/>
                    <xxf:variable name="resultsSet2" select="tokenize($resultsSetList[2],xxf:instance('view-parameters-instance')/resultSeparator)"/>

                    <!-- Perform AND operation -->
                    <xxf:variable name="resultsSet" select="for $p in $resultsSet1 return if ($p=$resultsSet2) then $p else ()"/>

                    <xf:setvalue ref="$term/result" value="string-join($resultsSet,xxf:instance('view-parameters-instance')/resultSeparator)"/>
                    <xf:setvalue ref="$term/count" value="count($resultsSet)"/>

                    <xf:setvalue ref="$term/percentage"
                        value="if (count($resultsSet2) gt 0) then round(10000*(count($resultsSet) div count($resultsSet2))) div 100 else '0'"/>

                </xf:action>
            </xf:action>


            <!-- === Cohort queries, with defined parameters 
                 ====================================================================== -->

            <!-- General query instance
                 max="-1" ensures that the results set is unlimited -->
            <xf:instance id="query-instance">
                <exist:query start="1" max="-1">
                    <exist:text/>
                </exist:query>
            </xf:instance>

            <!-- Cohort search -->
            <xf:instance id="cohort-query-instance" src="oxf:/apps/ehr/xquery/cohortSearchXQuery.xml"/>

            <!-- Response instance holds results of query -->
            <xf:instance id="response-instance">
                <exist:result/>
            </xf:instance>
            <!-- Filtered results may be transferred to longitudinalResults when applying scope constraints -->
            <xf:instance id="longitudinalResults-instance">
                <exist:result/>
            </xf:instance>

            <!-- Query submission for the cohort search.
                 Uses the selected searchLocation (records | data) -->
            <xf:submission id="query-submission" ref="xxf:instance('query-instance')"
                action="{xxf:instance('view-parameters-instance')/applicationDatabaseLocation}/{xxf:instance('control-instance')/searchLocation}"
                method="post" replace="instance" instance="response-instance">
                <xf:action ev:event="xforms-submit-error">
                    <xf:setvalue ref="xxf:instance('view-parameters-instance')/systemError"
                        value="xxf:instance('view-parameters-instance')/systemErrorList/systemError[@type='failedSubmitCohortSearch']"/>
                </xf:action>
                <xf:action ev:event="xforms-submit-done">
                    <xf:setvalue ref="xxf:instance('view-parameters-instance')/systemError" value="''"/>
                    <!--
                    <xf:message ref="concat('Returned: ',count(xxf:instance('response-instance')/*),' hits')"/>
                    -->
                </xf:action>
            </xf:submission>


            <!-- Scope of entry search - looks for current/first recorded data or maximum/minimum value -->
            <xf:instance id="getCurrentEntryEffectiveTime-query-instance" src="oxf:/apps/ehr/xquery/getCurrentEntryEffectiveTimeXQuery.xml"/>
            <xf:instance id="getMaxMinValueEffectiveTimeXQuery-query-instance" src="oxf:/apps/ehr/xquery/getMaxMinValueEffectiveTimeXQuery.xml"/>

            <xf:instance id="scopedEntry-instance">
                <exist:result/>
            </xf:instance>

            <!-- Query submission for returning patient set with scope applied -->
            <xf:submission id="scopedEntry-query-submission" ref="xxf:instance('query-instance')"
                action="{xxf:instance('view-parameters-instance')/applicationDatabaseLocation}/{xxf:instance('control-instance')/searchLocation}"
                method="post" replace="instance" instance="scopedEntry-instance">
                <xf:action ev:event="xforms-submit-error">
                    <xf:setvalue ref="xxf:instance('view-parameters-instance')/systemError"
                        value="xxf:instance('view-parameters-instance')/systemErrorList/systemError[@type='failedSubmitCurrentEntrySearch']"/>
                </xf:action>
                <xf:action ev:event="xforms-submit-done">
                    <xf:setvalue ref="xxf:instance('view-parameters-instance')/systemError" value="''"/>
                </xf:action>
            </xf:submission>


            <!-- Application defined actions to set the cohort in the list of terms as selected.
                 The selectedCohort may be a main term or a subcategory
                 Triggers xforms-value-changed event on the selection input.
                 This then calls aggregate-patient-set and renames the cohort -->
            <xf:action ev:event="select-cohort">
                <xxf:variable name="selectedCohortId" select="event('selectedCohortId')"/>
                <!-- Find the selected cohort - must be within a top-level term element.
                     Can be a term within the categorySet of another term.
                     The explicit path to term or term/categorySet/term is used to avoid a previous defect (up to 2016-05-16) where the template category set had id=1
                     -->
                <xxf:variable name="selectedCohort"
                    select="xxf:instance('cohort-search-instance')/searchTerms/term[id=$selectedCohortId] | xxf:instance('cohort-search-instance')/searchTerms/term/categorySet/term[id=$selectedCohortId]"/>

                <!-- If there is no cohort for this term, rerun the search.
                     This happens when a cohort search is loaded and rerunSearchOnLoad is set to false.
                -->
                <xf:action if="$selectedCohort/count=''">
                    <xf:dispatch name="rerun-cohort-searches" target="main-model">
                        <xxf:context name="termSet" select="$selectedCohort"/>
                    </xf:dispatch>
                </xf:action>

                <!-- Aggregate the patient cohorts -->
                <xf:dispatch name="aggregate-patient-set" target="main-model"/>

                <!-- Refresh the bindings on the viewControlsActions-model -->
                <xf:recalculate model="viewControlsActions-model"/>

            </xf:action>

            <!-- Application defined actions to set the cohort in the list of terms as selected.
                 The cohortSet is a list of terms.
                 Selection is either true or false
                 This then calls aggregate-patient-set and recalculates bindings. -->
            <xf:action ev:event="select-cohort-set">
                <xxf:variable name="cohortSet" select="event('cohortSet')"/>
                <xxf:variable name="selection" select="event('selection')"/>

                <!-- Sort cohorts in ascending id -->
                <xxf:variable name="sortedCohortSet" select="xxf:sort($cohortSet,id,'number','ascending')"/>

                <!-- Iterate through the terms -->
                <xf:action xxf:iterate="$sortedCohortSet">
                    <xxf:variable name="term" select="."/>
                    <!-- If there is no cohort for this term, rerun the search.
                         This happens when a cohort search is loaded and rerunSearchOnLoad is set to false.
                         -->
                    <xf:action if="$term/count=''">
                        <xf:dispatch name="rerun-cohort-searches" target="main-model">
                            <xxf:context name="termSet" select="$term"/>
                        </xf:dispatch>
                    </xf:action>

                    <!-- Set cohort selection -->
                    <xf:setvalue ref="$term/selected" value="if ($selection='true') then 'true' else 'false'"/>
                </xf:action>

                <!-- Aggregate the patient cohorts -->
                <xf:dispatch name="aggregate-patient-set" target="main-model"/>

                <!-- Refresh the bindings on the viewControlsActions-model -->
                <xf:recalculate model="viewControlsActions-model"/>

            </xf:action>

            <!-- Application defined action to select the current search term. 
                 Called when currentTerm is changed in control instance.
                 Loads the search term so that it can be edited and run by the user.
                 cohort-search-parameters contains the term and a set of other parameters
                 The terms stored in cohort-search-instance contain all these other parameters in term/parameters 
                 The objective here is to replace everything in cohort-search-parameters 
                 with the term and other parameters from the selected term in cohort-search-instance -->
            <xf:action ev:event="select-term">
                <xxf:variable name="termId" select="xxf:instance('control-instance')/currentTerm"/>
                <xxf:variable name="selectedTerm" select="xxf:instance('cohort-search-instance')/searchTerms/term[id=$termId]"/>

                <!-- Switch user interface to be inactive, so that changes made here do not trigger value-changed events -->
                <xf:setvalue ref="xxf:instance('control-instance')/interfaceStatus" value="'inactive'"/>

                <!-- Reset the current term, if an id is selected and the term exists.
                     Clear out cohort-search-parameters
                     Insert parameters from the selectedTerm - these are all the child elements in $selectedTerm/parameters.
                     Clear out parameters from the currentTerm and then insert it into cohort-search-parameters
                     -->
                <xf:action if="$termId!='' and exists($selectedTerm)">

                    <!-- Set the specialty.
                         This is already set in the term - set the user selection.
                         Will then load the correct dictionary if the specialty has changed -->
                    <xf:setvalue ref="xxf:instance('viewControls-input-instance')/select[@id='specialty']/@value" value="$selectedTerm/specialtyIRI"/>

                    <!-- Clear out cohort-search-parameters -->
                    <xf:delete nodeset="xxf:instance('cohort-search-parameters')/*"/>

                    <!-- Insert parameters from the selectedTerm -->
                    <xf:action xxf:iterate="$selectedTerm/parameters/*">
                        <xxf:variable name="parameter" select="."/>
                        <xf:insert context="xxf:instance('cohort-search-parameters')" origin="$parameter"/>
                    </xf:action>


                    <!-- cohort-search-parameters now contains all the elements from the selectedTerm, but it doesn't contain a term element
                         So insert it into cohort-search-parameters and then clear out the parameters -->
                    <xf:insert context="xxf:instance('cohort-search-parameters')" origin="$selectedTerm"/>
                    <xf:delete nodeset="xxf:instance('cohort-search-parameters')/term/parameters/*"/>

                    <!-- Reset the elementSelection.
                         Really only needed for Observation and primary searches, but clears elementSelection for other search types.
                         Although the elementSelection is stored in the parameters for the term, the model may have changed since a search was saved.
                         2018-01-22 Also caters for the change from @elementId to @elementIRI on elementSelection/element which is stored in some (deployed) searches -->
                    <xf:dispatch name="set-observation-element-selection" target="main-model"/>

                    <!-- If searchType is CombineSelected, then need to select the terms that were specified -->
                    <xf:action if="xxf:instance('cohort-search-parameters')/term/searchType='CombineSelected'">
                        <!-- Get the combine set (set of cohort ids) -->
                        <xxf:variable name="combineSetString" select="xxf:instance('cohort-search-parameters')/term/combineSet"/>
                        <xxf:variable name="combineSet" select="tokenize($combineSetString,xxf:instance('view-parameters-instance')/resultSeparator)"/>
                        <!-- Set the terms to selected -->
                        <xf:action xxf:iterate="xxf:instance('cohort-search-instance')/searchTerms/term">
                            <xxf:variable name="term" select="."/>
                            <xf:setvalue ref="$term/selected" value="if ($term/id=$combineSet) then true() else false()"/>
                        </xf:action>
                        <!-- Set CombineSelected to an active searchType -->
                        <xf:setvalue ref="xxf:instance('control-instance')/searchType/options/item[@value='CombineSelected']/@status" value="'active'"
                        />
                    </xf:action>

                    <!-- Rebuild main model so that bindings on selections are reset -->
                    <xf:rebuild model="main-model"/>

                </xf:action>

                <!-- New term selected, or couldn't find the selected term (which shouldn't happen) -->
                <xf:action if="$termId='' or not(exists($selectedTerm))">
                    <xf:dispatch name="clear-query-parameters" target="main-model">
                        <xxf:context name="id" select="xxf:instance('control-instance')/currentTerm"/>
                        <xxf:context name="searchType" select="''"/>
                        <xxf:context name="searchSubType" select="''"/>
                        <xxf:context name="specialtyIRI" select="xxf:instance('cohort-search-parameters')/term/specialtyIRI"/>
                    </xf:dispatch>
                </xf:action>


                <!-- User interface is reactivated on focus-in event for each control.
                     Don't reactive it here - doesn't work. -->
                <!-- Reactivate the user interface -->
                <!--
                <xf:action>
                    <xf:setvalue ref="xxf:instance('control-instance')/interfaceStatus"
                        value="'active'"/>
                </xf:action>
                -->

            </xf:action>


            <!-- Application defined action to set up the search/cohort pages in viewDisplay -->
            <xf:action ev:event="set-viewDisplay">
                <xxf:variable name="displayType" select="event('displayType')"/>
                <xxf:variable name="viewNavigationTypeSelection"
                    select="xxf:instance('application-parameters-instance')/viewNavigationTypeSelection/view[@viewType=xxf:instance('view-parameters-instance')/page]"/>

                <!-- For viewDisplay -->
                <xf:setvalue ref="xxf:instance('control-instance')/displayType" value="$displayType"/>

                <!-- Search Page -->
                <xf:action if="$displayType='search'">
                    <!-- For viewNavigation -->
                    <xf:setvalue ref="$viewNavigationTypeSelection/viewNavigationType[@value='search']/@display" value="'show'"/>
                    <xf:setvalue ref="$viewNavigationTypeSelection/viewNavigationType[@value='sharedSearch']/@display" value="'show'"/>
                    <xf:setvalue ref="$viewNavigationTypeSelection/viewNavigationType[@value='cohort']/@display" value="'hidden'"/>
                    <xf:setvalue ref="$viewNavigationTypeSelection/viewNavigationType[@value='sharedCohort']/@display" value="'hidden'"/>
                    <!-- Select the initial viewNavigationType -->
                    <xf:setvalue ref="xxf:instance('view-parameters-instance')/viewNavigationType" value="'search'"/>
                    <!-- Cohort name for user input/edit -->
                    <xf:setvalue ref="xxf:instance('viewControls-input-instance')/input[@id='cohortName']"
                        value="xxf:instance('cohort-search-instance')/cohortName"/>
                </xf:action>

                <!-- Cohort Page.
                     If a cohort is selected in the search page, then load to the cohort-instance.
                     If there is no cohort selected and a cohort has been saved/loaded (ie id ne '') then just leave it
                     Otherwise clear the cohort-instance -->
                <xf:action if="$displayType='cohort'">

                    <!-- User has selected a cohort from the search terms.
                         Initialize the cohortSetControl-instance with the number of records and pages
                         Then set up the first page. -->
                    <xf:action if="xxf:instance('cohort-search-instance')/cohortPatientString != ''">
                        <!-- Clear the selected cohort handle -->
                        <xf:setvalue ref="xxf:instance('control-instance')/currentCohortHandle" value="''"/>

                        <!-- Set the cohort-instance -->
                        <xf:dispatch name="initialize-cohort-instance" target="manageCohortSearch-model">
                            <xxf:context name="cohortPatientString" select="xxf:instance('cohort-search-instance')/cohortPatientString"/>
                            <xxf:context name="cohortPatientCount" select="xxf:instance('cohort-search-instance')/cohortPatientCount"/>
                            <xxf:context name="cohortName" select="xxf:instance('cohort-search-instance')/cohortName"/>
                        </xf:dispatch>

                        <!-- Initialise the cohort set for display -->
                        <xf:dispatch name="initialize-cohort-set" target="cohortSet-model">
                            <xxf:context name="patientCohort" select="xxf:instance('cohort-search-instance')/cohortPatientString"/>
                            <xxf:context name="cohortName" select="xxf:instance('cohort-search-instance')/cohortName"/>
                        </xf:dispatch>
                        <!-- Load the first page of the cohort -->
                        <xf:dispatch name="load-cohort-page" target="cohortSet-model"/>
                    </xf:action>

                    <!-- No user selection and no loaded/saved cohort.
                         Clear the cohort. -->
                    <xf:action if="xxf:instance('cohort-search-instance')/cohortPatientString = '' and xxf:instance('cohort-instance')/id=''">
                        <!-- Clear the selected cohort handle -->
                        <xf:setvalue ref="xxf:instance('control-instance')/currentCohortHandle" value="''"/>
                        <!-- Clear the cohort-instance -->
                        <xf:insert nodeset="xxf:instance('cohort-instance')" origin="xxf:instance('manageCohortSearchControl-instance')/cohortSearch"
                        />
                    </xf:action>

                    <!-- For viewNavigation -->
                    <xf:setvalue ref="xxf:instance('view-parameters-instance')/viewNavigationType" value="'cohort'"/>
                    <xf:setvalue ref="$viewNavigationTypeSelection/viewNavigationType[@value='search']/@display" value="'hidden'"/>
                    <xf:setvalue ref="$viewNavigationTypeSelection/viewNavigationType[@value='sharedSearch']/@display" value="'hidden'"/>
                    <xf:setvalue ref="$viewNavigationTypeSelection/viewNavigationType[@value='cohort']/@display" value="'show'"/>
                    <xf:setvalue ref="$viewNavigationTypeSelection/viewNavigationType[@value='sharedCohort']/@display" value="'show'"/>

                    <!-- Select the initial viewNavigationType -->
                    <xf:setvalue ref="xxf:instance('view-parameters-instance')/viewNavigationType" value="'cohort'"/>

                    <!-- Cohort name for user input/edit -->
                    <xf:setvalue ref="xxf:instance('viewControls-input-instance')/input[@id='cohortName']"
                        value="xxf:instance('cohort-instance')/cohortName"/>

                </xf:action>

                <!-- Refresh the bindings on the viewControlsActions-model -->
                <xf:recalculate model="viewControlsActions-model"/>
            </xf:action>


            <!-- ========= Set up view when it is first loaded ========= 
                =================================================================== -->
            <xf:action ev:event="xforms-model-construct-done">

                <!-- Set up the control instance -->
                <xf:dispatch name="setControl-instance" target="main-model"/>

                <!-- Set up the cohort-search-instance -->
                <xf:insert nodeset="xxf:instance('cohort-search-instance')" origin="xxf:instance('manageCohortSearchControl-instance')/cohortSearch"/>

                <!-- Set up the cohort-search-parameters-template -->
                <xf:insert nodeset="xxf:instance('cohort-search-parameters-template')" origin="xxf:instance('cohort-search-parameters')"/>

                <!-- Get list of specialties for the application. -->
                <xf:dispatch name="get-specialtyList" target="application-model">
                    <xxf:context name="status" select="xxf:instance('control-instance')/status"/>
                    <xxf:context name="applicationId" select="xxf:instance('view-parameters-instance')/applicationId"/>
                </xf:dispatch>

                <!-- Set up the specialty selection for view-controls.
                     Will also set the current user selection to the default passed in to the page in view-parameters -->
                <xf:dispatch name="set-specialty-selection" target="main-model"/>

                <!-- Set the specialty.
                     Loads the dictionary-instance and  directoryElements-instance -->
                <xf:dispatch name="set-specialty" target="main-model">
                    <xxf:context name="specialtyIRI" select="xxf:instance('view-parameters-instance')/specialtyIRI"/>
                </xf:dispatch>

                <!-- View searches, initially -->
                <xf:dispatch name="set-viewDisplay" target="main-model">
                    <xxf:context name="displayType" select="'search'"/>
                </xf:dispatch>

                <!-- Set search scope -->
                <xf:setvalue ref="xxf:instance('cohort-search-parameters')/query/searchScope"
                    value="xxf:instance('view-parameters-instance')/staticParameters/cityEHRCohortSearch/searchScope/options/item[1]/@value"/>

                <!-- Set up searchType selection, to include primary search entries from current dictionary -->
                <xf:dispatch name="set-searchTypeSelection" target="main-model"/>

                <!-- Get saved searches for current user -->
                <xf:dispatch name="get-user-searches" target="manageCohortSearch-model">
                    <xxf:context name="userId" select="xxf:instance('view-parameters-instance')/userId"/>
                </xf:dispatch>

                <!-- Set up shared searches for the user's roles -->
                <xxf:variable name="roleIRIList" select="xxf:instance('user-instance')/rbac/role/@value"/>
                <xf:dispatch name="get-shared-searches" target="manageCohortSearch-model">
                    <xxf:context name="roleList" select="$roleIRIList"/>
                </xf:dispatch>

                <!-- Data export -->
                <xf:dispatch name="initialise-dataExport-parameters" target="main-model"/>

                <!-- Set up care team and users for selection in administration search -->
                <xf:dispatch name="getCareTeamsForUser" target="careTeam-model"/>
                <xf:dispatch name="getCareTeamUsers" target="careTeam-model"/>
                <xf:dispatch name="getUserSelectionList" target="careTeam-model">
                    <xxf:context name="userListInput" select="()"/>
                </xf:dispatch>

                <!-- If patient access for this user is limited to care team patients, then get the list of patients.
                     Access is then restricted for:
                            viewing the selected cohort
                            printing the selected cohort
                            exporting patient identifiable data -->
                <xf:action if="xxf:instance('user-instance')/rbac/restrictPatientAccess/@value='careTeam'">
                    <xf:dispatch name="getCareTeamPatients" target="careTeam-model"/>
                </xf:action>

                <!-- Make sure the search view is shown -->
                <xf:setvalue ref="xxf:instance('control-instance')/displayType" value="'search'"/>

                <!-- Refresh the bindings on the viewControlsActions-model -->
                <xf:recalculate model="viewControlsActions-model"/>

            </xf:action>


            <!-- Need this here as well.
                 Set up a new search - sets the default searchType -->
            <xf:action ev:event="xforms-ready">
                <!-- Set up for new query -->
                <xf:dispatch name="new" target="viewControlsActions-model"/>

                <!-- Need recalculate so that viewControlsActions binds are refreshed -->
                <xf:recalculate model="viewControlsActions-model"/>
            </xf:action>
        </xf:model>

    </xhtml:head>

    <xhtml:body class="cityEHRBase">
        <!-- View XML dialogue box -->
        <xi:include href="cityEHRViewXMLDialog.xhtml"/>
        <!-- Action confirmation dialogue -->
        <xi:include href="cityEHRActionConfirmationDialog.xhtml"/>
        <!-- == Search results dialogue box == 
            ==================================== -->
        <xi:include href="cityEHRExportResultsDialog.xhtml" xxi:omit-xml-base="true"/>
        <!-- == Data export dialogue box == 
        ==================================== -->
        <xi:include href="cityEHRExportDataDialog.xhtml" xxi:omit-xml-base="true"/>
        <!-- == Manage EDS dialog (launched from cityEHRExportDataDialog) ==
        ==================================================================== -->
        <xi:include href="cityEHRManageExportDataSetDialog.xhtml"/>
        <!-- == Cohort Statistics dialogue box == 
        ==================================== -->
        <xi:include href="cityEHRCohortStatisticsDialog.xhtml"/>
        <!-- == Cohort Analysis dialogue box == 
            ==================================== -->
        <xi:include href="cityEHRCohortAnalysisDialog.xhtml"/>
        <!-- === Class selection dialog box ===
             Class selection is displayed as a tree selection in a dialog.
             Consists of an autocomplete selection above a full tree selection, both setting the searchTerm
            
             At the right is a selection of the supplementary data set if there is one for the selected node.
             
             Can be used for a class query selection (sets query/searchTerm2 and query/searchTerm3)
             And also for an observation query (sets  elementQuery/query[elementQueryPosition]/searchTerm4 /5)
             ================================================================================================
        -->
        <xxf:dialog id="class-selection-dialog" appearance="full" level="modal" close="false" draggable="true" visible="false" class="container">
            <xf:label class="stripTitle">
                <xf:output ref="xxf:instance('cohort-search-parameters')/enumeratedClassSelection/classDisplayName"/>
            </xf:label>
            <!-- View controls header has message and control buttons -->
            <xhtml:p>
                <!-- Select - set the search terms based on the selected node -->
                <xf:trigger>
                    <xf:label ref="xxf:instance('view-parameters-instance')/staticParameters/cityEHRCohortSearch/selectLabel"/>
                    <!-- The selected node is in xxf:instance('cohort-search-parameters')/enumeratedClassSelection/selectedNode
                         Use this to set elementQuery/searchTerm4
                         Plus need to set the supplementary data set, if there is one
                        -->
                    <xf:action ev:event="DOMActivate">
                        <!-- Now set the elementQuery/query -->
                        <xxf:variable name="elementQuery"
                            select="xxf:instance('cohort-search-parameters')/elementQuery/query[position()=xxf:instance('cohort-search-parameters')/enumeratedClassSelection/elementQueryPosition]"/>
                        <xf:action if="exists($elementQuery)">
                            <!-- searchTerm4 is the selected node -->
                            <xf:setvalue ref="$elementQuery/searchTerm4"
                                value="xxf:instance('cohort-search-parameters')/enumeratedClassSelection/selectedNode"/>
                            <xf:setvalue ref="$elementQuery/searchTerm4/@displayName"
                                value="xxf:instance('cohort-search-parameters')/enumeratedClassSelection/selectedNode/@displayName"/>
                            <!-- Set the code on searchTerm4 to the selectedNode -->
                            <xf:setvalue ref="$elementQuery/searchTerm4/@code"
                                value="xxf:instance('cohort-search-parameters')/enumeratedClassSelection/selectedNode"/>
                            <!-- Remove the current supplementary data set for this entry/element -->
                            <xf:delete nodeset="$elementQuery/suppDataSet/*"/>
                            <xf:delete nodeset="$elementQuery/suppDataQuery/*"/>
                            <!-- Insert new supplementary data set, if there is one -->
                            <xf:insert context="$elementQuery/suppDataSet"
                                origin="xxf:instance('cohort-search-parameters')/enumeratedClassSelection/suppDataSet/*"/>
                            <xf:insert context="$elementQuery/suppDataQuery"
                                origin="xxf:instance('cohort-search-parameters')/enumeratedClassSelection/suppDataQuery/*"/>
                            <!-- searchTerm5 is the supplementary data set details -->
                            <!-- The supplementary data set is in xxf:instance('cohort-search-parameters')/enumeratedClassSelection/suppDataSet/cda:component/cda:observation/cda:value.
                                Iterate through the set to build up searchTerm5
                            -->
                            <!--
                            <xf:setvalue ref="$elementQuery/searchTerm5" value="''"/>
                            <xf:setvalue ref="$elementQuery/searchTerm5/@displayName" value="''"/>
                            <xf:action xxf:iterate="xxf:instance('cohort-search-parameters')/enumeratedClassSelection/suppDataSet/cda:component/cda:observation/cda:value[@value!='']">
                                <xxf:variable name="value" select="."/>
                                <xf:setvalue ref="$elementQuery/searchTerm5" value="concat(.,' (',$value/@cityEHR:elementDisplayName,':',$value/@value,')')"/>
                                <xf:setvalue ref="$elementQuery/searchTerm5/@displayName" value="concat(.,' (',$value/@cityEHR:elementDisplayName,':',$value/@value,')')"/>
                            </xf:action>
                            -->
                        </xf:action>
                        <xxf:hide ev:event="DOMActivate" dialog="class-selection-dialog"/>
                    </xf:action>
                </xf:trigger>
                <!-- Cancel - don't set any search terms -->
                <xf:trigger>
                    <xf:label ref="xxf:instance('view-parameters-instance')/staticParameters/cityEHRCohortSearch/cancelLabel"/>
                    <xxf:hide ev:event="DOMActivate" dialog="class-selection-dialog"/>
                </xf:trigger>
                <!-- Display the selected node -->
                <xf:output ref="xxf:instance('cohort-search-parameters')/enumeratedClassSelection/selectedNode/@displayName"/>
            </xhtml:p>
            <!-- Get node hierarchy and list for the two selection controls
                 enumerationClass is a set of iso-13606:data elements from the enumeratedClassHierarchy-instance which has already been loaded
                 If entryNode is the same as the class itself, then take the whole class hierarchy
            -->
            <xxf:variable name="entryNode" select="xxf:instance('cohort-search-parameters')/enumeratedClassSelection/entryNode"/>
            <xxf:variable name="classNode" select="xxf:instance('cohort-search-parameters')/enumeratedClassSelection/class"/>
            <xxf:variable name="enumerationClass"
                select="if ($entryNode = $classNode) then xxf:instance('enumeratedClassHierarchy-instance')/descendant::iso-13606:data else xxf:instance('enumeratedClassHierarchy-instance')/descendant::iso-13606:data[@value = $entryNode]/descendant::iso-13606:data"/>
            <!--
            <xxf:variable name="enumerationValue" select="xxf:instance('dictionary-instance')/iso-13606:elementCollection/iso-13606:element[@extension=xxf:instance('cohort-search-parameters')/term/searchType][@cityEHR:elementType='#CityEHR:ElementProperty:enumeratedValue']/iso-13606:data[not(@value = preceding-sibling::iso-13606:data/@value)]"/>
            -->
            <!-- Debugging - display details of enumeratedClassSelection -->
            <!--
            <xhtml:p>
                <xf:output ref="$entryNode"/><xhtml:br/>
                <xf:output ref="$classNode"/><xhtml:br/>
                <xf:output ref="xxf:serialize(xxf:call-xpl('oxf:/ops/utils/formatting/format.xpl', 'data', xxf:instance('dictionaryQuery-instance'), 'data')/*, 'html')" mediatype="text/html"/>
                <xhtml:br/>
                <xf:output ref="xxf:serialize(xxf:call-xpl('oxf:/ops/utils/formatting/format.xpl', 'data', xxf:instance('enumeratedClassHierarchy-instance'), 'data')/*, 'html')" mediatype="text/html"/>
            </xhtml:p>
            -->
            <!--
            <xhtml:p> elementQueryPosition: <xf:output ref="xxf:instance('cohort-search-parameters')/enumeratedClassSelection/elementQueryPosition"/>
                <xhtml:br/> class: <xf:output ref="xxf:instance('cohort-search-parameters')/enumeratedClassSelection/class"/>
                <xhtml:br/> entry node: <xf:output ref="xxf:instance('cohort-search-parameters')/enumeratedClassSelection/entryNode"/>
                <xhtml:br/> classDisplayName: <xf:output ref="xxf:instance('cohort-search-parameters')/enumeratedClassSelection/classDisplayName"/>
                <xhtml:br/> selectedNode: <xf:output ref="xxf:instance('cohort-search-parameters')/enumeratedClassSelection/selectedNode"/>
            </xhtml:p>
            -->
            <xhtml:div class="ScrollingContainer">

                <!-- Put tree selector and suppData in a table so that they display side by side -->
                <xhtml:table class="selectionTree">
                    <xhtml:tr>
                        <!-- Tree selector for enumeratedClass -->
                        <xhtml:td>
                            <xf:select1 appearance="xxf:tree" ref="xxf:instance('cohort-search-parameters')/enumeratedClassSelection/selectedNode">
                                <xf:itemset nodeset="$enumerationClass">
                                    <xf:label ref="@displayName"/>
                                    <xf:value ref="@value"/>
                                </xf:itemset>
                                <!-- Use xforms-select so that this action isn't called when the dialog is initiated -->
                                <xf:action ev:event="xforms-select">
                                    <!-- First get the node that was selected (note that there may be more than one match so use [1]) -->
                                    <xxf:variable name="value" select="$enumerationClass[@value=event('xxf:item-value')][1]"/>
                                    <!-- Now use it to set selectedNode displayName and suppDataSet -->
                                    <xf:setvalue ref="xxf:instance('cohort-search-parameters')/enumeratedClassSelection/selectedNode"
                                        value="$value/@value"/>
                                    <xf:setvalue ref="xxf:instance('cohort-search-parameters')/enumeratedClassSelection/selectedNode/@displayName"
                                        value="$value/@displayName"/>
                                    <xf:setvalue ref="xxf:instance('cohort-search-parameters')/enumeratedClassSelection/suppDataSetId"
                                        value="$value/@cityEHR:suppDataSet"/>
                                    <!-- Remove the current supplementary data set for this entry/element -->
                                    <xf:delete nodeset="xxf:instance('cohort-search-parameters')/enumeratedClassSelection/suppDataSet/*"/>
                                    <xf:delete nodeset="xxf:instance('cohort-search-parameters')/enumeratedClassSelection/suppDataQuery/*"/>
                                    <!-- Get the supplementary data set from query to the class dictionary
                                         Insert the new supplementary data set
                                         And a search term for each element in the suppData - these are in enumeratedClassSelection/suppDataQuery -->
                                    <xxf:variable name="suppDataSetId"
                                        select="xxf:instance('cohort-search-parameters')/enumeratedClassSelection/suppDataSetId"/>
                                    <xf:action if="$suppDataSetId!=''">
                                        <!-- Use database query here to get the SDS -->
                                        <xf:setvalue ref="xxf:instance('classDictionaryControl-instance')/dictionaryId"
                                            value="replace(substring($classNode,2),':','-')"/>
                                        <xf:setvalue ref="xxf:instance('getDictionaryEntryXQuery-instance')/entryIRI" value="$suppDataSetId"/>
                                        <xf:setvalue ref="xxf:instance('dictionaryQuery-instance')/exist:text"
                                            value="xxf:instance('getDictionaryEntryXQuery-instance')"/>
                                        <xf:send submission="getDictionaryEntry-submission"/>
                                        <!-- Supplementary data set is now in dictionaryEntry-instance
                                             Transfer it to enumeratedClassSelection -->
                                        <xxf:variable name="suppDataSet" select="xxf:instance('dictionaryEntry-instance')/cda:component[1]"/>
                                        <xf:insert context="xxf:instance('cohort-search-parameters')/enumeratedClassSelection/suppDataSet"
                                            origin="$suppDataSet/*"/>
                                        <xf:setvalue
                                            ref="xxf:instance('cohort-search-parameters')/enumeratedClassSelection/suppDataSet/cda:observation/cda:id/@cityEHR:origin"
                                            value="$value/@value"/>
                                        <!-- Get details from the data dictionary for this class on the SDS elements.
                                             Just need the list of enumeratedValue or enumeratedCalculatedValue elements so that the selection lists can be created
                                             Use the @root in case there are any aliased elements.
                                             Enumerated class values then can be found in dictionaryElements-instance -->
                                        <xxf:variable name="supplementaryEntryElementIRIList"
                                            select="$suppDataSet/descendant::cda:value[@cityEHR:elementType=('#CityEHR:ElementProperty:enumeratedValue','#CityEHR:ElementProperty:enumeratedCalculatedValue')]/@root"/>
                                        <xf:setvalue ref="xxf:instance('getDictionaryElementsXQuery-instance')/elementClause"
                                            value="concat('[@root=(''',string-join($supplementaryEntryElementIRIList,''','''),''')]')"/>
                                        <xf:setvalue ref="xxf:instance('dictionaryQuery-instance')/exist:text"
                                            value="xxf:instance('getDictionaryElementsXQuery-instance')"/>
                                        <xf:send submission="getDictionaryElements-submission"/>
                                        <!-- Iterate through elements (not clusters) in the SDS and add a search term for each one -->
                                        <xf:action xxf:iterate="$suppDataSet//cda:value[exists(@value)]">
                                            <!-- Insert the query -->
                                            <xxf:variable name="suppDataElement" select="."/>
                                            <xxf:variable name="suppDataElementType" select="$suppDataElement/@cityEHR:elementType"/>
                                            <xxf:variable name="suppDataElementDataType" select="$suppDataElement/@xsi:type"/>
                                            <xxf:variable name="suppDataComparatorType"
                                                select="if ($suppDataElementType=('#CityEHR:ElementProperty:enumeratedValue','#CityEHR:ElementProperty:enumeratedClass')) then $suppDataElementType else $suppDataElementDataType"/>
                                            <xf:insert context="xxf:instance('cohort-search-parameters')/enumeratedClassSelection/suppDataQuery"
                                                origin="xxf:instance('cohort-search-parameters')/enumeratedClassSelection/query"/>
                                            <!-- Set the query parameters -->
                                            <xxf:variable name="suppDataElementQuery"
                                                select="xxf:instance('cohort-search-parameters')/enumeratedClassSelection/suppDataQuery/query[1]"/>
                                            <xf:setvalue ref="$suppDataElementQuery/id"
                                                value="string-join($suppDataElement/ancestor-or-self::cda:value/@extension,'')"/>
                                            <xf:setvalue ref="$suppDataElementQuery/comparatorType" value="$suppDataComparatorType"/>
                                            <!-- Search terms -->
                                            <xf:setvalue ref="$suppDataElementQuery/searchTerm3" value="$suppDataElement/@extension"/>
                                            <xf:setvalue ref="$suppDataElementQuery/searchTerm3/@displayName"
                                                value="$suppDataElement/@cityEHR:elementDisplayName"/>
                                            <xf:setvalue ref="$suppDataElementQuery/searchTerm4/@type" value="$suppDataElement/@xsi:type"/>
                                            <xf:setvalue ref="$suppDataElementQuery/searchTerm5/@type" value="$suppDataElement/@xsi:type"/>
                                            <!-- searchOperator1 -->
                                            <xxf:variable name="searchOperator1"
                                                select="xxf:instance('control-instance')/queryDefinition/comparators/comparator[@type=$suppDataComparatorType]/options/item[1]"/>
                                            <xf:setvalue ref="$suppDataElementQuery/searchOperator1/@selection" value="$searchOperator1/@selection"/>
                                            <xf:setvalue ref="$suppDataElementQuery/searchOperator1" value="$searchOperator1/@value"/>
                                            <xf:setvalue ref="$suppDataElementQuery/searchOperator1/@displayName"
                                                value="$searchOperator1/@displayName"/>
                                        </xf:action>
                                    </xf:action>
                                </xf:action>
                            </xf:select1>
                        </xhtml:td>

                        <!-- supplementary data set selection.
                             The suppData has been inserted into enumeratedClassSelection/suppDataSet - this is et up as the $entry variable
                             The elements for the suppData are set up as the $value variable within the repeat
                             The query parameters (one for each element) have been inserted into enumeratedClassSelection/suppDataQuery.
                             These are set up as the $query variable in the repeat. -->
                        <xxf:variable name="entry" select="xxf:instance('cohort-search-parameters')/enumeratedClassSelection/suppDataSet"/>

                        <xhtml:td class="{if (exists($entry/*)) then 'suppDataSet' else 'hidden'}">
                            <!-- Display supplementary data set info for debugging -->
                            <!--
                                            <xhtml:br/> Node count in suppData: <xf:output ref="count($entry/*/cda:value)"/>
                                            <xhtml:br/> suppData root node name: <xf:output ref="name($entry/*[1])"/>
                                            <xhtml:br/> suppData name: <xf:output ref="$entry/*/cda:code[@codeSystem='cityEHR']/@displayName"/>
                            -->
                            <!-- Only display the supplementary data set if there is one for the selected node -->
                            <xxf:variable name="suppDataClass" select="if (exists($entry/*)) then 'suppDataSet' else 'hidden'"/>
                            <xhtml:p class="suppDataSetTitle">
                                <xf:output ref="$entry/*/cda:code[@codeSystem='cityEHR']/@displayName"/>
                            </xhtml:p>
                            <!-- Render the elements in the supplementary data set for user input. ** jc **
                                 The dictionary entry for the suppData ($entry) determines the layout -->
                            <xhtml:ul class="suppDataSetElements">
                                <xf:repeat nodeset="$entry/*/cda:value">
                                    <xhtml:li class="Ranked">
                                        <xhtml:ul>
                                            <!-- Value may have child elements if it is a cluster -->
                                            <xf:repeat nodeset="if (exists(./cda:value)) then ./cda:value else .">
                                                <!-- Value in the dictionary should have corresponding query in suppDataQuery -->
                                                <xxf:variable name="value" select="."/>
                                                <xxf:variable name="queryId" select="string-join($value/ancestor-or-self::cda:value/@extension,'')"/>
                                                <xxf:variable name="query"
                                                    select="xxf:instance('cohort-search-parameters')/enumeratedClassSelection/suppDataQuery/query[id=$queryId]"/>

                                                <!-- The layout depends on whether this element is in a cluster, or not -->
                                                <xxf:variable name="layoutClass"
                                                    select="if ($value/parent::*/name()='value') then 'Unranked' else 'Ranked'"/>
                                                <xhtml:li class="{$layoutClass}">
                                                    <!-- DisplayName -->
                                                    <xhtml:li class="ISO13606-Element-DisplayName">
                                                        <xf:output ref="$value/@cityEHR:elementDisplayName"/>
                                                    </xhtml:li>
                                                    <!-- Comparator depends on the type of the element -->
                                                    <xxf:variable name="comparatorType" select="$query/comparatorType"/>
                                                    <xxf:variable name="comparatorSelections"
                                                        select="xxf:instance('control-instance')/queryDefinition/comparators/comparator[@type=$comparatorType]/options/item"/>
                                                    <xf:select1 ref="$query/searchOperator1/@selection">
                                                        <xf:itemset nodeset="$comparatorSelections">
                                                            <xf:label ref="./@displayName"/>
                                                            <xf:value ref="./@selection"/>
                                                        </xf:itemset>
                                                        <!-- Reactivate UI (if necessary) when user interacts -->
                                                        <xf:action ev:event="DOMFocusIn">
                                                            <xf:setvalue ref="xxf:instance('control-instance')/interfaceStatus" value="'active'"/>
                                                        </xf:action>
                                                        <!-- Action when new comparator is selected -->
                                                        <xf:action ev:event="xforms-value-changed"
                                                            if="xxf:instance('control-instance')/interfaceStatus='active'">
                                                            <!-- Reset the search terms (since operator has changed) -->
                                                            <!-- Don't reset searchTerm4 because this event gets fired when the comparator is set on a new element selection
                                                                <xf:setvalue ref="$query/searchTerm4" value="''"/>
                                                                <xf:setvalue ref="$query/searchTerm4/@displayName" value="''"/>
                                                            -->
                                                            <xf:setvalue ref="$query/searchTerm5" value="''"/>
                                                            <xf:setvalue ref="$query/searchTerm5/@displayName" value="''"/>
                                                            <!-- Set value/displayName for searchOperator1 -->
                                                            <xxf:variable name="searchOperator"
                                                                select="$comparatorSelections[@selection=$query/searchOperator1/@selection]"/>
                                                            <xf:setvalue ref="$query/searchOperator1" value="$searchOperator/@value"/>
                                                            <xf:setvalue ref="$query/searchOperator1/@displayName"
                                                                value="$searchOperator/@displayName"/>
                                                            <!-- Set searchOperator2 if necessary -->
                                                            <xf:setvalue ref="$query/searchOperator2"
                                                                value="if (exists($searchOperator/@value2)) then $searchOperator/@value2 else ''"/>
                                                            <xf:setvalue ref="$query/searchOperator2/@displayName"
                                                                value="if (exists($searchOperator/@displayName2)) then $searchOperator/@displayName2 else ''"
                                                            />
                                                        </xf:action>
                                                    </xf:select1>
                                                    <!-- searchTerm4 is the main value to search for.
                                                       Its input depends on the type of the element -->
                                                    <!-- Enumerated value or directory-->
                                                    <xhtml:li
                                                        class="{if ($value/@cityEHR:elementType = ('#CityEHR:ElementProperty:enumeratedValue','#CityEHR:ElementProperty:enumeratedCalculatedValue','#CityEHR:ElementProperty:enumeratedDirectory')) then 'ISO13606-Data' else 'hidden'}">
                                                        <xxf:variable name="root" select="$value/@root"/>
                                                        <xxf:variable name="enumeration"
                                                            select="if ($value/@cityEHR:elementType=('#CityEHR:ElementProperty:enumeratedValue','#CityEHR:ElementProperty:enumeratedCalculatedValue')) then xxf:instance('dictionaryElements-instance')/iso-13606:element[@root=$root]/iso-13606:data
                                                      else if ($value/@cityEHR:elementType='#CityEHR:ElementProperty:enumeratedDirectory') then xxf:instance('directoryElements-instance')/iso-13606:elementCollection/iso-13606:element[@root='{$root}']/iso-13606:data
                                                      else ()"/>
                                                        <xf:select1
                                                            ref="if ($value/@cityEHR:elementType = ('#CityEHR:ElementProperty:enumeratedValue','#CityEHR:ElementProperty:enumeratedCalculatedValue','#CityEHR:ElementProperty:enumeratedDirectory')) then $query/searchTerm4 else ()"
                                                            class="ISO13606-Data">
                                                            <xf:itemset
                                                                nodeset="xxf:instance('application-parameters-instance')/displayFormat/unspecifiedElementValue/value | $enumeration">
                                                                <xf:label ref="./@displayName"/>
                                                                <xf:value ref="./@value"/>
                                                            </xf:itemset>
                                                            <xf:action ev:event="xforms-select">
                                                                <!-- First get the node that was selected -->
                                                                <xxf:variable name="selectedValue"
                                                                    select="$enumeration[@value=event('xxf:item-value')][1]"/>
                                                                <xf:setvalue ref="$query/searchTerm4/@code" value="$selectedValue/@code"/>
                                                                <xf:setvalue ref="$query/searchTerm4/@codeSystem" value="'cityEHR'"/>
                                                                <xf:setvalue ref="$query/searchTerm4/@displayName" value="$selectedValue/@displayName"
                                                                />
                                                            </xf:action>
                                                        </xf:select1>
                                                    </xhtml:li>
                                                    <!-- Simple type, calculated value or memo -->
                                                    <xhtml:li
                                                        class="{if ($value/@cityEHR:elementType = ('#CityEHR:ElementProperty:simpleType','#CityEHR:ElementProperty:calculatedValue','#CityEHR:ElementProperty:memo')) then 'ISO13606-Data' else 'hidden'}">
                                                        <xxf:variable name="fieldLength"
                                                            select="if (exists($value/@cityEHR:fieldLength)) then $value/@cityEHR:fieldLength else xxf:instance('view-parameters-instance')/staticParameters/cityEHRFolder/fieldLength"/>
                                                        <xf:input
                                                            ref="if ($value/@cityEHR:elementType = ('#CityEHR:ElementProperty:simpleType','#CityEHR:ElementProperty:calculatedValue','#CityEHR:ElementProperty:memo')) then $query/searchTerm4 else ()"
                                                            xxf:size="{$fieldLength}" class="stripped"> </xf:input>
                                                    </xhtml:li>
                                                    <!-- Units -->
                                                    <xxf:variable name="unitsClass"
                                                        select="if ($value/@units!='') then 'ISO13606-Element-Units' else 'hidden'"/>
                                                    <xhtml:li class="{$unitsClass}">
                                                        <xf:output ref="$value/@units"/>
                                                    </xhtml:li>
                                                    <!-- Fifth term is required if comparator requires one. -->
                                                    <xf:group ref="$query[searchOperator2!='']">
                                                        <xf:output ref="./searchOperator2/@displayName" class="{}"/>
                                                        <!-- simpleType or calculatedValue -->
                                                        <xf:group
                                                            ref="$query/searchTerm3[@type=('#CityEHR:ElementProperty:simpleType','#CityEHR:ElementProperty:calculatedValue')]">
                                                            <xxf:variable name="type" select="$query/searchTerm5/@type"/>
                                                            <xxf:variable name="parameters" select="xxf:instance('view-parameters-instance')"/>
                                                            <xf:input ref="$query/searchTerm5">
                                                                <!-- Reactivate UI (if necessary) when user interacts -->
                                                                <xf:action ev:event="DOMFocusIn">
                                                                    <xf:setvalue ref="xxf:instance('control-instance')/interfaceStatus"
                                                                        value="'active'"/>
                                                                </xf:action>
                                                                <xxf:variable name="value" select="."/>
                                                                <xf:action ev:event="xforms-value-changed"
                                                                    if="xxf:instance('control-instance')/interfaceStatus='active'">
                                                                    <xxf:variable name="displayName"
                                                                        select="if ($type='xs:dateTime' and $value castable as xs:dateTime) then format-dateTime(xs:dateTime($value),$parameters/dateTimeDisplayFormat, xxf:instance('session-parameters-instance')/languageCode, (), ()) else 
                                                      if ($type='xs:date' and $value castable as xs:date) then format-date(xs:date($value),$parameters/dateDisplayFormat, xxf:instance('session-parameters-instance')/languageCode, (), ()) else 
                                                      if ($type='xs:time' and $value castable as xs:time) then format-time(xs:time($value),$parameters/timeDisplayFormat, xxf:instance('session-parameters-instance')/languageCode, (), ()) else 
                                                                        if ($type='xs:boolean' and exists($parameters/displayBoolean/value[@value=$value])) then $parameters/displayBoolean/value[@value=$value] else
                                                                        $value"/>
                                                                    <xf:setvalue ref="$query/searchTerm5/@displayName" value="$displayName"/>
                                                                </xf:action>
                                                            </xf:input>
                                                        </xf:group>
                                                    </xf:group>
                                                </xhtml:li>
                                            </xf:repeat>
                                            <xhtml:li class="LayoutFooter">&#160;</xhtml:li>
                                        </xhtml:ul>
                                    </xhtml:li>
                                </xf:repeat>
                                <!-- Debugging -->
                                <!--
                                    <xf:repeat nodeset="xxf:instance('cohort-search-parameters')/enumeratedClassSelection/suppDataQuery/query">
                                    <xhtml:li class="Ranked">
                                        <xf:output ref="position()"/> <xf:output ref="id"/>
                                    </xhtml:li>
                                </xf:repeat>
                                <xhtml:li class="Ranked">
                                <xf:output ref="concat('suppData query count: ',count(xxf:instance('cohort-search-parameters')/enumeratedClassSelection/suppDataQuery/query))"/>
                                </xhtml:li>
                                -->
                                <xhtml:li class="LayoutFooter">&#160;</xhtml:li>
                            </xhtml:ul>
                        </xhtml:td>
                    </xhtml:tr>
                </xhtml:table>

            </xhtml:div>
        </xxf:dialog>
        <!-- == Fixed Header Information ======== 
             ==================================== -->
        <xhtml:div id="ehrHeader">
            <xhtml:div id="patientLabel" class="hidden"></xhtml:div>
            <xhtml:div id="systemNavigation">
                <!-- System-level Navigation Pane -->
                <xi:include href="cityEHRNavigation.xhtml"/>
            </xhtml:div>
            <!-- Logo Pane -->
            <xhtml:div id="logo">
                <xf:output ref="xxf:instance('logo-instance')" mediatype="image/*"/>
            </xhtml:div>
        </xhtml:div>
        <!-- === Level 2 /3 =================================== 
            ehrContent
            Contains
                ehrNavigation
                ehrView
                ehrInfo
            ==================================================
        -->
        <xhtml:div id="ehrContent">
            <!-- =========================================================
                ehrNavigation - navigation around the EHR
                Contains
                navigationType
                navigationDisplay
                ========================================================= -->
            <xhtml:div id="ehrNavigation">
                <xhtml:div id="navigationType">

                    <!-- Controls to select the View Navigation type.
                         Only shows the active controls, which depend on the displayType (search|cohort) 
                         This has been set up in set-viewDisplay -->
                    <xi:include href="cityEHRViewNavigationTypeSelection.xhtml"/>

                    <!-- Button to collapse (hide) ehrNavigation -->
                    <xhtml:div id="collapseNavigation">
                        <xf:trigger appearance="minimal" class="layoutControl">
                            <xf:label
                                ref="xxf:instance('view-parameters-instance')/staticParameters/layoutControls/activator[@type='collapseNavigation']/@displayName"/>
                            <xf:action ev:event="DOMActivate">
                                <xf:setvalue ref="xxf:instance('view-parameters-instance')/viewDisplayLayout" value="'landscape'"/>
                            </xf:action>
                        </xf:trigger>
                    </xhtml:div>

                </xhtml:div>
                <xhtml:div id="navigationDisplay" class="navigation">
                    <!-- The currently selected viewNavigationType - serach, sharedSearch,cohort, sharedCohort -->
                    <xxf:variable name="viewNavigationType" select="xxf:instance('view-parameters-instance')/viewNavigationType"/>

                    <!-- Display list of saved searches/cohorts for this user.
                         Only one list is shown at a time, depending on viewNavigationType
                         userSearches-instance holds the user's searches/cohorts, sharedSearches-instance holds the shared searches/cohorts -->

                    <!-- The list of sharedSearches for a user with multiple roles may contain repeats
                             So need to get the distinct values of the id
                             The lists are split between searches/cohorts for user/shared -->

                    <!-- List of saved searches/cohorts is userSearches or sharedSearches -->
                    <xxf:variable name="storedSearchList"
                        select="if ($viewNavigationType=('search','cohort')) then xxf:instance('userSearches-instance')/search else xxf:instance('sharedSearches-instance')/search"/>

                    <!-- Select either searches or cohorts -->
                    <xxf:variable name="selectionList"
                        select="if ($viewNavigationType=('search','sharedSearch')) then $storedSearchList[searchTerms='true'] else $storedSearchList[searchTerms='false']"/>

                    <!-- Lists of saved items search|sharedSearch - only one displayed at a time, the other(s) hidden.
                             And only show if there are items in that category -->
                    <xf:repeat nodeset="$selectionList" id="saved-search-repeat">
                        <xxf:variable name="search" select="."/>
                        <xxf:variable name="handle" select="$search/handle"/>

                        <!-- Show item as selected if it's handle matches the current handle for that type (search|cohort) -->
                        <xxf:variable name="selectionClass"
                            select="if ($handle = (xxf:instance('control-instance')/currentSearchHandle,xxf:instance('control-instance')/currentCohortHandle)) then 'viewNavigationSelectedItem' else 'viewNavigationItem'"/>

                        <!-- Trigger selects the current search -->
                        <xf:trigger class="{$selectionClass}" appearance="minimal">
                            <xf:label ref="$search/cohortName"/>
                            <xf:action ev:event="DOMActivate">
                                <!-- Cohort search -->
                                <xf:action if="xxf:instance('control-instance')/displayType='search'">
                                    <xf:setvalue ref="xxf:instance('control-instance')/currentSearchHandle" value="$handle"/>
                                    <!-- This submission is specific to cityEHRCohortSearch, so is in the main-model -->
                                    <xf:send submission="load-search-submission"/>
                                </xf:action>
                                <!-- Cohort -->
                                <xf:action if="xxf:instance('control-instance')/displayType='cohort'">
                                    <xf:setvalue ref="xxf:instance('control-instance')/currentCohortHandle" value="$handle"/>
                                    <!-- This action is specific to cityEHRCohortSearch, so is in the main-model -->
                                    <xf:dispatch name="load-saved-cohort" target="main-model"/>
                                </xf:action>
                            </xf:action>
                        </xf:trigger>
                    </xf:repeat>

                </xhtml:div>

            </xhtml:div>

            <!-- =========================================================
                EHR View 
                Contains
                viewType
                viewControls
                viewDisplay
                ========================================================= -->
            <xhtml:div id="ehrView">

                <!-- View Type - select the type of ehr view 
                    ===================================================================== -->
                <xhtml:div id="viewType">
                    <!-- Button to expand (restore) ehrNavigation -->
                    <xxf:variable name="expandNavigationClass"
                        select="if (xxf:instance('view-parameters-instance')/viewDisplayLayout='portrait') then 'hidden' else ''"/>
                    <xhtml:div id="expandNavigation" class="{$expandNavigationClass}">
                        <xf:trigger appearance="minimal" class="layoutControl">
                            <xf:label
                                ref="xxf:instance('view-parameters-instance')/staticParameters/layoutControls/activator[@type='expandNavigation']/@displayName"/>
                            <xf:action ev:event="DOMActivate">
                                <xf:setvalue ref="xxf:instance('view-parameters-instance')/viewDisplayLayout" value="'portrait'"/>
                            </xf:action>
                        </xf:trigger>
                    </xhtml:div>

                    <xhtml:div id="viewTypeControls">
                        <!-- Now iterate through the configuration to get the cohort search navigation controls -->
                        <xf:repeat nodeset="xxf:instance('application-parameters-instance')/cohortSearchNavigationControls/control[@display='show']">
                            <xxf:variable name="displayType" select="./@displayType"/>
                            <xxf:variable name="displayLabel" select="./@value"/>
                            <xxf:variable name="controlItemClass"
                                select="if (xxf:instance('control-instance')/displayType=$displayType) then 'controlItem current' else 'controlItem'"/>

                            <xf:trigger appearance="minimal" class="{$controlItemClass}">
                                <xf:label ref="$displayLabel"/>
                                <xf:action ev:event="DOMActivate">
                                    <xf:dispatch name="set-viewDisplay" target="main-model">
                                        <xxf:context name="displayType" select="$displayType"/>
                                    </xf:dispatch>
                                    <!-- Refresh display -->
                                    <xf:action>
                                        <xf:recalculate model="viewControlsActions-model"/>
                                    </xf:action>
                                </xf:action>
                            </xf:trigger>

                        </xf:repeat>
                    </xhtml:div>

                </xhtml:div>

                <!-- View Controls - contains controls for the current displayed view content 
                    ===================================================================== -->
                <xhtml:div id="viewControls">

                    <!-- View Controls Header -->
                    <xi:include href="cityEHRViewControlsHeader.xhtml"/>

                    <!-- View controls panel.
                         This contains controls for specifying the search -->
                    <xf:group ref="xxf:instance('control-instance')[displayType='search']">
                        <xhtml:table class="controlPanel">

                            <!-- === First row selects the search term (or new) and context for the search -->
                            <xhtml:tr>
                                <!-- The search term - new or from list of exectuted searches **term -->
                                <xhtml:td>
                                    <xxf:variable name="sortOrder" select="xxf:instance('control-instance')/sortOrder"/>
                                    <xf:select1 ref="xxf:instance('control-instance')/currentTerm">
                                        <xf:itemset
                                            nodeset="xxf:instance('view-parameters-instance')/staticParameters/cityEHRCohortSearch/newTerm | xxf:sort(xxf:instance('cohort-search-instance')/searchTerms/term,id,'number',$sortOrder)">
                                            <xf:label ref="if (exists(./id/@displayName)) then ./id/@displayName else ./id"/>
                                            <xf:value ref="./id"/>
                                        </xf:itemset>
                                        <!-- Term selected -->
                                        <xf:action ev:event="xforms-value-changed">
                                            <!-- Select the term -->
                                            <xf:action>
                                                <!-- Switch user interface to be inactive, so that changes made here do not trigger value-changed events -->
                                                <xf:setvalue ref="xxf:instance('control-instance')/interfaceStatus" value="'inactive'"/>
                                                <xf:rebuild model="main-model"/>
                                                <!-- Select the term -->
                                                <xf:dispatch name="select-term" target="main-model"/>
                                                <!-- Recalculate, so that bindings on viewControlsActions are made -->
                                                <xf:recalculate model="viewControlsActions-model"/>
                                            </xf:action>
                                        </xf:action>
                                    </xf:select1>
                                </xhtml:td>

                                <!-- Select the type of search.
                                     Only active search types can be selected (Combine and CombineSelected are not always active) -->
                                <xhtml:td>
                                    <xf:select1 ref="xxf:instance('cohort-search-parameters')/term/searchType">
                                        <xf:itemset nodeset="xxf:instance('control-instance')/searchType/options/item[@status='active']">
                                            <xf:label ref="./@displayName"/>
                                            <xf:value ref="./@value"/>
                                        </xf:itemset>
                                        <xf:action ev:event="DOMFocusIn">
                                            <xf:setvalue ref="xxf:instance('control-instance')/interfaceStatus" value="'active'"/>
                                            <!--
                                            <xf:message ref="concat('Selecting searchType: ',xxf:instance('control-instance')/interfaceStatus)"/>
                                            -->
                                        </xf:action>
                                        <!-- Only process change when the user makes a selection.
                                             searchtype can also be changed when the user selects a term and it replaces the existing one. -->
                                        <xf:action ev:event="xforms-value-changed" if="xxf:instance('control-instance')/interfaceStatus='active'">
                                            <xxf:variable name="selectedItem"
                                                select="xxf:instance('control-instance')/searchType/options/item[@value=xxf:instance('cohort-search-parameters')/term/searchType]"/>
                                            <!--
                                            <xf:message
                                                ref="concat('active change: ',xxf:instance('cohort-search-parameters')/term/searchType)"/>
-->
                                            <!-- Clear the search query parameters.
                                                 (Sets the specialty to the current user selection) -->
                                            <xf:dispatch name="clear-query-parameters" target="main-model">
                                                <xxf:context name="id" select="xxf:instance('control-instance')/currentTerm"/>
                                                <xxf:context name="searchType" select="xxf:instance('cohort-search-parameters')/term/searchType"/>
                                                <xxf:context name="searchSubType" select="''"/>
                                                <xxf:context name="specialtyIRI"
                                                    select="xxf:instance('viewControls-input-instance')/select[@id='specialty']/@value"/>
                                            </xf:dispatch>
                                            <!-- Demographics or Administration -->
                                            <xf:action
                                                if="xxf:instance('cohort-search-parameters')/term[searchType=('Demographics','Administration')]">
                                                <!-- Make sure the subtype is reset -->
                                                <xf:setvalue ref="xxf:instance('cohort-search-parameters')/term/searchSubType" value="''"/>
                                                <xf:setvalue ref="xxf:instance('cohort-search-parameters')/term/searchSubType"
                                                    value="xxf:instance('control-instance')/searchSubType/options[@searchType=xxf:instance('cohort-search-parameters')/term/searchType]/item[1]/@value"/>
                                                <!-- Initialise the default query (now set up in searchType and searchSubType -->
                                                <xf:dispatch name="initialize-query-parameters" target="main-model"/>
                                            </xf:action>
                                            <!-- Combine search -->
                                            <xf:action
                                                if="xxf:instance('cohort-search-parameters')/term[searchType='Combine'] and exists(xxf:instance('cohort-search-instance')/searchTerms/descendant::term[2])">
                                                <xf:setvalue ref="xxf:instance('cohort-search-parameters')/query/searchEntry"
                                                    value="xxf:instance('cohort-search-instance')/searchTerms/term[1]/id"/>
                                                <xf:setvalue ref="xxf:instance('cohort-search-parameters')/query/searchTerm2"
                                                    value="xxf:instance('cohort-search-instance')/searchTerms/term[2]/id"/>
                                                <xf:setvalue ref="xxf:instance('cohort-search-parameters')/query/searchOperator1"
                                                    value="xxf:instance('control-instance')/queryDefinition/combineType/options/item[1]/@value"/>
                                                <xf:setvalue ref="xxf:instance('cohort-search-parameters')/query/searchOperator1/@displayName"
                                                    value="xxf:instance('control-instance')/queryDefinition/combineType/options/item[1]/@displayName"
                                                />
                                            </xf:action>
                                            <!-- CombineSelected search -->
                                            <xf:action if="xxf:instance('cohort-search-parameters')/term[searchType='CombineSelected']">
                                                <xf:setvalue ref="xxf:instance('cohort-search-parameters')/query/searchOperator1"
                                                    value="xxf:instance('control-instance')/queryDefinition/combineSelectedType/options/item[1]/@value"/>
                                                <xf:setvalue ref="xxf:instance('cohort-search-parameters')/query/searchOperator1/@displayName"
                                                    value="xxf:instance('control-instance')/queryDefinition/combineSelectedType/options/item[1]/@displayName"
                                                />
                                            </xf:action>
                                            <!-- IncludeCohort search -->
                                            <xf:action if="xxf:instance('cohort-search-parameters')/term[searchType='IncludeCohort']">
                                                <!-- Set searchEntry to first saved cohort handle -->
                                                <xxf:variable name="savedCohortList"
                                                    select="(xxf:instance('userSearches-instance')/search | xxf:instance('sharedSearches-instance')/search)[searchTerms='false']"/>
                                                <xf:setvalue ref="xxf:instance('cohort-search-parameters')/query/searchEntry"
                                                    value="$savedCohortList[1]/handle"/>
                                            </xf:action>
                                            <!-- Observation search -->
                                            <xf:action
                                                if="xxf:instance('cohort-search-parameters')/term[searchType='Observation'] and exists(xxf:instance('dictionary-instance')/iso-13606:entryCollection/iso-13606:entry[@cityEHR:cohortSearch='#CityEHR:EntryProperty:Searchable'])">
                                                <xf:dispatch name="initialize-observation-query" target="main-model"/>
                                            </xf:action>
                                            <!-- PrimarySearch searches                                           -->
                                            <xf:action
                                                if="starts-with(xxf:instance('cohort-search-parameters')/term/searchType,'#ISO-13606:Entry') and exists(xxf:instance('dictionary-instance')/iso-13606:entryCollection/iso-13606:entry[cda:component/cda:observation/cda:id/@root=xxf:instance('cohort-search-parameters')/term/searchType])">
                                                <xf:dispatch name="initialize-primarySearch-query" target="main-model"/>
                                            </xf:action>
                                            <!-- Recalculate, so that bindings on viewControlsActions are made -->
                                            <xf:recalculate model="viewControlsActions-model"/>
                                        </xf:action>
                                    </xf:select1>
                                </xhtml:td>

                                <!-- Short description of the search.
                                     only if a search type is selected -->
                                <xhtml:td>
                                    <xxf:variable name="descriptionClass"
                                        select="if (xxf:instance('cohort-search-parameters')/term/searchType!='') then '' else 'hidden'"/>
                                    <xf:output class="{$descriptionClass}"
                                        ref="xxf:instance('view-parameters-instance')/staticParameters/cityEHRCohortSearch/shortDescription/@displayName"/>
                                    <xf:input class="{$descriptionClass}" ref="xxf:instance('cohort-search-parameters')/term/shortDescription"
                                        xxf:size="{xxf:instance('view-parameters-instance')/staticParameters/cityEHRCohortSearch/shortDescription/@size}"
                                    />
                                </xhtml:td>
                            </xhtml:tr>

                            <!-- === Enter the search terms for a cohort search.
                                     The selections depend on the type of search selected.
                                 =========================================== -->
                            <xhtml:tr>

                                <!-- First cell is empty -->
                                <xhtml:td></xhtml:td>

                                <!-- ================================================= 
                                     Second cell, second row
                                     Set search parameters - depends on type of search 
                                     ================================================= -->
                                <xhtml:td>
                                    <!-- === Search for Demographics or Administration 
                                        <searchSubType>
                                            <options searchType="Administration">
                                                <item value="EffectiveTime" displayName="Effective Time"/>
                                                <item value="Author" displayName="Author"/>
                                            </options>
                                            <options searchType="Demographics">
                                                <item value="Gender" displayName="Gender"/>
                                                <item value="DoB" displayName="Date of Birth"/>
                                                <item value="Age" displayName="Age"/>
                                            </options>
                                        </searchSubType>
                                        ======================================================= -->
                                    <xf:group ref="xxf:instance('cohort-search-parameters')/term[searchType=('Demographics','Administration')]">
                                        <!-- Select the sub type of search -->
                                        <xf:select1 ref="xxf:instance('cohort-search-parameters')/term/searchSubType">
                                            <xf:itemset
                                                nodeset="xxf:instance('control-instance')/searchSubType/options[@searchType=xxf:instance('cohort-search-parameters')/term/searchType]/item">
                                                <xf:label ref="./@displayName"/>
                                                <xf:value ref="./@value"/>
                                            </xf:itemset>
                                            <!-- Reactivate UI (if necessary) when user interacts -->
                                            <xf:action ev:event="DOMFocusIn">
                                                <xf:setvalue ref="xxf:instance('control-instance')/interfaceStatus" value="'active'"/>
                                            </xf:action>
                                            <!-- Set the search terms based on the subtype of search -->
                                            <xf:action ev:event="xforms-value-changed" if="xxf:instance('control-instance')/interfaceStatus='active'">
                                                <xf:dispatch name="initialize-query-parameters" target="main-model"/>
                                            </xf:action>
                                        </xf:select1>
                                        <!--Searching for Gender - uses entry for administrativeGenderCode -->
                                        <xf:group ref="xxf:instance('cohort-search-parameters')/term[searchSubType='Gender']">
                                            <!-- Comparator -->
                                            <xf:select1 ref="xxf:instance('cohort-search-parameters')/query/searchOperator1/@selection">
                                                <xf:itemset
                                                    nodeset="xxf:instance('control-instance')/queryDefinition/comparators/comparator[@type='#CityEHR:ElementProperty:enumeratedValue']/options/item">
                                                    <xf:label ref="@displayName"/>
                                                    <xf:value ref="@selection"/>
                                                </xf:itemset>
                                                <!-- Reactivate UI (if necessary) when user interacts -->
                                                <xf:action ev:event="DOMFocusIn">
                                                    <xf:setvalue ref="xxf:instance('control-instance')/interfaceStatus" value="'active'"/>
                                                </xf:action>
                                                <xf:action ev:event="xforms-value-changed"
                                                    if="xxf:instance('control-instance')/interfaceStatus='active'">
                                                    <!-- Set value/displayName for searchOperator1 -->
                                                    <xxf:variable name="searchOperator1"
                                                        select="xxf:instance('control-instance')/queryDefinition/comparators/comparator[@type='#CityEHR:ElementProperty:enumeratedValue']/options/item[@selection=xxf:instance('cohort-search-parameters')/query/searchOperator1/@selection]"/>
                                                    <xf:setvalue ref="xxf:instance('cohort-search-parameters')/query/searchOperator1"
                                                        value="$searchOperator1/@value"/>
                                                    <xf:setvalue ref="xxf:instance('cohort-search-parameters')/query/searchOperator1/@displayName"
                                                        value="$searchOperator1/@displayName"/>
                                                </xf:action>
                                            </xf:select1>
                                            <!-- searchTerm3
                                                 Don't show this when comparator is 'any' -->
                                            <xf:group ref="xxf:instance('cohort-search-parameters')/query[searchOperator1!='any']">
                                                <xxf:variable name="elementValues"
                                                    select="xxf:instance('dictionary-instance')/iso-13606:elementCollection/iso-13606:element[@extension=xxf:instance('cohort-search-parameters')/query/searchTerm2]/iso-13606:data"/>
                                                <xf:select1 ref="xxf:instance('cohort-search-parameters')/query/searchTerm3">
                                                    <xf:itemset nodeset="$elementValues">
                                                        <xf:label ref="./@displayName"/>
                                                        <xf:value ref="./@value"/>
                                                    </xf:itemset>
                                                    <!-- Reactivate UI (if necessary) when user interacts -->
                                                    <xf:action ev:event="DOMFocusIn">
                                                        <xf:setvalue ref="xxf:instance('control-instance')/interfaceStatus" value="'active'"/>
                                                    </xf:action>
                                                    <xf:action ev:event="xforms-value-changed"
                                                        if="xxf:instance('control-instance')/interfaceStatus='active'">
                                                        <xf:setvalue ref="xxf:instance('cohort-search-parameters')/query/searchTerm3/@displayName"
                                                            value="xxf:instance('dictionary-instance')/iso-13606:elementCollection/iso-13606:element[@extension=xxf:instance('cohort-search-parameters')/query/searchTerm2]/iso-13606:data[@value=xxf:instance('cohort-search-parameters')/query/searchTerm3]/@displayName"
                                                        />
                                                    </xf:action>
                                                </xf:select1>
                                            </xf:group>
                                        </xf:group>
                                        <!--Searching for Date of Birth -->
                                        <xf:group ref="xxf:instance('cohort-search-parameters')/term[searchSubType='DoB']">
                                            <!-- Comparator -->
                                            <xf:select1 ref="xxf:instance('cohort-search-parameters')/query/searchOperator1/@selection">
                                                <xf:itemset
                                                    nodeset="xxf:instance('control-instance')/queryDefinition/comparators/comparator[@type='xs:date']/options/item">
                                                    <xf:label ref="./@displayName"/>
                                                    <xf:value ref="./@selection"/>
                                                </xf:itemset>
                                                <!-- Reactivate UI (if necessary) when user interacts -->
                                                <xf:action ev:event="DOMFocusIn">
                                                    <xf:setvalue ref="xxf:instance('control-instance')/interfaceStatus" value="'active'"/>
                                                </xf:action>
                                                <xf:action ev:event="xforms-value-changed"
                                                    if="xxf:instance('control-instance')/interfaceStatus='active'">
                                                    <!-- Set value/displayName for searchOperator1 -->
                                                    <xxf:variable name="searchOperator1"
                                                        select="xxf:instance('control-instance')/queryDefinition/comparators/comparator[@type='xs:date']/options/item[@selection=xxf:instance('cohort-search-parameters')/query/searchOperator1/@selection]"/>
                                                    <xf:setvalue ref="xxf:instance('cohort-search-parameters')/query/searchOperator1"
                                                        value="$searchOperator1/@value"/>
                                                    <xf:setvalue ref="xxf:instance('cohort-search-parameters')/query/searchOperator1/@displayName"
                                                        value="$searchOperator1/@displayName"/>
                                                    <!-- Remove value/displayName for searchOperator2 and displayName for searchTermDate2 
                                                            Gets set again as required below-->
                                                    <xf:setvalue ref="xxf:instance('cohort-search-parameters')/query/searchTermDate2" value="''"/>
                                                    <xf:setvalue ref="xxf:instance('cohort-search-parameters')/query/searchTermDate2/@displayName"
                                                        value="''"/>
                                                    <xf:setvalue ref="xxf:instance('cohort-search-parameters')/query/searchOperator2" value="''"/>
                                                    <xf:setvalue ref="xxf:instance('cohort-search-parameters')/query/searchOperator2/@displayName"
                                                        value="''"/>
                                                </xf:action>
                                            </xf:select1>
                                            <!-- Don't show date inputs when comparator is 'any' -->
                                            <xf:group ref="xxf:instance('cohort-search-parameters')/query[searchOperator1!='any']">
                                                <!-- Search date 1 -->
                                                <xf:input ref="xxf:instance('cohort-search-parameters')/query/searchTermDate1">
                                                    <!-- Reactivate UI (if necessary) when user interacts -->
                                                    <xf:action ev:event="DOMFocusIn">
                                                        <xf:setvalue ref="xxf:instance('control-instance')/interfaceStatus" value="'active'"/>
                                                    </xf:action>
                                                    <xf:action ev:event="xforms-value-changed"
                                                        if="xxf:instance('control-instance')/interfaceStatus='active'">
                                                        <!-- Set displayName for searchTermDate1-->
                                                        <xf:setvalue ref="xxf:instance('cohort-search-parameters')/query/searchTermDate1/@displayName"
                                                            value="if (xxf:instance('cohort-search-parameters')/query/searchTermDate1 castable as xs:date) then format-date(xs:date(xxf:instance('cohort-search-parameters')/query/searchTermDate1), xxf:instance('view-parameters-instance')/dateDisplayFormat, xxf:instance('session-parameters-instance')/languageCode, (), ()) else xxf:instance('cohort-search-parameters')/query/searchTermDate1"
                                                        />
                                                    </xf:action>
                                                </xf:input>
                                                <!-- Search date 2 - when comparator has second value -->
                                                <xf:group
                                                    ref="xxf:instance('control-instance')/queryDefinition/comparators/comparator[@type='xs:date']/options/item[@selection=xxf:instance('cohort-search-parameters')/query/searchOperator1/@selection][@value2]">
                                                    <xf:output ref="./@displayName2"/>
                                                    <xf:input ref="xxf:instance('cohort-search-parameters')/query/searchTermDate2">
                                                        <!-- Reactivate UI (if necessary) when user interacts -->
                                                        <xf:action ev:event="DOMFocusIn">
                                                            <xf:setvalue ref="xxf:instance('control-instance')/interfaceStatus" value="'active'"/>
                                                        </xf:action>
                                                        <xf:action ev:event="xforms-value-changed"
                                                            if="xxf:instance('control-instance')/interfaceStatus='active'">
                                                            <!-- Set value/displayName for searchOperator2 and displayName for searchTermDate2-->
                                                            <xf:setvalue
                                                                ref="xxf:instance('cohort-search-parameters')/query/searchTermDate2/@displayName"
                                                                value="if (xxf:instance('cohort-search-parameters')/query/searchTermDate2 castable as xs:date) then format-date(xs:date(xxf:instance('cohort-search-parameters')/query/searchTermDate2), xxf:instance('view-parameters-instance')/dateDisplayFormat, xxf:instance('session-parameters-instance')/languageCode, (), ()) else xxf:instance('cohort-search-parameters')/query/searchTermDate2"/>
                                                            <xxf:variable name="searchOperator2"
                                                                select="xxf:instance('control-instance')/queryDefinition/comparators/comparator[@type='xs:date']/options/item[@selection=xxf:instance('cohort-search-parameters')/query/searchOperator1/@selection]"/>
                                                            <xf:setvalue ref="xxf:instance('cohort-search-parameters')/query/searchOperator2"
                                                                value="$searchOperator2/@value2"/>
                                                            <xf:setvalue
                                                                ref="xxf:instance('cohort-search-parameters')/query/searchOperator2/@displayName"
                                                                value="$searchOperator2/@displayName2"/>
                                                        </xf:action>
                                                    </xf:input>
                                                </xf:group>
                                            </xf:group>
                                        </xf:group>
                                        <!-- End of searching for date of birth -->
                                        <!--Searching for Age.
                                            The search terms are entered as integers, in the selected units of age.
                                            
                                            The actual searches are performed on dates of birth, calculated from the current date.
                                            The terms and comparator used for the search are different from the ones entered.
                                            
                                            The time interval for the search is found by multiplying the age by the ageUnits and casting to xs:dayTimeDuration or xs:yearMonthDuration
                                            
                                            If searching for 
                                                1. age=X then DoB is > current-date() - (interval+1) and =< current-date() - interval
                                                2. age!=X then DoB is =< current-date() - (interval+1) and > current-date() - interval
                                                3. age<X then DoB > current-date() - interval
                                                4. age=<X then DoB >= current-date() - (interval+1)
                                                5. age>X then DoB < current-date() - (interval+1)
                                                6. age>=X then DoB =< current-date() - interval
                                                7. age in range X to Y then DoB < current-date() - interval1 and >= current-date() - (interval2+1)
                                                   
                                           -->
                                        <xf:group ref="xxf:instance('cohort-search-parameters')/term[searchSubType='Age']">
                                            <!-- Units for age -->
                                            <xf:select1 ref="xxf:instance('cohort-search-parameters')/query/ageUnits">
                                                <xf:itemset nodeset="xxf:instance('control-instance')/queryDefinition/ageUnits/options/option">
                                                    <xf:label ref="./@displayName"/>
                                                    <xf:value ref="./@value"/>
                                                </xf:itemset>
                                                <xf:action ev:event="xforms-value-changed"
                                                    if="xxf:instance('control-instance')/interfaceStatus='active'">
                                                    <!-- Reset displayName for searchEntry -->
                                                    <xf:setvalue ref="xxf:instance('cohort-search-parameters')/query/searchEntry/@displayName"
                                                        value="concat( xxf:instance('control-instance')/searchSubType/options/item[@value=xxf:instance('cohort-search-parameters')/term/searchSubType]/@displayName,' ',xxf:instance('control-instance')/queryDefinition/ageUnits/options/option[@value=xxf:instance('cohort-search-parameters')/query/ageUnits]/@displayName)"/>
                                                    <!-- Reset the age query -->
                                                    <xf:dispatch name="set-age-query" target="main-model"/>
                                                </xf:action>
                                            </xf:select1>
                                            <!-- Comparator.
                                                 For selection, use the comparator for age - have the displayNames for xs:integer as that is what the age must be entered in.
                                                 -->
                                            <xf:select1 ref="xxf:instance('cohort-search-parameters')/query/searchOperator1/@selection">
                                                <xf:itemset
                                                    nodeset="xxf:instance('control-instance')/queryDefinition/comparators/comparator[@type='age']/options/item">
                                                    <xf:label ref="./@displayName"/>
                                                    <xf:value ref="./@selection"/>
                                                </xf:itemset>
                                                <!-- Reactivate UI (if necessary) when user interacts -->
                                                <xf:action ev:event="DOMFocusIn">
                                                    <xf:setvalue ref="xxf:instance('control-instance')/interfaceStatus" value="'active'"/>
                                                </xf:action>
                                                <xf:action ev:event="xforms-value-changed"
                                                    if="xxf:instance('control-instance')/interfaceStatus='active'">
                                                    <!-- Reset the age query -->
                                                    <xf:dispatch name="set-age-query" target="main-model"/>
                                                </xf:action>
                                            </xf:select1>
                                            <!-- Search term 3 -->
                                            <xf:input ref="xxf:instance('cohort-search-parameters')/query/searchTerm3" xxf:size="3">
                                                <!-- Reactivate UI (if necessary) when user interacts -->
                                                <xf:action ev:event="DOMFocusIn">
                                                    <xf:setvalue ref="xxf:instance('control-instance')/interfaceStatus" value="'active'"/>
                                                </xf:action>
                                                <xf:action ev:event="xforms-value-changed"
                                                    if="xxf:instance('control-instance')/interfaceStatus='active'">
                                                    <!-- Reset the age query -->
                                                    <xf:dispatch name="set-age-query" target="main-model"/>
                                                </xf:action>
                                            </xf:input>
                                            <!-- Debugging - show the date to be searched for -->
                                            <!--
                                            <xf:output ref="xxf:instance('cohort-search-parameters')/query/searchTermDate1"/>
                                            -->
                                            <!-- Search term 4 - when camparator has second value.
                                                 The comparator we look for here is for integer, since that is what age is expressed as-->
                                            <xf:group
                                                ref="xxf:instance('control-instance')/queryDefinition/comparators/comparator[@type='xs:integer']/options/item[@selection=xxf:instance('cohort-search-parameters')/query/searchOperator1/@selection][@value2]">
                                                <xf:output ref="./@displayName2"/>
                                                <xf:input ref="xxf:instance('cohort-search-parameters')/query/searchTerm4" xxf:size="3">
                                                    <!-- Reactivate UI (if necessary) when user interacts -->
                                                    <xf:action ev:event="DOMFocusIn">
                                                        <xf:setvalue ref="xxf:instance('control-instance')/interfaceStatus" value="'active'"/>
                                                    </xf:action>
                                                    <xf:action ev:event="xforms-value-changed"
                                                        if="xxf:instance('control-instance')/interfaceStatus='active'">
                                                        <!-- Reset the age query -->
                                                        <xf:dispatch name="set-age-query" target="main-model"/>
                                                    </xf:action>
                                                </xf:input>
                                            </xf:group>
                                            <!-- Debugging - show the date to be searched for -->
                                            <!--
                                            <xf:output ref="xxf:instance('cohort-search-parameters')/query/searchTermDate2"/>
                                            -->
                                        </xf:group>
                                        <!-- End of searching for age -->
                                        <!--Searching for effective time -->
                                        <xf:group ref="xxf:instance('cohort-search-parameters')/term[searchSubType='EffectiveTime']">
                                            <!-- Comparator -->
                                            <xf:select1 ref="xxf:instance('cohort-search-parameters')/query/searchOperator1/@selection">
                                                <xf:itemset
                                                    nodeset="xxf:instance('control-instance')/queryDefinition/comparators/comparator[@type='xs:date']/options/item">
                                                    <xf:label ref="./@displayName"/>
                                                    <xf:value ref="./@selection"/>
                                                </xf:itemset>
                                                <!-- Reactivate UI (if necessary) when user interacts -->
                                                <xf:action ev:event="DOMFocusIn">
                                                    <xf:setvalue ref="xxf:instance('control-instance')/interfaceStatus" value="'active'"/>
                                                </xf:action>
                                                <xf:action ev:event="xforms-value-changed"
                                                    if="xxf:instance('control-instance')/interfaceStatus='active'">
                                                    <!-- Set value/displayName for searchOperator1 -->
                                                    <xxf:variable name="searchOperator1"
                                                        select="xxf:instance('control-instance')/queryDefinition/comparators/comparator[@type='xs:date']/options/item[@selection=xxf:instance('cohort-search-parameters')/query/searchOperator1/@selection]"/>
                                                    <xf:setvalue ref="xxf:instance('cohort-search-parameters')/query/searchOperator1"
                                                        value="$searchOperator1/@value"/>
                                                    <xf:setvalue ref="xxf:instance('cohort-search-parameters')/query/searchOperator1/@displayName"
                                                        value="$searchOperator1/@displayName"/>
                                                    <!-- Remove value/displayName for searchOperator2 and displayName for searchTermDate2 
                                                        Gets set again as required below-->
                                                    <xf:setvalue ref="xxf:instance('cohort-search-parameters')/query/searchTermDate2" value="''"/>
                                                    <xf:setvalue ref="xxf:instance('cohort-search-parameters')/query/searchTermDate2/@displayName"
                                                        value="''"/>
                                                    <xf:setvalue ref="xxf:instance('cohort-search-parameters')/query/searchOperator2" value="''"/>
                                                    <xf:setvalue ref="xxf:instance('cohort-search-parameters')/query/searchOperator2/@displayName"
                                                        value="''"/>
                                                </xf:action>
                                            </xf:select1>
                                            <!-- Don't show date inputs when comparator is 'any' -->
                                            <xf:group ref="xxf:instance('cohort-search-parameters')/query[searchOperator1!='any']">
                                                <!-- Search date 1 -->
                                                <xf:input ref="xxf:instance('cohort-search-parameters')/query/searchTermDate1">
                                                    <!-- Reactivate UI (if necessary) when user interacts -->
                                                    <xf:action ev:event="DOMFocusIn">
                                                        <xf:setvalue ref="xxf:instance('control-instance')/interfaceStatus" value="'active'"/>
                                                    </xf:action>
                                                    <xf:action ev:event="xforms-value-changed"
                                                        if="xxf:instance('control-instance')/interfaceStatus='active'">
                                                        <!-- Set displayName for searchTermDate1-->
                                                        <xf:setvalue ref="xxf:instance('cohort-search-parameters')/query/searchTermDate1/@displayName"
                                                            value="if (xxf:instance('cohort-search-parameters')/query/searchTermDate1 castable as xs:date) then format-date(xs:date(xxf:instance('cohort-search-parameters')/query/searchTermDate1), xxf:instance('view-parameters-instance')/dateDisplayFormat, xxf:instance('session-parameters-instance')/languageCode, (), ()) else xxf:instance('cohort-search-parameters')/query/searchTermDate1"
                                                        />
                                                    </xf:action>
                                                </xf:input>
                                                <!-- Search date 2 - when comparator has second value -->
                                                <xf:group
                                                    ref="xxf:instance('control-instance')/queryDefinition/comparators/comparator[@type='xs:date']/options/item[@selection=xxf:instance('cohort-search-parameters')/query/searchOperator1/@selection][@value2]">
                                                    <xf:output ref="./@displayName2"/>
                                                    <xf:input ref="xxf:instance('cohort-search-parameters')/query/searchTermDate2">
                                                        <!-- Reactivate UI (if necessary) when user interacts -->
                                                        <xf:action ev:event="DOMFocusIn">
                                                            <xf:setvalue ref="xxf:instance('control-instance')/interfaceStatus" value="'active'"/>
                                                        </xf:action>
                                                        <xf:action ev:event="xforms-value-changed"
                                                            if="xxf:instance('control-instance')/interfaceStatus='active'">
                                                            <!-- Set value/displayName for searchOperator2 and displayName for searchTermDate2-->
                                                            <xf:setvalue
                                                                ref="xxf:instance('cohort-search-parameters')/query/searchTermDate2/@displayName"
                                                                value="if (xxf:instance('cohort-search-parameters')/query/searchTermDate2 castable as xs:date) then format-date(xs:date(xxf:instance('cohort-search-parameters')/query/searchTermDate2), xxf:instance('view-parameters-instance')/dateDisplayFormat, xxf:instance('session-parameters-instance')/languageCode, (), ()) else xxf:instance('cohort-search-parameters')/query/searchTermDate2"/>
                                                            <xxf:variable name="searchOperator2"
                                                                select="xxf:instance('control-instance')/queryDefinition/comparators/comparator[@type='xs:date']/options/item[@selection=xxf:instance('cohort-search-parameters')/query/searchOperator1/@selection]"/>
                                                            <xf:setvalue ref="xxf:instance('cohort-search-parameters')/query/searchOperator2"
                                                                value="$searchOperator2/@value2"/>
                                                            <xf:setvalue
                                                                ref="xxf:instance('cohort-search-parameters')/query/searchOperator2/@displayName"
                                                                value="$searchOperator2/@displayName2"/>
                                                        </xf:action>
                                                    </xf:input>
                                                </xf:group>
                                            </xf:group>
                                        </xf:group>
                                        <!-- End of searching for effective time -->
                                        <!--Searching for Author - need to select from list of users in same care team(s) as current user.
                                             -->
                                        <xf:group ref="xxf:instance('cohort-search-parameters')/term[searchSubType='Author']">
                                            <xxf:variable name="authorValues" select="xxf:instance('userSelection-instance')/user"/>
                                            <!-- Comparator -->
                                            <xf:select1 ref="xxf:instance('cohort-search-parameters')/query/searchOperator1/@selection">
                                                <xf:itemset
                                                    nodeset="xxf:instance('control-instance')/queryDefinition/comparators/comparator[@type='#CityEHR:ElementProperty:enumeratedValue']/options/item">
                                                    <xf:label ref="./@displayName"/>
                                                    <xf:value ref="./@selection"/>
                                                </xf:itemset>
                                                <!-- Reactivate UI (if necessary) when user interacts -->
                                                <xf:action ev:event="DOMFocusIn">
                                                    <xf:setvalue ref="xxf:instance('control-instance')/interfaceStatus" value="'active'"/>
                                                </xf:action>
                                                <xf:action ev:event="xforms-value-changed"
                                                    if="xxf:instance('control-instance')/interfaceStatus='active'">
                                                    <!-- Set value/displayName for searchOperator1 -->
                                                    <xxf:variable name="searchOperator1"
                                                        select="xxf:instance('control-instance')/queryDefinition/comparators/comparator[@type='#CityEHR:ElementProperty:enumeratedValue']/options/item[@selection=xxf:instance('cohort-search-parameters')/query/searchOperator1/@selection]"/>
                                                    <xf:setvalue ref="xxf:instance('cohort-search-parameters')/query/searchOperator1"
                                                        value="$searchOperator1/@value"/>
                                                    <xf:setvalue ref="xxf:instance('cohort-search-parameters')/query/searchOperator1/@displayName"
                                                        value="$searchOperator1/@displayName"/>
                                                </xf:action>
                                            </xf:select1>
                                            <!-- searchTerm3 -->
                                            <xf:select1 ref="xxf:instance('cohort-search-parameters')/query/searchTerm3">
                                                <xf:itemset nodeset="$authorValues">
                                                    <xf:label ref="./@displayName"/>
                                                    <xf:value ref="./@value"/>
                                                </xf:itemset>
                                                <!-- Reactivate UI (if necessary) when user interacts -->
                                                <xf:action ev:event="DOMFocusIn">
                                                    <xf:setvalue ref="xxf:instance('control-instance')/interfaceStatus" value="'active'"/>
                                                </xf:action>
                                                <xf:action ev:event="xforms-value-changed"
                                                    if="xxf:instance('control-instance')/interfaceStatus='active'">
                                                    <xf:setvalue ref="xxf:instance('cohort-search-parameters')/query/searchTerm3/@displayName"
                                                        value="$authorValues[@value=xxf:instance('cohort-search-parameters')/query/searchTerm3]/@displayName"
                                                    />
                                                </xf:action>
                                            </xf:select1>
                                        </xf:group>
                                        <!-- End of searching for author -->
                                    </xf:group>
                                    <!-- End of demographics or administration type search -->
                                    <!-- === Combination search.
                                             Combine search results from assembled cohorts using set operators 
                                             Select any two cohorts and combined with
                                                AND
                                                OR
                                                AND NOT 
                                          ========================================================================= -->
                                    <xf:group ref="xxf:instance('cohort-search-parameters')/term[searchType='Combine']">
                                        <!-- Cohort selections.
                                             If editing an existing term, then can only combine terms that have an id less than the current term
                                             The test on id must be done using the number of the search (i.e. 2 is less than 10)                
                                             If this is a new term then can combine all terms.
                                             Cannot combine a term with itself, so remove the selection made for the first term from secondTermSet -->
                                        <xxf:variable name="termId" select="xxf:instance('cohort-search-parameters')/term/id"/>
                                        <xxf:variable name="firstTermSet"
                                            select="if ($termId!='') then xxf:instance('cohort-search-instance')/searchTerms/term[number(id) lt number($termId)] else xxf:instance('cohort-search-instance')/searchTerms/term"/>
                                        <xxf:variable name="secondTermSet"
                                            select="$firstTermSet[not(id = xxf:instance('cohort-search-parameters')/query/searchEntry)]"/>
                                        <!-- First cohort. -->
                                        <xf:select1 ref="xxf:instance('cohort-search-parameters')/query/searchEntry">
                                            <xf:itemset nodeset="$firstTermSet">
                                                <xf:label ref="concat(./id,' - ',./description)"/>
                                                <xf:value ref="./id"/>
                                            </xf:itemset>
                                            <!-- If first cohort is selected to be the same as the second cohort, then need to reset -->
                                            <xf:action ev:event="xforms-value-changed">
                                                <xf:setvalue ref="xxf:instance('cohort-search-parameters')/query/searchTerm2"
                                                    value="if (.=xxf:instance('cohort-search-parameters')/query/searchEntry) then $secondTermSet[1]/id else ."
                                                />
                                            </xf:action>
                                        </xf:select1>
                                        <xhtml:br />
                                        <!-- Set operators -->
                                        <xf:select1 ref="xxf:instance('cohort-search-parameters')/query/searchOperator1">
                                            <xf:itemset nodeset="xxf:instance('control-instance')/queryDefinition/combineType/options/item">
                                                <xf:label ref="@displayName"/>
                                                <xf:value ref="@value"/>
                                            </xf:itemset>
                                        </xf:select1>
                                        <xhtml:br />
                                        <!-- Second cohort. -->
                                        <xf:select1 ref="xxf:instance('cohort-search-parameters')/query/searchTerm2">
                                            <xf:itemset nodeset="$secondTermSet">
                                                <xf:label ref="concat(./id,' - ',./description)"/>
                                                <xf:value ref="./id"/>
                                            </xf:itemset>
                                        </xf:select1>
                                    </xf:group>
                                    <!-- === Combination of all selected search.
                                        Combine search results from assembled cohorts using set operators 
                                        For the selected cohorts (must be at least two) using
                                        AND
                                        OR
                                        ========================================================================= -->
                                    <xf:group ref="xxf:instance('cohort-search-parameters')/term[searchType='CombineSelected']">
                                        <xf:output ref="xxf:instance('control-instance')/queryDefinition/combineSelectedType/@displayName"/>
                                        <!-- Set operators -->
                                        <xf:select1 ref="xxf:instance('cohort-search-parameters')/query/searchOperator1">
                                            <xf:itemset nodeset="xxf:instance('control-instance')/queryDefinition/combineSelectedType/options/item">
                                                <xf:label ref="@displayName"/>
                                                <xf:value ref="@value"/>
                                            </xf:itemset>
                                        </xf:select1>
                                    </xf:group>
                                    <!-- === Include a saved cohort in the current set of search terms 
                                             Displays selection of the cohort.
                                        =========================================================================================== -->
                                    <xf:group ref="xxf:instance('cohort-search-parameters')/term[searchType='IncludeCohort']">
                                        <xxf:variable name="savedCohortList"
                                            select="(xxf:instance('userSearches-instance')/search | xxf:instance('sharedSearches-instance')/search)[searchTerms='false']"/>
                                        <!-- Select the saved cohort -->
                                        <xf:select1 ref="xxf:instance('cohort-search-parameters')/query/searchEntry">
                                            <xf:itemset nodeset="$savedCohortList">
                                                <xf:label ref="cohortName"/>
                                                <xf:value ref="handle"/>
                                            </xf:itemset>
                                            <!-- Reactivate UI (if necessary) when user interacts -->
                                            <xf:action ev:event="DOMFocusIn">
                                                <xf:setvalue ref="xxf:instance('control-instance')/interfaceStatus" value="'active'"/>
                                            </xf:action>
                                            <xf:action ev:event="xforms-value-changed" if="xxf:instance('control-instance')/interfaceStatus='active'">
                                                <!-- Don't need to do anything here -->
                                            </xf:action>
                                        </xf:select1>
                                    </xf:group>
                                    <!-- === Search for Composition with one or more Observations
                                         Repeated groups of observation selection
                                        =========================================================================================== -->
                                    <xf:group ref="xxf:instance('cohort-search-parameters')/term[searchType='Composition']"> </xf:group>
                                    <!-- === Search for Observation
                                             Can be a general observation (in which case searchEntry is selectable.
                                             Or a PrimarySearch observation (in which case searchEntry is already selected and is fixed)
                                        
                                        Entry    Cluster    Element      Comparator   Value1    Value2
                                        ST1      ST2        ST3          C1           ST4       ST5
                                        
                                        1) Select the Entry
                                        2) List all elements/clusters or displayName of single element/cluster or nothing if only one element/cluster with no displayName
                                        3) Comparator depends on type of the element
                                        4) Value1 is bound to the type for the element
                                        5) Xalue2 if comparator is a range
                                        =========================================================================================== -->
                                    <xf:group
                                        ref="xxf:instance('cohort-search-parameters')/term[searchType='Observation' or starts-with(searchType,'#ISO-13606:Entry')]">
                                        <!-- First term is the entry 
                                             Only list entries that are designated as searchable (with @cityEHR:cohortSearch) in the dictionary or are primary searches.
                                             Also, cannot search for aliased entries (i.e. only search when @root = @extension-->
                                        <xxf:variable name="selectEntryClass"
                                            select="if (xxf:instance('cohort-search-parameters')/term/searchType='Observation') then '' else 'hidden'"/>
                                        <xxf:variable name="displayEntryClass" select="if ($selectEntryClass='hidden') then '' else 'hidden'"/>
                                        <!-- Can select the entry to be searchEntry if this is a general Observation search.
                                            Until 2017-05-12 had [cda:code[@codeSystem='cityEHR']/@displayName!=''] in itemset, so that only entries with a displayName could be selected. -->
                                        <xf:select1 class="{$selectEntryClass}" ref="xxf:instance('cohort-search-parameters')/query/searchEntry">
                                            <xf:itemset
                                                nodeset="xxf:sort(xxf:instance('dictionary-instance')/iso-13606:entryCollection/iso-13606:entry[@cityEHR:cohortSearch=('#CityEHR:EntryProperty:Searchable','#CityEHR:EntryProperty:PrimarySearch')]/cda:component/cda:observation[cda:id/@root=cda:id/@extension],cda:code[@codeSystem='cityEHR']/@displayName,'text', 'ascending')">
                                                <xf:label
                                                    ref="if (cda:code[@codeSystem='cityEHR']/@displayName != '') then cda:code[@codeSystem='cityEHR']/@displayName else substring-after(cda:id/@extension,'#ISO-13606:Entry:')"/>
                                                <xf:value ref="cda:id/@extension"/>
                                            </xf:itemset>
                                            <!-- Reactivate UI (if necessary) when user interacts -->
                                            <xf:action ev:event="DOMFocusIn">
                                                <xf:setvalue ref="xxf:instance('control-instance')/interfaceStatus" value="'active'"/>
                                            </xf:action>
                                            <!-- Set up the cluster/element selection and set default.
                                                
                                                <elementSelection>
                                                <element id="" displayName="" elementIRI="" elementDisplayName="" type="" elementType="" clusterId="" clusterDisplayName=""/>
                                                </elementSelection>
                                            -->
                                            <xf:action ev:event="xforms-value-changed" if="xxf:instance('control-instance')/interfaceStatus='active'">
                                                <!-- Set up the default values for the query, based on the selected entry -->
                                                <xf:dispatch name="set-observation-query" target="main-model"/>
                                            </xf:action>
                                        </xf:select1>
                                        <!-- Just display the searchEntry if this is a PrimarySearch entry -->
                                        <xf:output class="{$displayEntryClass}"
                                            ref="xxf:instance('cohort-search-parameters')/query/searchEntry/@displayName"/>
                                        <!-- All the rest is on the next lines of the input - see below -->
                                        <!-- Display selections for debugging -->
                                        <!--
                                        <xhtml:p>Entry: <xf:output ref="xxf:instance('cohort-search-parameters')/query/searchEntry"/></xhtml:p>
                                        <xhtml:p>Cluster: <xf:output ref="xxf:instance('cohort-search-parameters')/query/searchTerm2"/></xhtml:p>
                                        <xhtml:p>Element: <xf:output ref="xxf:instance('cohort-search-parameters')/query/searchTerm3"/></xhtml:p>

                                        <xhtml:p>Id: <xf:output ref="xxf:instance('cohort-search-parameters')/element/@id"/></xhtml:p>
                                        <xhtml:p>Element Id: <xf:output ref="xxf:instance('cohort-search-parameters')/element/@elementIRI"/></xhtml:p>
                                        <xhtml:p>Element displayName: <xf:output ref="xxf:instance('cohort-search-parameters')/element/@elementDisplayName"/></xhtml:p>
                                        <xhtml:p>Element Value Type: <xf:output ref="xxf:instance('cohort-search-parameters')/element/@type"/></xhtml:p>
                                        <xhtml:p>Element Type: <xf:output ref="xxf:instance('cohort-search-parameters')/element/@elementType"/></xhtml:p>
                                        <xhtml:p>Element Cluster Id: <xf:output ref="xxf:instance('cohort-search-parameters')/element/@clusterId"/></xhtml:p>
                                        <xhtml:p>Element Cluster displayName: <xf:output ref="xxf:instance('cohort-search-parameters')/element/@clusterDisplayName"/></xhtml:p>
                                        <xhtml:p>Element overall displayName: <xf:output ref="xxf:instance('cohort-search-parameters')/element/@displayName"/></xhtml:p>
                                        -->
                                    </xf:group>
                                    <!-- Finished Observation search selection -->
                                </xhtml:td>


                                <!-- ===================================================================== 
                                     Third cell, second row
                                     Set effectiveTime for the search - defaults to nothing
                                     Set scope of search 
                                     Set context of search
                                    ====================================================================== -->
                                <xhtml:td align="right">
                                    <!-- Effective time of the query
                                         Patient age
                                         Only for Observation or Primary searches.
                                          -->
                                    <xf:group
                                        ref="xxf:instance('cohort-search-parameters')/term[searchType='Observation' or starts-with(searchType,'#ISO-13606:Entry')]">
                                        <!-- Effective time
                                             User selects effectiveTimeComparator/@selection, 
                                             which is used to set effectiveTimeComparator and effectiveTimeComparator2 -->
                                        <xhtml:span>
                                            <xf:output
                                                ref="xxf:instance('view-parameters-instance')/staticParameters/cityEHRCohortSearch/effectiveTime/@label"/>
                                            <xxf:variable name="comparatorOptions"
                                                select="xxf:instance('control-instance')/queryDefinition/comparators/comparator[@type='effectiveTime']/options/item"/>
                                            <xf:select1 ref="xxf:instance('cohort-search-parameters')/query/effectiveTimeComparator/@selection">
                                                <xf:itemset nodeset="$comparatorOptions">
                                                    <xf:label ref="./@displayName"/>
                                                    <xf:value ref="./@selection"/>
                                                </xf:itemset>
                                                <!-- Reactivate UI (if necessary) when user interacts -->
                                                <xf:action ev:event="DOMFocusIn">
                                                    <xf:setvalue ref="xxf:instance('control-instance')/interfaceStatus" value="'active'"/>
                                                </xf:action>
                                                <!-- Set effectiveTimeComparator and effectiveTimeComparator2 -->
                                                <xf:action ev:event="xforms-value-changed"
                                                    if="xxf:instance('control-instance')/interfaceStatus='active'">
                                                    <xxf:variable name="comparator"
                                                        select="$comparatorOptions[@selection=xxf:instance('cohort-search-parameters')/query/effectiveTimeComparator/@selection]"/>
                                                    <!-- effectiveTimeComparator -->
                                                    <xf:setvalue ref="xxf:instance('cohort-search-parameters')/query/effectiveTimeComparator"
                                                        value="$comparator/@value"/>
                                                    <xf:setvalue
                                                        ref="xxf:instance('cohort-search-parameters')/query/effectiveTimeComparator/@displayName"
                                                        value="$comparator/@displayName"/>
                                                    <!-- effectiveTimeComparator2 -->
                                                    <xf:setvalue ref="xxf:instance('cohort-search-parameters')/query/effectiveTimeComparator2"
                                                        value="if (exists($comparator/@value2)) then $comparator/@value2 else ''"/>
                                                    <xf:setvalue
                                                        ref="xxf:instance('cohort-search-parameters')/query/effectiveTimeComparator2/@displayName"
                                                        value="if (exists($comparator/@displayName2)) then $comparator/@displayName2 else ''"/>
                                                </xf:action>
                                            </xf:select1>
                                            <!-- effectiveTime, if there is a comparator -->
                                            <xf:group ref="xxf:instance('cohort-search-parameters')/query[effectiveTimeComparator!='']">
                                                <xf:input ref="xxf:instance('cohort-search-parameters')/query/effectiveTime">
                                                    <xf:action ev:event="xforms-value-changed">
                                                        <xf:setvalue ref="xxf:instance('cohort-search-parameters')/query/effectiveTime/@displayName"
                                                            value="'hi'"/>
                                                    </xf:action>
                                                </xf:input>
                                            </xf:group>
                                            <!-- Range, if there is a second comparator -->
                                            <xf:group ref="xxf:instance('cohort-search-parameters')/query[effectiveTimeComparator2!='']">
                                                <xf:output ref="xxf:instance('cohort-search-parameters')/query/effectiveTimeComparator2/@displayName"/>
                                                <xf:input ref="xxf:instance('cohort-search-parameters')/query/effectiveTime2">
                                                    <xf:action ev:event="xforms-value-changed">
                                                        <xf:setvalue ref="xxf:instance('cohort-search-parameters')/query/effectiveTime2/@displayName"
                                                            value="'hi 2'"/>
                                                    </xf:action>
                                                </xf:input>
                                            </xf:group>
                                        </xhtml:span>
                                        <xhtml:br />
                                        <!-- Patient age
                                             User selects ageComparator/@selection, 
                                             which is used to set ageComparator and ageComparator2 -->
                                        <xhtml:span>
                                            <xf:output
                                                ref="xxf:instance('view-parameters-instance')/staticParameters/cityEHRCohortSearch/patientAge/@label"/>
                                            <xxf:variable name="comparatorOptions"
                                                select="xxf:instance('control-instance')/queryDefinition/comparators/comparator[@type='effectiveAge']/options/item"/>
                                            <xf:select1 ref="xxf:instance('cohort-search-parameters')/query/ageComparator/@selection">
                                                <xf:itemset nodeset="$comparatorOptions">
                                                    <xf:label ref="./@displayName"/>
                                                    <xf:value ref="./@selection"/>
                                                </xf:itemset>
                                                <!-- Reactivate UI (if necessary) when user interacts -->
                                                <xf:action ev:event="DOMFocusIn">
                                                    <xf:setvalue ref="xxf:instance('control-instance')/interfaceStatus" value="'active'"/>
                                                </xf:action>
                                                <!-- Set ageComparator and ageComparator2 -->
                                                <xf:action ev:event="xforms-value-changed"
                                                    if="xxf:instance('control-instance')/interfaceStatus='active'">
                                                    <xxf:variable name="comparator"
                                                        select="$comparatorOptions[@selection=xxf:instance('cohort-search-parameters')/query/ageComparator/@selection]"/>
                                                    <!-- ageComparator -->
                                                    <xf:setvalue ref="xxf:instance('cohort-search-parameters')/query/ageComparator"
                                                        value="$comparator/@value"/>
                                                    <xf:setvalue ref="xxf:instance('cohort-search-parameters')/query/ageComparator/@displayName"
                                                        value="$comparator/@displayName"/>
                                                    <!-- ageComparator2 -->
                                                    <xf:setvalue ref="xxf:instance('cohort-search-parameters')/query/ageComparator2"
                                                        value="if (exists($comparator/@value2)) then $comparator/@value2 else ''"/>
                                                    <xf:setvalue ref="xxf:instance('cohort-search-parameters')/query/ageComparator2/@displayName"
                                                        value="if (exists($comparator/@displayName2)) then $comparator/@displayName2 else ''"/>
                                                </xf:action>
                                            </xf:select1>
                                            <!-- age, if there is a comparator -->
                                            <xf:group ref="xxf:instance('cohort-search-parameters')/query[ageComparator!='']">
                                                <xf:input xxf:size="4" ref="xxf:instance('cohort-search-parameters')/query/age"/>
                                            </xf:group>
                                            <!-- Range, if there is a second comparator -->
                                            <xf:group ref="xxf:instance('cohort-search-parameters')/query[ageComparator2!='']">
                                                <xf:output ref="xxf:instance('cohort-search-parameters')/query/ageComparator2/@displayName"/>
                                                <xf:input xxf:size="4" ref="xxf:instance('cohort-search-parameters')/query/age2"/>
                                            </xf:group>
                                        </xhtml:span>
                                        <xhtml:br />
                                    </xf:group>
                                    <!-- Scope of the query - not for combine or administation searches -->
                                    <xf:group
                                        ref="xxf:instance('cohort-search-parameters')/term[not(searchType=('','Combine','CombineSelected','Administration','IncludeCohort'))]">
                                        <!-- Hit count uses the comparator for integer -->
                                        <xxf:variable name="comparator"
                                            select="xxf:instance('control-instance')/queryDefinition/comparators/comparator[@type='xs:integer']"/>
                                        <xf:output
                                            ref="xxf:instance('view-parameters-instance')/staticParameters/cityEHRCohortSearch/searchScope/displayName"/>
                                        <!-- Select the scope -->
                                        <xf:select1 ref="xxf:instance('cohort-search-parameters')/query/searchScope">
                                            <xf:itemset
                                                nodeset="xxf:instance('view-parameters-instance')/staticParameters/cityEHRCohortSearch/searchScope/options/item">
                                                <xf:label ref="./@displayName"/>
                                                <xf:value ref="./@value"/>
                                            </xf:itemset>
                                            <!-- Reactivate UI (if necessary) when user interacts -->
                                            <xf:action ev:event="DOMFocusIn">
                                                <xf:setvalue ref="xxf:instance('control-instance')/interfaceStatus" value="'active'"/>
                                            </xf:action>
                                            <xf:action ev:event="xforms-value-changed" if="xxf:instance('control-instance')/interfaceStatus='active'">
                                                <!-- Initialise hit count parameters when scope selection changes -->
                                                <!-- Values -->
                                                <xf:setvalue ref="xxf:instance('cohort-search-parameters')/query/searchHitCount1" value="''"/>
                                                <xf:setvalue ref="xxf:instance('cohort-search-parameters')/query/searchHitCount2" value="''"/>
                                                <!-- comparator - set to defined default selection.
                                                     Other parameters get set by xforms-value-changed on searchHitCountComparator/@selection -->
                                                <xf:setvalue ref="xxf:instance('cohort-search-parameters')/query/searchHitCountComparator/@selection"
                                                    value="$comparator/options/item[1]/@selection"/>
                                            </xf:action>
                                        </xf:select1>
                                        <!-- Scope is number of hits -->
                                        <xf:group ref="xxf:instance('cohort-search-parameters')/query[searchScope=('count','distinctCount')]">
                                            <xxf:variable name="comparatorOptions" select="$comparator/options/item"/>
                                            <xf:select1 ref="xxf:instance('cohort-search-parameters')/query/searchHitCountComparator/@selection">
                                                <xf:itemset nodeset="$comparatorOptions">
                                                    <xf:label ref="./@displayName"/>
                                                    <xf:value ref="./@selection"/>
                                                </xf:itemset>
                                                <!-- Reactivate UI (if necessary) when user interacts -->
                                                <xf:action ev:event="DOMFocusIn">
                                                    <xf:setvalue ref="xxf:instance('control-instance')/interfaceStatus" value="'active'"/>
                                                </xf:action>
                                                <!-- Set the selection -->
                                                <xf:action ev:event="xforms-value-changed"
                                                    if="xxf:instance('control-instance')/interfaceStatus='active'">
                                                    <xxf:variable name="selectedComparator"
                                                        select="$comparatorOptions[@selection=xxf:instance('cohort-search-parameters')/query/searchHitCountComparator/@selection]"/>
                                                    <xf:setvalue ref="xxf:instance('cohort-search-parameters')/query/searchHitCountComparator"
                                                        value="$selectedComparator/@value"/>
                                                    <xf:setvalue
                                                        ref="xxf:instance('cohort-search-parameters')/query/searchHitCountComparator/@displayName"
                                                        value="$selectedComparator/@displayName"/>
                                                    <!-- Set (or clear) the second comparator -->
                                                    <xf:setvalue ref="xxf:instance('cohort-search-parameters')/query/searchHitCountComparator2"
                                                        value="if (exists($selectedComparator/@value2)) then $selectedComparator/@value2 else ''"/>
                                                    <xf:setvalue
                                                        ref="xxf:instance('cohort-search-parameters')/query/searchHitCountComparator2/@displayName"
                                                        value="if (exists($selectedComparator/@displayName2)) then $selectedComparator/@displayName2 else ''"
                                                    />
                                                </xf:action>
                                            </xf:select1>
                                            <!-- Input first value -->
                                            <xf:input xxf:size="3" ref="xxf:instance('cohort-search-parameters')/query/searchHitCount1"/>
                                            <!-- Input second value, if needed -->
                                            <xhtml:span
                                                class="{if (xxf:instance('cohort-search-parameters')/query/searchHitCountComparator2 != '') then '' else 'hidden'}">
                                                <xf:output ref="xxf:instance('cohort-search-parameters')/query/searchHitCountComparator2/@displayName"/>
                                                <xf:input xxf:size="3" ref="xxf:instance('cohort-search-parameters')/query/searchHitCount2"/>
                                            </xhtml:span>
                                        </xf:group>
                                        <xhtml:br />
                                    </xf:group>
                                    <!-- Context of the query - only for Administration searches -->
                                    <xf:group ref="xxf:instance('cohort-search-parameters')/term[searchType='Administration']">
                                        <xf:output
                                            ref="xxf:instance('view-parameters-instance')/staticParameters/cityEHRCohortSearch/searchContext/displayName"/>
                                        <!-- If user has access - change searchLocation between records and data -->
                                        <xxf:variable name="searchLocationParameter"
                                            select="xxf:instance('view-parameters-instance')/staticParameters/cityEHRCohortSearch/searchLocation"/>
                                        <xxf:variable name="selectionClass"
                                            select="if ($searchLocationParameter/role/@value=xxf:instance('user-instance')/rbac/role/@value) then '' else 'hidden'"/>
                                        <xxf:variable name="searchLocation" select="xxf:instance('cohort-search-parameters')/term/searchLocation"/>
                                        <xf:select1 class="{$selectionClass}" ref="$searchLocation">
                                            <xf:itemset nodeset="$searchLocationParameter/options/item">
                                                <xf:label ref="@displayName"/>
                                                <xf:value ref="@value"/>
                                            </xf:itemset>
                                            <!-- Set displayName on selection -->
                                            <xf:action ev:event="xforms-value-changed" if="xxf:instance('control-instance')/interfaceStatus='active'">
                                                <xf:setvalue ref="$searchLocation/@displayName"
                                                    value="$searchLocationParameter/options/item[@value=$searchLocation]/@displayName"/>
                                            </xf:action>
                                        </xf:select1>
                                        <!-- Search context - select composition from searchContextSelection -->
                                        <xf:select1 ref="xxf:instance('cohort-search-parameters')/query/searchContext">
                                            <xf:itemset nodeset="xxf:instance('cohort-search-parameters')/searchContextSelection/item">
                                                <xf:label ref="./@displayName"/>
                                                <xf:value ref="./@value"/>
                                            </xf:itemset>
                                            <!-- Reactivate UI (if necessary) when user interacts -->
                                            <xf:action ev:event="DOMFocusIn">
                                                <xf:setvalue ref="xxf:instance('control-instance')/interfaceStatus" value="'active'"/>
                                            </xf:action>
                                            <!-- Set displayName on selection -->
                                            <xf:action ev:event="xforms-value-changed" if="xxf:instance('control-instance')/interfaceStatus='active'">
                                                <xf:setvalue ref="xxf:instance('cohort-search-parameters')/query/searchContext/@displayName"
                                                    value="xxf:instance('cohort-search-parameters')/searchContextSelection/item[@value=xxf:instance('cohort-search-parameters')/query/searchContext]/@displayName"
                                                />
                                            </xf:action>
                                        </xf:select1>
                                        <xhtml:br />
                                    </xf:group>
                                </xhtml:td>
                            </xhtml:tr>

                            <!-- If this is a search for observations then needs additional rows to input the element search criteria.
                                 There is always at least one row (search criteria)
                                 Rows can be added until all elements are set.
                                 
                                 The individual queries are in the query element of the elementQuery set 
                                 
                                 Each query can have child query elements to hold additional value conditions (or) on the same element
                                 -->
                            <xf:repeat id="elementQueryRepeat" nodeset="xxf:instance('cohort-search-parameters')/elementQuery/query">
                                <xxf:variable name="position" select="position()"/>
                                <xxf:variable name="query" select="."/>
                                <xhtml:tr>
                                    <!-- First cell has buttons to add/remove element search terms.
                                         Unless there is only one element. -->
                                    <xhtml:td align="right" valign="top">
                                        <xf:group ref="xxf:instance('cohort-search-parameters')/elementSelection/element[2]">
                                            <xxf:variable name="addClass" select="if ($position=1) then '' else 'hidden'"/>
                                            <xxf:variable name="removeClass" select="if ($position=1) then 'hidden' else ''"/>
                                            <!-- Add a new search term -->
                                            <xf:trigger class="{$addClass}" appearance="minimal">
                                                <xf:label>
                                                    <xhtml:img src="{xxf:instance('view-parameters-instance')/staticFileRoot}/icons/add.png" />
                                                </xf:label>
                                                <xf:hint>
                                                    <xf:output
                                                        ref="xxf:instance('view-parameters-instance')/staticParameters/cityEHRCohortSearch/addQueryLabel"
                                                    />
                                                </xf:hint>
                                                <xf:action ev:event="DOMActivate">
                                                    <!-- Add a new element query -->
                                                    <xf:dispatch name="add-element-query" target="main-model"/>
                                                </xf:action>
                                            </xf:trigger>
                                            <!-- Remove search term -->
                                            <xf:trigger class="{$removeClass}" appearance="minimal">
                                                <xf:label>
                                                    <xhtml:img src="{xxf:instance('view-parameters-instance')/staticFileRoot}/icons/remove.png" />
                                                </xf:label>
                                                <xf:hint>
                                                    <xf:output
                                                        ref="xxf:instance('view-parameters-instance')/staticParameters/cityEHRCohortSearch/removeQueryLabel"
                                                    />
                                                </xf:hint>
                                                <xf:action ev:event="DOMActivate">
                                                    <xf:delete nodeset="$query"/>
                                                    <xf:recalculate model="main-model"/>
                                                </xf:action>
                                            </xf:trigger>
                                        </xf:group>
                                    </xhtml:td>

                                    <!-- Set the element search term in the second cell
                                         This is a sub-table to allow for repeated rows of 'or' conditions on the element value.
                                         The or conditions are inserted as query children of the $query
                                         The table has one row for each or condition, including the $query.
                                         Each row has two cells - first one for the condition, second for the add/delete button -->
                                    <xhtml:td align="left">
                                        <!-- The first valueCondition is the $query itself; subsequent valueConditions are the child query elements of $query
                                             searchTerm3 (the elementIRI) is set on $query as searchTerm3
                                             and then propagted to each $query/query as it is added (using set-element-condition) -->
                                        <xxf:variable name="elementValueConditions" select="($query | $query/query)"/>
                                        <xhtml:table>
                                            <!-- One row for each condition .
                                                 The valueCondition is a query element (either $query or $query/query) -->
                                            <xf:repeat nodeset="$elementValueConditions">
                                                <xxf:variable name="valueCondition" select="."/>
                                                <xhtml:tr>
                                                    <xhtml:td>
                                                        <!-- Selection/display of the element (including in cluster)
                                                             If there is more than one element for the entry, then show selection.
                                                             Or just display the element displayName (if there is only one element)
                                                             Only need to select/display the element for the first value condition 
                                                             Element set includes elements that are within clusters
                                                        -->
                                                        <xf:group ref="$valueCondition/parent::elementQuery">
                                                            <!-- In this xf:group $valueCondtion is the same element as $query.
                                                                 So we are using $query -->
                                                            <xf:group ref="xxf:instance('cohort-search-parameters')/elementSelection/element[2]">
                                                                <xf:select1 ref="$query/searchTerm3">
                                                                    <xf:itemset
                                                                        nodeset="xxf:instance('cohort-search-parameters')/elementSelection/element">
                                                                        <xf:label ref="./@displayName"/>
                                                                        <xf:value ref="./@elementIRI"/>
                                                                    </xf:itemset>
                                                                    <!-- Reactivate UI (if necessary) when user interacts -->
                                                                    <xf:action ev:event="DOMFocusIn">
                                                                        <xf:setvalue ref="xxf:instance('control-instance')/interfaceStatus"
                                                                           value="'active'"/>
                                                                    </xf:action>
                                                                    <xf:action ev:event="xforms-value-changed"
                                                                        if="xxf:instance('control-instance')/interfaceStatus='active'">
                                                                        <!-- Set the element conditions -->
                                                                        <xf:dispatch name="set-element-condition" target="main-model">
                                                                           <xxf:context name="query" select="$query"/>
                                                                           <xxf:context name="elementIRI" select="$query/searchTerm3"/>
                                                                        </xf:dispatch>
                                                                    </xf:action>
                                                                </xf:select1>
                                                            </xf:group>
                                                            <!-- Or if there is only one element, and it has a displayName then just display it -->
                                                            <xf:group
                                                                ref="xxf:instance('cohort-search-parameters')/elementSelection/element[1][@elementDisplayName!='' or @clusterDisplayName!=''][not(following-sibling::*)]">
                                                                <xf:output ref="./@displayName"/>
                                                            </xf:group>
                                                        </xf:group>
                                                        <!-- Display the 'or' connector label for additional value conditions. -->
                                                        <xf:output
                                                            ref="if ($valueCondition/parent::query) then xxf:instance('view-parameters-instance')/staticParameters/cityEHRCohortSearch/valueConditionOrLabel else ''"
                                                        />
                                                    </xhtml:td>

                                                    <!-- Element value conditiona -->
                                                    <xhtml:td>
                                                        <!-- Comparator depends on the type of the element -->
                                                        <xxf:variable name="comparatorType"
                                                            select="if ($query/searchTerm3/@type=('#CityEHR:ElementProperty:enumeratedValue','#CityEHR:ElementProperty:enumeratedCalculatedValue','#CityEHR:ElementProperty:enumeratedDirectory','#CityEHR:ElementProperty:enumeratedClass')) then $query/searchTerm3/@type else $query/searchTerm4/@type"/>
                                                        <xxf:variable name="comparatorSelections"
                                                            select="xxf:instance('control-instance')/queryDefinition/comparators/comparator[@type=$comparatorType]/options/item"/>
                                                        <xf:select1 ref="$valueCondition/searchOperator1/@selection">
                                                            <xf:itemset nodeset="$comparatorSelections">
                                                                <xf:label ref="./@displayName"/>
                                                                <xf:value ref="./@selection"/>
                                                            </xf:itemset>
                                                            <!-- Reactivate UI (if necessary) when user interacts -->
                                                            <xf:action ev:event="DOMFocusIn">
                                                                <xf:setvalue ref="xxf:instance('control-instance')/interfaceStatus" value="'active'"/>
                                                            </xf:action>
                                                            <!-- Only trigger action on change if the operator has been set and the interface is active -->
                                                            <xf:action ev:event="xforms-value-changed"
                                                                if="$valueCondition/searchOperator1/@selection != '' and xxf:instance('control-instance')/interfaceStatus='active'">
                                                                <xxf:variable name="searchOperator"
                                                                    select="$comparatorSelections[@selection=$valueCondition/searchOperator1/@selection]"/>
                                                                <!-- Set value/displayName for searchOperator1 -->
                                                                <xf:setvalue ref="$valueCondition/searchOperator1" value="$searchOperator/@value"/>
                                                                <xf:setvalue ref="$valueCondition/searchOperator1/@displayName"
                                                                    value="$searchOperator/@displayName"/>
                                                                <!-- Set searchOperator2 if necessary -->
                                                                <xf:setvalue ref="$valueCondition/searchOperator2"
                                                                    value="if (exists($searchOperator/@value2)) then $searchOperator/@value2 else ''"/>
                                                                <xf:setvalue ref="$valueCondition/searchOperator2/@displayName"
                                                                    value="if (exists($searchOperator/@displayName2)) then $searchOperator/@displayName2 else ''"/>
                                                                <!-- Get the element that was selected (used to set searchTerm4 and searchTerm5) -->
                                                                <xxf:variable name="element"
                                                                    select="xxf:instance('cohort-search-parameters')/elementSelection/element[@elementIRI=$query/searchTerm3]"/>
                                                                <!-- Reset searchTerm4 (since operator has changed)  -->
                                                                <xf:action>
                                                                    <!-- Enumerated value or directory (but only if operator is not 'any') -->
                                                                    <xf:action
                                                                        if="$searchOperator/@value!='any' and $element/@elementType = ('#CityEHR:ElementProperty:enumeratedValue','#CityEHR:ElementProperty:enumeratedCalculatedValue','#CityEHR:ElementProperty:enumeratedDirectory')">
                                                                        <xxf:variable name="elementValues"
                                                                           select="if ($element/@elementType=('#CityEHR:ElementProperty:enumeratedValue','#CityEHR:ElementProperty:enumeratedCalculatedValue')) then xxf:instance('dictionary-instance')/iso-13606:elementCollection/iso-13606:element[@root=$query/searchTerm3]/iso-13606:data
                                                                            else if ($element/@elementType='#CityEHR:ElementProperty:enumeratedDirectory') then xxf:instance('directoryElements-instance')/iso-13606:elementCollection/iso-13606:element[@root=$query/searchTerm3]/iso-13606:data
                                                        else ()"/>
                                                                        <xf:setvalue ref="$valueCondition/searchTerm4"
                                                                           value="$elementValues[1]/@value"/>
                                                                        <xf:setvalue ref="$valueCondition/searchTerm4/@displayName"
                                                                           value="$elementValues[1]/@displayName"/>
                                                                    </xf:action>
                                                                    <!-- Anything else -->
                                                                    <xf:action
                                                                        if="$searchOperator/@value='any' or not($element/@elementType = ('#CityEHR:ElementProperty:enumeratedValue','#CityEHR:ElementProperty:enumeratedCalculatedValue','#CityEHR:ElementProperty:enumeratedDirectory'))">
                                                                        <xf:setvalue ref="$valueCondition/searchTerm4" value="''"/>
                                                                        <xf:setvalue ref="$valueCondition/searchTerm4/@displayName" value="''"/>
                                                                    </xf:action>
                                                                    <!-- Set type of searchTerm4 -->
                                                                    <xf:setvalue ref="$valueCondition/searchTerm4/@type" value="$element/@type"/>
                                                                </xf:action>
                                                                <!-- Reset searchTerm5 -->
                                                                <xf:action>
                                                                    <xf:setvalue ref="$valueCondition/searchTerm5" value="''"/>
                                                                    <xf:setvalue ref="$valueCondition/searchTerm5/@displayName" value="''"/>
                                                                    <xf:setvalue ref="$valueCondition/searchTerm5/@type" value="$element/@type"/>
                                                                </xf:action>
                                                                <!-- Rebuild model, so that bindings on data types are made -->
                                                                <xf:action>
                                                                    <xf:rebuild model="main-model"/>
                                                                </xf:action>
                                                            </xf:action>
                                                        </xf:select1>
                                                        <!-- Fourth term is the value - input for simpleType/calculatedValue (and may be a date) or selected for enumeratedType, enumeratedClass.
                                             If the comparatorType is 'any' then no values needs to be input by the user, so this is hidden -->
                                                        <xf:group ref="$valueCondition[searchOperator1!='any']">
                                                            <!-- enumeratedType (value or directory) -->
                                                            <xf:group
                                                                ref="$query/searchTerm3[@type=('#CityEHR:ElementProperty:enumeratedValue','#CityEHR:ElementProperty:enumeratedCalculatedValue','#CityEHR:ElementProperty:enumeratedDirectory')]">
                                                                <xxf:variable name="elementType" select="$query/searchTerm3/@type"/>
                                                                <xxf:variable name="enumeration"
                                                                    select="if ($elementType=('#CityEHR:ElementProperty:enumeratedValue','#CityEHR:ElementProperty:enumeratedCalculatedValue')) then xxf:instance('dictionary-instance')/iso-13606:elementCollection/iso-13606:element[@root=$query/searchTerm3]/iso-13606:data
                                                    else if ($elementType='#CityEHR:ElementProperty:enumeratedDirectory') then xxf:instance('directoryElements-instance')/iso-13606:elementCollection/iso-13606:element[@root=$query/searchTerm3]/iso-13606:data
                                                    else ()"/>
                                                                <xf:select1 ref="$valueCondition/searchTerm4">
                                                                    <xf:itemset nodeset="$enumeration">
                                                                        <xf:label ref="./@displayName"/>
                                                                        <xf:value ref="./@value"/>
                                                                    </xf:itemset>
                                                                    <!-- Reactivate UI (if necessary) when user interacts -->
                                                                    <xf:action ev:event="DOMFocusIn">
                                                                        <xf:setvalue ref="xxf:instance('control-instance')/interfaceStatus"
                                                                           value="'active'"/>
                                                                    </xf:action>
                                                                    <xf:action ev:event="xforms-value-changed"
                                                                        if="xxf:instance('control-instance')/interfaceStatus='active'">
                                                                        <xf:setvalue ref="$valueCondition/searchTerm4/@displayName"
                                                                           value="$enumeration[@value=$valueCondition/searchTerm4]/@displayName"/>
                                                                    </xf:action>
                                                                </xf:select1>
                                                            </xf:group>
                                                            <!-- simpleType, memo or calculatedValue -->
                                                            <xf:group
                                                                ref="$query/searchTerm3[@type=('#CityEHR:ElementProperty:simpleType','#CityEHR:ElementProperty:memo','#CityEHR:ElementProperty:calculatedValue')]">
                                                                <xxf:variable name="value" select="$valueCondition/searchTerm4"/>
                                                                <xxf:variable name="type" select="$valueCondition/searchTerm4/@type"/>
                                                                <xxf:variable name="parameters" select="xxf:instance('view-parameters-instance')"/>
                                                                <xxf:variable name="typeWarning"
                                                                    select="if ($value='' or (($type='xs:dateTime' and $value castable as xs:dateTime) or 
                                                ($type='xs:date' and $value castable as xs:date) or 
                                                ($type='xs:time' and $value castable as xs:time) or
                                                ($type='xs:integer' and $value castable as xs:integer) or
                                                ($type='xs:double' and $value castable as xs:double) or
                                                ($type='xs:string' and $value castable as xs:string) or
                                                ($type='xs:boolean' and $value castable as xs:boolean)
                                                )) then '' else concat(xxf:instance('view-parameters-instance')/staticParameters/cityEHRCohortSearch/badTypeMessage,substring-after($type,'xs:'))"/>
                                                                <xf:input ref="$valueCondition/searchTerm4"
                                                                    class="{if ($typeWarning='') then '' else 'inputError'}" incremental="true">
                                                                    <xf:hint ref="$typeWarning"/>
                                                                    <!-- Reactivate UI (if necessary) when user interacts -->
                                                                    <xf:action ev:event="DOMFocusIn">
                                                                        <xf:setvalue ref="xxf:instance('control-instance')/interfaceStatus"
                                                                           value="'active'"/>
                                                                    </xf:action>
                                                                    <xf:action ev:event="xforms-value-changed"
                                                                        if="xxf:instance('control-instance')/interfaceStatus='active'">
                                                                        <xxf:variable name="displayName"
                                                                           select="if ($type='xs:dateTime' and $value castable as xs:dateTime) then format-dateTime(xs:dateTime($value),$parameters/dateTimeDisplayFormat, xxf:instance('session-parameters-instance')/languageCode, (), ()) else 
                                                      if ($type='xs:date' and $value castable as xs:date) then format-date(xs:date($value),$parameters/dateDisplayFormat, xxf:instance('session-parameters-instance')/languageCode, (), ()) else 
                                                      if ($type='xs:time' and $value castable as xs:time) then format-time(xs:time($value),$parameters/timeDisplayFormat, xxf:instance('session-parameters-instance')/languageCode, (), ()) else 
                                            if ($type='xs:boolean' and exists($parameters/displayBoolean/value[@value=$value])) then $parameters/displayBoolean/value[@value=$value] else
                                            if ($type='xs:string') then concat('''',$value,'''') else                              
                                            $value"/>
                                                                        <xf:setvalue ref="$valueCondition/searchTerm4/@displayName"
                                                                           value="$displayName"/>
                                                                    </xf:action>
                                                                </xf:input>
                                                            </xf:group>
                                                            <!-- enumeratedClass - after 20/01/2014
                                             searchTerm4/@code -->
                                                            <xf:group ref="$query/searchTerm3[@type='#CityEHR:ElementProperty:enumeratedClass']">
                                                                <!-- Get the class name and entry node -->
                                                                <!-- Get the class and entry node from the data dictionary -->
                                                                <xxf:variable name="classElement"
                                                                    select="xxf:instance('dictionary-instance')/iso-13606:elementCollection/iso-13606:element[@root=$query/searchTerm3]/iso-13606:data[1]"/>
                                                                <xxf:variable name="classCode" select="$classElement/@code"/>
                                                                <xxf:variable name="classDisplayName" select="$classElement/@displayName"/>
                                                                <xxf:variable name="entryNode" select="$classElement/@value"/>
                                                                <!-- Searching for the value of the enumeratedClass
                                                 Display Button to launch the class selection dialog for the class.
                                                 First two searchOperator1 selections are for values of the class node -->
                                                                <xf:group ref="$valueCondition[searchOperator1/@selection le '2']">
                                                                    <xf:trigger appearance="minimal">
                                                                        <xf:label>
                                                                           <xf:output
                                                                           ref="if ($valueCondition/searchTerm4/@displayName != '') then $valueCondition/searchTerm4/@displayName else xxf:instance('application-parameters-instance')/displayFormat/unspecifiedElementValue/value/@displayName"
                                                                           />
                                                                        </xf:label>
                                                                        <xxf:variable name="enumeratedClassSelection"
                                                                           select="xxf:instance('cohort-search-parameters')/enumeratedClassSelection"/>
                                                                        <!-- Class and node -->
                                                                        <xf:action ev:event="DOMActivate">
                                                                           <xf:setvalue ref="$enumeratedClassSelection/elementQueryPosition"
                                                                           value="$position"/>
                                                                           <xf:setvalue ref="$enumeratedClassSelection/class" value="$classCode"/>
                                                                           <xf:setvalue ref="$enumeratedClassSelection/entryNode" value="$entryNode"/>
                                                                           <xf:setvalue ref="$enumeratedClassSelection/classDisplayName"
                                                                           value="$classDisplayName"/>
                                                                           <xf:setvalue ref="$enumeratedClassSelection/selectedNode"
                                                                           value="$valueCondition/searchTerm4"/>
                                                                           <xf:setvalue ref="$enumeratedClassSelection/selectedNode/@displayName"
                                                                           value="$valueCondition/searchTerm4/@displayName"/>
                                                                           <!-- Get the enumerationClass here by query to class dictionary -->
                                                                            <xf:dispatch name="update-enumeratedClassHierarchy" target="classDictionary-model">
                                                                                <xxf:context name="classCode" select="$classCode"/>
                                                                                <xxf:context name="entryNode" select="''"/>
                                                                                <xxf:context name="elementScope" select="''"/>
                                                                            </xf:dispatch>
                                                                           <!-- Supplementary data set -->
                                                                           <xf:delete nodeset="$enumeratedClassSelection/suppDataSet/*"/>
                                                                           <xf:delete nodeset="$enumeratedClassSelection/suppDataQuery/*"/>
                                                                           <xf:insert context="$enumeratedClassSelection/suppDataSet"
                                                                           origin="$query/suppDataSet/*"/>
                                                                           <xf:insert context="$enumeratedClassSelection/suppDataQuery"
                                                                           origin="$query/suppDataQuery/*"/>
                                                                           <!-- Selection dialog sets searchTerm4 and searchTerm5.
                                                       The code (value) for the node is put in searchTerm4/@code -->
                                                                           <xxf:show dialog="class-selection-dialog" constrain="true"/>
                                                                        </xf:action>
                                                                    </xf:trigger>
                                                                    <!-- Debugging -->
                                                                    <!--
                                                <xf:output ref="$query/searchTerm4/@code"/>
                                                -->
                                                                </xf:group>
                                                                <!-- Searching for the code of the enumeratedClass. 
                                                 searchOperator1 selections after the first two are for values of clinical code for the class node
                                                    Enter the code in an input box.
                                                    When code changes, look up in dictionary and display the match found (if any)
                                                    Use searchTerm3 for the node displayName, although searchTerm3 will not be used for searching
                                                -->
                                                                <xf:group ref="$valueCondition[searchOperator1/@selection gt '2']">
                                                                    <xxf:variable name="elementHierarchy"
                                                                        select="xxf:instance('dictionary-instance')/iso-13606:elementCollection/iso-13606:element[@extension=$classCode][@cityEHR:elementType='#CityEHR:ElementProperty:enumeratedClass']"/>
                                                                    <xxf:variable name="codeSystem" select="$valueCondition/searchOperator1"/>
                                                                    <xf:input ref="$valueCondition/searchTerm4" incremental="true">
                                                                        <!-- Reactivate UI (if necessary) when user interacts -->
                                                                        <xf:action ev:event="DOMFocusIn">
                                                                           <xf:setvalue ref="xxf:instance('control-instance')/interfaceStatus"
                                                                           value="'active'"/>
                                                                        </xf:action>
                                                                        <xf:action ev:event="xforms-value-changed"
                                                                           if="xxf:instance('control-instance')/interfaceStatus='active'">
                                                                           <xxf:variable name="value" select="."/>
                                                                           <xxf:variable name="codedNode"
                                                                           select="$elementHierarchy/descendant::iso-13606:data[iso-13606:code[@codeSystem=$codeSystem][@code=$value]][1]"/>
                                                                           <!-- Set displayName -->
                                                                           <xf:setvalue ref="$valueCondition/searchTerm4/@displayName"
                                                                           value="if (exists($codedNode)) then concat($value,' (',$codedNode/@displayName,')') else '--Not defined--'"/>
                                                                           <!-- Set the code on searchTerm4 to the codedNode -->
                                                                           <xf:setvalue ref="$valueCondition/searchTerm4/@code"
                                                                           value="if (exists($codedNode)) then $codedNode/@value else ''"/>
                                                                        </xf:action>
                                                                    </xf:input>
                                                                    <!-- Display the matching node in the class hierarchy -->
                                                                    <xf:output ref="$valueCondition/searchTerm4/@displayName"/>
                                                                    <!-- Debugging 
                                                <xf:output ref="$codeSystem"/> / <xf:output ref="if (exists($elementHierarchy)) then $elementHierarchy/@displayName else 'no hierarchy'"/> <xhtml:br/>
                                                <xf:output ref="$query/searchTerm4/@code"/>
                                                -->
                                                                </xf:group>
                                                            </xf:group>
                                                        </xf:group>
                                                        <!-- Fifth term is required if comparator requires one. -->
                                                        <xf:group ref="$valueCondition[searchOperator2!='']">
                                                            <xf:output ref="$valueCondition/searchOperator2/@displayName"/>
                                                            <!-- simpleType or calculatedValue -->
                                                            <xf:group
                                                                ref="$query/searchTerm3[@type=('#CityEHR:ElementProperty:simpleType','#CityEHR:ElementProperty:calculatedValue')]">
                                                                <xxf:variable name="type" select="$valueCondition/searchTerm5/@type"/>
                                                                <xxf:variable name="parameters" select="xxf:instance('view-parameters-instance')"/>
                                                                <xf:input ref="$valueCondition/searchTerm5">
                                                                    <!-- Reactivate UI (if necessary) when user interacts -->
                                                                    <xf:action ev:event="DOMFocusIn">
                                                                        <xf:setvalue ref="xxf:instance('control-instance')/interfaceStatus"
                                                                           value="'active'"/>
                                                                    </xf:action>
                                                                    <xxf:variable name="value" select="."/>
                                                                    <xf:action ev:event="xforms-value-changed"
                                                                        if="xxf:instance('control-instance')/interfaceStatus='active'">
                                                                        <xxf:variable name="displayName"
                                                                           select="if ($type='xs:dateTime' and $value castable as xs:dateTime) then format-dateTime(xs:dateTime($value),$parameters/dateTimeDisplayFormat) else 
                                                if ($type='xs:date' and $value castable as xs:date) then format-date(xs:date($value),$parameters/dateDisplayFormat) else 
                                                if ($type='xs:time' and $value castable as xs:time) then format-time(xs:time($value),$parameters/timeDisplayFormat) else 
                                                if ($type='xs:boolean' and exists($parameters/displayBoolean/value[@value=$value])) then $parameters/displayBoolean/value[@value=$value] else
                                                $value"/>
                                                                        <xf:setvalue ref="$valueCondition/searchTerm5/@displayName"
                                                                           value="$displayName"/>
                                                                    </xf:action>
                                                                </xf:input>
                                                            </xf:group>
                                                        </xf:group>
                                                        <!-- Show values of query for degugging -->
                                                        <!--
                                        <xhtml:p>
                                            Search Term 2: <xf:output ref="$query/searchTerm2"/> / <xf:output ref="$query/searchTerm2/@displayName"/> / <xf:output ref="$query/searchTerm2/@type"/>
                                            <xhtml:br/>
                                            Search Term 3: <xf:output ref="$query/searchTerm3"/> / <xf:output ref="$query/searchTerm3/@displayName"/> / <xf:output ref="$query/searchTerm3/@type"/>
                                            <xhtml:br/>
                                            Search Term 4: <xf:output ref="$query/searchTerm4"/> / <xf:output ref="$query/searchTerm4/@displayName"/> / <xf:output ref="$query/searchTerm4/@type"/>
                                            <xhtml:br/>
                                            Search Term 5: <xf:output ref="$query/searchTerm5"/> / <xf:output ref="$query/searchTerm5/@displayName"/> / <xf:output ref="$query/searchTerm5/@type"/>
                                        </xhtml:p>
                                            -->
                                                    </xhtml:td>

                                                    <!-- Button for add/remove element value or conditions -->
                                                    <xhtml:td>
                                                        <!-- First condition (parent is elementQuery) - add button  -->
                                                        <xf:group ref="$valueCondition/parent::elementQuery">
                                                            <xf:trigger appearance="minimal">
                                                                <xf:label>
                                                                    <xhtml:img
                                                                        src="{xxf:instance('view-parameters-instance')/staticFileRoot}/icons/add.png"
                                                                     />
                                                                </xf:label>
                                                                <xf:hint>
                                                                    <xf:output
                                                                        ref="xxf:instance('view-parameters-instance')/staticParameters/cityEHRCohortSearch/addValueConditionLabel"
                                                                    />
                                                                </xf:hint>
                                                                <!-- Add a new value condition -->
                                                                <xf:action ev:event="DOMActivate">
                                                                    <xf:insert context="$query"
                                                                        origin="xxf:instance('cohort-search-parameters-template')/elementValueOr/query"
                                                                        nodeset="query" at="last()" position="after"/>
                                                                    <!-- Set up the new condition  -->
                                                                    <xxf:variable name="valueCondition" select="$query/query[last()]"/>
                                                                    <xf:dispatch name="set-element-condition" target="main-model">
                                                                        <xxf:context name="query" select="$valueCondition"/>
                                                                        <xxf:context name="elementIRI" select="$query/searchTerm3"/>
                                                                    </xf:dispatch>
                                                                </xf:action>
                                                            </xf:trigger>
                                                        </xf:group>
                                                        <!-- Additional conditions (parent is query) - remove button  -->
                                                        <xf:group ref="$valueCondition/parent::query">
                                                            <xf:trigger appearance="minimal">
                                                                <xf:label>
                                                                    <xhtml:img
                                                                        src="{xxf:instance('view-parameters-instance')/staticFileRoot}/icons/remove.png"
                                                                     />
                                                                </xf:label>
                                                                <xf:hint>
                                                                    <xf:output
                                                                        ref="xxf:instance('view-parameters-instance')/staticParameters/cityEHRCohortSearch/removeValueConditionLabel"
                                                                    />
                                                                </xf:hint>
                                                                <!-- Remove value condition-->
                                                                <xf:action ev:event="DOMActivate">
                                                                    <xf:delete nodeset="$valueCondition"/>
                                                                    <xf:recalculate model="main-model"/>
                                                                </xf:action>
                                                            </xf:trigger>
                                                        </xf:group>
                                                    </xhtml:td>
                                                </xhtml:tr>
                                            </xf:repeat>
                                        </xhtml:table>
                                    </xhtml:td>

                                    <!-- Third cell in first row for context of the query (i.e. query has no siblings).
                                         This applies to the whole query, so only need it once (in the first row) -->
                                    <xhtml:td align="right" valign="top">
                                        <!-- context of the query (i.e. query has no siblings).
                                            This applies to the whole query, so only need it once (in the first row) -->
                                        <xf:group ref="$query[not(preceding-sibling::*)]">
                                            <xf:output
                                                ref="xxf:instance('view-parameters-instance')/staticParameters/cityEHRCohortSearch/searchContext/displayName"/>
                                            <!-- If user has access - change searchLocation between records and data -->
                                            <xxf:variable name="searchLocationParameter"
                                                select="xxf:instance('view-parameters-instance')/staticParameters/cityEHRCohortSearch/searchLocation"/>
                                            <xxf:variable name="selectionClass"
                                                select="if ($searchLocationParameter/role/@value=xxf:instance('user-instance')/rbac/role/@value) then '' else 'hidden'"/>
                                            <xxf:variable name="searchLocation" select="xxf:instance('cohort-search-parameters')/term/searchLocation"/>
                                            <xf:select1 class="{$selectionClass}" ref="$searchLocation">
                                                <xf:itemset nodeset="$searchLocationParameter/options/item">
                                                    <xf:label ref="@displayName"/>
                                                    <xf:value ref="@value"/>
                                                </xf:itemset>
                                                <!-- Set displayName on selection -->
                                                <xf:action ev:event="xforms-value-changed"
                                                    if="xxf:instance('control-instance')/interfaceStatus='active'">
                                                    <xf:setvalue ref="$searchLocation/@displayName"
                                                        value="$searchLocationParameter/options/item[@value=$searchLocation]/@displayName"/>
                                                </xf:action>
                                            </xf:select1>
                                            <!-- Search context - select composition from searchContextSelection -->
                                            <xf:select1 ref="xxf:instance('cohort-search-parameters')/query/searchContext">
                                                <xf:itemset nodeset="xxf:instance('cohort-search-parameters')/searchContextSelection/item">
                                                    <xf:label ref="./@displayName"/>
                                                    <xf:value ref="./@value"/>
                                                </xf:itemset>
                                                <!-- Reactivate UI (if necessary) when user interacts -->
                                                <xf:action ev:event="DOMFocusIn">
                                                    <xf:setvalue ref="xxf:instance('control-instance')/interfaceStatus" value="'active'"/>
                                                </xf:action>
                                                <!-- Set displayName on selection -->
                                                <xf:action ev:event="xforms-value-changed"
                                                    if="xxf:instance('control-instance')/interfaceStatus='active'">
                                                    <xf:setvalue ref="xxf:instance('cohort-search-parameters')/query/searchContext/@displayName"
                                                        value="xxf:instance('cohort-search-parameters')/searchContextSelection/item[@value=xxf:instance('cohort-search-parameters')/query/searchContext]/@displayName"
                                                    />
                                                </xf:action>
                                            </xf:select1>
                                        </xf:group>
                                    </xhtml:td>

                                </xhtml:tr>
                            </xf:repeat>
                            <!-- End of iteration through queries for observation search -->

                        </xhtml:table>
                        <!-- End of display for search -->

                    </xf:group>
                    <!-- End of control panel -->

                </xhtml:div>


                <!-- View Display - contains display of the cohort search results 
                     or the list of patients in the currently selected cohort(s)
                    ===================================================================== -->

                <xhtml:div id="viewDisplay">

                    <!-- =============== Cohort search results ======================   
                         Display list of search terms and results
                         ============================================================ -->

                    <xf:group ref="xxf:instance('control-instance')[displayType='search']">
                        <!-- Display details of cohort search -->
                        <xhtml:table class="selectionList">
                            <xhtml:thead>
                                <xhtml:tr>
                                    <xhtml:td class="smallSelect">
                                        <xf:trigger appearance="minimal">
                                            <xf:label
                                                ref="xxf:instance('view-parameters-instance')/staticParameters/cityEHRCohortSearch/selectAllLabel"/>
                                            <!-- Selecting 'All' - only select the main terms, not sub-categories -->
                                            <xf:action ev:event="DOMActivate">
                                                <xxf:variable name="cohortSet" select="xxf:instance('cohort-search-instance')/searchTerms/term"/>
                                                <!-- Select all cohorts -->
                                                <xf:dispatch name="select-cohort-set" target="main-model">
                                                    <xxf:context name="cohortSet" select="$cohortSet"/>
                                                    <xxf:context name="selection" select="'true'"/>
                                                </xf:dispatch>
                                            </xf:action>
                                        </xf:trigger>
                                        <xf:output
                                            ref="xxf:instance('view-parameters-instance')/staticParameters/cityEHRCohortSearch/selectorSeparator"/>
                                        <xf:trigger appearance="minimal">
                                            <!-- Selecting 'None' - deselect all terms, including sub-categories -->
                                            <xf:label
                                                ref="xxf:instance('view-parameters-instance')/staticParameters/cityEHRCohortSearch/selectNoneLabel"/>
                                            <xf:action ev:event="DOMActivate">
                                                <xxf:variable name="cohortSet" select="xxf:instance('cohort-search-instance')/searchTerms/term"/>
                                                <!-- Select all cohorts -->
                                                <xf:dispatch name="select-cohort-set" target="main-model">
                                                    <xxf:context name="cohortSet" select="$cohortSet"/>
                                                    <xxf:context name="selection" select="'false'"/>
                                                </xf:dispatch>
                                            </xf:action>
                                        </xf:trigger>
                                    </xhtml:td>
                                    <!-- Reference (id) of the term and the sort order -->
                                    <xhtml:td>
                                        <xf:output ref="xxf:instance('view-parameters-instance')/staticParameters/cityEHRCohortSearch/headerIdLabel"/>
                                        <xf:trigger appearance="minimal">
                                            <xf:label
                                                ref="xxf:instance('view-parameters-instance')/staticParameters/cityEHRCohortSearch/toggleSortOrderLabel"/>
                                            <!-- Toggle the sort order.
                                                 Recalculate is needed to reorder the drop down for select-term -->
                                            <xf:action ev:event="DOMActivate">
                                                <xf:setvalue ref="xxf:instance('control-instance')/sortOrder"
                                                    value="if (.='descending') then 'ascending' else 'descending'"/>
                                                <xf:rebuild model="main-model"/>
                                                <xf:recalculate model="main-model"/>
                                                <xf:refresh model="main-model"/>
                                            </xf:action>
                                        </xf:trigger>
                                    </xhtml:td>
                                    <xhtml:td width="80%">
                                        <xf:output
                                            ref="xxf:instance('view-parameters-instance')/staticParameters/cityEHRCohortSearch/headerSearchTermLabel"
                                        />
                                    </xhtml:td>
                                    <!-- Count of patients in the selected cohort(s) -->
                                    <xhtml:td>
                                        <xf:output
                                            ref="concat(xxf:instance('view-parameters-instance')/staticParameters/cityEHRCohortSearch/headerCohortLabel,' (',xxf:instance('cohort-search-instance')/cohortPatientCount,')')"
                                        />
                                    </xhtml:td>
                                </xhtml:tr>
                            </xhtml:thead>
                            <xhtml:tbody>
                                <!-- Repeat to display all terms in the cohort search -->
                                <xxf:variable name="sortOrder" select="xxf:instance('control-instance')/sortOrder"/>
                                <xxf:variable name="searchTerms"
                                    select="xxf:sort(xxf:instance('cohort-search-instance')/searchTerms/term,id,'number',$sortOrder)"/>
                                <xf:repeat nodeset="$searchTerms">
                                    <xxf:variable name="term" select="."/>
                                    <xxf:variable name="cohortId" select="$term/id"/>
                                    <xxf:variable name="expandCategoriesClass"
                                        select="if (exists($term/categorySet/term) and $term/expanded='false') then '' else 'hidden'"/>
                                    <xxf:variable name="collapseCategoriesClass"
                                        select="if (exists($term/categorySet/term) and $term/expanded='true') then '' else 'hidden'"/>
                                    <xxf:variable name="termClass"
                                        select="if ($term/id=xxf:instance('control-instance')/currentTerm) then 'selected' else ''"/>

                                    <!-- Display the search details -->

                                    <xhtml:tr class="{$termClass}">
                                        <xhtml:td>
                                            <!-- Select the cohort.
                                                 Either directly by selecting this boolean input.
                                                 Or by clicking on the group of controls below, which toggles $term/selected -->
                                            <xhtml:div class="selectionItem">
                                                <xf:input ref="$term/selected">
                                                    <xf:action ev:event="xforms-value-changed">
                                                        <xf:dispatch name="select-cohort" target="main-model">
                                                            <xxf:context name="selectedCohortId" select="$cohortId"/>
                                                        </xf:dispatch>
                                                    </xf:action>
                                                </xf:input>
                                            </xhtml:div>
                                            <!-- Expand the categories for this term - must not trigger selection of the cohort -->
                                            <xf:trigger appearance="minimal" class="{$expandCategoriesClass}">
                                                <xf:label>+</xf:label>
                                                <xf:action ev:event="DOMActivate">
                                                    <xf:setvalue ref="$term/expanded" value="'true'"/>
                                                </xf:action>
                                            </xf:trigger>
                                            <xf:trigger appearance="minimal" class="{$collapseCategoriesClass}">
                                                <xf:label>-</xf:label>
                                                <xf:action ev:event="DOMActivate">
                                                    <xf:setvalue ref="$term/expanded" value="'false'"/>
                                                </xf:action>
                                            </xf:trigger>
                                        </xhtml:td>

                                        <!-- If any trigger (cell) is clicked.
                                                 Toggle selection of the cohort (which triggers select-cohort action) -->
                                        <!-- Id of the term -->
                                        <xhtml:td>
                                            <xhtml:div class="selectionItem">
                                                <xf:trigger appearance="minimal" class="selection">
                                                    <xf:label ref="$term/id"/>
                                                    <xf:action ev:event="DOMActivate">
                                                        <xf:setvalue ref="$term/selected" value="if (. = true()) then false() else true()"/>
                                                    </xf:action>
                                                </xf:trigger>
                                            </xhtml:div>
                                        </xhtml:td>
                                        <!-- Description of the term -->
                                        <xhtml:td>
                                            <xxf:variable name="description"
                                                select="if ($term/shortDescription!='') then concat($term/shortDescription,'&#13;&#10;',$term/description) else $term/description"/>
                                            <xhtml:div class="selectionItem">
                                                <xf:trigger appearance="minimal" class="selection">
                                                    <xf:label ref="$description"/>
                                                    <xf:action ev:event="DOMActivate">
                                                        <xf:setvalue ref="$term/selected" value="if (. = true()) then false() else true()"/>
                                                    </xf:action>
                                                </xf:trigger>
                                            </xhtml:div>
                                        </xhtml:td>
                                        <!-- Count of hits for this term. 
                                                 If this is not set then display the message defined in view-parameters.
                                                 -->
                                        <xhtml:td>
                                            <xxf:variable name="countLabel"
                                                select="if ($term/percentage!='') then concat('(',$term/percentage,'%)') else if ($term/count!='') then concat('(',$term/count,')') else xxf:instance('view-parameters-instance')/staticParameters/cityEHRCohortSearch/noCohortLabel"/>
                                            <xhtml:div class="selectionItem">
                                                <xf:trigger appearance="minimal" class="selection">
                                                    <xf:label ref="$countLabel"/>
                                                    <xf:action ev:event="DOMActivate">
                                                        <xf:setvalue ref="$term/selected" value="if (. = true()) then false() else true()"/>
                                                    </xf:action>
                                                </xf:trigger>
                                            </xhtml:div>
                                        </xhtml:td>

                                    </xhtml:tr>

                                    <!-- Display sub-categories of results.
                                             But only if the user has selected to show them -->
                                    <xf:repeat nodeset="$term[expanded='true']/categorySet/term">
                                        <xxf:variable name="categoryTerm" select="./id"/>
                                        <xxf:variable name="categoryCohortId" select="$categoryTerm/id"/>
                                        <xhtml:tr>
                                            <xhtml:td>
                                                <!-- Select the category.
                                                        Either directly by selecting this boolean input.
                                                        Or by clicking on the group of controls below, which toggles $categoryTerm/selected -->
                                                <xhtml:div class="selectionItem">
                                                    <xf:input ref="$categoryTerm/selected">
                                                        <xf:action ev:event="xforms-value-changed">
                                                            <xf:dispatch name="select-cohort" target="main-model">
                                                                <xxf:context name="selectedCohortId" select="$categoryCohortId"/>
                                                            </xf:dispatch>
                                                        </xf:action>
                                                    </xf:input>
                                                </xhtml:div>
                                            </xhtml:td>
                                            
                                            <!-- If any trigger (cell) is clicked.
                                                 Toggle selection of the category, which triggers select-cohort action) -->
                                            <xhtml:td>
                                                <xhtml:div class="selectionItem">
                                                    <xf:trigger appearance="minimal" class="selection">
                                                        <xf:label ref="$categoryTerm/id"/>
                                                        <xf:action ev:event="DOMActivate">
                                                            <xf:setvalue ref="$categoryTerm/selected" value="if (. = true()) then false() else true()"
                                                            />
                                                        </xf:action>
                                                    </xf:trigger>
                                                </xhtml:div>
                                            </xhtml:td>
                                            <xhtml:td>
                                                <xhtml:div class="selectionItem">
                                                    <xf:trigger appearance="minimal" class="selection">
                                                        <xf:label ref="$categoryTerm/description"/>
                                                        <xf:action ev:event="DOMActivate">
                                                            <xf:setvalue ref="$categoryTerm/selected" value="if (. = true()) then false() else true()"
                                                            />
                                                        </xf:action>
                                                    </xf:trigger>
                                                </xhtml:div>
                                            </xhtml:td>
                                            <xhtml:td>
                                                <xhtml:div class="selectionItem">
                                                    <xf:trigger appearance="minimal" class="selection">
                                                        <xf:label ref="concat('(',$categoryTerm/count,')')"/>
                                                        <xf:action ev:event="DOMActivate">
                                                            <xf:setvalue ref="$categoryTerm/selected" value="if (. = true()) then false() else true()"
                                                            />
                                                        </xf:action>
                                                    </xf:trigger>
                                                </xhtml:div>
                                            </xhtml:td>

                                        </xhtml:tr>
                                    </xf:repeat>
                                </xf:repeat>
                            </xhtml:tbody>
                        </xhtml:table>
                    </xf:group>


                    <!-- === Display list of patients in Cohort ===
                         Use generic controls and selection list
                         ========================================== -->
                    <xf:group ref="xxf:instance('control-instance')[displayType='cohort']">
                        <xi:include href="cityEHRPatientList-Selection.xhtml"/>
                    </xf:group>


                    <!-- Debugging - show the current search parameters -->

                    <!--
                    <xhtml:p>Search parameters:<xhtml:br/>
                        <xf:output
                            ref="xxf:serialize(xxf:call-xpl('oxf:/ops/utils/formatting/format.xpl', 'data', xxf:instance('cohort-search-parameters'), 'data')/*, 'html')"
                            mediatype="text/html"/>
                    </xhtml:p>
-->
                    <!--
                    <xhtml:p>Search parameters - query:<xhtml:br/>
                        <xf:output
                            ref="xxf:serialize(xxf:call-xpl('oxf:/ops/utils/formatting/format.xpl', 'data', xxf:instance('cohort-search-parameters')/query, 'data')/*, 'html')"
                            mediatype="text/html"/>
                    </xhtml:p>
-->
                    <!--
                    <xhtml:p>Element query:<xhtml:br/>
                        <xf:output
                            ref="xxf:serialize(xxf:call-xpl('oxf:/ops/utils/formatting/format.xpl', 'data', xxf:instance('cohort-search-parameters')/elementQuery, 'data')/*, 'html')"
                            mediatype="text/html"/>
                    </xhtml:p>
-->
                    <!--
                    <xhtml:p>Element selection:<xhtml:br/>
                        <xf:output
                            ref="xxf:serialize(xxf:call-xpl('oxf:/ops/utils/formatting/format.xpl', 'data', xxf:instance('cohort-search-parameters')/elementSelection, 'data')/*, 'html')"
                            mediatype="text/html"/>
                    </xhtml:p>
-->

                    <!--
                    <xhtml:p>supplementary data set query:<xhtml:br/>
                        <xf:output
                            ref="xxf:serialize(xxf:call-xpl('oxf:/ops/utils/formatting/format.xpl', 'data', xxf:instance('cohort-search-parameters')/enumeratedClassSelection/suppDataQuery, 'data')/*, 'html')"
                            mediatype="text/html"/>
                    </xhtml:p>
-->

                    <!-- Debugging - show query -->
                    <!--
                    <xhtml:p>Query:<xhtml:br/>
                        <xf:output
                            ref="xxf:serialize(xxf:call-xpl('oxf:/ops/utils/formatting/format.xpl', 'data', xxf:instance('query-instance'), 'data')/*, 'html')"
                            mediatype="text/html"/>
                    </xhtml:p>
-->
                    <!--
                    <xhtml:p>Cohort Search:<xhtml:br/>
                        <xf:output
                            ref="xxf:serialize(xxf:call-xpl('oxf:/ops/utils/formatting/format.xpl', 'data', xxf:instance('cohort-query-instance'), 'data')/*, 'html')"
                            mediatype="text/html"/>
                    </xhtml:p>
                    -->

                    <!--
                    <xhtml:p>Cohort Analysis:<xhtml:br/>
                        <xf:output
                            ref="xxf:serialize(xxf:call-xpl('oxf:/ops/utils/formatting/format.xpl', 'data', xxf:instance('cohortAnalysis-instance'), 'data')/*, 'html')"
                            mediatype="text/html"/>
                    </xhtml:p>
                    
                    <xhtml:p>cohortAnalysisXQuery-instance:<xhtml:br/>
                        <xf:output
                            ref="xxf:serialize(xxf:call-xpl('oxf:/ops/utils/formatting/format.xpl', 'data', xxf:instance('cohortAnalysisXQuery-instance'), 'data')/*, 'html')"
                            mediatype="text/html"/>
                    </xhtml:p>                   
-->

                    <!--
                    <xhtml:p>Scope Search:<xhtml:br/>
                        <xf:output
                            ref="xxf:serialize(xxf:call-xpl('oxf:/ops/utils/formatting/format.xpl', 'data', xxf:instance('getCurrentEntryEffectiveTime-query-instance'), 'data')/*, 'html')"
                            mediatype="text/html"/>
                        <xf:output
                            ref="xxf:serialize(xxf:call-xpl('oxf:/ops/utils/formatting/format.xpl', 'data', xxf:instance('getMaxMinValueEffectiveTimeXQuery-query-instance'), 'data')/*, 'html')"
                            mediatype="text/html"/>
                    </xhtml:p>
-->
                    <!--
                    <xhtml:p>Recorded xQuery:<xhtml:br/>
                        <xf:output
                            ref="xxf:instance('cohort-search-parameters')/term/xquery"/>
                    </xhtml:p>
-->
                    <!-- Debugging - show response - only use if there aren't too many hits -->
                    <!--
                    <xhtml:p>Response<xhtml:br/>
                        <xf:output
                            ref="xxf:serialize(xxf:call-xpl('oxf:/ops/utils/formatting/format.xpl', 'data',  xxf:instance('response-instance'), 'data')/*, 'html')"
                            mediatype="text/html"/>
                    </xhtml:p>
-->
                    <!--
                    <xhtml:p>Longitudinal results <xhtml:br/>
                        <xf:output
                            ref="xxf:serialize(xxf:call-xpl('oxf:/ops/utils/formatting/format.xpl', 'data',  xxf:instance('longitudinalResults-instance'), 'data')/*, 'html')"
                            mediatype="text/html"/>
                    </xhtml:p>
                    -->

                    <!-- Debugging - show current data results - only use if there aren't too many hits -->
                    <!--
                    <xhtml:p>Scoped entry instance<xhtml:br/>
                        <xf:output
                            ref="xxf:serialize(xxf:call-xpl('oxf:/ops/utils/formatting/format.xpl', 'data',  xxf:instance('scopedEntry-instance'), 'data')/*, 'html')"
                            mediatype="text/html"/>
                    </xhtml:p>
-->

                    <!-- Debugging - show cohort search terms - only use if there aren't too many hits -->
                    <!--
                    <xhtml:p>
                        <xf:output
                            ref="xxf:serialize(xxf:call-xpl('oxf:/ops/utils/formatting/format.xpl', 'data',  xxf:instance('cohort-search-instance'), 'data')/*, 'html')"
                            mediatype="text/html"/>
                    </xhtml:p>
                    -->
                    <!--
                    <xhtml:p>Cohort of patients - patient-cohort-instance<xhtml:br/>
                        <xf:output
                            ref="xxf:serialize(xxf:call-xpl('oxf:/ops/utils/formatting/format.xpl', 'data',  xxf:instance('patient-cohort-instance'), 'data')/*, 'html')"
                            mediatype="text/html"/>
                    </xhtml:p>
-->
                    <!-- Debugging - show export data set list -->
                    <!--
                    <xhtml:p>Export data sets<xhtml:br/>
                        <xf:output ref="xxf:serialize(xxf:call-xpl('oxf:/ops/utils/formatting/format.xpl', 'data',  xxf:instance('exportDataSetList-instance'), 'data')/*, 'html')" mediatype="text/html"/>
                    </xhtml:p>
                    -->

                    <!-- Debugging - show patientRecordSet XQuery -->
                    <!--
                        <xhtml:p class="message">patientRecordSet-query-instance<xhtml:br/>
                        <xf:output ref="xxf:serialize(xxf:call-xpl('oxf:/ops/utils/formatting/format.xpl', 'data',  xxf:instance('patientRecordSet-query-instance'), 'data')/*, 'html')" mediatype="text/html"/>
                        </xhtml:p>
                    -->

                    <!-- Debugging - show patientCohortQuery XQuery -->
                    <!--
                    <xhtml:p class="message">patientCohortQuery-instance<xhtml:br/>
                        <xf:output
                            ref="xxf:serialize(xxf:call-xpl('oxf:/ops/utils/formatting/format.xpl', 'data',  xxf:instance('patientCohortQuery-instance'), 'data')/*, 'html')"
                            mediatype="text/html"/>
                    </xhtml:p>
                    -->

                    <!--
                    <xhtml:p class="message">userSearches-instance<xhtml:br/>
                        <xf:output
                            ref="xxf:serialize(xxf:call-xpl('oxf:/ops/utils/formatting/format.xpl', 'data',  xxf:instance('userSearches-instance'), 'data')/*, 'html')"
                            mediatype="text/html"/>
                    </xhtml:p>
                    -->
                    <!--
                    <xhtml:p class="message">control-instance<xhtml:br/>
                        <xf:output
                            ref="xxf:serialize(xxf:call-xpl('oxf:/ops/utils/formatting/format.xpl', 'data',  xxf:instance('control-instance'), 'data')/*, 'html')"
                            mediatype="text/html"/>
                    </xhtml:p>
-->
                    <!--
                    <xhtml:p class="message">userSelection-instance<xhtml:br/>
                        <xf:output
                            ref="xxf:serialize(xxf:call-xpl('oxf:/ops/utils/formatting/format.xpl', 'data',  xxf:instance('userSelection-instance'), 'data')/*, 'html')"
                            mediatype="text/html"/>
                    </xhtml:p>
-->
                    <!--
                    <xhtml:p class="message">enumeratedClassHierarchy-instance<xhtml:br/>
                        <xf:output
                            ref="xxf:serialize(xxf:call-xpl('oxf:/ops/utils/formatting/format.xpl', 'data',  xxf:instance('enumeratedClassHierarchy-instance'), 'data')/*, 'html')"
                            mediatype="text/html"/>
                    </xhtml:p>
                    -->
                    <!--
                    <xhtml:p class="message">currentSearchHandle<xhtml:br/>
                        <xf:output
                            ref="xxf:instance('control-instance')/currentSearchHandle"/>
                    </xhtml:p>
                    -->
                    <!--
                    <xhtml:p class="message">viewControlsActions-instance<xhtml:br/>
                        <xf:output
                            ref="xxf:serialize(xxf:call-xpl('oxf:/ops/utils/formatting/format.xpl', 'data',  xxf:instance('viewControlsActions-instance'), 'data')/*, 'html')"
                            mediatype="text/html"/>
                    </xhtml:p>                 
                    -->

                    <!-- Testing export - only show this is there are a very few patients in the cohort -->
                    <!--
                    <xhtml:p class="message">patientSet-instance<xhtml:br/>
                        <xf:output
                            ref="xxf:serialize(xxf:call-xpl('oxf:/ops/utils/formatting/format.xpl', 'data',  xxf:instance('patientSet-instance'), 'data')/*, 'html')"
                            mediatype="text/html"/>
                    </xhtml:p> 
-->

                    <!--
                    <xhtml:p class="message">getComposition-query-instance<xhtml:br/>
                        <xf:output
                            ref="xxf:serialize(xxf:call-xpl('oxf:/ops/utils/formatting/format.xpl', 'data',  xxf:instance('getComposition-query-instance'), 'data')/*, 'html')"
                            mediatype="text/html"/>
                    </xhtml:p> 
                    -->
                    <!--
                    <xhtml:p class="message">form-instance<xhtml:br/>
                        <xf:output
                            ref="xxf:serialize(xxf:call-xpl('oxf:/ops/utils/formatting/format.xpl', 'data',  xxf:instance('form-instance'), 'data')/*, 'html')"
                            mediatype="text/html"/>
                    </xhtml:p> 
                    -->

                    <!--
                    <xhtml:p class="message">html-instance<xhtml:br/>
                        <xf:output
                            ref="xxf:serialize(xxf:call-xpl('oxf:/ops/utils/formatting/format.xpl', 'data',  xxf:instance('html-instance'), 'data')/*, 'html')"
                            mediatype="text/html"/>
                    </xhtml:p>
                    -->
                    <!--
                    <xhtml:p class="message">exportDataControl-instance<xhtml:br/>
                        <xf:output
                            ref="xxf:serialize(xxf:call-xpl('oxf:/ops/utils/formatting/format.xpl', 'data',  xxf:instance('exportDataControl-instance'), 'data')/*, 'html')"
                            mediatype="text/html"/>
                    </xhtml:p>
                    -->

                </xhtml:div>

            </xhtml:div>

            <!-- EHR Info
                Contains    infoType, infoDisplay 
                ===================================================================== -->
            <!--
            <xhtml:div id="ehrInfo">
                <xhtml:div id="infoType"> </xhtml:div>
                <xhtml:div id="infoDisplay"> </xhtml:div>
            </xhtml:div>
            -->

        </xhtml:div>
        <!-- Fixed footer -->
        <xi:include href="cityEHRFooter.xhtml"/>
    </xhtml:body>
</xhtml:html>
