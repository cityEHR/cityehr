<?xml version="1.0" encoding="UTF-8"?>
<!-- 
    *********************************************************************************************************
    cityEHR
    cityEHRFolder-Forms.xhtml
    
    Create, save and publish forms for a patient
    with access to other patient-centred functions and features.
    
    Copyright (C) 2013-2021 John Chelsom.
    
    This program is free software; you can redistribute it and/or modify it under the terms of the
    GNU Lesser General Public License as published by the Free Software Foundation; either version
    2.1 of the License, or (at your option) any later version.
    
    This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
    without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
    See the GNU Lesser General Public License for more details.
    
    The full text of the license is available at http://www.gnu.org/copyleft/lesser.html
    **********************************************************************************************************
-->
<xhtml:html lang="{xxf:instance('session-parameters-instance')/languageCode}"
    xmlns:xf="http://www.w3.org/2002/xforms" xmlns:ev="http://www.w3.org/2001/xml-events"
    xmlns:xxf="http://orbeon.org/oxf/xml/xforms" xmlns:exforms="http://www.exforms.org/exf/1-0"
    xmlns:widget="http://orbeon.org/oxf/xml/widget" xmlns:fr="http://orbeon.org/oxf/xml/form-runner"
    xmlns:f="http://orbeon.org/oxf/xml/formatting" xmlns:xhtml="http://www.w3.org/1999/xhtml"
    xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:exist="http://exist.sourceforge.net/NS/exist"
    xmlns:xs="http://www.w3.org/2001/XMLSchema"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:xxi="http://orbeon.org/oxf/xml/xinclude" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
    xmlns:math="http://exslt.org/math" xmlns:cda="urn:hl7-org:v3"
    xmlns:iso-13606="http://www.iso.org/iso-13606"
    xmlns:cityEHR="http://openhealthinformatics.org/ehr"
    xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
    xmlns:dc="http://purl.org/dc/elements/1.1/">

    <!-- ========= HTML Head - Includes the Xforms Model ========= 
        ========================================================= -->
    <xhtml:head>

        <!-- Try this to force compatibility mode -->
        <xhtml:meta http-equiv="X-UA-Compatible" content="IE=10" />

        <!-- HTML Title is the displayName of the current application -->
        <xhtml:title>
            <xf:output ref="xxf:instance('view-parameters-instance')/applicationDisplayName"/>
        </xhtml:title>

        <!-- Stylesheet -->
        <xhtml:link rel="stylesheet" type="text/css" href="../resources/styles/cityEHRSkin.css"
            media="screen" />


        <!-- ========= System Parameters ===================================================== 
             ================================================================================= -->
        <xi:include href="../models/systemParametersModel.xml" xxi:omit-xml-base="true"/>

        <!-- ========= Database Access Layer model contains parameters of the eXist database ==== 
            ================================================================================== -->
        <xi:include href="../models/databaseAccessLayer.xml" xxi:omit-xml-base="true"/>

        <!-- ========= Session model contains stuff for handling of user sessions ============ 
            ================================================================================== -->
        <xi:include href="../models/sessionModel.xml" xxi:omit-xml-base="true"/>

        <!-- ========= Audit log model contains stuff for audit of user actions ============== 
            ================================================================================== -->
        <xi:include href="../models/auditLogModel.xml" xxi:omit-xml-base="true"/>

        <!-- ========= Page navigation model contains stuff for navigation between pages =====
        ====================================================================================== -->
        <xi:include href="../models/pageNavigationModel.xml" xxi:omit-xml-base="true"/>

        <!-- ========= Configuration model contains standard configuration of the page ======= 
            ================================================================================== -->
        <xi:include href="../models/configurationModel.xml" xxi:omit-xml-base="true"/>


        <!-- ========= Dictionary model contains the specialty dictionary ========= 
            ======================================================================= -->
        <xi:include href="../models/dictionaryModel.xml" xxi:omit-xml-base="true"/>

        <!-- ========= Release Notes ========= 
            ============================================================================ -->
        <xi:include href="../models/releaseNotesModel.xml" xxi:omit-xml-base="true"/>

        <!-- ========= Information pane ========= 
            ============================================================================ -->
        <xi:include href="../models/informationModel.xml" xxi:omit-xml-base="true"/>


        <!-- ========= Notifications model contains stuff for handling notifications == 
            =================================================================================== -->
        <xi:include href="../models/notificationModel.xml" xxi:omit-xml-base="true"/>

        <!-- ========= Patient Demographics model contains demographics data for the patient == 
            =================================================================================== -->
        <xi:include href="../models/patientDemographicsModel.xml" xxi:omit-xml-base="true"/>

        <!-- ========= Reference data - directories of entries and elements ==== 
             =================================================================== -->
        <xi:include href="../models/directoryModel.xml" xxi:omit-xml-base="true"/>

        <!-- === Web Services ===
            ==================== -->
        <xi:include href="../models/webServiceModel.xml" xxi:omit-xml-base="true"/>

        <!-- === 
            Care Teams
            === -->
        <xi:include href="../models/careTeamModel.xml" xxi:omit-xml-base="true"/>

        <!-- ========= Class dictionary model ====================================
             contains stuff for loading and accessing class dictionaries
             ===================================================================== -->
        <xi:include href="../models/classDictionaryModel.xml" xxi:omit-xml-base="true"/>

        <!-- ========= cdaModel model contains stuff for loading CDA documents ==== 
            =================================================================================== -->
        <xi:include href="../models/cdaModel.xml" xxi:omit-xml-base="true"/>

        <!-- ========= Main model contains stuff specific to this page ========= 
            The main model for view that edit compositions is shared between forms, letters,
            The compositionType (forms, letters) is set from the page passed in view-parameters
            =================================================================== -->
        <xi:include href="../models/compositionMainModel.xml" xxi:omit-xml-base="true"/>


        <!-- ===  Manage image maps   === -->
        <xi:include href="../models/imageMapModel.xml" xxi:omit-xml-base="true"/>


        <!-- ========= View Controls actions model contains actions for view control ========= 
            These actions are specific to this page, so the model is implemented directly.           
            There must be one event handler for each action defined in the <viewControlsActions> for this page in application-parameters
            The viewControlsActions-instance holds the actions for this view, inserted from parameters-instance for this view
            ===================================================================================== -->
        <xf:model id="viewControlsActions-model">

            <xf:instance id="viewControlsActions-instance">
                <control xmlns=""/>
            </xf:instance>


            <!-- Bindings for dynamic change of display of view controls  -->

            <!-- Only show view controls when a form is loaded -->
            <xf:bind nodeset="xxf:instance('viewControlsActions-instance')/view/@display"
                calculate="if (xxf:instance('control-instance')/current-form/status='none') then 'hidden' else 'show'"/>


            <xf:bind nodeset="xxf:instance('viewControlsActions-instance')/view">
                <!-- Show XML only when debugging -->
                <xf:bind nodeset="action[@id='xml']/@display"
                    calculate="if (xxf:instance('session-parameters-instance')/debug='true') then 'show' else 'hidden'"/>
                <!-- Show Ids. ISO13606 stucture only when debugging -->
                <xf:bind nodeset="input[@id=('showISO13606','showIds')]/@display"
                    calculate="if (xxf:instance('session-parameters-instance')/debug='true') then 'show' else 'hidden'"/>
                <!-- Reset, Save, only on edited forms -->
                <xf:bind nodeset="action[@id=('reset','save')]/@display"
                    calculate="if (xxf:instance('control-instance')/current-form/editStatus='edited') then 'show' else 'hidden'"/>
                <!-- Publish only on edited or saved forms -->
                <xf:bind nodeset="action[@id='publish']/@display"
                    calculate="if (xxf:instance('control-instance')/current-form/editStatus='edited' or xxf:instance('control-instance')/current-form/status='saved') then 'show' else 'hidden'"/>
                <!-- Delete only on saved forms -->
                <xf:bind nodeset="action[@id='delete']/@display"
                    calculate="if (xxf:instance('control-instance')/current-form/status='saved') then 'show' else 'hidden'"
                />
            </xf:bind>

            <!-- Application defined action to show XML -->
            <xf:action ev:event="xml">
                <!-- Display the form instance -->
                <xf:dispatch name="display-formatted-xml" target="pageNavigation-model">
                    <xxf:context name="title" select="''"/>
                    <xxf:context name="displayXML" select="xxf:instance('form-instance')"/>
                </xf:dispatch>
            </xf:action>

            <!-- Application defined action to highlight entries.
                 Get the scheme and load entries -->
            <xf:action ev:event="highlight">
                <xxf:variable name="schemeId"
                    select="xxf:instance('viewControls-input-instance')/select[@id='highlight']/@value"/>
                <xxf:variable name="scheme"
                    select="xxf:instance('viewControls-input-instance')/select[@id='highlight']/*[@value=$schemeId]"/>

                <xf:dispatch name="load-highlght-entries" target="main-model">
                    <xxf:context name="scheme" select="$scheme"/>
                </xf:dispatch>

            </xf:action>

            <!-- Application defined actions to set the effective time of the current form.
                 Note that an Orbeon defect can mean the dateTime entered is not in the correct format.
                 Also the user can type in a string that is not xs:dateTime -->
            <xf:action ev:event="effectiveTime">
                <xxf:variable name="effectiveTime"
                    select="xxf:instance('viewControls-input-instance')/input[@id='effectiveTime']"/>

                <!-- Reset input if its not xs:dateTime (will cause this action to call again) -->
                <xf:action if="not($effectiveTime castable as xs:dateTime)">
                    <xf:setvalue
                        ref="xxf:instance('viewControls-input-instance')/input[@id='effectiveTime']"
                        value="current-dateTime()"/>
                </xf:action>

                <!-- xs:dateTime, so process it -->
                <xf:action if="$effectiveTime castable as xs:dateTime">

                    <!-- The user has just changed the effectiveTime input - now set it on the current-form -->
                    <xf:setvalue ref="xxf:instance('control-instance')/current-form/effectiveTime"
                        value="$effectiveTime"/>

                    <!-- effectiveTime in the CDA is set from current-form -->
                    <xf:setvalue ref="xxf:instance('form-instance')/cda:effectiveTime/@value"
                        value="xxf:instance('control-instance')/current-form/effectiveTime"/>
                    <xf:dispatch name="set-patient-age" target="patientDemographics-model"/>
                    <!-- Change the title of the composition -->
                    <xf:setvalue ref="xxf:instance('control-instance')/current-form/title"
                        value="if (xxf:instance('control-instance')/current-form/effectiveTime castable as xs:dateTime) then concat(format-dateTime(xs:dateTime(xxf:instance('control-instance')/current-form/effectiveTime), xxf:instance('view-parameters-instance')/dateDisplayFormat, xxf:instance('view-parameters-instance')/languageCode, (), ()),' - ',xxf:instance('control-instance')/current-form/displayName) else xxf:instance('control-instance')/current-form/displayName"/>
                    <xf:setvalue ref="xxf:instance('view-parameters-instance')/pageDisplayName"
                        value="xxf:instance('control-instance')/current-form/title"/>

                </xf:action>
            </xf:action>

            <!-- Application defined actions to delete the current form -->
            <xf:action ev:event="delete">
                <xf:dispatch name="confirm-action" target="pageNavigation-model">
                    <xxf:context name="action" select="'deleteForm'"/>
                </xf:dispatch>
            </xf:action>

            <!-- Application defined action called after the user confirms delete form.
                 This invokes delete-composition in main-model (compositionMainModel) -->
            <xf:action ev:event="delete-form">
                <!-- Remove the saved form. -->
                <xf:dispatch name="delete-composition" target="main-model"/>
                <!-- Actions on successful delete -->
                <xf:action if="xxf:instance('control-instance')/status=''">
                    <!-- Reload the page, with compositionStatus of 'none' -->
                    <xf:setvalue ref="xxf:instance('view-parameters-instance')/compositionStatus"
                        value="'none'"/>
                    <xf:dispatch name="load-cityEHR-page" target="pageNavigation-model">
                        <xxf:context name="page"
                            select="xxf:instance('session-parameters-instance')/@page"/>
                    </xf:dispatch>
                </xf:action>
            </xf:action>


            <!-- Application defined action to reset the current form -->
            <xf:action ev:event="reset">
                <xf:dispatch name="confirm-action" target="pageNavigation-model">
                    <xxf:context name="action" select="'resetForm'"/>
                </xf:dispatch>
            </xf:action>


            <!-- Application defined actions to publish the current form
                 Can only publish the form if all required elements have been set
                 Then user must confirm through the actionConfirmationDialog -->
            <xf:action ev:event="publish">
                <!-- If required values are unset, then display the information about them.
                     Otherwise can do the actions to publish the form -->
                <xf:setvalue
                    ref="xxf:instance('control-instance')/current-form/showRequiredElements"
                    value="if (xs:integer(xxf:instance('control-instance')/current-form/requiredElementStatus) gt 0) then 'true' else 'false'"/>

                <!-- All required values are set, set up and show the actionConfirmationDialog.
                     There are two possible dialogs, depending on whether the form is part of a pathway, or not. -->
                <xf:action
                    if="xs:integer(xxf:instance('control-instance')/current-form/requiredElementStatus) eq 0">
                    <xxf:variable name="dialogueId" select="'publishForm'"/>
                    <xf:setvalue
                        ref="xxf:instance('view-parameters-instance')/staticConfirmationDialogue/activeDialogue"
                        value="$dialogueId"/>
                    <xxf:variable name="activeDialogue"
                        select="xxf:instance('view-parameters-instance')/staticConfirmationDialogue/dialogue[@id=$dialogueId]"/>

                    <!-- Get navigation triggers for the current form -->
                    <xxf:variable name="navigationTriggers"
                        select="xxf:instance('application-parameters-instance')/triggers/triggerSet[@compositionIRI = xxf:instance('control-instance')/current-form/compositionIRI]/trigger[@type='navigation']"/>

                    <!-- Show the dialogue -->
                    <xf:dispatch name="confirm-action" target="pageNavigation-model">
                        <xxf:context name="action" select="'publishForm'"/>
                        <xxf:context name="navigationTriggers" select="$navigationTriggers"/>
                    </xf:dispatch>
                </xf:action>

            </xf:action>

            <!-- Application defined action to publish the current form, 
                 after confirmation from the user in the 'publish' action.
                 The navigation target is passed as the 'context' event from the confirmation dialog
                 (if the user has selected a composition)-->
            <xf:action ev:event="publish-form">
                <xxf:variable name="newCompositionIRI" select="event('context')"/>

                <!-- Publish the composition -->
                <xf:dispatch name="publish-cda-composition" target="main-model"/>

                <!-- Action on successful publish -->
                <xf:action if="xxf:instance('control-instance')/status=''">
                    <xf:dispatch name="close-composition-view" target="main-model">
                        <xxf:context name="newCompositionIRI" select="$newCompositionIRI"/>
                    </xf:dispatch>
                </xf:action>
            </xf:action>

            <!-- Application defined action to save the current form.
                 User must confirm fisrt -->
            <xf:action ev:event="save">
                <xf:dispatch name="confirm-action" target="pageNavigation-model">
                    <xxf:context name="action" select="'saveForm'"/>
                </xf:dispatch>
            </xf:action>

            <xf:action ev:event="save-form">
                <!-- Save the composition -->
                <xf:dispatch name="save-cda-composition" target="main-model"/>

                <!-- Actions on successful save -->
                <xf:action if="xxf:instance('control-instance')/status=''">
                    <!-- Reset forms in progress for current patient -->
                    <xf:dispatch name="get-patientCompositions" target="main-model"/>
                    <!-- Display inProgress forms -->
                    <xf:setvalue ref="xxf:instance('view-parameters-instance')/viewNavigationType"
                        value="'inProgress'"/>
                    <!-- Reset the dirty flag -->
                    <xf:setvalue ref="xxf:instance('control-instance')/current-form/editStatus"
                        value="'unedited'"/>
                </xf:action>
            </xf:action>

            <xf:action ev:event="save-form-notify">
                <!-- Save the composition -->
                <xf:dispatch name="save-cda-composition" target="main-model"/>

                <!-- Actions on successful save -->
                <xf:action if="xxf:instance('control-instance')/status=''">
                    <!-- Reset forms in progress for current patient -->
                    <xf:dispatch name="get-patientCompositions" target="main-model"/>
                    <!-- Display inProgress forms -->
                    <xf:setvalue ref="xxf:instance('view-parameters-instance')/viewNavigationType"
                        value="'inProgress'"/>
                    <!-- Reset the dirty flag -->
                    <xf:setvalue ref="xxf:instance('control-instance')/current-form/editStatus"
                        value="'unedited'"/>

                    <!-- TBD notify members of the care team -->
                </xf:action>
            </xf:action>

            <!-- Application defined action to print the current form.
                 First generate HTML, then send to the print pipeline -->
            <xf:action ev:event="print">
                <!-- Set externalId for the patient -->
                <xf:dispatch name="set-externalId" target="pageNavigation-model">
                    <xxf:context name="type" select="'patient'"/>
                    <xxf:context name="externalId"
                        select="xxf:instance('view-parameters-instance')/externalId"/>
                </xf:dispatch>

                <!-- Convert form to HTML.
                     Also saves the session-parameters -->
                <xf:dispatch name="invoke-pipeline" target="pageNavigation-model">
                    <xxf:context name="pipeline" select="'getEventDisplay.xpl'"/>
                    <xxf:context name="input-instance" select="xxf:instance('form-instance')"/>
                    <xxf:context name="return-instance" select="xxf:instance('html-instance')"/>
                </xf:dispatch>

                <!-- Call submission to generate PDF for HTML -->
                <xf:dispatch name="print-html" target="pageNavigation-model"/>
            </xf:action>


            <!-- Application defined action to export the current letter to Word Processor
                 Set the template as selected by the user
                 Then call the pipeline to generate the Word Processor document -->
            <xf:action ev:event="wordprocessor">
                <!-- Set the word processor template to use as the base for conversion -->
                <xxf:variable name="letterTemplateId"
                    select="xxf:instance('viewControls-input-instance')/select[@id='wordprocessorTemplate']/@value"/>
                <xxf:variable name="letterTemplate"
                    select="xxf:instance('storedLetterTemplateList-instance')/letterTemplate[@value=$letterTemplateId]"/>

                <xf:dispatch name="return-wordProcessorCDA" target="main-model">
                    <xxf:context name="applicationIRI"
                        select="xxf:instance('view-parameters-instance')/applicationIRI"/>
                    <xxf:context name="letterTemplate" select="$letterTemplate"/>
                    <xxf:context name="cdaInstance" select="xxf:instance('form-instance')"/>
                </xf:dispatch>
            </xf:action>


            <!-- Actions when model is created -->
            <xf:action ev:event="xforms-model-construct-done">
                <!-- Set the highlight entry selection.
                     Only show if there are selections configured -->
                <xf:setvalue
                    ref="xxf:instance('viewControls-input-instance')/select[@id='highlight']/@display"
                    value="if (exists(xxf:instance('application-parameters-instance')/highlight/*)) then 'show' else 'hide'"/>
                <xf:action xxf:iterate="xxf:instance('application-parameters-instance')/highlight/*">
                    <xxf:variable name="scheme" select="."/>
                    <xf:insert
                        context="xxf:instance('viewControls-input-instance')/select[@id='highlight']"
                        nodeset="*" origin="$scheme" at="last()" position="after"/>
                </xf:action>

                <!-- Set highlighting scheme passed as parameter (so that highlighting persists across the session -->
                <xf:setvalue
                    ref="xxf:instance('viewControls-input-instance')/select[@id='highlight']/@value"
                    value="xxf:instance('view-parameters-instance')/highlightScheme"/>
                <xf:dispatch name="highlight" target="viewControlsActions-model"/>

                <!-- Set the effective time input.
                     The curent-form/effectiveTime was set when the form was loaded -->
                <xf:setvalue
                    ref="xxf:instance('viewControls-input-instance')/input[@id='effectiveTime']"
                    value="xxf:instance('control-instance')/current-form/effectiveTime"/>

                <!-- Need recalculate so that viewControlsActions binds are refreshed -->
                <xf:recalculate model="viewControlsActions-model"/>

            </xf:action>


            <!-- Actions when form is ready.
                 The page is reloaded whenever a composition is selected
                 So this is invoked on initial page load and whenever a composition is selected -->
            <xf:action ev:event="xforms-ready">

                <!-- Get the word processor templates configured for the current composition.
                     Only if a composition is set - selecting a composition reloads the page
                     So this only needs to happen here -->
                <xf:dispatch name="initialize-wordProcessorTemplates" target="main-model"/>


            </xf:action>
        </xf:model>

    </xhtml:head>


    <!-- ========================== HTML Body   ================== 
         ========================================================= -->
    <xhtml:body class="cityEHRBase orbeon patient">
        <!-- View XML dialogue box -->
        <xi:include href="cityEHRViewXMLDialog.xhtml"/>
        <!-- Action confirmation dialogue -->
        <xi:include href="cityEHRActionConfirmationDialog.xhtml"/>
        <!-- Enumerated class selection dialogue -->
        <xi:include href="cityEHRClassSelectionDialog.xhtml"/>
        <!-- Autocomplete dropdown selection dialogue -->
        <xi:include href="cityEHRClassDropdownDialog.xhtml"/>
        <!-- SDS dialogue. -->
        <xi:include href="cityEHRSDSDialog.xhtml"/>
        <!-- Fixed Header Information -->
        <xhtml:div id="ehrHeader">
            <!-- Patient label image -->
            <xhtml:div id="patientLabelImage">
                <xf:output ref="xxf:instance('patient-instance')/labelImage" mediatype="image/*"/>
            </xhtml:div>

            <!-- Patient label pane -->
            <xhtml:div id="patientLabel">
                <xi:include href="cityEHRPatientLabel.xhtml"/>
            </xhtml:div>
            <!-- System-level Navigation Pane -->
            <xhtml:div id="systemNavigation">
                <xi:include href="cityEHRNavigation.xhtml"/>
            </xhtml:div>
            <!-- Logo Pane -->
            <xhtml:div id="logo">
                <xf:output ref="xxf:instance('logo-instance')" mediatype="image/*"/>
            </xhtml:div>
        </xhtml:div>
        <!-- === Level 2 /3 =================================== 
            ehrContent
            Contains
            ehrNavigation
            ehrView
            ehrInfo
            ==================================================
        -->
        <xhtml:div id="ehrContent">
            <!-- =========================================================
                ehrNavigation - navigation around the EHR
                Contains
                navigationType
                navigationDisplay
                ========================================================= -->
            <xxf:variable name="ehrNavigationClass"
                select="if (xxf:instance('view-parameters-instance')/viewDisplayLayout='landscape') then 'hidden' else ''"/>
            <xhtml:div id="ehrNavigation" class="{$ehrNavigationClass}">
                <xhtml:div id="navigationType">

                    <!-- Controls to select the View Navigation type -->
                    <xi:include href="cityEHRViewNavigationTypeSelection.xhtml"/>

                    <!-- Button to collapse (hide) ehrNavigation -->
                    <xhtml:div id="collapseNavigation">
                        <xf:trigger appearance="minimal" class="layoutControl">
                            <xf:label
                                ref="xxf:instance('view-parameters-instance')/staticParameters/layoutControls/activator[@type='collapseNavigation']/@displayName"/>
                            <xf:action ev:event="DOMActivate">
                                <xf:setvalue
                                    ref="xxf:instance('view-parameters-instance')/viewDisplayLayout"
                                    value="'landscape'"/>
                            </xf:action>
                        </xf:trigger>
                    </xhtml:div>

                </xhtml:div>

                <xhtml:div id="navigationDisplay" class="navigation">

                    <!-- List of forms saved and in-progress for this patient -->
                    <xf:group
                        ref="xxf:instance('view-parameters-instance')[viewNavigationType='inProgress']">
                        <xi:include href="cityEHRSavedCompositionSelection.xhtml"/>
                    </xf:group>

                    <!-- List of new forms that could be started for this patient -->
                    <xf:group
                        ref="xxf:instance('view-parameters-instance')[viewNavigationType='new']">
                        <xi:include href="cityEHRCompositionSelection.xhtml"/>
                    </xf:group>

                </xhtml:div>

            </xhtml:div>

            <!-- =========================================================
                EHR View 
                    Contains
                        viewType
                        viewControls
                        viewDisplay
                ========================================================= -->
            <xhtml:div id="ehrView">

                <!-- View Type - select the type of ehr view 
                    ===================================================================== -->
                <xhtml:div id="viewType">
                    <!-- Button to expand (restore) ehrNavigation -->
                    <xxf:variable name="expandNavigationClass"
                        select="if (xxf:instance('view-parameters-instance')/viewDisplayLayout='portrait') then 'hidden' else ''"/>
                    <xhtml:div id="expandNavigation" class="{$expandNavigationClass}">
                        <xf:trigger appearance="minimal" class="layoutControl">
                            <xf:label
                                ref="xxf:instance('view-parameters-instance')/staticParameters/layoutControls/activator[@type='expandNavigation']/@displayName"/>
                            <xf:action ev:event="DOMActivate">
                                <xf:setvalue
                                    ref="xxf:instance('view-parameters-instance')/viewDisplayLayout"
                                    value="'portrait'"/>
                            </xf:action>
                        </xf:trigger>
                    </xhtml:div>

                    <!-- Record Navigation Controls
                        Move about within the patient record
                    -->
                    <xi:include href="cityEHRRecordNavigation.xhtml"/>

                    <!-- Button to show ehrInfo -->
                    <xxf:variable name="expandInfoClass"
                        select="if (xxf:instance('view-parameters-instance')/ehrInfoLayout='hidden') then '' else 'hidden'"/>
                    <xhtml:div id="expandInfo" class="{$expandInfoClass}">
                        <xf:trigger appearance="minimal" class="layoutControl">
                            <xf:label
                                ref="xxf:instance('view-parameters-instance')/staticParameters/layoutControls/activator[@type='expandInfo']/@displayName"/>
                            <xf:action ev:event="DOMActivate">
                                <xf:setvalue
                                    ref="xxf:instance('view-parameters-instance')/ehrInfoLayout"
                                    value="''"/>
                            </xf:action>
                        </xf:trigger>
                    </xhtml:div>
                </xhtml:div>

                <!-- View Controls - contains controls for the current displayed view content                     
                     ===================================================================== -->

                <xhtml:div id="viewControls">
                    <!-- View Controls Header -->
                    <xi:include href="cityEHRViewControlsHeader.xhtml"/>

                    <!-- Display of required elements -->
                    <xi:include href="cityEHRRequiredElementsInfo.xhtml"/>

                    <xxf:variable name="pathwaySourceInfoClass"
                        select="if (exists(xxf:instance('form-instance')//cda:documentationOf/cda:serviceEvent/cda:id[@extension != ''])) then 'message' else 'hidden'"/>
                    <xhtml:p class="{$pathwaySourceInfoClass}">
                        <xf:output
                            ref="xxf:instance('view-parameters-instance')/staticParameters/cityEHRFolder/pathwaySourceInfoLabel"/>
                        <xf:output
                            ref="xxf:instance('form-instance')//cda:documentationOf/cda:serviceEvent/cda:code[@codeSystem='cityEHR']/@displayName"
                        />
                    </xhtml:p>

                </xhtml:div>


                <!-- View Display - contains display of the currently selected composition 
                    ===================================================================== -->
                <xhtml:div id="viewDisplay" class="content">
                    <!-- Include generated form content 
                         The include instruction is targetted at the Orbeon pipeline processor
                         The pipeline running is cityEHRFolder-Compositions.xpl
                        
                         The generated form content is included here when the pipeline is run.
                    -->
                    <xi:include href="input:formContent" xxi:omit-xml-base="true"/>
                    <!-- Include filler so that sections at foot of form can scroll to the top -->
                    <xi:include href="cityEHRFormFootPadding.xhtml"/>
                    <!-- For debugging - query to get the form XML -->
                    <!--
                        <xf:group ref="xxf:instance('application-parameters-instance')[debug='false']">
                        <p>Submitted Query: <xf:output ref="xxf:serialize(xxf:call-xpl('oxf:/ops/utils/formatting/format.xpl', 'data', xxf:instance('query-instance'), 'data')/*, 'html')" mediatype="text/html"/>
                        </p>
                        </xf:group>
                    -->
                    <!--
                    <xhtml:p class="message">
                        Session parameters: 
                        <xf:output ref="xxf:instance('control-instance')/enumeratedClass/dictionaryId"/> - 
                        <xf:output
                            ref="xxf:serialize(xxf:call-xpl('oxf:/ops/utils/formatting/format.xpl', 'data', xxf:instance('session-parameters-instance'), 'data')/*, 'html')"
                            mediatype="text/html"/>
                    </xhtml:p>
-->
                    <!-- For debugging - results of search to get enumerated class values -->
                    <!--
                    <xhtml:p class="message">
                        Enumerated class value search: 
                        <xf:output ref="xxf:instance('control-instance')/enumeratedClass/dictionaryId"/> - 
                        <xf:output
                        ref="xxf:serialize(xxf:call-xpl('oxf:/ops/utils/formatting/format.xpl', 'data', xxf:instance('dictionaryQuery-instance'), 'data')/*, 'html')"
                            mediatype="text/html"/>
                    </xhtml:p>

                    <xhtml:p class="message">
                        Enumerated class values: <xf:output
                            ref="xxf:serialize(xxf:call-xpl('oxf:/ops/utils/formatting/format.xpl', 'data', xxf:instance('enumeratedClass-instance'), 'data')/*, 'html')"
                            mediatype="text/html"/>
                    </xhtml:p>
-->
                    <!-- Debugging -->

                    <xhtml:p class="message">
                        <xf:output
                            ref="xxf:serialize(xxf:call-xpl('oxf:/ops/utils/formatting/format.xpl', 'data',  xxf:instance('directoryElements-instance'), 'data')/*, 'html')"
                            mediatype="text/html"/>
                    </xhtml:p>

                    <!-- For debugging - display the form XML -->
                    <!--
                        <xf:group ref="xxf:instance('application-parameters-instance')[debug='false']">
                        <xhtml:p>
                        <xf:output ref="xxf:serialize(xxf:call-xpl('oxf:/ops/utils/formatting/format.xpl', 'data', xxf:instance('form-instance'), 'data')/*, 'html')" mediatype="text/html"/>
                        </xhtml:p>
                        </xf:group>
                    -->
                    <!-- For debugging - list of in progress forms -->
                    <!--
                        <xhtml:p>
                        <xf:output ref="xxf:serialize(xxf:call-xpl('oxf:/ops/utils/formatting/format.xpl', 'data', xxf:instance('patientCompositionsList-instance'), 'data')/*, 'html')" mediatype="text/html"/>
                        </xhtml:p>
                    -->
                    <!--
                    <xhtml:p class="message">
                        <xf:output ref="xxf:serialize(xxf:call-xpl('oxf:/ops/utils/formatting/format.xpl', 'data',  xxf:instance('query-instance'), 'data')/*, 'html')" mediatype="text/html"/>
                    </xhtml:p>
                    -->
                    <!--
                    <xhtml:p class="message">
                        <xf:output
                            ref="xxf:serialize(xxf:call-xpl('oxf:/ops/utils/formatting/format.xpl', 'data',  xxf:instance('dictionary-instance'), 'data')/*, 'html')"
                            mediatype="text/html"/>
                    </xhtml:p>
                    -->- <!--
                    <xhtml:p class="message">
                        <xf:output ref="xxf:serialize(xxf:call-xpl('oxf:/ops/utils/formatting/format.xpl', 'data',  xxf:instance('dictionaryEntry-instance'), 'data')/*, 'html')" mediatype="text/html"/>
                    </xhtml:p>
                    -->
                    <!--
                    <xhtml:p class="message">
                        <xf:output ref="xxf:serialize(xxf:call-xpl('oxf:/ops/utils/formatting/format.xpl', 'data',  xxf:instance('query-instance'), 'data')/*, 'html')" mediatype="text/html"/>
                    </xhtml:p>
                    -->
                    <!--
                    <xhtml:p class="message">
                        <xf:output ref="xxf:serialize(xxf:call-xpl('oxf:/ops/utils/formatting/format.xpl', 'data',  xxf:instance('user-instance'), 'data')/*, 'html')" mediatype="text/html"/>
                    </xhtml:p>
                    -->
                    <!-- ***jc  -->
                    <!--
                    <xhtml:p class="message">
                        <xf:output ref="xxf:instance('getEnumeratedClassHierarchyXQuery-instance')"/>
                        <xf:output ref="xxf:serialize(xxf:call-xpl('oxf:/ops/utils/formatting/format.xpl', 'data',  xxf:instance('enumeratedClassHierarchy-instance'), 'data')/*, 'html')" mediatype="text/html"/>
                    </xhtml:p>
-->
                    <!--
                    <xhtml:p class="message">
                        <xf:output ref="xxf:serialize(xxf:call-xpl('oxf:/ops/utils/formatting/format.xpl', 'data',  xxf:instance('getEnumeratedClassValuesXQuery-instance'), 'data')/*, 'html')" mediatype="text/html"/>
                    </xhtml:p>    
 -->
                    <!--
                    <xhtml:p class="message">
                        <xf:output ref="xxf:serialize(xxf:call-xpl('oxf:/ops/utils/formatting/format.xpl', 'data',  xxf:instance('enumeratedClass-instance'), 'data')/*, 'html')" mediatype="text/html"/>
                    </xhtml:p>
-->
                    <!--
                    <xhtml:p class="message">
                        <xf:output ref="xxf:serialize(xxf:call-xpl('oxf:/ops/utils/formatting/format.xpl', 'data',  xxf:instance('enumeratedClassHierarchy-instance'), 'data')/*, 'html')" mediatype="text/html"/>
                    </xhtml:p>
-->
                    <!--
                    <xhtml:p> Patient: <xhtml:br/>
                        <xf:output ref="xxf:serialize(xxf:call-xpl('oxf:/ops/utils/formatting/format.xpl', 'data', xxf:instance('patient-instance'), 'data')/*, 'html')" mediatype="text/html"/>
                    </xhtml:p>
                    -->
                    <!--
                    <xhtml:p> highlightEntryList: <xhtml:br/>
                        <xf:output ref="xxf:serialize(xxf:call-xpl('oxf:/ops/utils/formatting/format.xpl', 'data', xxf:instance('highlightEntryList-instance'), 'data')/*, 'html')" mediatype="text/html"/>
                    </xhtml:p>
                    -->
                    <!--
                    <xhtml:p class="message">cdaControl-instance: <xhtml:br/>
                        <xf:output ref="xxf:serialize(xxf:call-xpl('oxf:/ops/utils/formatting/format.xpl', 'data',  xxf:instance('cdaControl-instance'), 'data')/*, 'html')" mediatype="text/html"/>
                    </xhtml:p>
-->
                    <!-- Test castable expressions -->
                    <!--
                    <xhtml:p class="message">
                        <xxf:variable name="result1" select="if (not((for $i in ('3') return $i castable as xs:integer) = false()) and not((for $i in ('3.1') return $i castable as xs:integer) = false())) then 'castable' else 'not castable'"/>

                        <xxf:variable name="result2" select="if (exists(('w')) and not((for $i in ('3') return $i castable as xs:integer) = false()) ) then 'castable' else 'not castable'"/>
                        
                        <xxf:variable name="result3" select="if ( exists((xxf:instance('form-instance')/descendant::cda:entry/descendant::*[cda:id[@extension='#ISO-13606:Entry:Weight'][@cityEHR:origin!='#CityEHR:Template']]/descendant::cda:value[@extension='#ISO-13606:Element:WeightInKg'])[.]/@value) and not((for $i in (xxf:instance('form-instance')/descendant::cda:entry/descendant::*[cda:id[@extension='#ISO-13606:Entry:Weight'][@cityEHR:origin!='#CityEHR:Template']]/descendant::cda:value[@extension='#ISO-13606:Element:WeightInKg'])[.] return $i/@value castable as xs:double) = false())) then 'castable' else 'not castable'"/>                        

                        <xxf:variable name="result4" select="if ( exists((xxf:instance('form-instance')/descendant::cda:entry/descendant::*[cda:id[@extension='#ISO-13606:Entry:Weight'][@cityEHR:origin!='#CityEHR:Template']]/descendant::cda:value[@extension='#ISO-13606:Element:WeightInKg'])[.]/@value) ) then 'castable' else 'not castable'"/>                        
 
                        <xxf:variable name="result" select="if ( exists((xxf:instance('form-instance')/descendant::cda:entry/descendant::*[cda:id[@extension='#ISO-13606:Entry:BMI'][@cityEHR:origin!='#CityEHR:Template']]/descendant::cda:value[@extension='#ISO-13606:Element:WeightInKg'])[.]/@value) ) then for $i in ('castable') return concat('this is ',$i) else 'not castable'"/>                        
                        
                        <xf:output ref="$result"/>
                        
                    </xhtml:p>
-->
                    <!-- End of debugging -->
                </xhtml:div>
            </xhtml:div>

            <!-- === EHR information === -->
            <xi:include href="cityEHRInformation.xhtml"/>

        </xhtml:div>
        
        
        <!-- Fixed footer -->
        <xi:include href="cityEHRFooter.xhtml"/>
        <!-- Javascript functions specific to this page -->
        <xhtml:script type="text/javascript" language="javascript"
            src="{xxf:instance('view-parameters-instance')/staticFileRoot}/scripts/cityEHR.js?{xxf:instance('view-parameters-instance')/versionNumber/@version}"> </xhtml:script>
        <xhtml:script type="text/javascript" language="javascript"
            src="{xxf:instance('view-parameters-instance')/staticFileRoot}/scripts/jquery.min.js?{xxf:instance('view-parameters-instance')/versionNumber/@version}"> </xhtml:script>
        <xhtml:script type="text/javascript" language="javascript"
            src="{xxf:instance('view-parameters-instance')/staticFileRoot}/scripts/jquery.maphilight.min.js?{xxf:instance('view-parameters-instance')/versionNumber/@version}"> </xhtml:script>
        <xhtml:script type="text/javascript" language="javascript"
            src="{xxf:instance('view-parameters-instance')/staticFileRoot}/scripts/svgImageMaps.js?{xxf:instance('view-parameters-instance')/versionNumber/@version}"> </xhtml:script>
        <!-- This script is now included in cityehr.js so that it is run once the DOM tree has been created in IE7 -->
        <!-- <script> $(function() { $('.map').maphilight({ fillColor: '008800' }); }); </script> -->
        <!-- <script> $(function() { $('.map').maphilight(); }); </script> -->
    </xhtml:body>
</xhtml:html>
