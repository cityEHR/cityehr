<?xml version="1.0" encoding="UTF-8"?>
<!-- 
    *********************************************************************************************************
    cityEHR
    imageMapModel.xml
    
    Handling images maps (SVG)
    Note that image maps are managed by specialty but stored for the application
    Associated with antries of Rendition imageMap
    So image map entries with the same name in different specialties share the same image.
    
    <svg id="entryId"> 
    The entryId is for the root, not extension, but the references to entry/element in the image maps are to extension.
    
    Used only in compositionMainModel for handling image maps in a composition
     
    Additional actions for managing image maps are in the application model.
    
    Copyright (C) 2013-2021 John Chelsom.
    
    This program is free software; you can redistribute it and/or modify it under the terms of the
    GNU Lesser General Public License as published by the Free Software Foundation; either version
    2.1 of the License, or (at your option) any later version.
    
    This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
    without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
    See the GNU Lesser General Public License for more details.
    
    The full text of the license is available at http://www.gnu.org/copyleft/lesser.html
    **********************************************************************************************************
-->

<xf:model id="imageMap-model" xmlns:xf="http://www.w3.org/2002/xforms"
    xmlns:ev="http://www.w3.org/2001/xml-events" xmlns:xxf="http://orbeon.org/oxf/xml/xforms"
    xmlns:exforms="http://www.exforms.org/exf/1-0" xmlns:widget="http://orbeon.org/oxf/xml/widget"
    xmlns:fr="http://orbeon.org/oxf/xml/form-runner" xmlns:f="http://orbeon.org/oxf/xml/formatting"
    xmlns:xhtml="http://www.w3.org/1999/xhtml" xmlns:xi="http://www.w3.org/2001/XInclude"
    xmlns:exist="http://exist.sourceforge.net/NS/exist" xmlns:xs="http://www.w3.org/2001/XMLSchema"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:xxi="http://orbeon.org/oxf/xml/xinclude" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
    xmlns:math="http://exslt.org/math" xmlns:cda="urn:hl7-org:v3"
    xmlns:iso-13606="http://www.iso.org/iso-13606"
    xmlns:cityEHR="http://openhealthinformatics.org/ehr" xmlns:svg="http://www.w3.org/2000/svg">


    <!-- ========= Instances for managing image maps ========= 
         ===================================================== -->

    <xf:instance id="imageMapControl-instance">
        <control xmlns="">
            <status/>
            <currentValue/>
            <svg xmlns="http://www.w3.org/2000/svg" id="" version="1.1" class="imageMap" viewBox=""
                x="" y="" style=""/>
        </control>
    </xf:instance>

    <xf:instance id="imageMapList-instance">
        <imageMapList xmlns=""/>
    </xf:instance>

    <xf:instance id="storedImageMapList-instance">
        <imageMapList xmlns=""/>
    </xf:instance>

    <xf:instance id="imageMapListXQuery-instance" src="oxf:/apps/ehr/xquery/imageMapListXQuery.xml"/>

    <xf:instance id="imageMap-instance">
        <svg:svg/>
    </xf:instance>


    <!-- ========= Load and List image maps =================================== 
         Used in compositionMainModel when images maos are losed for a new form
         ====================================================================== -->

    <!-- Application defined action to get list of image maps for a set of entries.
         The entries are passed as entryIRIList
         The list of image maps is formed in imageMapList-instance.
         If no image map exists in the xmlstore, then an empty template is set up using imageMap-instance -->
    <xf:action ev:event="get-imageMapList">
        <xxf:variable name="applicationId" select="event('applicationId')"/>
        <xxf:variable name="entryIRIList" select="event('entryIRIList')"/>

        <!-- Clear the imageMapList-instance -->
        <xf:delete nodeset="xxf:instance('imageMapList-instance')/*"/>

        <!-- The image map template -->
        <xxf:variable name="imageMapTemplate"
            select="xxf:instance('imageMapControl-instance')/svg:svg"/>

        <!-- Get the stored image maps -->
        <xxf:variable name="imageMapStorageLocation"
            select="concat('/xmlstore/applications/',$applicationId,'/systemConfiguration/imageMaps')"/>
        <xf:dispatch name="dal-query" target="databaseAccessLayer-model">
            <xxf:context name="system" select="'ehr'"/>
            <xxf:context name="storageLocation" select="$imageMapStorageLocation"/>
            <xxf:context name="query" select="xxf:instance('imageMapListXQuery-instance')"/>
            <xxf:context name="response" select="xxf:instance('storedImageMapList-instance')"/>
            <xxf:context name="status" select="xxf:instance('imageMapControl-instance')/status"/>
        </xf:dispatch>

        <!-- Iterate through the entryIRIList -->
        <xf:action xxf:iterate="$entryIRIList">
            <xxf:variable name="entryIRI" select="."/>
            <xxf:variable name="entryId" select="substring-after($entryIRI,'#ISO-13606:Entry:')"/>

            <!-- Stored image map -->
            <xxf:variable name="storedImageMap"
                select="xxf:instance('storedImageMapList-instance')/svg:svg[@id=$entryId]"/>

            <!-- If there is a stored image map -->
            <xf:action if="exists($storedImageMap)">
                <xf:insert context="xxf:instance('imageMapList-instance')" nodeset="*"
                    origin="$storedImageMap" at="last()" position="after"/>
            </xf:action>

            <!-- If there is no stored image map -->
            <xf:action if="not(exists($storedImageMap))">
                <xxf:variable name="imageMapTemplate"
                    select="xxf:instance('imageMapControl-instance')/svg:svg"/>
                <xf:insert context="xxf:instance('imageMapList-instance')" nodeset="*"
                    origin="$imageMapTemplate" at="last()" position="after"/>
                <xxf:variable name="imageMap"
                    select="xxf:instance('imageMapList-instance')/*[last()]"/>

                <xf:setvalue ref="$imageMap/@id" value="$entryId"/>
            </xf:action>
        </xf:action>

    </xf:action>


    <!-- Application defined action to save the cache of image maps for a composition.
         Used in load-new-composition (compositionMainModel) when a new form is loaded
         Find the set of SVG image maps for the composition
         Assumes that the specialty dictionary has been loded to dictionary-instance
         Then save in the xmlCache for the current user.
         The xmlCache is picked up in the cityEHRFolder-Compositions.xpl pipeline
         And is also used in refresh-allImageMapClasses when a form is loaded for editing
          -->
    <xf:action ev:event="save-svgCache">
        <xxf:variable name="applicationId" select="event('applicationId')"/>
        <xxf:variable name="compositionIRI" select="event('compositionIRI')"/>

        <!-- The list of image maps defined in the specialty dictionary.
             Note that the imageMap rendition is associated with the root, not extension -->
        <xxf:variable name="dictionaryImageMapList"
            select="xxf:instance('dictionary-instance')/iso-13606:entryCollection/iso-13606:entry[contains(@cityEHR:rendition,'ImageMap')]"/>
        <xxf:variable name="dictionaryImageMapEntryIRIList"
            select="$dictionaryImageMapList/cda:component/cda:observation/cda:id/@root"/>

        <!-- The list of image maps defined for the composition -->
        <xxf:variable name="specialtyIRI" select="xxf:instance('dictionary-instance')/@code"/>
        <xxf:variable name="compositionEntryIRIList"
            select="xxf:instance('dictionary-instance')/iso-13606:folderCollection/iso-13606:folder[@code=$specialtyIRI]/iso-13606:composition[@code=$compositionIRI]/iso-13606:entry"/>
        <xxf:variable name="compositionImageMapEntryIRIList"
            select="$dictionaryImageMapEntryIRIList[.=$compositionEntryIRIList]"/>

        <!-- Get the list of image maps for the composition.
             The list of image maps is formed in imageMapList-instance. -->
        <xf:dispatch name="get-imageMapList" target="imageMap-model">
            <xxf:context name="applicationId" select="$applicationId"/>
            <xxf:context name="entryIRIList" select="$compositionImageMapEntryIRIList"/>
        </xf:dispatch>

        <!-- Store SVG image maps to xmlCache. -->
        <xf:dispatch name="store-xmlCache" target="pageNavigation-model">
            <xxf:context name="xml-instance" select="xxf:instance('imageMapList-instance')"/>
        </xf:dispatch>

    </xf:action>




    <!-- ========= Interact with image maps ====================== 
         ========================================================= -->

    <!-- Application defined action to handle user click on an image map.
         The click sets the value of the hidden input imageMapCommand which is in cityEHRFooter
         This is bound to xxf:instance('session-parameters-instance')/imageMapCommand 
         The xforms-value-changed event on that input invokes this action -->
    <xf:action ev:event="handleImageMapCommand">
        <xxf:variable name="imageMapCommand" select="event('imageMapCommand')"/>

        <!-- Only handle the comamnd if it has been passed -->
        <xf:action if="$imageMapCommand != ''">

            <xxf:variable name="commandAndClassSeparator"
                select="xxf:instance('view-parameters-instance')/commandAndClassSeparator"/>
            <xxf:variable name="commandSeparator"
                select="xxf:instance('view-parameters-instance')/commandSeparator"/>

            <!-- imageMapCommand is of the form entryId_elementId_value -->
            <xxf:variable name="imageMapCommandTokens"
                select="tokenize($imageMapCommand,$commandSeparator)"/>
            <xxf:variable name="entryIRI"
                select="if (exists($imageMapCommandTokens[1])) then concat('#ISO-13606:Entry:',$imageMapCommandTokens[1]) else ''"/>
            <xxf:variable name="elementIRI"
                select="if (exists($imageMapCommandTokens[2])) then concat('#ISO-13606:Element:',$imageMapCommandTokens[2]) else ''"/>
            <xxf:variable name="value"
                select="if (exists($imageMapCommandTokens[3])) then $imageMapCommandTokens[3] else ''"/>

            <!-- Action depends of the type of the entry - Simple or MultipleEntry -->
            <xxf:variable name="cdaBody"
                select="xxf:instance('form-instance')/cda:component/cda:structuredBody/cda:component/cda:section"/>
            <xxf:variable name="entry"
                select="$cdaBody//cda:entry[descendant::cda:id[1]/@extension=$entryIRI]"/>

            <!-- Simple entry contains observation, MultipleEntry contains organizer -->
            <!-- MultipleEntry.
             Click adds am entry to the ME organizer -->
            <xf:action if="exists($entry) and exists($entry/cda:organizer)">
                <xf:dispatch name="add-multipleEntry" target="imageMap-model">
                    <xxf:context name="imageMapSelection" select="$value"/>
                    <xxf:context name="mappedElementIRI" select="$elementIRI"/>
                    <xxf:context name="entry" select="$entry"/>
                </xf:dispatch>
            </xf:action>

            <!-- Simple entry -->
            <xf:action if="exists($entry) and exists($entry/cda:observation)">
                <xf:dispatch name="set-elementValue" target="imageMap-model">
                    <xxf:context name="imageMapSelection" select="$value"/>
                    <xxf:context name="mappedElementIRI" select="$elementIRI"/>
                    <xxf:context name="entry" select="$entry"/>
                </xf:dispatch>
            </xf:action>

            <!-- Refresh the image map display -->
            <xf:dispatch name="refresh-allImageMapClasses" target="imageMap-model"/>


            <!-- This just temporary -->
            <!--
            <xxf:variable name="imageMapClass" select="translate($imageMapCommand,$commandSeparator,' ')"/>
            <xf:setvalue ref="xxf:instance('session-parameters-instance')/javascriptParameters"
                value="concat($imageMapCommand,$commandAndClassSeparator,$imageMapClass)"/>
            <xxf:script> setClassOnElement(); </xxf:script>
            -->

        </xf:action>

    </xf:action>


    <!-- Application defined action to add an entry to a mutliple entry after user click on an image map.
          -->
    <xf:action ev:event="add-multipleEntry">
        <xxf:variable name="imageMapSelection" select="event('imageMapSelection')"/>
        <xxf:variable name="mappedElementIRI" select="event('mappedElementIRI')"/>
        <xxf:variable name="entry" select="event('entry')"/>

        <xxf:variable name="entrySortOrder" select="$entry/@cityEHR:SortOrder"/>
        <xxf:variable name="entryTemplate" select="$entry/cda:organizer/cda:component[1]"/>
        <xxf:variable name="entrySetContainer"
            select="$entry/cda:organizer/cda:component[2]/cda:organizer"/>
        <xxf:variable name="elementTemplate"
            select="$entry/cda:organizer/cda:component[1]//cda:observation/cda:value[@extension=$mappedElementIRI]"/>

        <xxf:variable name="enumeration"
            select="xxf:instance('dictionary-instance')/iso-13606:elementCollection/iso-13606:element[@extension = $mappedElementIRI]/iso-13606:data"/>

        <!-- Reset the origin from #CityEHR:Template -->
        <xf:setvalue ref="$entryTemplate//cda:id[1]/@cityEHR:origin" value="''"/>

        <!-- Set the value in the template, then insert new entry -->
        <xxf:variable name="elementValue" select="$enumeration[@value = $imageMapSelection]"/>
        <xf:setvalue ref="$elementTemplate/@value" value="$imageMapSelection"/>
        <xf:setvalue ref="$elementTemplate/@code" value="$elementValue/@code"/>
        <xf:setvalue ref="$elementTemplate/@codeSystem" value="'cityEHR'"/>
        <xf:setvalue ref="$elementTemplate/@displayName" value="$elementValue/@displayName"/>

        <xxf:variable name="addMultipleEntryPosition"
            select="
            if ('{$entrySortOrder}' = 'Ascending') then
            'last'
            else
            if ('{$entrySortOrder}' = 'Descending') then
            'first'
            else
            if (xxf:instance('view-parameters-instance')/staticParameters/cityEHRFolder/addMultipleEntryPosition = 'last') then
            'last'
            else
            'first'"/>
        <!-- Add new entry as last in the container -->
        <xf:action if="$addMultipleEntryPosition = 'last'">
            <xf:insert context="$entrySetContainer" nodeset="cda:component" origin="$entryTemplate"
                at="last()" position="after"/>
        </xf:action>
        <!-- Or as first - this is the default if the option is not specified in view-parameters -->
        <xf:action if="$addMultipleEntryPosition = 'first'">
            <xf:insert context="$entrySetContainer" nodeset="cda:component" origin="$entryTemplate"
                at="1" position="before"/>
        </xf:action>

        <!-- If a required value then refresh the main model (for requiredElementStatus) -->
        <xxf:variable name="requiredValue"
            select="exists($entryTemplate//cda:value[@cityEHR:RequiredValue='Required'])"/>
        <xf:action if="$requiredValue">
            <xf:recalculate model="main-model"/>
        </xf:action>

    </xf:action>


    <!-- Application defined action to set an element value after user clicks on an image map.
         This is only invoked for single (occurrence) entries
         The entry is from the CDA form-instance
         If a value is specified then just set it.
         Otherwise toggle the element value for:
            enumeratedValue
            boolean
          -->
    <xf:action ev:event="set-elementValue">
        <xxf:variable name="imageMapSelection" select="event('imageMapSelection')"/>
        <xxf:variable name="mappedElementIRI" select="event('mappedElementIRI')"/>
        <xxf:variable name="entry" select="event('entry')"/>

        <xxf:variable name="element" select="$entry//cda:value[@extension = $mappedElementIRI][1]"/>
        <xxf:variable name="dataType" select="$element/@xsi:type"/>
        <xxf:variable name="elementType" select="$element/@cityEHR:elementType"/>

        <!-- Get the enumeratedValues for the element (if there are any) -->
        <xxf:variable name="enumeration"
            select="xxf:instance('dictionary-instance')/iso-13606:elementCollection/iso-13606:element[@extension = $mappedElementIRI]/iso-13606:data"/>

        <!-- Value set in imageMap - could do something better with displayName here (?)
             2025-03-24 Set displayName as well as value -->
        <xf:action if="not($imageMapSelection = '')">
            <xf:setvalue ref="$element/@value" value="$imageMapSelection"/>
            
            <!-- Set the displayName -->
            <xxf:variable name="data" select="$enumeration[@value=$imageMapSelection]"/>
            
            <xf:setvalue ref="$element/@displayName" value="if (exists($data)) then $data/@displayName else $imageMapSelection"/>
        </xf:action>

        <!-- No value set in imageMap - toggle it -->
        <xf:action if="$imageMapSelection = ''">
            <!-- Get the current value for the element
                 Need to set currentValue in the control instance, because $element/@value gets reset in the processing -->

            <xxf:variable name="currentValue"
                select="xxf:instance('imageMapControl-instance')/currentValue"/>
            <xf:setvalue ref="$currentValue" value="$element/@value"/>

            <xxf:variable name="lastEnumeratedValue" select="$enumeration[position()=last()]"/>
            <xxf:variable name="reverseEnumeration" select="reverse($enumeration)"/>

            <!-- If there are enumerated values, then can toggle the element value -->
            <xf:action if="exists($enumeration)">
                <!-- If the current value isn't in the enumeration, or is equal to the last value
                     then set to the first value -->
                <xf:action
                    if="not($currentValue = $enumeration/@value) or $currentValue=$lastEnumeratedValue/@value">
                    <xf:setvalue ref="$element/@value" value="$enumeration[1]/@value"/>
                    <xf:setvalue ref="$element/@displayName" value="if (not($currentValue = $enumeration/@value)) then $element/@value else $enumeration[1]/@displayName"/>
                </xf:action>

                <!-- If the current value is one of the enumerated values (but not the last)
                     Then toggle to the next value. -->
                <xf:action
                    if="$currentValue = $enumeration/@value and not($currentValue=$lastEnumeratedValue/@value)">

                    <!-- Iterate in reverse order.
                         and set to the previous value when the match is found
                         The iteration needs to be done in the reverse order to the toggle of the value,
                         otherwise the toggled value will get matched again on the next iteration -->
                    <xf:action xxf:iterate="$reverseEnumeration">
                        <xxf:variable name="data" select="."/>
                        <xxf:variable name="position" select="position()"/>

                        <!-- Set to the next in the list -->
                        <xf:action if="$data/@value = $currentValue">
                            <xxf:variable name="nextData"
                                select="$reverseEnumeration[position() = ($position - 1)]"/>
                            <xf:setvalue ref="$element/@value" value="$nextData/@value"/>
                            <xf:setvalue ref="$element/@displayName" value="$nextData/@displayName"/>

                            <!-- Debugging
                            <xf:message ref="concat('Set value: ',$currentValue,' to value: ',$element/@value, ' displayName: ', $element/@displayName)"/>
                            -->
                        </xf:action>

                    </xf:action>
                </xf:action>
            </xf:action>
        </xf:action>

        <!-- Update the image map display (resets classes on all SVG <g> elements -->
        <xf:dispatch name="refresh-allImageMapClasses" target="imageMap-model"/>



    </xf:action>


    <!-- Application defined action to refresh classes on an image map.
         This is for a multiple entry, where the mappedElementIRI defines the addition or deletion of entries
         Get the enumeration of values for the mappedElementIRI
         Get the values for mappedElementIRI set for the entry
         Iterate through the enumeration and set or clear the class, depending on whether that value is set
    -->
    <xf:action ev:event="refresh-imageMapClasses">
        <xxf:variable name="mappedElementIRI" select="event('mappedElementIRI')"/>
        <xxf:variable name="entry" select="event('entry')"/>
        <xxf:variable name="entryIRI" select="($entry//cda:id/@extension)[1]"/>

        <xxf:variable name="commandSeparator"
            select="xxf:instance('view-parameters-instance')/commandSeparator"/>

        <!-- Get the ids -->
        <xxf:variable name="entryId" select="substring-after($entryIRI, 'Entry:')"/>
        <xxf:variable name="mappedElementId" select="substring-after($mappedElementIRI, 'Element:')"/>

        <!-- enumeration of all v,data alues for the element -->
        <xxf:variable name="enumeration"
            select="xxf:instance('dictionary-instance')/iso-13606:elementCollection/iso-13606:element[@extension = $mappedElementIRI]/iso-13606:data"/>

        <!-- All values set for the entry -->
        <xxf:variable name="observationSetContainer"
            select="$entry/cda:organizer/cda:component[2]/cda:organizer"/>
        <xxf:variable name="setValues"
            select="$observationSetContainer//cda:observation//cda:value[@extension = $mappedElementIRI]/@value"/>

        <!-- Clear the parameters -->
        <xf:setvalue ref="xxf:instance('session-parameters-instance')/javascriptParameters"
            value="''"/>

        <!-- Build parameters using mapped element values -->
        <xf:action xxf:iterate="$enumeration/@value">
            <xxf:variable name="value" select="."/>

            <xxf:variable name="imageMapCommand"
                select="concat($entryId,$commandSeparator,$mappedElementId,$commandSeparator,$value)"/>
            <xxf:variable name="imageMapClassValueSet"
                select="translate($imageMapCommand,$commandSeparator,' ')"/>

            <xxf:variable name="imageMapClass"
                select="if ($value = $setValues) then $imageMapClassValueSet else ''"/>

            <!-- javascriptParameters are picked up by setClassOnElement function.
                 These are a set of imageMapCommand///imageMapClass separated by @@@ 
                 The imageMapCommand is the id of the SVG element used to set the imageMapClass -->
            <xf:setvalue ref="xxf:instance('session-parameters-instance')/javascriptParameters"
                value="concat('@@@',$imageMapCommand,'///',$imageMapClass,.)"/>

        </xf:action>

        <xxf:script> setClassOnElement(); </xxf:script>

    </xf:action>


    <!-- Application defined action to resfresh all classes on the image maps for a composition.
         When the form was loaded for the composition its image maps were found and stored in the xmlcache
         First retrieve that cache by invoking load-xmlCache
         There may be more than one image map displayed on the page, with interaction for more than one entry/element set.
         
         The SVG <g> elements have id entryId_elementId_value (where _ is the $commandSeparator)
         The entryId and elementId in the id use th @extension (since they are the recorded values)
         The entryIRI for the imageMap entry uses the @root (since the same entry may have different behaviour, including imageMap renditions)
         
         If the command includes a value, then its class is set if the element in the composition is set to that value.
         If the command doesn't include a value, then its class is set to the value in the composition.
         
         This action handles both single and MultipleEntry
    -->
    <xf:action ev:event="refresh-allImageMapClasses">
        <xxf:variable name="commandSeparator"
            select="xxf:instance('view-parameters-instance')/commandSeparator"/>
        <xxf:variable name="valueClassPrefix"
            select="xxf:instance('view-parameters-instance')/valueClassPrefix"/>

        <!-- Clear the command and parameters -->
        <xf:setvalue ref="xxf:instance('session-parameters-instance')/imageMapCommand" value="''"/>
        <xf:setvalue ref="xxf:instance('session-parameters-instance')/javascriptParameters"
            value="''"/>

        <!-- Load the imageMapList from xmlCache. -->
        <xf:dispatch name="load-xmlCache" target="pageNavigation-model">
            <xxf:context name="xml-instance" select="xxf:instance('storedImageMapList-instance')"/>
        </xf:dispatch>

        <!-- The list of image map commands - entry_element_value set in id attributes
             (where _ is the $commandSeparator) -->
        <xxf:variable name="imageMapCommandList"
            select="xxf:instance('storedImageMapList-instance')//svg:g/@id"/>

        <!-- Iterate through the list of entries referenced in the image maps.
             (There may be several commands for the same entry -->
        <xxf:variable name="imageMapEntryList"
            select="distinct-values($imageMapCommandList/substring-before(.,$commandSeparator))"/>
        <xf:action xxf:iterate="$imageMapEntryList">
            <xxf:variable name="entryId" select="."/>
            <xxf:variable name="entryIRI" select="concat('#ISO-13606:Entry:',$entryId)"/>
            <xxf:variable name="commandPrefix" select="concat($entryId,$commandSeparator)"/>

            <!-- Get the entry in the form-instance.
                 There should only be one, but this works if there are more than one 
                 Can be single or MultipleEntry -->
            <xxf:variable name="cdaBody"
                select="xxf:instance('form-instance')/cda:component/cda:structuredBody/cda:component/cda:section"/>
            <xxf:variable name="entry"
                select="$cdaBody//cda:entry[descendant::cda:id[1]/@extension=$entryIRI]"/>

            <!-- Iterate through the entry_element commands referenced in the image maps,
                 But only if the entry exists in the composition -->
            <xf:action if="exists($entry)">
                <xxf:variable name="entryCommandList"
                    select="$imageMapCommandList[starts-with(.,$commandPrefix)]"/>
                <xf:action xxf:iterate="$entryCommandList">
                    <xxf:variable name="imageMapCommand" select="."/>

                    <!-- imageMapCommand is of the form entryId_elementId_value
                         where _ is the $commandSeparator
                         The value may be omitted when the click is just used to toggle the value -->
                    <xxf:variable name="imageMapCommandTokens"
                        select="tokenize($imageMapCommand,$commandSeparator)"/>
                    <xxf:variable name="elementId"
                        select="if (exists($imageMapCommandTokens[2])) then $imageMapCommandTokens[2] else ''"/>
                    <xxf:variable name="imageMapValue"
                        select="if (exists($imageMapCommandTokens[3])) then $imageMapCommandTokens[3] else ''"/>

                    <!-- Element must exist in command - otherwise ignore it -->
                    <xf:action if="$elementId !=''">
                        <xxf:variable name="elementIRI"
                            select="concat('#ISO-13606:Element:',$elementId)"/>

                        <!-- Simple entry contains observation, MultipleEntry contains organizer -->
                        <xxf:variable name="observationtContainer"
                            select="if (exists($entry/cda:organizer)) then $entry/cda:organizer/cda:component[2]/cda:organizer else $entry"/>

                        <!-- A MultipleEntry may contain more than one cda:onservation with the element set 
                             There should only be one cda:value for the elementIRI in each observation, but it may be in a cluster.
                             
                             For MultipleEntry if any of the obervations contains the imageMapValue, then the imageMapClass must be set.
                             For single entry, if an imageMapValue is specified and matches the value then the imageMapClass is set.
                             If the imageMapValue is not specified, then the imageMapClass is set to the value.
                             -->

                        <xxf:variable name="valueSet"
                            select="$observationtContainer//cda:observation//cda:value[@extension = $elementIRI]/@value"/>
                        <xxf:variable name="valueIsMatched"
                            select="if ($imageMapValue!= '' and $imageMapValue = $valueSet) then true() else false()"/>

                        <!-- The valueClass is set using the valueClassPrefix, so that numeric values can be handled -->
                        <xxf:variable name="valueClass"
                            select="if ($valueIsMatched) then concat($valueClassPrefix,$imageMapValue) else if ($imageMapValue='') then concat($valueClassPrefix,$valueSet[1]) else ''"/>

                        <xxf:variable name="imageMapClass"
                            select="if ($valueClass='') then '' else string-join(($entryId,$elementId,$valueClass),' ')"/>

                        <xf:setvalue
                            ref="xxf:instance('session-parameters-instance')/javascriptParameters"
                            value="concat('@@@',$imageMapCommand,'///',$imageMapClass,.)"/>

                    </xf:action>

                </xf:action>

            </xf:action>
        </xf:action>

        <!-- Javascript to set the classes -->
        <xxf:script> setClassOnElement(); </xxf:script>

    </xf:action>


    <!-- ========= Set up model when it is first loaded ========= 
        ========================================================= -->
    <xf:action ev:event="xforms-model-construct-done">
        <!-- TBD -->
    </xf:action>



</xf:model>
