<?xml version="1.0" encoding="UTF-8"?>
<!-- 
    *********************************************************************************************************
    cityEHR
    exportDataModel.xml
    
    Xforms model containing stuff for exporting data.
    
    Copyright (C) 2013-2021 John Chelsom.
    
    This program is free software; you can redistribute it and/or modify it under the terms of the
    GNU Lesser General Public License as published by the Free Software Foundation; either version
    2.1 of the License, or (at your option) any later version.
    
    This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
    without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
    See the GNU Lesser General Public License for more details.
    
    The full text of the license is available at http://www.gnu.org/copyleft/lesser.html
    **********************************************************************************************************
-->

<xf:model id="exportData-model" xmlns:xf="http://www.w3.org/2002/xforms" xmlns:ev="http://www.w3.org/2001/xml-events"
    xmlns:xxf="http://orbeon.org/oxf/xml/xforms" xmlns:exforms="http://www.exforms.org/exf/1-0" xmlns:widget="http://orbeon.org/oxf/xml/widget"
    xmlns:fr="http://orbeon.org/oxf/xml/form-runner" xmlns:f="http://orbeon.org/oxf/xml/formatting" xmlns:xhtml="http://www.w3.org/1999/xhtml"
    xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:exist="http://exist.sourceforge.net/NS/exist" xmlns:xs="http://www.w3.org/2001/XMLSchema"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xxi="http://orbeon.org/oxf/xml/xinclude"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:math="http://exslt.org/math" xmlns:cda="urn:hl7-org:v3"
    xmlns:iso-13606="http://www.iso.org/iso-13606" xmlns:cityEHR="http://openhealthinformatics.org/ehr">


    <xf:instance id="exportDataControl-instance">
        <control xmlns="">
            <!-- Templates for inserting into patientSet -->
            <patientInfo patientId=""/>
            <patientData patientId=""/>
            <!-- For multi-line reports -->
            <multipleEntry/>
            <!-- Submission status -->
            <status/>
        </control>
    </xf:instance>


    <!-- === Queries and submissions to get the patient record set 
         ========================================================= -->

    <xf:instance id="getPatientCohortRecordsXQuery-instance" src="oxf:/apps/ehr/xquery/getPatientCohortRecordsXQuery.xml"/>

    <!-- Submit the view-parameters-instance to the export pipeline 
         which runs the query set up in queryText, 
         serializes the result to a file, 
         zips it and returns the zip to the browser.
         -->
    <xf:submission id="exportrecord-submission" ref="xxf:instance('view-parameters-instance')" method="post"
        action="/ehr/cityEHRExportInstance/" replace="all" xxf:show-progress="false">
        <xf:action ev:event="xforms-submit-done">
            <xf:setvalue ref="xxf:instance('exportDataControl-instance')/status">success</xf:setvalue>
        </xf:action>
        <xf:action ev:event="xforms-submit-error">
            <xf:setvalue ref="xxf:instance('exportDataControl-instance')/status">failed</xf:setvalue>
            <xf:setvalue ref="xxf:instance('view-parameters-instance')/systemError"
                value="xxf:instance('view-parameters-instance')/systemErrorList/systemError[@type='exportrecord-submission']"/>
        </xf:action>
    </xf:submission>


    <!-- Application defined action to export all records in the patient set.
         Uses the exportrecord-submission defined above.
         patientSet is passed in as a parameter in the form of a sequence of patientIds
         transformation is the name of a stylesheet in ehr/xslt (e.g. recordSet2database.xsl)
    -->
    <xf:action ev:event="export-patientSet">
        <xxf:variable name="patientSet" select="event('patientSet')"/>
        <xxf:variable name="transformationXSL" select="event('transformationXSL')"/>

        <!-- Comma separated list of quoted patientIds -->
        <xxf:variable name="patientIdList" select="string-join($patientSet,''',''')"/>

        <!-- Get the full patient record -->
        <xf:setvalue ref="xxf:instance('getPatientCohortRecordsXQuery-instance')/patientIdList" value="concat('''',$patientIdList,'''')"/>

        <!-- Set the transformation -->
        <xf:setvalue ref="xxf:instance('view-parameters-instance')/transformationXSL" value="$transformationXSL"/>

        <!-- Set query text and context to pass to pipeline -->
        <xf:setvalue ref="xxf:instance('view-parameters-instance')/runXqueryQueryText"
            value="xxf:instance('getPatientCohortRecordsXQuery-instance')"/>
        <xf:setvalue ref="xxf:instance('view-parameters-instance')/runXqueryContext"
            value="concat('/xmlstore/applications/',xxf:instance('session-parameters-instance')/applicationId,'/records')"/>

        <!-- Pipeline to run query and return results to the browser -->
        <xf:dispatch name="load-cityEHR-page" target="pageNavigation-model">
            <xxf:context name="page" select="'cityEHRExportInstance'"/>
            <xxf:context name="show" select="'new'"/>
        </xf:dispatch>

    </xf:action>

    <!-- Submit the view-parameters-instance to the cityEHRExportCohortData pipeline 
         which runs the query set up in queryText, 
         serializes the result to a file, 
         zips it and returns the zip to the browser.
    -->
    <xf:submission id="export-cohortData-submission" ref="xxf:instance('view-parameters-instance')" method="post"
        action="/ehr/cityEHRExportCohortData/" replace="all" xxf:show-progress="false">
        <xf:action ev:event="xforms-submit-done">
            <xf:setvalue ref="xxf:instance('exportDataControl-instance')/status">success</xf:setvalue>
        </xf:action>
        <xf:action ev:event="xforms-submit-error">
            <xf:setvalue ref="xxf:instance('exportDataControl-instance')/status">failed</xf:setvalue>
            <xf:setvalue ref="xxf:instance('view-parameters-instance')/systemError"
                value="xxf:instance('view-parameters-instance')/systemErrorList/systemError[@type='failedExportCohortDataSubmission']"/>
        </xf:action>
    </xf:submission>

    <!-- Submit the patientSet-instance to the cityEHRExportCohort pipeline 
         which runs the query set up in queryText, 
         serializes the result to a file, 
         zips it and returns the zip to the browser.
         
         load
    -->
    <xf:submission id="export-patientSet-submission" ref="xxf:instance('patientSet-instance')" method="post"
        action="/ehr/cityEHRExportCohort/" replace="all" xxf:show-progress="false">
        <xf:action ev:event="xforms-submit-done">
            <xf:setvalue ref="xxf:instance('exportDataControl-instance')/status">success</xf:setvalue>
        </xf:action>
        <xf:action ev:event="xforms-submit-error">
            <xf:setvalue ref="xxf:instance('exportDataControl-instance')/status">failed</xf:setvalue>
            <xf:setvalue ref="xxf:instance('view-parameters-instance')/systemError"
                value="xxf:instance('view-parameters-instance')/systemErrorList/systemError[@type='failedExportPatientSetSubmission']"/>
        </xf:action>
    </xf:submission>


    <!-- === Generate and export reports 
    ========================================================= -->

    <!-- Template patientSet for export data. -->
    <xf:instance id="patientSet-instance">
        <patientSet xmlns="">
            <!-- Replaced from patientSetTemplate -->
        </patientSet>
    </xf:instance>

    <xf:instance id="patientSetTemplate-instance" src="oxf:/apps/ehr/resources/templates/patientSet.xml"/>

    <!-- Application defined action to generate a report.
         Get the template patientSet
         Iterate through patient cohort (passed in as a sequence of patientIds).
            Load report composition and instantiate entries
            Clear patientInfo template and insert cda header entries
            Insert patientInfo into patientSet
            Clear patientData template and insert entries
            Insert patientData into patientSet 
         Export patientSet, transforming as necessary
         
         This requires form-instance and various actions in cda-model
    -->

    <xf:action ev:event="generate-report">
        <xxf:variable name="reportIRI" select="event('reportIRI')"/>
        <xxf:variable name="patientCohort" select="event('patientCohort')"/>
        <xxf:variable name="exportDataFormat" select="event('exportDataFormat')"/>
        <xxf:variable name="outputHeaderRow" select="event('outputHeaderRow')"/>

        <!-- Get the data format parameters -->
        <xxf:variable name="selectedFormat"
            select="xxf:instance('view-parameters-instance')/staticParameters/cityEHRExportDataDialog/exportDataFormat/option[@value=$exportDataFormat]"/>
        <xxf:variable name="transformationXSL"
            select="if (exists($selectedFormat/@transformationXSL)) then $selectedFormat/@transformationXSL else ''"/>
        <xxf:variable name="resourceFileExtension"
            select="if (exists($selectedFormat/@resourceFileExtension)) then $selectedFormat/@resourceFileExtension else ''"/>

        <!-- Get template for patientSet and set parameters -->
        <xf:insert nodeset="xxf:instance('patientSet-instance')" origin="xxf:instance('patientSetTemplate-instance')"/>

        <xf:setvalue ref="xxf:instance('patientSet-instance')/@externalId" value="xxf:instance('view-parameters-instance')/externalId"/>
        <xf:setvalue ref="xxf:instance('patientSet-instance')/@resourceFileExtension" value="$resourceFileExtension"/>
        <xf:setvalue ref="xxf:instance('patientSet-instance')/@transformationXSL" value="$transformationXSL"/>
        <xf:setvalue ref="xxf:instance('patientSet-instance')/@outputHeaderRow" value="$outputHeaderRow"/>

        <!-- Iterate through patient cohort -->
        <xf:action xxf:iterate="$patientCohort">
            <xxf:variable name="patientId" select="."/>

            <!-- Load report composition (reloaded on each iteration so that entries are cleared) -->
            <xf:dispatch name="load-composition" target="cda-model">
                <xxf:context name="patientId" select="$patientId"/>
                <xxf:context name="compositionIRI" select="$reportIRI"/>
            </xf:dispatch>

            <!-- Get the multiple entry for multi-line reports.
                 Must not be hidden (either in a hidden section, or hidden itself)
                 There should be only one of these, but don't assume so -->
            <xxf:variable name="multipleEntry"
                select="(xxf:instance('form-instance')//cda:structuredBody/cda:component/cda:section[not(@cityEHR:visibility='alwaysHidden')][not(@cityEHR:rendition='#CityEHR:EntryProperty:Hidden')]/descendant::cda:entry[not(@cityEHR:Scope='#CityEHR:EntryProperty:Hidden')][cda:organizer/@classCode='MultipleEntry'])[1]"/>

            <!-- Store the multipleEntry in the control instance -->
            <xf:delete nodeset="xxf:instance('exportDataControl-instance')/multipleEntry/*"/>
            <xf:insert context="xxf:instance('exportDataControl-instance')/multipleEntry" origin="$multipleEntry"/>

            <!-- The first cda:component is the template entry
                 The entries are in the second cda:component of the MultipleEntry
                 These are set from the stored multipleEntry in the control instance, so that they remain constant -->
            <xxf:variable name="multipleEntryTemplate"
                select="xxf:instance('exportDataControl-instance')/multipleEntry/cda:entry/cda:organizer/cda:component[1]/cda:observation"/>
            <xxf:variable name="multipleEntrySet"
                select="xxf:instance('exportDataControl-instance')/multipleEntry/cda:entry/cda:organizer/cda:component[2]/descendant::cda:observation"/>

            <!-- Reset the multiple entry to single entry, so that it is included in exportEntrySet -->
            <xf:action if="exists($multipleEntry)">
                <xf:delete nodeset="$multipleEntry/*"/>
                <xf:insert context="$multipleEntry" origin="$multipleEntryTemplate"/>
            </xf:action>

            <!-- Data for export is in entries that are not in the hidden sections for calculation entries or trash.
                 And are not hidden i.e. cityEHR:Scope=#CityEHR:EntryProperty:Hidden
                 Only supporting simple entries in reports and ignoring hidden entries. -->
            <xxf:variable name="exportEntrySet"
                select="xxf:instance('form-instance')//cda:structuredBody/cda:component/cda:section[not(@cityEHR:visibility='alwaysHidden')][not(@cityEHR:rendition='#CityEHR:EntryProperty:Hidden')]/descendant::cda:entry[cda:observation][not(@cityEHR:Scope='#CityEHR:EntryProperty:Hidden')]"/>

            <!-- If there is no multipleEntry (or no entries recorded for one) then just output a single line of data -->
            <xf:action if="empty($multipleEntrySet)">
                <xf:dispatch name="write-report-data" target="exportData-model">
                    <xxf:context name="patientId" select="$patientId"/>
                    <xxf:context name="exportEntrySet" select="$exportEntrySet"/>
                    <xxf:context name="exportDataFormat" select="$exportDataFormat"/>
                </xf:dispatch>
            </xf:action>

            <!-- Debugging -->
            <!--
            <xf:setvalue ref="xxf:instance('cdaControl-instance')/test" value="0"/>
            -->

            <!-- If multipleEntry is set, then iterate through the entries and output one line for each.
                 For each entry
                    Insert into form-instance
                    Recalculate default values -->
            <xf:action xxf:iterate="$multipleEntrySet">
                <xxf:variable name="entry" select="."/>

                <!-- Debugging -->
                <!--
                <xf:setvalue ref="xxf:instance('cdaControl-instance')/test" value=". +1"/> 
                -->

                <!-- Replace multipleEntry -->
                <xf:delete nodeset="$multipleEntry/*"/>
                <xf:insert context="$multipleEntry" origin="$entry"/>

                <!-- Need to rebuild to make sure that multipleEntry values have stuck in form-instance -->
                <!-- This crashes when used in cityEGRAdmin because cda-model is not imprted there -->
                <!--
                <xf:rebuild model="cda-model"/>
                -->

                <!-- Set default values -->
                <xf:dispatch name="set-default-values" target="cda-model"/>

                <!-- Look up all directory entries, in case key value is set as a default, pre-filled or calculated value -->
                <xf:dispatch name="refresh-directory-entries" target="main-model"/>

                <!-- Set default values again, in case any depend on directory entries. -->
                <xf:dispatch name="set-default-values" target="cda-model"/>

                <!-- Output line for the report -->
                <xf:dispatch name="write-report-data" target="exportData-model">
                    <xxf:context name="patientId" select="$patientId"/>
                    <xxf:context name="exportEntrySet" select="$exportEntrySet"/>
                    <xxf:context name="exportDataFormat" select="$exportDataFormat"/>
                </xf:dispatch>
            </xf:action>
        </xf:action>

    </xf:action>


    <!-- Application defined action to write data to the report.
         Report is put in patientSet-instance
         Writes data for the set of entries passed in exportEntrySet
    -->
    <xf:action ev:event="write-report-data">
        <xxf:variable name="patientId" select="event('patientId')"/>
        <xxf:variable name="exportEntrySet" select="event('exportEntrySet')"/>
        <xxf:variable name="exportDataFormat" select="event('exportDataFormat')"/>

        <!-- Get templates for patientInfo, patientData -->
        <xxf:variable name="patientInfoTemplate" select="xxf:instance('exportDataControl-instance')/patientInfo"/>
        <xxf:variable name="patientDataTemplate" select="xxf:instance('exportDataControl-instance')/patientData"/>

        <!-- Clear patientInfo template and set patientId -->
        <xf:delete nodeset="$patientInfoTemplate/*"/>
        <xf:setvalue ref="$patientInfoTemplate/@patientId" value="$patientId"/>

        <!-- Insert patientInfo into patientSet - why? -->
        <xf:insert context="xxf:instance('patientSet-instance')" origin="$patientInfoTemplate"/>

        <!-- Clear patientData template and insert entries -->
        <xf:delete nodeset="$patientDataTemplate/*"/>
        <xf:setvalue ref="$patientDataTemplate/@patientId" value="$patientId"/>

        <!-- If not exporting CSV, generate the XML data set -->
        <xf:action if="$exportDataFormat != 'csv'" xxf:iterate="$exportEntrySet">
            <xxf:variable name="entry" select="."/>
            <xf:insert context="$patientDataTemplate" nodeset="cda:entry" origin="$entry" at="last()" position="after"/>
        </xf:action>

        <!-- If the export format is CSV, then make the conversion here
            If header row is required, then generate it directly - only needed once, as first element in patientSet-instance -->
        <xf:action if="$exportDataFormat='csv'">
            <!-- Header if required, first row only.
                Must not contain commas (since these separate fields in the CSV) -->
            <xf:action
                if="xxf:instance('patientSet-instance')/@outputHeaderRow='true' and empty(xxf:instance('patientSet-instance')/patientData)">
                <xxf:variable name="csvHeaderData"
                    select="string-join($exportEntrySet/descendant::cda:value[not(@cityEHR:Scope='#CityEHR:ElementProperty:Hidden'  or @cityEHR:elementRendition ='#CityEHR:ElementProperty:Hidden')]/translate(normalize-space(concat(ancestor::cda:observation/cda:code[@codeSystem='cityEHR']/@displayName,' ',@cityEHR:elementDisplayName)),',',''),',')"/>
                <xf:setvalue ref="$patientDataTemplate" value="$csvHeaderData"/>
                <xf:insert context="xxf:instance('patientSet-instance')" origin="$patientDataTemplate"/>
            </xf:action>

            <!-- One field (comma delimited) for each element (but exclude hidden elements - scope in v1, rendition on v2) -->
            <xxf:variable name="csvData"
                select="string-join($exportEntrySet/descendant::cda:value[not(@cityEHR:Scope='#CityEHR:ElementProperty:Hidden' or @cityEHR:elementRendition ='#CityEHR:ElementProperty:Hidden')]/@value,',')"/>
            <xf:setvalue ref="$patientDataTemplate" value="$csvData"/>
        </xf:action>

        <!-- Insert patientData into patientSet.
            Preserve the order of the patients (keeps any header row at the top) -->
        <xf:insert context="xxf:instance('patientSet-instance')" nodeset="patientData" origin="$patientDataTemplate" at="last()"
            position="after"/>

    </xf:action>

</xf:model>
