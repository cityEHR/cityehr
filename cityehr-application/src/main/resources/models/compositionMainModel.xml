<?xml version="1.0" encoding="UTF-8"?>
<!-- 
    *********************************************************************************************************
    cityEHR
    compositionMainModel.xml
    
    Xforms main model for use with patient views that edit compositions
    - forms, letters, pathways, etc
    
    Copyright (C) 2013-2021 John Chelsom.
    
    This program is free software; you can redistribute it and/or modify it under the terms of the
    GNU Lesser General Public License as published by the Free Software Foundation; either version
    2.1 of the License, or (at your option) any later version.
    
    This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
    without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
    See the GNU Lesser General Public License for more details.
    
    The full text of the license is available at http://www.gnu.org/copyleft/lesser.html
    **********************************************************************************************************
-->

<xf:model id="main-model" xxf:external-events="assign-sort-categories"
    xmlns:xf="http://www.w3.org/2002/xforms" xmlns:ev="http://www.w3.org/2001/xml-events"
    xmlns:xxf="http://orbeon.org/oxf/xml/xforms" xmlns:exforms="http://www.exforms.org/exf/1-0"
    xmlns:widget="http://orbeon.org/oxf/xml/widget" xmlns:fr="http://orbeon.org/oxf/xml/form-runner"
    xmlns:f="http://orbeon.org/oxf/xml/formatting" xmlns:xhtml="http://www.w3.org/1999/xhtml"
    xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:exist="http://exist.sourceforge.net/NS/exist"
    xmlns:xs="http://www.w3.org/2001/XMLSchema"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:xxi="http://orbeon.org/oxf/xml/xinclude" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
    xmlns:math="http://exslt.org/math" xmlns:cda="urn:hl7-org:v3"
    xmlns:iso-13606="http://www.iso.org/iso-13606"
    xmlns:cityEHR="http://openhealthinformatics.org/ehr"
    xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
    xmlns:dc="http://purl.org/dc/elements/1.1/">

    <!-- Control of the view -->
    <xf:instance id="control-instance">
        <control xmlns="">
            <status/>
            <nextPage/>
            <count/>
            <error/>
            <statusMessage/>
            <storageObject/>
            <deleteObject/>
            <resourceURL xsi:type="xs:anyURI"/>
            <highlightStyle/>
            <!-- Debugging information -->
            <debug/>
            <debugging>
                <checkPoint label="Check Point 1" time="0"/>
                <checkPointList/>
            </debugging>
            <!-- Information about currently loaded form -->
            <current-form>
                <compositionTypeIRI/>
                <compositionIRI/>
                <compositionId/>
                <compositionShortId/>
                <handleId/>
                <handle/>
                <saveHandle/>
                <publishHandle/>
                <formCache/>
                <effectiveTime/>
                <timeStamp/>
                <displayName/>
                <title/>
                <!-- status is none | new | saved -->
                <status>none</status>
                <!-- editStatus is unedited | edited -->
                <editStatus>unedited</editStatus>
                <!-- visibleRequiredElementList is a string of locators for required elements visible on the form -->
                <visibleRequiredElementList/>
                <!-- requiredElementList is a string of locators for required elements on the form -->
                <requiredElementList/>
                <!-- requiredElementsSet - true if all required elements are set -->
                <requiredElementsSet>true</requiredElementsSet>
                <!-- requiredElementStatus is a count of the number of required elements with no value set -->
                <requiredElementStatus>0</requiredElementStatus>
                <!-- showRequiredElements is true | false -->
                <showRequiredElements>false</showRequiredElements>
                <!-- pathwayStatus is charted | inProgress | completed -->
                <pathwayStatus/>
            </current-form>
            <!-- Information about next form to load-->
            <next-form/>
            <!-- For form display -->
            <section/>
            <crossRefId/>
            <sectionClass/>
            <sectionLayout/>
            <enumerated-type>false</enumerated-type>
            <simple-type>true</simple-type>
            <entryClass/>
            <elementClass/>
            <currentAutocompleteFocus/>
            <!-- For selecting a value from an image map (enumerated value in a ME with image map) -->
            <imageMapSelection/>
            <!-- For selecting enumerated class node to set value of an element -->
            <enumeratedClass>
                <debug><!-- Used for debugging --></debug>
                <inputId><!-- Id of the input control for the class selection --></inputId>
                <focus><!-- Fcous of the element for the class selection --></focus>

                <!-- 2024-03-10 Some of this no longer needed -->
                <elementPath/>
                <elementDisplayName/>
                <elementScope/>
                <dictionaryId/>
                <classNode/>
                <entryNode/>
                <intermediateNodeType>Intermediate</intermediateNodeType>
                <recordedDisplayName><!-- Filled with @displayName of the recorded value --></recordedDisplayName>
                <selectedValue><!-- Value selected from the tree control--></selectedValue>
                <selectedNodeType><!-- Leaf | Intermediate --></selectedNodeType>
                <selectedNode code="" codeSystem="" value="" displayName="" units=""
                    cityEHR:suppDataSet=""/>
            </enumeratedClass>
            <!-- For selecting the supplementary data -->
            <suppDataSet>
                <entryRelationship xmlns="urn:hl7-org:v3" cityEHR:origin="" cityEHR:focus=""/>

                <focus><!-- Fcous of the entryRelationship for the SDS input --></focus>

                <selectionCount>0</selectionCount>
                <classNodeDisplayName/>
                <sdsComponent/>

            </suppDataSet>
            <!-- For confirmation dialogue -->
            <confirmationDialogue>
                <confirmationAction/>
                <confirmationActionModel/>
                <confirmationActionMessage/>
                <confirmationMessage/>
            </confirmationDialogue>

            <range/>
        </control>
    </xf:instance>

    <!-- Required elements - either in single entry or the second organizer of a multiple entry -->
    <xf:bind nodeset="xxf:instance('control-instance')/current-form/requiredElementStatus"
        calculate="count(xxf:instance('form-instance')//cda:value[@cityEHR:RequiredValue='Required'][@value=''][not(ancestor::cda:organizer[1]/parent::cda:entry)])"/>


    <!-- Observer for dynamic change of display of view controls.
         Includes the register control for cityEHRRegistration.
         Need recalculate so that viewControlsActions binds are refreshed (added rebuild, 2018-06-28)-->
    <xf:action ev:event="xxforms-value-changed" ev:observer="control-instance">
        <xf:recalculate model="viewControlsActions-model"/>
        <xf:rebuild model="viewControlsActions-model"/>
    </xf:action>



    <!-- ========= Queries to get data from the xmlstore ========= 
         ========================================================= -->

    <!-- Load the queries from file. -->
    <xf:instance id="patientCompositionsListXQuery-instance"
        src="oxf:/apps/ehr/xquery/patientCompositionsListXQuery.xml"/>
    <xf:instance id="getResourceHandlesXQuery-instance"
        src="oxf:/apps/ehr/xquery/getResourceHandlesXQuery.xml"/>

    <!-- Generic query to be used when parameters need to be set before running -->
    <xf:instance id="query-instance">
        <exist:query start="1" max="-1">
            <exist:text/>
        </exist:query>
    </xf:instance>

    <!-- Response instances -->
    <xf:instance id="patientCompositionsList-instance">
        <patientCompositions/>
    </xf:instance>
    <xf:instance id="resourceHandles-instance">
        <handle/>
    </xf:instance>


    <!-- Application defined action to load the list of saved compositions for a patient.
                 Returns a set of:   
                 
                 <composition>
                     <handle/>
                     <effectiveTime/>
                     <displayName/>
                     <rank/>
                     <code/>                  
                 </composition> 
            -->

    <!-- Application defined action to load the list of saved compositions for a patient. -->
    <xf:action ev:event="get-patientCompositions">
        <xf:action if="xxf:instance('view-parameters-instance')/compositionTypeIRI!=''">
            <xxf:variable name="storageLocation"
                select="concat('/xmlstore/applications/',xxf:instance('session-parameters-instance')/applicationId,'/data/',xxf:instance('session-parameters-instance')/patientId)"/>

            <xf:setvalue ref="xxf:instance('patientCompositionsListXQuery-instance')/whereClause"
                value="concat('[descendant::cda:ClinicalDocument/cda:typeId/@root=''',xxf:instance('view-parameters-instance')/compositionTypeIRI,''']')"/>

            <xf:dispatch name="dal-query" target="databaseAccessLayer-model">
                <xxf:context name="system" select="'ehr'"/>
                <xxf:context name="storageLocation" select="$storageLocation"/>
                <xxf:context name="query"
                    select="xxf:instance('patientCompositionsListXQuery-instance')"/>
                <xxf:context name="response"
                    select="xxf:instance('patientCompositionsList-instance')"/>
                <xxf:context name="status" select="xxf:instance('control-instance')/status"/>
            </xf:dispatch>

        </xf:action>
    </xf:action>


    <!-- Get list of resource handles for a patient. 
         The resources match the condition set up in the query.
         Run in the data collection for the patient
         
         Returns a set of:   
        
        <handle>databasePath/to/resource</handle>
 
    -->
    <xf:submission id="getResourceHandles-submission" ref="xxf:instance('query-instance')"
        action="{xxf:instance('view-parameters-instance')/applicationDatabaseLocation}/data/{xxf:instance('view-parameters-instance')/patientId}"
        method="post" replace="instance" instance="resourceHandles-instance">
        <xf:action ev:event="xforms-submit-done">
            <xf:setvalue ref="xxf:instance('control-instance')/status">success</xf:setvalue>
        </xf:action>
        <xf:action ev:event="xforms-submit-error">
            <xf:setvalue ref="xxf:instance('control-instance')/status">failed</xf:setvalue>
            <xf:setvalue ref="xxf:instance('view-parameters-instance')/systemError"
                value="xxf:instance('view-parameters-instance')/systemErrorList/systemError[@type='failedGetResourceHandlesSubmission']"
            />
        </xf:action>
    </xf:submission>



    <!-- ========= Load a form (new one or a saved form that is in progress) ========= 
         ============================================================================= -->

    <!-- Application defined action to load a new composition.
         The composition passed is an iso-13606:composition element from the dictionary instance -->
    <xf:action ev:event="confirm-load-new-composition">
        <xxf:variable name="composition" select="event('composition')"/>

        <!-- Set up next form to load after user confirmation -->
        <xf:delete nodeset="xxf:instance('control-instance')/next-form/*"/>
        <xf:insert context="xxf:instance('control-instance')/next-form" origin="$composition"/>

        <!-- No form loaded, so just load new composition -->
        <xf:action if="xxf:instance('control-instance')/current-form/status='none'">
            <xf:dispatch name="load-new-composition" target="main-model"/>
        </xf:action>

        <!-- A composition is already loaded, so user must confirm -->
        <xf:action if="not(xxf:instance('control-instance')/current-form/status='none')">
            <xf:dispatch name="confirm-action" target="pageNavigation-model">
                <xxf:context name="action" select="'loadNewComposition'"/>
            </xf:dispatch>
        </xf:action>

    </xf:action>


    <!-- Application defined action to load a saved composition.
         The composition passed is an iso-13606:composition element from the dictionary instance -->
    <xf:action ev:event="load-new-composition">
        <xxf:variable name="composition"
            select="xxf:instance('control-instance')/next-form/iso-13606:composition"/>

        <!-- Application and specialty -->
        <xxf:variable name="applicationId"
            select="xxf:instance('view-parameters-instance')/applicationId"/>
        <xxf:variable name="specialtyId"
            select="xxf:instance('view-parameters-instance')/specialtyId"/>

        <!-- Set the language variant location (if session is not using the base language) -->
        <xxf:variable name="languageCode"
            select="xxf:instance('session-parameters-instance')/languageCode"/>
        <xxf:variable name="baseLanguageCode"
            select="xxf:instance('session-parameters-instance')/baseLanguageCode"/>

        <xxf:variable name="languageVariantLocation"
            select="if ($languageCode!= '' and $languageCode != $baseLanguageCode) then concat('/variants/',$languageCode) else ''"/>

        <!-- Set details of current composition -->
        <xxf:variable name="compositionTypeIRI" select="$composition/@typeId"/>
        <xxf:variable name="compositionIRI" select="$composition/@code"/>
        <xxf:variable name="compositionId" select="replace(substring($compositionIRI,2),':','-')"/>
        <xxf:variable name="compositionLocation"
            select="concat('/xmlstore/applications/',$applicationId,$languageVariantLocation,'/systemConfiguration/',$specialtyId,'/compositions/',$compositionId)"/>

        <!-- Set the compositionHandle -->
        <xf:dispatch name="set-dalReadURL" target="databaseAccessLayer-model">
            <xxf:context name="system" select="'ehr'"/>
            <xxf:context name="storageLocation" select="$compositionLocation"/>
            <xxf:context name="dalReadURL"
                select="xxf:instance('view-parameters-instance')/compositionHandle"/>
        </xf:dispatch>

        <!-- Set the formCacheHandle -->
        <xxf:variable name="formCacheLocation"
            select="concat('/xmlstore/applications/',$applicationId,$languageVariantLocation,'/systemConfiguration/',$specialtyId,'/cache/',$compositionId)"/>
        <xf:dispatch name="set-dalReadURL" target="databaseAccessLayer-model">
            <xxf:context name="system" select="'ehr'"/>
            <xxf:context name="storageLocation" select="$formCacheLocation"/>
            <xxf:context name="dalReadURL"
                select="xxf:instance('view-parameters-instance')/formCacheHandle"/>
        </xf:dispatch>

        <!-- Save the xmlCache with SVG image maps for the composition -->
        <xf:dispatch name="save-svgCache" target="imageMap-model">
            <xxf:context name="applicationId" select="$applicationId"/>
            <xxf:context name="compositionIRI" select="$compositionIRI"/>
        </xf:dispatch>

        <!-- Set the compositionStatus -->
        <xf:setvalue ref="xxf:instance('view-parameters-instance')/compositionStatus" value="'new'"/>

        <!-- Page to load depends on the type of the composition -->
        <xxf:variable name="page"
            select="xxf:instance('view-parameters-instance')/pageInformation/page[@compositionTypeIRI=$compositionTypeIRI]/@page"/>

        <!-- Load the new page -->
        <xf:dispatch name="load-cityEHR-page" target="pageNavigation-model">
            <xxf:context name="page" select="$page"/>
            <xxf:context name="checkEdits" select="false()"/>
        </xf:dispatch>

    </xf:action>


    <!-- Application defined action to load a saved composition.
         The composition passed is a omposition element from the patientCompositionsList instance -->
    <xf:action ev:event="confirm-load-saved-composition">
        <xxf:variable name="composition" select="event('composition')"/>

        <!-- Set up next form to load after user confirmation -->
        <xf:delete nodeset="xxf:instance('control-instance')/next-form/*"/>
        <xf:insert context="xxf:instance('control-instance')/next-form" origin="$composition"/>

        <!-- No form loaded, so just load new composition -->
        <xf:action if="xxf:instance('control-instance')/current-form/status='none'">
            <xf:dispatch name="load-saved-composition" target="main-model"/>
        </xf:action>

        <!-- A composition is already loaded, so user must confirm -->
        <xf:action if="not(xxf:instance('control-instance')/current-form/status='none')">
            <xf:dispatch name="confirm-action" target="pageNavigation-model">
                <xxf:context name="action" select="'loadSavedComposition'"/>
            </xf:dispatch>
        </xf:action>

    </xf:action>


    <!-- Application defined action to load a saved composition.
         The composition passed is a omposition element from the patientCompositionsList instance -->
    <xf:action ev:event="load-saved-composition">
        <xxf:variable name="composition"
            select="xxf:instance('control-instance')/next-form/composition"/>

        <xf:setvalue ref="xxf:instance('view-parameters-instance')/compositionStatus"
            value="'saved'"/>
        <xf:setvalue ref="xxf:instance('view-parameters-instance')/compositionHandle"
            value="concat(xxf:instance('view-parameters-instance')/databaseLocation,$composition/handle)"/>
        <xxf:variable name="compositionTypeId"
            select="replace(substring($composition/compositionTypeIRI,2),':','-')"/>
        <xf:setvalue ref="xxf:instance('view-parameters-instance')/formCacheHandle"
            value="if (xxf:instance('system-parameters-instance')/dynamicParameters/useFormCache/@value!='true') then 'blank' else concat(xxf:instance('view-parameters-instance')/applicationDatabaseLocation,'/systemConfiguration/',xxf:instance('view-parameters-instance')/specialtyId,'/cache/',$compositionTypeId)"/>

        <xf:setvalue ref="xxf:instance('control-instance')/current-form/displayName"
            value="$composition/displayName"/>
        <xf:setvalue ref="xxf:instance('control-instance')/current-form/title"
            value="concat(xxf:instance('view-parameters-instance')/staticParameters/cityEHRFolder/loadingLabel,xxf:instance('control-instance')/current-form/displayName,'...')"/>
        <xf:setvalue ref="xxf:instance('view-parameters-instance')/pageDisplayName"
            value="xxf:instance('control-instance')/current-form/title"/>

        <xf:dispatch name="load-cityEHR-page" target="pageNavigation-model">
            <xxf:context name="page" select="xxf:instance('session-parameters-instance')/@page"/>
            <xxf:context name="checkEdits" select="false()"/>
        </xf:dispatch>

    </xf:action>


    <!-- The XML document for the current form 
         This is defined in cdaModel, from 2018-06-21 -->
    <!-- 
    <xf:instance id="form-instance">
        <form/>
    </xf:instance>
    -->

    <!-- The XML document for the stored form (form-instance gets copied here before it is comitted to the xmlstore -->
    <xf:instance id="storage-instance">
        <cda:ClinicalDocument/>
    </xf:instance>

    <!-- Set the 'dirty flag' whenever the form is changed and recalculate.  ***jc
         The recalculate is needed so that calculated values that are dependent on other calculations are evaluated using the current values.
         This is what we want, but it causes a major problem of recursive recalculation when the form is published -->
    <xf:action ev:observer="form-instance"
        ev:event="xforms-insert xforms-delete xxforms-value-changed"
        if="xxf:instance('cdaControl-instance')/formStatus='ready'">
        <xf:setvalue ref="xxf:instance('control-instance')/current-form/editStatus" value="'edited'"/>
        <!-- Recaculate the model each time a value is changed - ***Don't do this*** 22-07-2015 -->
        <!--
        <xf:recalculate model="main-model"/>
        -->
    </xf:action>


    <!-- Application defined action to download XML - called from the viewXML dialogue -->
    <xf:action ev:event="download-xml">
        <xf:dispatch name="export-xmlCache" target="pageNavigation-model">
            <xxf:context name="export-instance" select="xxf:instance('form-instance')"/>
            <xxf:context name="exportType" select="'PatientComposition'"/>
        </xf:dispatch>
    </xf:action>


    <!-- Application defined action to check required elements.
         Checks required elements to make sure they are set.
         For MultipleEntry, any visible required elements must be set.
         For simple entries and EnumeratedClassEntry, each of the elements in the requiredElementList must be visible and set with a value
         (Note that these elements may also have unset values that are not visible).
        -->
    <xf:action ev:event="check-requiredElements">
        <!-- Check MultipleEntry - visible required elements are not set -->
        <xxf:variable name="unsetMERequiredElementList"
            select="xxf:instance('form-instance')/descendant::cda:entry/cda:organizer[@classCode='MultipleEntry']/cda:component[2]/descendant::cda:value[@cityEHR:RequiredValue='Required'][@value=''][not(ancestor-or-self::*/@cityEHR:visibility=('false','alwaysHidden'))]"/>

        <!-- For simpleEntry and enumeratedClassEntry, the required list has been set by set-requiredElementList -->
        <xxf:variable name="requiredElementLocators"
            select="tokenize(xxf:instance('control-instance')/current-form/requiredElementList,xxf:instance('view-parameters-instance')/resultSeparator)"/>

        <!-- Visible required element list that are set - for simpleEntry and enumeratedClassEntry only.
             This is a set of cda:value -->
        <xxf:variable name="visibleRequiredElementList"
            select="xxf:instance('form-instance')//cda:entry/cda:observation/descendant::cda:value[@cityEHR:RequiredValue='Required'][@value!=''][not(ancestor-or-self::*/@cityEHR:visibility=('false','alwaysHidden'))] | xxf:instance('form-instance')//cda:entry/cda:organizer[@classCode='EnumeratedClassEntry']/descendant::cda:value[@cityEHR:RequiredValue='Required'][@value!=''][not(ancestor-or-self::*/@cityEHR:visibility=('false','alwaysHidden'))]"/>

        <!-- Locators formed from entryIRI and elementIRI, including for clusters.
             -->
        <xxf:variable name="visibleRequiredElementLocators"
            select="$visibleRequiredElementList/concat(ancestor::cda:entry[1]/descendant::cda:id[1]/@extension,@extension)"/>

        <!-- Every element in requiredElementLocators must be visible and set -->
        <xxf:variable name="unsetRequiredElementLocators"
            select="for $e in $requiredElementLocators return if ($e=$visibleRequiredElementLocators) then () else $e"/>

        <!-- Debugging -->
        <!--
        <xf:message ref="string-join($unsetRequiredElementLocators,'@@@')"/>
        -->
        <!-- Set the status flag - to be ok, both unsetMERequiredElementList and unsetRequiredElementList must be empty -->
        <xf:setvalue ref="xxf:instance('control-instance')/current-form/requiredElementsSet"
            value="if (empty($unsetMERequiredElementList) and empty($unsetRequiredElementLocators)) then 'true' else 'false'"
        />
    </xf:action>

    <!-- Application defined action to get list of required elements.
         This is the list of entryIRI and elementIRI pattern (i.e. including clusters) for all simpleEntry and enumeratedClassEntry.
         When these have required values, the value must be visible and set before the form can be published.
         There may be aliased entries/elements on the form, so multiple instances of the required value, some of which may not be visible.
         In this case, at least one instance must be visible and set with a value, which is why it is necessary to form this list for checking
    -->
    <xf:action ev:event="set-requiredElementList">
        <!-- Required element list - for simpleEntry and enumeratedClassEntry only.
             Is a set of cda:value elements -->
        <xxf:variable name="requiredElementList"
            select="xxf:instance('form-instance')//cda:entry/cda:observation/descendant::cda:value[@cityEHR:RequiredValue='Required'] | xxf:instance('form-instance')//cda:entry/cda:organizer[@classCode='EnumeratedClassEntry']/descendant::cda:value[@cityEHR:RequiredValue='Required']"/>

        <!-- Locators formed from entryIRI and elementIRI, including for clusters -->
        <xxf:variable name="requiredElementLocators"
            select="$requiredElementList/concat(ancestor::cda:entry[1]/descendant::cda:id[1]/@extension,@extension)"/>

        <xf:setvalue ref="xxf:instance('control-instance')/current-form/requiredElementList"
            value="string-join(distinct-values($requiredElementLocators),xxf:instance('view-parameters-instance')/resultSeparator)"/>

    </xf:action>


    <!-- Application defined action to set the parameters in the CDA Header using details of current record.
        This uses the patient demographics that have been set up in view-parameters-instance
        
        Here we set:
        id 
        prefix (i.e. Mr, Mrs, etc)
        family (name)
        given (names)
        birthTime
        administrativeGenderCode
        
        Plus the providerOrganization code for the healthcare provider organisation.
        
        The effectiveTime is already set (when form was loaded, or effective time was changed by the user) .
    -->

    <xf:action ev:event="set-cda-header">
        <!-- id -->
        <xf:setvalue
            ref="xxf:instance('form-instance')/cda:recordTarget/cda:patientRole/cda:id/@extension"
            value="xxf:instance('view-parameters-instance')/patientId"/>
        <!-- family -->
        <xf:setvalue
            ref="xxf:instance('form-instance')/cda:recordTarget/cda:patientRole/cda:patient/cda:name/cda:family"
            value="xxf:instance('patient-instance')/cdaheader/family"/>
        <!-- given -->
        <xf:setvalue
            ref="xxf:instance('form-instance')/cda:recordTarget/cda:patientRole/cda:patient/cda:name/cda:given"
            value="xxf:instance('patient-instance')/cdaheader/given"/>
        <!-- prefix -->
        <xf:setvalue
            ref="xxf:instance('form-instance')/cda:recordTarget/cda:patientRole/cda:patient/cda:name/cda:prefix"
            value="xxf:instance('patient-instance')/cdaheader/prefix"/>
        <!-- birthTime -->
        <xf:setvalue
            ref="xxf:instance('form-instance')/cda:recordTarget/cda:patientRole/cda:patient/cda:birthTime/@value"
            value="xxf:instance('patient-instance')/cdaheader/birthTime"/>
        <!-- administrativeGenderCode -->
        <xf:setvalue
            ref="xxf:instance('form-instance')/cda:recordTarget/cda:patientRole/cda:patient/cda:administrativeGenderCode/@displayName"
            value="xxf:instance('patient-instance')/cdaheader/administrativeGenderCode"/>
        <!-- providerOrganization -->
        <xf:setvalue
            ref="xxf:instance('form-instance')/cda:recordTarget/cda:patientRole/cda:providerOrganization/cda:id/@extension"
            value="xxf:instance('application-parameters-instance')/patientRegistration/providerOrganization/@value"
        />
    </xf:action>


    <!-- Application defined action to set the author details in the CDA Header using details of current user.
         Can be used to set details for the form-instance or the notification-instance
         This uses the user details that have been set up in user-instance -->
    <xf:action ev:event="set-author-details">
        <xxf:variable name="composition" select="event('composition')"/>

        <xxf:variable name="compositionAuthor" select="$composition//cda:author[1]"/>
        <!-- Time the composition was published -->
        <xf:setvalue ref="$compositionAuthor/cda:time/@value" value="current-dateTime()"/>
        <!-- User id (root is the application, extension is the userIRI -->
        <xf:setvalue ref="$compositionAuthor/cda:assignedAuthor/cda:id/@root"
            value="xxf:instance('view-parameters-instance')/applicationIRI"/>
        <xf:setvalue ref="$compositionAuthor/cda:assignedAuthor/cda:id/@extension"
            value="xxf:instance('user-instance')/@id"/>
        <!-- User name -->
        <xf:setvalue ref="$compositionAuthor/cda:assignedAuthor/cda:assignedPerson/cda:name"
            value="xxf:instance('user-instance')/credentials/username"/>
    </xf:action>


    <!-- Application defined action to pubish a composition in the patient record.
         This can be invoked from the registration page or any of the composition editing pages (forms, letters, etc).

         The form-instance is bound to the input controls and calculations.
         Before being stored in the xmlstore, the form-instance is edited to remove hidden data and set various data in the cda header.
         
         To avoid problems with the bindings (e.g. calculations being rerun and resetting values, input fields being bound to xpaths that do not exist) 
         the form-instance is copied to the storage-instance before edits are made.
         The storage-instance is the one committed to the xmlstore. -->
    <xf:action ev:event="publish-cda-composition">

        <!-- effectiveTime is set from current-form -->
        <xf:setvalue ref="xxf:instance('form-instance')/cda:effectiveTime/@value"
            value="xxf:instance('control-instance')/current-form/effectiveTime"/>

        <!-- id (extension) is set from current-form (handleId) -->
        <xf:setvalue ref="xxf:instance('form-instance')/cda:id/@extension"
            value="xxf:instance('control-instance')/current-form/handleId"/>

        <!-- Get the composition type from the CDA -->
        <xxf:variable name="compositionType"
            select="xxf:instance('form-instance')/cda:typeId/@extension"/>

        <!-- 
            Before the form is committed to the record, all hidden sections, entries, clusters and elements need to be removed.
            Hidden sections are either set as hidden by conditions or alwaysHidden containing entries used in calculations
            Also, read-only entries need to have their extension attribute on cda:id set to ''
            This is because read-only entries do not represent the current value of the entry, just some information that was displayed at the time of editing.
            Especially important when root entries have less elements than their alias since the read-only entry would become the current one and some of the elements would then be missing from the record
            
            But before doing all that, need to change cityEHR:elementType attributes on calculated values, and cityEHR:conditions
            and cityEHR:CRUD attribute on directory look up entries
            
            otherwise these will be reset when any hidden entries used in the calculation are removed
            But these are removed from storage-instance, so is it necessary to fix form-instance? 2023-05-16 -->

        <xf:action>
            <!-- Reset calculated values -->
            <xf:action
                xxf:iterate="xxf:instance('form-instance')/cda:component/cda:structuredBody/cda:component/cda:section/descendant::cda:value[@cityEHR:elementType=('#CityEHR:ElementProperty:calculatedValue','#CityEHR:ElementProperty:enumeratedCalculatedValue')]">
                <xf:setvalue ref="./@cityEHR:elementType"
                    value="'#CityEHR:ElementProperty:simpleType'"/>
            </xf:action>

            <!-- Reset conditional display expressions from section, entry, value -->
            <xf:action
                xxf:iterate="xxf:instance('form-instance')/cda:component/cda:structuredBody/descendant::*[@cityEHR:conditions]">
                <xf:setvalue ref="./@cityEHR:conditions" value="''"/>
            </xf:action>

            <!-- Reset directory look-up entries -->
            <xf:action
                xxf:iterate="xxf:instance('form-instance')/cda:component/cda:structuredBody/cda:component/cda:section/descendant::cda:entry[@cityEHR:CRUD=('#CityEHR:EntryProperty:L','#CityEHR:Property:CRUD:L')]">
                <xf:setvalue ref="./@cityEHR:CRUD" value="'#CityEHR:Property:CRUD:CRUD'"/>
            </xf:action>

            <!-- Reset extension attribute on read-only elements.
                     This is so that read-only elements aren't recorded as new instances of the value -->
            <xf:action
                xxf:iterate="xxf:instance('form-instance')/cda:component/cda:structuredBody/cda:component/cda:section/descendant::cda:entry[@cityEHR:CRUD=('#CityEHR:EntryProperty:R','#CityEHR:Property:CRUD:R')]/descendant::cda:observation">
                <xf:setvalue ref="./cda:id/@extension" value="''"/>
            </xf:action>

        </xf:action>

        <!-- Rebuild so that bindings are reset (e.g. for visibility, calculated values) 
             form-instance is in cda-model, so need to rebuild that -->
        <xf:rebuild model="cda-model"/>
        <xf:rebuild model="main-model"/>

        <!-- Remove values set for enumeratedClass elements 
             These are used to input the text to match against displayName and are not recorded in the record
             (only the attributes of cda:value are needed)
        -->
        <xf:action
            xxf:iterate="xxf:instance('form-instance')/descendant::cda:value[@cityEHR:elementType = '#CityEHR:ElementProperty:enumeratedClass']">
            <xf:setvalue ref="." value="''"/>
        </xf:action>

        <!-- 
            Before the form is committed to the record, the template entry in multipleEntry organizers needs to have all values cleared.
            Previously, the template entry was removed, but now just has values cleared - why?
        -->
        <xf:action
            xxf:iterate="xxf:instance('form-instance')/descendant::cda:organizer[@classCode='MultipleEntry']/cda:component[1]/descendant::cda:value">
            <xf:setvalue ref="./@value" value="''"/>
        </xf:action>

        <!-- If publishing a registration event then need to reset the values for the cda header
            Set the parameters in the CDA Header before saving the form as the registration event.
            Here we set values in the patient-instance and then call the standard action to set-cda-header:
            
            prefix (i.e. Mr, Mrs, etc)
            family (name)
            given (names)
            birthTime
            administrativeGenderCode
            
            set-cda-header also sets:
            
            effectiveTime (set as the current time)
            patientid (already set in view-parameters-instance/id)
            Note the use of descendant::cda:value in case the registration entry contains clusters
            providerOrganization code for the healthcare provider organisation as set in the configuration parameters
        -->
        <xxf:variable name="patientRegistration"
            select="xxf:instance('application-parameters-instance')/patientRegistration"/>
        <xf:action
            if="exists($patientRegistration/registrationEvent[@composition=$compositionType])">
            <xxf:variable name="patientDemographics"
                select="xxf:instance('form-instance')/cda:component/cda:structuredBody/cda:component/cda:section"/>
            <!-- Family -->
            <xf:setvalue ref="xxf:instance('patient-instance')/cdaheader/family"
                value="$patientDemographics/descendant::cda:observation[cda:id/@extension=$patientRegistration/family/@entry]/descendant::cda:value[@extension=$patientRegistration/family/@element][@value!=''][1]/@value"/>
            <!-- Given -->
            <xf:setvalue ref="xxf:instance('patient-instance')/cdaheader/given"
                value="$patientDemographics/descendant::cda:observation[cda:id/@extension=$patientRegistration/given/@entry]/descendant::cda:value[@extension=$patientRegistration/given/@element][@value!=''][1]/@value"/>
            <!-- Prefix -->
            <xf:setvalue ref="xxf:instance('patient-instance')/cdaheader/prefix"
                value="$patientDemographics/descendant::cda:observation[cda:id/@extension=$patientRegistration/prefix/@entry]/descendant::cda:value[@extension=$patientRegistration/prefix/@element][@value!=''][1]/@value"/>
            <!-- Gender -->
            <xf:setvalue ref="xxf:instance('patient-instance')/cdaheader/administrativeGenderCode"
                value="$patientDemographics/descendant::cda:observation[cda:id/@extension=$patientRegistration/administrativeGenderCode/@entry]/descendant::cda:value[@extension=$patientRegistration/administrativeGenderCode/@element][@value!=''][1]/@value"/>
            <!-- Birth Date -->
            <xf:setvalue ref="xxf:instance('patient-instance')/cdaheader/birthTime"
                value="$patientDemographics/descendant::cda:observation[cda:id/@extension=$patientRegistration/birthTime/@entry]/descendant::cda:value[@extension=$patientRegistration/birthTime/@element][@value!=''][1]/@value"
            />
        </xf:action>

        <!-- Set the patient details in the CDA Header.
             These details are set up from the view-parameters which are used for the patient label -->
        <xf:dispatch name="set-cda-header" target="main-model"/>

        <!-- Set the author details in the CDA Header.
                 These details are set up from the user-instance -->
        <xf:dispatch name="set-author-details" target="main-model">
            <xxf:context name="composition" select="xxf:instance('form-instance')"/>
        </xf:dispatch>

        <!-- Copy form-instance to storage-instance.
             This is done so that non-visible elements can be removed without affecting the input controls bound to them.
             The input fields are bound based on xpath to the value, which includes the section and entry paths 
             These xpaths would change if the non-visible elements were removed in form-instance -->
        <xf:insert nodeset="xxf:instance('storage-instance')" origin="xxf:instance('form-instance')"/>

        <!-- Remove non-visible sections, entries, clusters, elements.
             The alwaysHidden section holds the external variables, so nust be removed.
             Start with elements, then work up the document hierarchy.
             Note that any components with a rendition of 'hidden' are retained -->
        <xf:action>
            <xf:delete
                nodeset="xxf:instance('storage-instance')/cda:component/cda:structuredBody/cda:component/descendant::cda:value[@cityEHR:visibility='false']"/>

            <xf:delete
                nodeset="xxf:instance('storage-instance')/cda:component/cda:structuredBody/cda:component/descendant::cda:entry[@cityEHR:visibility='false']"/>

            <xf:delete
                nodeset="xxf:instance('storage-instance')/cda:component/cda:structuredBody/descendant::cda:component[cda:section/@cityEHR:visibility='alwaysHidden']"/>

            <xf:delete
                nodeset="xxf:instance('storage-instance')/cda:component/cda:structuredBody/descendant::cda:component[cda:section/@cityEHR:visibility='false']"
            />
        </xf:action>

        <!-- Set the publishHandle from patientId and handleId (both already set)  -->
        <xf:setvalue ref="xxf:instance('control-instance')/current-form/publishHandle"
            value="concat(xxf:instance('view-parameters-instance')/applicationDatabaseLocation,'/records/',xxf:instance('view-parameters-instance')/patientId,'/',xxf:instance('control-instance')/current-form/handleId)"/>

        <!-- Now publish the form in the xmlstore -->
        <xf:dispatch name="publish-composition" target="main-model"/>

        <!-- If this composition was the subject of a pathway or triggered action, then delete the notification for that action.
             This information is held in the CDA Header at: cda:documentationOf/cda:serviceEvent
             cda:id/@extension is set as the id of the notification, cda:id/@root is the orign (pathway id or '#CityEHR:Notification') -->
        <xxf:variable name="sourceAction"
            select="xxf:instance('form-instance')/cda:documentationOf/cda:serviceEvent[cda:id/@extension!='']"/>
        <xf:action if="exists($sourceAction)">
            <xxf:variable name="subjectHandleId" select="$sourceAction/cda:id/@extension"/>

            <!-- The handle for loading/saving notifications does not include the database location, since it must cater for the return of document-uri in a query.
            2017-10-31 The location of notifications was changed from data/notifications to data, so need to try both locations to support legacy databases -->
            <!-- Location from 2017-10-31 -->
            <xf:setvalue
                ref="xxf:instance('notificationsControl-instance')/currentNotification/notification/handle"
                value="concat(xxf:instance('view-parameters-instance')/applicationStorageLocation,'/data/',xxf:instance('view-parameters-instance')/patientId,'/',$subjectHandleId)"/>
            <xf:dispatch name="delete-notification" target="notification-model"/>
            <!-- Location before 2017-10-31 -->
            <xf:setvalue
                ref="xxf:instance('notificationsControl-instance')/currentNotification/notification/handle"
                value="concat(xxf:instance('view-parameters-instance')/applicationStorageLocation,'/data/',xxf:instance('view-parameters-instance')/patientId,'/notifications/',$subjectHandleId)"/>
            <xf:dispatch name="delete-notification" target="notification-model"/>
        </xf:action>

        <!-- If this composition is not in a pathway then check triggers for notifications.
             The check is run on the storage-instance after the composition has been published.
             This ensures that triggers in non-visible elements have been removed before checking -->
        <xf:action
            if="not(exists($sourceAction)) or $sourceAction/cda:id/@root='#CityEHR:Notification'">
            <xf:dispatch name="check-triggers" target="main-model"/>
        </xf:action>

    </xf:action>
    <!-- End of publish-cda-composition -->


    <!-- Application defined action to check whether the form has been edited.
         Invoked from invoke-systemNavigation in pageNavigation-model-->
    <xf:action ev:event="check-editStatus">
        <xxf:variable name="editStatus" select="event('editStatus')"/>

        <xf:setvalue ref="$editStatus"
            value="if (exists(xxf:instance('control-instance')/current-form[editStatus='edited'])) then 'edited' else ''"/>

    </xf:action>


    <!-- Application defined action close the composition view and navigate to the next page.
         Invoked afte rthe composition has been successfully publsihed to the record
          -->
    <xf:action ev:event="close-composition-view">
        <xxf:variable name="newCompositionIRI" select="event('newCompositionIRI')"/>

        <xxf:variable name="applicationId"
            select="xxf:instance('view-parameters-instance')/applicationId"/>
        <xxf:variable name="specialtyIRI"
            select="xxf:instance('session-parameters-instance')/specialtyIRI"/>

        <!-- Get navigation target, if selected by user.
             The newComposition must exist in the data dictionary as a composition in the current specialty -->
        <xxf:variable name="newComposition"
            select="(xxf:instance('dictionary-instance')/iso-13606:folderCollection/iso-13606:folder[@code=$specialtyIRI]/iso-13606:composition[@code=$newCompositionIRI])[1]"/>

        <!-- Remove the saved form that has now been published as an event -->
        <xf:dispatch name="delete-composition" target="main-model"/>

        <!-- Reset the compositionStatus and compositionHandle -->
        <xf:setvalue ref="xxf:instance('view-parameters-instance')/compositionStatus" value="'none'"/>
        <xf:setvalue ref="xxf:instance('view-parameters-instance')/compositionHandle"
            value="'blank'"/>
        <xf:setvalue ref="xxf:instance('view-parameters-instance')/formCacheHandle" value="'blank'"/>

        <!-- Check whether this form was in fulfillment of a pathway action -->
        <xxf:variable name="documentationOfPathway"
            select="if (exists(xxf:instance('form-instance')//cda:documentationOf/cda:serviceEvent/cda:id[@extension != ''])) then 'true' else 'false'"/>

        <!-- If this form was in a pathway, then load the pathway -->
        <xf:action if="$documentationOfPathway='true'">
            <xxf:variable name="pathwayHandleId"
                select="xxf:instance('form-instance')//cda:documentationOf/cda:serviceEvent/cda:id/@root"/>
            <xf:setvalue ref="xxf:instance('view-parameters-instance')/compositionHandle"
                value="concat(xxf:instance('view-parameters-instance')/applicationDatabaseLocation,'/data/',xxf:instance('view-parameters-instance')/patientId,'/',$pathwayHandleId)"/>
            <xf:setvalue ref="xxf:instance('view-parameters-instance')/compositionStatus"
                value="'saved'"/>

            <xf:dispatch name="load-cityEHR-page" target="pageNavigation-model">
                <xxf:context name="page" select="'cityEHRFolder-Pathways'"/>
            </xf:dispatch>

        </xf:action>

        <!-- Not in a pathway, and user has selected to navigate to a specific composition - load the new composition -->
        <xf:action if="not($documentationOfPathway='true') and exists($newComposition)">
            <!-- Set up next form to load -->
            <xf:delete nodeset="xxf:instance('control-instance')/next-form/*"/>
            <xf:insert context="xxf:instance('control-instance')/next-form" origin="$newComposition"/>

            <!-- Load the composition -->
            <xf:dispatch name="load-new-composition" target="main-model"/>

        </xf:action>

        <!-- Not in a pathway, no navigation target set, then load the specified pageTransition. -->
        <xf:action if="not($documentationOfPathway='true') and not(exists($newComposition))">
            <xxf:variable name="targetPage"
                select="xxf:instance('application-parameters-instance')/pageTransition/patientFolderTransition/pageTransition[@source=xxf:instance('view-parameters-instance')/page]/@target"/>

            <!-- If a pageTransition is specified, then use it.
                 Otherwise the default is cityEHRFolder-Events to show the patient record -->
            <xf:dispatch name="load-cityEHR-page" target="pageNavigation-model">
                <xxf:context name="page"
                    select="if (exists($targetPage)) then $targetPage else 'cityEHRFolder-Events'"/>
                <xxf:context name="checkEdits" select="false()"/>
            </xf:dispatch>

        </xf:action>


    </xf:action>



    <!-- Application defined action to save a composition in the patient record.
         This can be invoked from any of the composition editing pages (forms, letters, pathways, etc). 
         saveHandle has already been set when the form was loaded (as a new composition or from a previously saved composition) -->
    <xf:action ev:event="save-cda-composition">
        <!-- effectiveTime is set from current-form -->
        <xf:setvalue ref="xxf:instance('form-instance')/cda:effectiveTime/@value"
            value="xxf:instance('control-instance')/current-form/effectiveTime"/>

        <!-- id (extension) is set from current-form (handleId) -->
        <xf:setvalue ref="xxf:instance('form-instance')/cda:id/@extension"
            value="xxf:instance('control-instance')/current-form/handleId"/>

        <!-- Save the current form -->
        <xf:dispatch name="save-composition" target="main-model"/>

        <!-- Now need to display the inProgress forms -->
        <xf:setvalue ref="xxf:instance('view-parameters-instance')/viewNavigationType"
            value="if (xxf:instance('view-parameters-instance')/compositionStatus='new') then 'new' else if (count(xxf:instance('patientCompositionsList-instance')/composition) !=0) then 'inProgress' else 'new'"/>

    </xf:action>

    <!-- Application defined action to check for triggers when a composition is published in the patient record.
         First run through all triggers recorded for the composition type (in application-parameters) 
         Triggers can be for annotations or notifications.
         
         An annotation is stored as part of the persistent record for a patient 
         Then set the notification for each one and write it to the xmlstore -->
    <xf:action ev:event="check-triggers">
        <!-- Check for notification triggers for this composition -->
        <xxf:variable name="notificationTriggers"
            select="xxf:instance('application-parameters-instance')/triggers/triggerSet[contains(@compositionIRI,xxf:instance('control-instance')/current-form/compositionIRI)]/trigger[@type='notification']"/>
        <!-- Check each notification trigger -->
        <xf:action xxf:iterate="$notificationTriggers">
            <xxf:variable name="trigger" select="."/>
            <xxf:variable name="entryIRI" select="$trigger/@entryIRI"/>
            <xxf:variable name="elementIRI" select="$trigger/@elementIRI"/>
            <xxf:variable name="activationCondition" select="$trigger/@condition"/>
            <xxf:variable name="triggerId"
                select="translate(concat($entryIRI,$elementIRI),':#','-')"/>
            <xxf:variable name="effectiveTimeIRI" select="$trigger/effectiveTime/@elementIRI"/>
            <xxf:variable name="effectiveTimeOffset" select="$trigger/effectiveTime/@offset"/>
            <xxf:variable name="actionElementIRI" select="$trigger/action/@elementIRI"/>
            <xxf:variable name="defaultAction" select="$trigger/action/@default"/>
            <xxf:variable name="defaultActionDisplayName" select="$trigger/action/@displayName"/>
            <xxf:variable name="notifyActorIRI" select="$trigger/notifyActor/@elementIRI"/>
            <xxf:variable name="triggerDisplayName" select="$trigger/@displayName"/>

            <!-- Find each entry/element that matches the trigger.
                 That is all entry/element combinations matching the trigger but...
                 Exclude templates in multiple entry, readonly entries and non-updatable entries in pre-filled multiple entry -->
            <xxf:variable name="matchedTriggerObservationSet"
                select="xxf:instance('storage-instance')/descendant::cda:observation[cda:id/@extension=$entryIRI][descendant::cda:value[@extension=$elementIRI]/@value]"/>

            <!-- Read only entries have @cityEHR:CRUD on ancestor cda:entry.
                 On multiple entries there is also @cityEHR:CRUD on the ancestor cda:component (allows for new entries in @cityEHR:CRUD='CR' or 'CRU' 
                 So need to check the first ancestor @cityEHR:CRUD -->

            <xxf:variable name="filteredTriggerObservationSet"
                select="$matchedTriggerObservationSet[not(cda:id/@cityEHR:origin='#CityEHR:Template')][not(ancestor::*[@cityEHR:CRUD][1]/@cityEHR:CRUD=('CR','R'))]"/>

            <!-- Create a notification for each activated trigger -->
            <xf:action xxf:iterate="$filteredTriggerObservationSet">
                <xxf:variable name="triggerObservation" select="."/>
                <xxf:variable name="triggerValue"
                    select="$triggerObservation/descendant::cda:value[@extension=$elementIRI]/@value"/>

                <!-- Check whether trigger is activated -->
                <xxf:variable name="activatedTrigger"
                    select="if ($activationCondition='') then true() else xxf:evaluate(concat('''',$triggerValue,''' ',$activationCondition))"/>

                <!-- Only process trigger if it is activated -->
                <xf:action if="$activatedTrigger">

                    <!-- Debugging -->
                    <!--
                    <xf:message ref="if ($effectiveTimeOffset castable as xs:dayTimeDuration) then 'dayTimeDuration' else if ($effectiveTimeOffset castable as xs:yearMonthDuration) then 'yearMonthDuration' else $effectiveTimeOffset"/>
                    -->

                    <!-- Effective time of the notification is taken from the trigger.
                         Must be castable as xs:dateTime
                         Default is current-dateTime -->
                    <xxf:variable name="effectiveTimeSpecified"
                        select="$triggerObservation/cda:value[@extension=$effectiveTimeIRI]/@value"/>

                    <!-- xs:dayTimeDuration or xs:yearMonthDuration can be added to xs:dateTime
                         xs:date cannot always be cast to xs:dateTime if it includes a time zone 'Z' at the end-->
                    <xxf:variable name="effectiveTimeBase"
                        select="if (exists($effectiveTimeSpecified) and (($effectiveTimeSpecified castable as xs:dateTime) or ($effectiveTimeSpecified castable as xs:date)) ) then $effectiveTimeSpecified else current-dateTime()"/>

                    <!-- Need to handle all combinations of xs:date. xs:dateTime and xs:dayTimeDuration, xs:yearMonthDuration -->
                    <xxf:variable name="effectiveTime"
                        select="if ($effectiveTimeOffset castable as xs:dayTimeDuration and $effectiveTimeBase castable as xs:dateTime) then xs:dateTime($effectiveTimeBase) + xs:dayTimeDuration($effectiveTimeOffset) 
                                else if ($effectiveTimeOffset castable as xs:dayTimeDuration and $effectiveTimeBase castable as xs:date) then xs:date($effectiveTimeBase) + xs:dayTimeDuration($effectiveTimeOffset)
                                else if ($effectiveTimeOffset castable as xs:yearMonthDuration and $effectiveTimeBase castable as xs:dateTime) then xs:dateTime($effectiveTimeBase) + xs:yearMonthDuration($effectiveTimeOffset) 
                                else if ($effectiveTimeOffset castable as xs:yearMonthDuration and $effectiveTimeBase castable as xs:date) then xs:date($effectiveTimeBase) + xs:yearMonthDuration($effectiveTimeOffset) 
                                else $effectiveTimeBase"/>

                    <!-- Debugging -->
                    <!--
                    <xf:message ref="concat($effectiveTimeSpecified,' / ',$effectiveTimeBase,' / ',$effectiveTime)"/>
                    -->

                    <!-- Timestamp format replaces ':' and '+' in standard time format with - and * -->
                    <xxf:variable name="timeStamp"
                        select="replace(replace(string(current-dateTime()),':','-'),'\+','*')"/>

                    <!-- Action is taken from the trigger observation.
                         Default is set in the trigger configuration -->
                    <xxf:variable name="actionIRI"
                        select="if ($actionElementIRI != '' and exists($triggerObservation/cda:value[@extension=$actionElementIRI])) then $triggerObservation/cda:value[@extension=$actionElementIRI]/@value else $defaultAction"/>

                    <!-- The action must be a valid composition in the current specialty model in order to notify an action.
                         This has the pattern: #CityEHR:Form:ClinicalDataEntry
                         If not, then the trigger just generates a notification, with no action
                         If the action was not found in the triggerObservation then no notification is recorded.
                         This means that the action/@default needs to be set to something (anything) in order to generate a notification with no action -->

                    <xf:action if="$actionIRI != ''">
                        <xxf:variable name="actionComposition"
                            select="xxf:instance('dictionary-instance')/iso-13606:folderCollection/iso-13606:folder[1]/iso-13606:composition[@code=$actionIRI]"/>

                        <!-- Generate the notificationHandleId -->
                        <xxf:variable name="actionDisplayName"
                            select="$triggerObservation/cda:value[@extension=$actionElementIRI]/@displayName"/>
                        <!-- notificationHandleId replaces bad characters in action with '' (nothing) -->
                        <xxf:variable name="actionId" select="translate($actionIRI,':#/+$ ','')"/>
                        <xxf:variable name="notificationHandleId"
                            select="concat($timeStamp,xxf:instance('view-parameters-instance')/idSeparator,$triggerId,xxf:instance('view-parameters-instance')/idSeparator,$actionId,xxf:instance('view-parameters-instance')/idSeparator,xxf:instance('view-parameters-instance')/userId)"/>

                        <!-- Get the action notification template (done on each iteration to make sure its empty).
                             The CDA Header is set on load. -->
                        <xf:dispatch name="load-action-notification-template"
                            target="notification-model"/>

                        <!-- Set the author details -->
                        <xf:dispatch name="set-author-details" target="main-model">
                            <xxf:context name="composition"
                                select="xxf:instance('action-notification-template-instance')"/>
                        </xf:dispatch>

                        <!-- Set up notification template and store in data for patient.
                             The id of the notification is the same as the subjectHandleId - the id of the action composition -->
                        <xf:setvalue
                            ref="xxf:instance('action-notification-template-instance')/cda:id/@extension"
                            value="$notificationHandleId"/>
                        <xf:setvalue
                            ref="xxf:instance('action-notification-template-instance')/cda:id/@root"
                            value="xxf:instance('control-instance')/current-form/handleId"/>
                        <xf:setvalue
                            ref="xxf:instance('action-notification-template-instance')/cda:effectiveTime/@value"
                            value="$effectiveTime"/>
                        <xf:setvalue
                            ref="xxf:instance('action-notification-template-instance')/cda:code/@displayName"
                            value="$triggerDisplayName"/>

                        <!-- Participant is user, role or care team.
                             This is found from the trigger observation, or the trigger parameter (default).
                             After that, the default is the current user (if #CityEHR:User is set or the value isn't a valid user, role or care team). -->
                        <xxf:variable name="notifyActorToSet"
                            select="if (exists($triggerObservation/cda:value[@extension=$notifyActorIRI])) then $triggerObservation/cda:value[@extension=$notifyActorIRI]/@value else $trigger/notifyActor/@default"/>
                        <xf:setvalue
                            ref="xxf:instance('action-notification-template-instance')/cda:participant/cda:associatedEntity/cda:id/@extension"
                            value="if ($notifyActorToSet='#CityEHR:User') then xxf:instance('user-instance')/@id else if (starts-with($notifyActorToSet,'#CityEHR:')) then $notifyActorToSet else xxf:instance('user-instance')/@id"/>

                        <xxf:variable name="notifyActor"
                            select="xxf:instance('action-notification-template-instance')/cda:participant/cda:associatedEntity/cda:id/@extension"/>

                        <!-- Set the associatedEntity root and displayName.
                     TBD - These need to be looked up properly -->
                        <!-- User -->
                        <xf:action if="starts-with($notifyActor,'#CityEHR:User')">
                            <xf:setvalue
                                ref="xxf:instance('action-notification-template-instance')/cda:participant/cda:associatedEntity/cda:id/@root"
                                value="'#CityEHR:User'"/>
                            <!-- If this is the current user, then set their username as displayName, otherwise need to look up the user -->

                            <xf:setvalue
                                ref="xxf:instance('action-notification-template-instance')/cda:participant/cda:associatedEntity/cda:code/@displayName"
                                value="'user'"/>
                        </xf:action>
                        <!-- Role -->
                        <xf:action if="starts-with($notifyActor,'#CityEHR:Role')">
                            <xf:setvalue
                                ref="xxf:instance('action-notification-template-instance')/cda:participant/cda:associatedEntity/cda:id/@root"
                                value="'#CityEHR:Role'"/>
                            <xxf:variable name="roleDisplayName"
                                select="xxf:instance('application-parameters-instance')/rbac/role[@value=$notifyActor]/@displayName"/>
                            <xf:setvalue
                                ref="xxf:instance('action-notification-template-instance')/cda:participant/cda:associatedEntity/cda:code/@displayName"
                                value="if ($roleDisplayName!='') then $roleDisplayName else $notifyActor"
                            />
                        </xf:action>
                        <!-- Care team -->
                        <xf:action if="starts-with($notifyActor,'#CityEHR:CareTeam')">
                            <xf:setvalue
                                ref="xxf:instance('action-notification-template-instance')/cda:participant/cda:associatedEntity/cda:id/@root"
                                value="'#CityEHR:CareTeam'"/>
                            <xf:setvalue
                                ref="xxf:instance('action-notification-template-instance')/cda:participant/cda:associatedEntity/cda:code/@displayName"
                                value="'care team'"/>
                        </xf:action>


                        <!-- Notification is documentationOf the origin of the trigger.
                     -->
                        <xxf:variable name="notificationServiceEvent"
                            select="xxf:instance('action-notification-template-instance')/cda:documentationOf/cda:serviceEvent"/>
                        <xf:setvalue ref="$notificationServiceEvent/cda:id/@root"
                            value="xxf:instance('control-instance')/current-form/compositionIRI"/>
                        <xf:setvalue ref="$notificationServiceEvent/cda:id/@extension"
                            value="$entryIRI"/>
                        <xf:setvalue ref="$notificationServiceEvent/cda:code/@displayName"
                            value="concat($actionDisplayName,xxf:instance('view-parameters-instance')/notifications/serviceEvent/@connector,xxf:instance('control-instance')/current-form/displayName)"/>

                        <xxf:variable name="notificationSection"
                            select="xxf:instance('action-notification-template-instance')/cda:component/cda:structuredBody/cda:component/cda:section"/>

                        <!-- Insert the trigger entry into the notification as information about the action.
                         The notifcation section should contain a single observation -->
                        <xxf:variable name="notificationObservationEntry"
                            select="$notificationSection/cda:entry[cda:observation][1]"/>
                        <xf:delete nodeset="$notificationObservationEntry/*"/>
                        <xf:insert context="$notificationObservationEntry"
                            origin="$triggerObservation"/>

                        <!-- Set the action for the trigger (if any)
                         The notification section should contain a single act.
                         The typeId holds the type of the composition in its root attrtibute (#CityEHR:Form, #CityEHR:letter, etc) 
                         and the IRI of the action composition in its extension attribute -->
                        <xf:action if="exists($actionComposition)">
                            <xxf:variable name="notificationActionEntry"
                                select="$notificationSection/cda:entry[cda:act][1]"/>
                            <xf:setvalue
                                ref="$notificationActionEntry/cda:act/cda:subject/cda:typeId/@root"
                                value="$actionComposition/@typeId"/>
                            <xf:setvalue
                                ref="$notificationActionEntry/cda:act/cda:subject/cda:typeId/@extension"
                                value="$actionIRI"/>
                            <xf:setvalue
                                ref="$notificationActionEntry/cda:act/cda:subject/cda:code/@displayName"
                                value="$actionComposition/@displayName"/>
                        </xf:action>

                        <!-- If no action, then make sure the action is reset, and use the action displayName from the trigger -->
                        <xf:action if="not(exists($actionComposition))">
                            <xxf:variable name="notificationActionEntry"
                                select="$notificationSection/cda:entry[cda:act][1]"/>
                            <xf:setvalue
                                ref="$notificationActionEntry/cda:act/cda:subject/cda:typeId/@root"
                                value="''"/>
                            <xf:setvalue
                                ref="$notificationActionEntry/cda:act/cda:subject/cda:typeId/@extension"
                                value="''"/>
                            <xf:setvalue
                                ref="$notificationActionEntry/cda:act/cda:subject/cda:code/@displayName"
                                value="$defaultActionDisplayName"/>
                        </xf:action>

                        <!-- Notification is stored for the patient -->
                        <xf:setvalue
                            ref="xxf:instance('notificationsControl-instance')/currentNotification/notification/handle"
                            value="concat(xxf:instance('view-parameters-instance')/applicationDatabaseLocation,'/data/',xxf:instance('view-parameters-instance')/patientId,'/',$notificationHandleId)"/>
                        <xf:send submission="save-action-notification-submission"
                            target="notification-model"/>
                    </xf:action>

                </xf:action>

                <!-- End of processing activated trigger -->
            </xf:action>
            <!-- End of iteration through matching triggers -->
        </xf:action>
        <!-- End of notification triggers -->

        <!-- Check for removeData triggers for this composition -->
        <xxf:variable name="removeDataTriggers"
            select="xxf:instance('application-parameters-instance')/triggers/triggerSet[contains(@compositionIRI,xxf:instance('control-instance')/current-form/compositionIRI)]/trigger[@type='removeData']"/>
        <!-- Check each removeData trigger -->
        <xf:action xxf:iterate="$removeDataTriggers">
            <xxf:variable name="trigger" select="."/>
            <xxf:variable name="entryIRI" select="$trigger/@entryIRI"/>
            <xxf:variable name="elementIRI" select="$trigger/@elementIRI"/>
            <xxf:variable name="activationCondition" select="$trigger/@condition"/>

            <xxf:variable name="compositionTypeIRI" select="$trigger/compositionTypeIRI"/>
            <xxf:variable name="compositionIRI" select="$trigger/compositionIRI"/>

            <!-- Find each entry/element that matches the trigger -->
            <xxf:variable name="matchedTriggers"
                select="xxf:instance('storage-instance')/descendant::cda:observation[cda:id/@extension=$entryIRI][descendant::cda:value[@extension=$elementIRI]/@value]"/>

            <!-- Remove data for each activated trigger -->
            <xf:action xxf:iterate="$matchedTriggers">
                <xxf:variable name="triggerObservation" select="."/>
                <xxf:variable name="triggerValue"
                    select="$triggerObservation/descendant::cda:value[@extension=$elementIRI]/@value"/>
                <xxf:variable name="activateTriggerExpression"
                    select="concat('''',$triggerValue,''' ',$activationCondition)"/>

                <!-- Check whether trigger is activated -->
                <xxf:variable name="activatedTrigger"
                    select="if ($activationCondition='') then true() else xxf:evaluate($activateTriggerExpression)"/>

                <!-- Only process trigger if it is activated -->
                <xf:action if="$activatedTrigger">
                    <!-- Get the set of matching resource handles.
                         These are compositions stored in the data collection for the patient, which match the criteria set in the trigger -->
                    <xf:setvalue ref="xxf:instance('getResourceHandlesXQuery-instance')/whereClause"
                        value="concat('[descendant::cda:ClinicalDocument/cda:typeId[contains(''',$compositionIRI,''',@extension) or contains(''',$compositionTypeIRI,''',@root)]]')"/>
                    <xf:setvalue ref="xxf:instance('query-instance')/exist:text"
                        value="xxf:instance('getResourceHandlesXQuery-instance')"/>
                    <xf:send submission="getResourceHandles-submission"/>
                    <!-- Iterate through set of resource handles, deleting compositions from the patient data -->
                    <xf:action xxf:iterate="xxf:instance('resourceHandles-instance')/handle">
                        <xxf:variable name="handle" select="data(.)"/>
                        <xf:setvalue ref="xxf:instance('control-instance')/deleteObject"
                            value="$handle"/>
                        <xxf:variable name="handleComponents" select="tokenize($handle,'/')"/>
                        <!-- Make sure the deleteObject is set and includes the patientId in its path, then call the delete-resource-submission -->
                        <xf:action
                            if="xxf:instance('control-instance')/deleteObject != '' and $handleComponents=xxf:instance('view-parameters-instance')/patientId">
                            <xf:send submission="delete-resource-submission"/>
                        </xf:action>
                    </xf:action>
                </xf:action>
                <!-- End of processing activated trigger -->
            </xf:action>
            <!-- End of iteration through matched triggers -->
        </xf:action>
        <!-- End of removeData triggers -->

    </xf:action>


    <!-- Application defined action to clear the form.
         This is used when we want to reset the page, without reloading it. 
       
    
        -->
    <xf:action ev:event="clear-form">
        <!-- Clear the contents -->
        <xf:delete nodeset="xxf:instance('form-instance')/*"/>
        <!-- Clear the base document attributes -->
        <xf:action xxf:iterate="xxf:instance('form-instance')/@*">
            <xf:setvalue ref="." value="''"/>
        </xf:action>
        <!-- Reset the form status -->
        <xf:setvalue ref="xxf:instance('control-instance')/current-form/status" value="'none'"/>
        <!-- Reset the page displayName -->
        <xf:setvalue ref="xxf:instance('view-parameters-instance')/pageDisplayName" value="''"/>
        <!-- Reset the dirty flag -->
        <xf:setvalue ref="xxf:instance('control-instance')/current-form/editStatus"
            value="'unedited'"/>
    </xf:action>

    <!-- Application defined action to load the composition, using parameters passed to the page in its URL
         The composition to load (template or saved form) is in session-parameters/compositionHandle 
         The compositionStatus is new, saved or none (load-composition does not get invoked if compositionStatus is none) ***jc -->
    <xf:action ev:event="load-composition">
        <xxf:variable name="applicationId"
            select="xxf:instance('view-parameters-instance')/applicationId"/>

        <xf:setvalue ref="xxf:instance('control-instance')/current-form/handle"
            value="xxf:instance('session-parameters-instance')/compositionHandle"/>
        <xf:setvalue ref="xxf:instance('control-instance')/current-form/status"
            value="xxf:instance('session-parameters-instance')/compositionStatus"/>
        <xf:setvalue ref="xxf:instance('control-instance')/current-form/timeStamp"
            value="replace(replace(string(current-dateTime()),':','-'),'\+','*')"/>

        <!-- Load the cda composition.
             The composition to load (template or saved form) is in session-parameters/compositionHandle -->
        <xf:dispatch name="dal-read" target="databaseAccessLayer-model">
            <xxf:context name="system" select="'ehr'"/>
            <xxf:context name="physicalClusterNode" select="''"/>
            <xxf:context name="storageLocation"
                select="xxf:instance('session-parameters-instance')/compositionHandle"/>
            <xxf:context name="resource" select="xxf:instance('form-instance')"/>
            <xxf:context name="status" select="xxf:instance('control-instance')/status"/>
        </xf:dispatch>

        <!-- Composition was loaded OK -->
        <xf:action if="xxf:instance('control-instance')/status=''">

            <!-- Set compositionIRI from the loaded composition -->
            <xf:setvalue ref="xxf:instance('control-instance')/current-form/compositionTypeIRI"
                value="xxf:instance('form-instance')/cda:typeId/@root"/>
            <xf:setvalue ref="xxf:instance('control-instance')/current-form/compositionIRI"
                value="xxf:instance('form-instance')/cda:typeId/@extension"/>
            <!-- compositionId replaces ':' and '#' in standard compositionIRI with - and '' (nothing) -->
            <xf:setvalue ref="xxf:instance('control-instance')/current-form/compositionId"
                value="replace(replace(xxf:instance('control-instance')/current-form/compositionIRI,':','-'),'#','')"/>
            <xxf:variable name="prefix"
                select="concat(xxf:instance('control-instance')/current-form/compositionTypeIRI,':')"/>
            <xf:setvalue ref="xxf:instance('control-instance')/current-form/compositionShortId"
                value="substring-after(xxf:instance('control-instance')/current-form/compositionIRI,$prefix)"/>

            <!-- Set externalId to use for print/export -->
            <xf:dispatch name="set-externalId" target="pageNavigation-model">
                <xxf:context name="type" select="'patient'"/>
                <xxf:context name="externalId"
                    select="xxf:instance('view-parameters-instance')/externalId"/>
            </xf:dispatch>

            <!-- Set the list of required elements -->
            <xf:dispatch name="set-requiredElementList" target="main-model"/>

            <!-- Set up the dictionary for enumeratedDirectory elements -->
            <xf:dispatch name="load-directoryElementsForForm" target="directory-model">
                <xxf:context name="specialtyIRI"
                    select="xxf:instance('view-parameters-instance')/specialtyIRI"/>
                <xxf:context name="formInstance" select="xxf:instance('form-instance')"/>
            </xf:dispatch>

            <!-- Get the serviceEvent classCode - this is set for saved compositions created
                as a result of a pathway action (#CityEHR:Pathway) or trigger notification (#CityEHR:Notification)-->
            <xxf:variable name="serviceEvent"
                select="xxf:instance('form-instance')/cda:documentationOf/cda:serviceEvent/@classCode"/>

            <!-- Set up a new form or a form saved as a result of an action (from a pathway or trigger)
                 Don't do this if reloading a saved form. -->
            <xf:action
                if="xxf:instance('control-instance')/current-form[status='new'] or $serviceEvent=('#CityEHR:Notification','#CityEHR:Pathway')">
                <!-- Reset the serviceEvent -->
                <xf:setvalue
                    ref="xxf:instance('form-instance')/cda:documentationOf/cda:serviceEvent/@classCode"
                    value="''"/>

                <!-- effectiveTime is set to the current time -->
                <xxf:variable name="currentTime" select="current-dateTime()"/>
                <xf:setvalue ref="xxf:instance('control-instance')/current-form/effectiveTime"
                    value="$currentTime"/>
                <xf:setvalue ref="xxf:instance('form-instance')/cda:effectiveTime/@value"
                    value="xxf:instance('control-instance')/current-form/effectiveTime"/>

                <!-- The timestamp is set to current-dateTime() and is used for creating the handleId -->
                <!-- Timestamp format replaces ':' and '+' in standard time format with - and * -->
                <xxf:variable name="timeStamp"
                    select="replace(replace(string($currentTime),':','-'),'\+','*')"/>

                <!-- Set the handleId - used for saving the document in the xmlstore -->
                <xf:setvalue ref="xxf:instance('control-instance')/current-form/handleId"
                    value="concat($timeStamp,xxf:instance('view-parameters-instance')/idSeparator,xxf:instance('control-instance')/current-form/compositionId,xxf:instance('view-parameters-instance')/idSeparator,xxf:instance('view-parameters-instance')/userId)"/>

                <!-- Set the saveHandle ready for saving -->
                <xf:setvalue ref="xxf:instance('control-instance')/current-form/saveHandle"
                    value="concat('/xmlstore/applications/',$applicationId,'/data/',xxf:instance('view-parameters-instance')/patientId,'/',xxf:instance('control-instance')/current-form/handleId)"/>

                <!-- Set values for pre-filled entries. Don't do this on the registration page. -->
                <xf:action if="xxf:instance('view-parameters-instance')/page!='cityEHRRegistration'">
                    <xf:dispatch name="set-pre-filled-values" target="cda-model"/>
                </xf:action>

                <!-- Set the default values.
                    Need to recalculate first to make sure that pre-filled values have stuck -->
                <xf:rebuild model="cda-model"/>
                <xf:dispatch name="set-default-values" target="cda-model"/>


                <!-- Expand out multiple entries where required.
                    Done after pre-filled and default values, in case there are calculatedEnumeratedValues which use pre-filled or default entries.
                    Any default values in the expanded entry are set during expand-entry -->
                <xf:action>
                    <xf:dispatch name="expand-multiple-entries" target="cda-model"/>
                </xf:action>

                <!-- Evaluate pre-conditions on sections and entries -->
                <xf:dispatch name="evaluate-preconditions" target="main-model"/>

                <!-- Assign categories on sorted multipleEntries -->
                <xxf:variable name="cdaBody"
                    select="xxf:instance('form-instance')/cda:component/cda:structuredBody/cda:component/cda:section"/>
                <xf:action
                    xxf:iterate="$cdaBody/descendant::cda:entry[@cityEHR:categorizationCriteria!=''][cda:organizer[@classCode='MultipleEntry']]">
                    <xf:dispatch name="assign-sort-categories" target="main-model">
                        <xxf:context name="entry" select="."/>
                    </xf:dispatch>
                </xf:action>

                <!-- Look up all directory entries, in case key value is set as a default, pre-filled or calculated value -->
                <xf:dispatch name="refresh-directory-entries" target="main-model"/>

                <!-- Set default values again, in case any depend on directory entries or expanded multiple entry. -->
                <xf:dispatch name="set-default-values" target="cda-model"/>

                <!-- Set the patient details in the CDA Header (so we don't need to do this on save or publish) -->
                <xf:dispatch name="set-cda-header" target="main-model"/>

            </xf:action>


            <!-- Load the media for the form - but only if its new
                 (saved forms already have media content set -->
            <xf:action if="xxf:instance('control-instance')/current-form/status='new'">
                <xf:dispatch name="load-compositionMedia" target="dictionary-model">
                    <xxf:context name="composition-instance" select="xxf:instance('form-instance')"
                    />
                </xf:dispatch>
            </xf:action>

            <!-- Loading a saved form -->
            <xf:action if="xxf:instance('control-instance')/current-form[status='saved']">
                <!-- effectiveTime of form is set to the effectiveTime recorded in the CDA -->
                <xf:setvalue ref="xxf:instance('control-instance')/current-form/effectiveTime"
                    value="xxf:instance('form-instance')/cda:effectiveTime/@value"/>

                <!-- handleId is in cda:id/@extension in the saved form. 
                     But set it from the handle passed so that we are sure it matches the handle used in the xmlstore -->
                <!--
                    <xf:setvalue ref="xxf:instance('control-instance')/current-form/handleId" value="xxf:instance('form-instance')/cda:id/@extension"/>
                -->
                <xxf:variable name="storagePathSequence"
                    select="tokenize(xxf:instance('control-instance')/current-form/handle,'/')"/>
                <xf:setvalue ref="xxf:instance('control-instance')/current-form/handleId"
                    value="$storagePathSequence[last()]"/>

                <!-- Set the saveHandle as the handle being loaded -->
                <xf:setvalue ref="xxf:instance('control-instance')/current-form/saveHandle"
                    value="xxf:instance('control-instance')/current-form/handle"/>
            </xf:action>

            <!-- Set the patient age (uses the effectiveTime of the loaded composition) -->
            <xf:dispatch name="set-patient-age" target="patientDemographics-model"/>

            <!-- Set status flags -->
            <xf:action>
                <xf:setvalue ref="xxf:instance('control-instance')/current-form/editStatus"
                    value="'unedited'"/>
                <xf:setvalue ref="xxf:instance('view-parameters-instance')/systemStatus" value="''"/>
                <xf:setvalue ref="xxf:instance('view-parameters-instance')/systemError" value="''"/>
            </xf:action>

            <!-- Effective time for form has already been set when new or saved form was loaded
                Now set other attributes of the current form -->
            <xf:setvalue ref="xxf:instance('control-instance')/current-form/displayName"
                value="xxf:instance('form-instance')/cda:code/@displayName"/>
            <xf:setvalue ref="xxf:instance('control-instance')/current-form/title"
                value="if (xxf:instance('control-instance')/current-form/effectiveTime castable as xs:dateTime) then concat(format-dateTime(xs:dateTime(xxf:instance('control-instance')/current-form/effectiveTime), xxf:instance('view-parameters-instance')/dateDisplayFormat, xxf:instance('session-parameters-instance')/languageCode, (), ()),' - ',xxf:instance('control-instance')/current-form/displayName) else xxf:instance('control-instance')/current-form/displayName"/>
            <xf:setvalue ref="xxf:instance('control-instance')/current-form/displayName"
                value="xxf:instance('form-instance')/cda:code/@displayName"/>
            <xf:setvalue ref="xxf:instance('view-parameters-instance')/pageDisplayName"
                value="xxf:instance('control-instance')/current-form/title"/>

            <xf:setvalue ref="xxf:instance('control-instance')/current-form/formCache"
                value="xxf:instance('view-parameters-instance')/formCacheHandle"/>

        </xf:action>

        <!-- Composition failed to load -->
        <xf:action if="not(xxf:instance('control-instance')/status='')">
            <xf:setvalue ref="xxf:instance('view-parameters-instance')/systemError"
                value="concat(xxf:instance('view-parameters-instance')/systemErrorList/systemError[@type='failedLoadFormSubmission'],' ',xxf:instance('control-instance')/status)"/>
            <xf:setvalue ref="xxf:instance('control-instance')/status" value="'failed'"/>
        </xf:action>
    </xf:action>


    <!-- Application defined action to initialise the form.
     Done when the page is loaded and ready.
     Also when the form is re-loaded
     -->
    <xf:action ev:event="initialise-form">

        <!-- Delete itemset. This is so that the selection list is cleared when the form starts
        (This gets set when the fr-set-label is dispatched, so will have the set of values from the last selection on the page
         **JC - is this still needed? -->
        <xf:delete nodeset="xxf:instance('enumeratedClass-instance')/*"/>

        <!-- Set the images maps (highlights any areas that have values prefilled).
             This one for HTML image maps -->
        <xxf:script> setAllImageMaps(); </xxf:script>

        <!-- Set all SVG image maps -->
        <xf:dispatch name="refresh-allImageMapClasses" target="imageMap-model"/>

        <!-- Set editStatus -->
        <xf:setvalue ref="xxf:instance('control-instance')/current-form/editStatus"
            value="'unedited'"/>

        <!-- Set the status of the cda document to 'ready' so that xforms-value-changed events on the form are activated -->
        <xf:setvalue ref="xxf:instance('cdaControl-instance')/formStatus" value="'ready'"/>

    </xf:action>

    <!-- Application defined action to reload the form -->
    <xf:action ev:event="reload-composition">
        <xf:dispatch name="load-cityEHR-page" target="pageNavigation-model">
            <xxf:context name="page" select="xxf:instance('session-parameters-instance')/@page"/>
        </xf:dispatch>
    </xf:action>

    <!-- Application defined action to evaluate preconditions on sections and entries.
         Iterate through each type of pre-condition.
         Evaluate it and if false then remove the section/entry from the composition. 
    -->
    <xf:action ev:event="evaluate-preconditions">
        <xxf:variable name="cdaBody"
            select="xxf:instance('form-instance')/cda:component/cda:structuredBody/cda:component/cda:section"/>
        <!-- Iterate through sections with pre-conditions -->
        <xf:action xxf:iterate="$cdaBody/descendant::cda:section[@cityEHR:preConditions!='']">
            <xxf:variable name="section" select="."/>
            <xf:setvalue ref="$section/@cityEHR:visibility"
                value="xxf:evaluate($section/@cityEHR:preConditions)"/>
        </xf:action>
        <!-- Simple entries -->
        <xf:action
            xxf:iterate="$cdaBody/descendant::cda:entry[@cityEHR:preConditions!=''][not(cda:organizer/@classCode='MultipleEntry')]">
            <xxf:variable name="entry" select="."/>
            <xf:setvalue ref="$entry/@cityEHR:visibility"
                value="xxf:evaluate($entry/@cityEHR:preConditions)"/>
        </xf:action>
        <!-- This is being handled when setting pre-filled entries, so may not need to do it any more
             Multiple entries.
             Iterate through each entry and evaluate the conditions.
             Delete the entry if the conditions are false. -->
        <xf:action
            xxf:iterate="$cdaBody/descendant::cda:entry[@cityEHR:preConditions!=''][cda:organizer/@classCode='MultipleEntry']">
            <xxf:variable name="entry" select="."/>
            <xxf:variable name="conditions" select="$entry/@cityEHR:preConditions"/>
            <xf:action
                xxf:iterate="$entry/cda:organizer/cda:component[2]/cda:organizer/cda:component">
                <xxf:variable name="entryInstance" select="."/>
                <!--
                <xf:delete nodeset="."/>
                -->
            </xf:action>
        </xf:action>
    </xf:action>

    <!-- Application defined action to set the categories of entries in a sorted multipleEntry.
         The entry is set in the 'entry' context - it is the containing cda:entry
         Iterate through the multiple entries, setting the cityEHR:origin attribute to the sort category
    -->
    <xf:action ev:event="assign-sort-categories">
        <xxf:variable name="entry" select="event('entry')"/>

        <!-- Get the sort criteria for this entry
        The sort criteria is found using the root element that matches the sort criteria -->
        <xxf:variable name="categorizationElementIRI"
            select="$entry/@cityEHR:categorizationCriteria"/>
        <xxf:variable name="dictionaryElement"
            select="xxf:instance('dictionary-instance')/iso-13606:elementCollection/iso-13606:element[@root=$categorizationElementIRI]"/>
        <xxf:variable name="categorizationCriteria"
            select="if (exists($dictionaryElement)) then $dictionaryElement/iso-13606:data else ()"/>

        <xxf:variable name="categorizationElementType"
            select="if (exists($dictionaryElement)) then $dictionaryElement/@cityEHR:elementType else ''"/>
        <xxf:variable name="categorizationElementExtension"
            select="if (exists($dictionaryElement)) then $dictionaryElement/@extension else ''"/>
        <xxf:variable name="categorizationElementClass"
            select="if (exists($dictionaryElement)) then $dictionaryElement/iso-13606:data[1]/@code else ''"/>

        <!-- The multiple entries are in the entrySetContainer. Either as cda:components (simple multiple entry) [ deprecated 2024-03 - or as organizers for enumeratedClass entries] -->
        <xxf:variable name="entrySetContainer"
            select="$entry/cda:organizer/cda:component[2]/cda:organizer"/>
        <xxf:variable name="observationSet"
            select="if (exists($entrySetContainer)) then ($entrySetContainer/cda:component/cda:observation | $entrySetContainer/cda:component/cda:organizer/cda:component[1]/cda:observation) else ()"/>

        <!-- Clear the sort categories from cityEHR:origin attribute -->
        <xf:action xxf:iterate="$observationSet">
            <xxf:variable name="observation" select="."/>
            <xf:setvalue ref="$observation/cda:id/@cityEHR:origin" value="''"/>
        </xf:action>

        <!-- Get the class hierarchy element from the class data dictionary
             But only if this is an enumeratedClass -->
        <xf:action if="$categorizationElementType='#CityEHR:ElementProperty:enumeratedClass'">
            <xf:dispatch name="update-enumeratedClassHierarchy" target="classDictionary-model">
                <xxf:context name="classCode" select="$categorizationElementClass"/>
                <xxf:context name="entryNode" select="''"/>
                <xxf:context name="elementScope" select="''"/>
            </xf:dispatch>
        </xf:action>


        <!-- Now iterate through each value of the categorizarion criteria.
             Then iterate through each entry and set the cityEHR:origin if the sorted element matches the sort criterium.
             BUT only if the cityEHR:origin has not already been set in an earlier iteration - ensures that each entry is assigned to only one sort category.
             and that the first category matched is the one that is set. -->
        <xf:action if="exists($observationSet)" xxf:iterate="$categorizationCriteria">
            <xxf:variable name="categorizationCategory" select="./@value"/>


            <!-- If categorizationCategory same as classCode then there is no entry node -->
            <!-- This one requires the 'enumeratedClassHierarchy-instance to contain the enumeratedLeafValue element as well as the enumeratedClass
                 Check performance with very large class hierarchies - if OK then don't need to use this one 2014-07-15
            <xxf:variable name="classNodes" select="if ($categorizationElementType='#CityEHR:ElementProperty:enumeratedValue') then () else if ($categorizationCategory!=$categorizationElementClass) then xxf:instance('enumeratedClassHierarchy-instance')/descendant::iso-13606:element[@extension=$categorizationElementClass][@cityEHR:elementType='#CityEHR:ElementProperty:enumeratedClass']/descendant::iso-13606:data[@code=$categorizationCategory]/descendant::iso-13606:data[not(child::*)]
                else xxf:instance('enumeratedClassHierarchy-instance')/descendant::iso-13606:element[@extension=$categorizationElementClass][@cityEHR:elementType='#CityEHR:ElementProperty:enumeratedLeafValue']/iso-13606:data"/>
            -->
            <xxf:variable name="class"
                select="xxf:instance('enumeratedClassHierarchy-instance')//iso-13606:element[@extension=$categorizationElementClass][contains(@cityEHR:elementType,'enumeratedClass')]"/>

            <xxf:variable name="classNodes"
                select="if ($categorizationElementType='#CityEHR:ElementProperty:enumeratedValue') then () else if ($categorizationCategory!=$categorizationElementClass) then $class/descendant::iso-13606:data[@code=$categorizationCategory]/descendant::iso-13606:data
                else $class/descendant::iso-13606:data"/>

            <xxf:variable name="classNodeValues"
                select="if (exists($classNodes)) then distinct-values($classNodes/@value) else ()"/>


            <!-- If the categorizationElement is enumeratedValue then the categorizationCategory is the single value that matches observations in that category.
                 If the categorizationElement is enumeratedClass then the categorizationCategory represents the class:node and observations in that category match any leaf node descendant -->
            <xxf:variable name="categorizationCategoryMatch"
                select="if ($categorizationElementType='#CityEHR:ElementProperty:enumeratedValue') then $categorizationCategory else $classNodeValues"/>

            <!-- Iterate through each entry that doesn't have its category set and matches the categorizationCategory criteria.
                 Note that the match is made on the categorizationElementExtension
                 (not the root - which means we can use proxy elements to sort on i.e. have different sorts of the same data in different contexts) -->
            <xf:action
                xxf:iterate="$observationSet[cda:id/@cityEHR:origin=''][descendant::cda:value[@extension=$categorizationElementExtension][@value=$categorizationCategoryMatch]]">
                <xf:setvalue ref="./cda:id/@cityEHR:origin" value="$categorizationCategory"/>
            </xf:action>
        </xf:action>

    </xf:action>


    <!-- Application defined action to perform look-up on all directory entries.
         This is needed when the key element gets set as a pre-filled, default or calculated value -->
    <xf:action ev:event="refresh-directory-entries">
        <xxf:variable name="cdaBody"
            select="xxf:instance('form-instance')/cda:component/cda:structuredBody/cda:component/cda:section"/>

        <xf:action
            xxf:iterate="$cdaBody/descendant::cda:entry[@cityEHR:CRUD=('#CityEHR:EntryProperty:L','#CityEHR:Property:CRUD:L')]">

            <xxf:variable name="entry" select="."/>

            <!-- Get the key element for look-up.
                 This is either specified as the sortCriteria or defaults to the first element (not cluster, so must have a @value attribute) -->
            <xxf:variable name="sortCriteria" select="$entry/@cityEHR:sortCriteria"/>
            <xxf:variable name="keyElement"
                select="if (exists($sortCriteria) and $sortCriteria!='') then $entry/descendant::cda:value[@root=$sortCriteria][@value][1] else $entry/descendant::cda:value[@value][1]"/>

            <xf:dispatch name="lookup-directory-entry" target="directory-model">
                <xxf:context name="entry" select="$entry/cda:observation"/>
                <xxf:context name="keyElement" select="$keyElement"/>
            </xf:dispatch>
        </xf:action>
    </xf:action>



    <!-- ========= Forms read/write to xmlstore ================================ 
         Actions for xmlstore read, write, delete, query
         ======================================================================= -->

    <!-- Application defined action to save the composition -->
    <xf:action ev:event="save-composition">
        <!-- Write the composition to the xmlstore -->
        <xxf:variable name="storageLocation"
            select="xxf:instance('control-instance')/current-form/saveHandle"/>
        <xf:dispatch name="dal-write" target="databaseAccessLayer-model">
            <xxf:context name="system" select="'ehr'"/>
            <xxf:context name="storageLocation" select="$storageLocation"/>
            <xxf:context name="resource" select="xxf:instance('form-instance')"/>
            <xxf:context name="status" select="xxf:instance('control-instance')/status"/>
        </xf:dispatch>

        <!-- Composition was written successfully -->
        <xf:action if="xxf:instance('control-instance')/status=''">
            <xf:setvalue ref="xxf:instance('control-instance')/current-form/status" value="'saved'"/>
            <!-- Make an entry in the auditLog.
                 Will only write the entry if the session logging is switched on -->
            <xf:dispatch name="write-auditLog" target="auditLog-model">
                <xxf:context name="model" select="'compositionMainModel'"/>
                <xxf:context name="action" select="'save-composition'"/>
                <xxf:context name="resourceId"
                    select="xxf:instance('control-instance')/current-form/handleId"/>
                <xxf:context name="status" select="xxf:instance('control-instance')/status"/>
            </xf:dispatch>
            <!-- If there was a problem with the audit log, then abort with error message -->
            <xf:action if="xxf:instance('control-instance')/status !=''">
                <xf:dispatch name="abort-session" target="pageNavigation-model">
                    <xxf:context name="errorCode" select="xxf:instance('control-instance')/status"/>
                    <xxf:context name="context" select="'write-auditLog'"/>
                </xf:dispatch>
            </xf:action>

            <!-- Set the handle so that this is used if the user resets the form -->
            <xf:setvalue ref="xxf:instance('control-instance')/current-form/handle"
                value="$storageLocation"/>

        </xf:action>

        <!-- Failed to write composition -->
        <xf:action if="not(xxf:instance('control-instance')/status='')">
            <xf:setvalue ref="xxf:instance('view-parameters-instance')/systemError"
                value="xxf:instance('view-parameters-instance')/systemErrorList/systemError[@type='failedSaveFormSubmission']"
            />
        </xf:action>
    </xf:action>


    <!-- Application defined action to delete the composition that has previously been saved. -->
    <xf:action ev:event="delete-composition">
        <xxf:variable name="storageLocation"
            select="xxf:instance('control-instance')/current-form/saveHandle"/>

        <xf:dispatch name="dal-delete" target="databaseAccessLayer-model">
            <xxf:context name="system" select="'ehr'"/>
            <xxf:context name="storageLocation" select="$storageLocation"/>
            <xxf:context name="status" select="xxf:instance('control-instance')/status"/>
        </xf:dispatch>
    </xf:action>


    <!-- Application defined action to publish the form as a new event.
         This uses storage-instance (which is set up to hold a copy of the cda:ClinicalDocument in form-instance) -->
    <xf:action ev:event="publish-composition">
        <xxf:variable name="applicationId"
            select="xxf:instance('view-parameters-instance')/applicationId"/>

        <!-- Write the composition to the xmlstore -->
        <xxf:variable name="storageLocation"
            select="concat('/xmlstore/applications/',$applicationId,'/records/',xxf:instance('view-parameters-instance')/patientId,'/',xxf:instance('control-instance')/current-form/handleId)"/>
        <xf:dispatch name="dal-write" target="databaseAccessLayer-model">
            <xxf:context name="system" select="'ehr'"/>
            <xxf:context name="storageLocation" select="$storageLocation"/>
            <xxf:context name="resource" select="xxf:instance('storage-instance')"/>
            <xxf:context name="status" select="xxf:instance('control-instance')/status"/>
        </xf:dispatch>

        <!-- Composition was written successfully -->
        <xf:action if="xxf:instance('control-instance')/status=''">
            <!-- Make an entry in the auditLog.
                 Will only write the entry if the session logging is switched on -->
            <xf:dispatch name="write-auditLog" target="auditLog-model">
                <xxf:context name="model" select="'compositionMainModel'"/>
                <xxf:context name="action" select="'publish-composition'"/>
                <xxf:context name="resourceId"
                    select="xxf:instance('control-instance')/current-form/handleId"/>
                <xxf:context name="status" select="xxf:instance('control-instance')/status"/>
            </xf:dispatch>
            <!-- If there was a problem with the audit log, then abort with error message -->
            <xf:action if="xxf:instance('control-instance')/status !=''">
                <xf:dispatch name="abort-session" target="pageNavigation-model">
                    <xxf:context name="errorCode" select="xxf:instance('control-instance')/status"/>
                    <xxf:context name="context" select="'write-auditLog'"/>
                </xf:dispatch>
            </xf:action>

            <xf:setvalue ref="xxf:instance('control-instance')/current-form/status"
                value="'published'"/>
        </xf:action>

        <!-- Failed to write composition -->
        <xf:action if="not(xxf:instance('control-instance')/status='')">
            <xf:setvalue ref="xxf:instance('view-parameters-instance')/systemError"
                value="xxf:instance('view-parameters-instance')/systemErrorList/systemError[@type='failedPublishForm']"
            />
        </xf:action>
    </xf:action>


    <!-- Submission to delete the resource set as deleteObject.
         The ref attribute needs to refer to an instance, but it doesn't matter what that is-->
    <xf:submission id="delete-resource-submission" ref="xxf:instance('resourceHandles-instance')"
        action="{xxf:instance('view-parameters-instance')/databaseLocation}{xxf:instance('control-instance')/deleteObject}"
        validate="false" method="delete" replace="none" serialization="none">
        <xf:action ev:event="xforms-submit-done">
            <xf:setvalue ref="xxf:instance('control-instance')/status">success</xf:setvalue>
        </xf:action>
        <xf:action ev:event="xforms-submit-error">
            <!-- This submission will fail if there is no resource at the specified handle i.e. not really an error. -->
            <xf:setvalue ref="xxf:instance('control-instance')/status">failed</xf:setvalue>
        </xf:action>
    </xf:submission>


    <!-- ========= Handling Media Attachments ================================== 
         ======================================================================= -->
    <!-- Instance to hold uploaded file -->
    <xf:instance id="file-instance">
        <upload xmlns="">
            <file>
                <filename/>
                <mediatype/>
                <size/>
                <content/>
                <convertedContent/>
            </file>
        </upload>
    </xf:instance>

    <xf:bind nodeset="xxf:instance('file-instance')">
        <xf:bind nodeset="file/content" type="xs:anyURI"/>
    </xf:bind>

    <!-- Upload the file containing the data to the server -->
    <xf:submission id="load-file-submission" method="post" replace="none"
        ref="xxf:instance('file-instance')" resource="">
        <xf:action ev:event="xforms-submit-done">
            <xf:send submission="load-data-submission"/>
        </xf:action>
    </xf:submission>

    <!-- Read the server file into the import instance ** stub - needs work -->
    <xf:submission id="load-data-submission" method="get"
        resource="{xxf:instance('file-instance')/file/content}" serialization="none"
        replace="instance" xxf:instance="import-instance" f:url-type="resource">
        <xf:action ev:event="xforms-submit-done">
            <xf:setvalue ref="xxf:instance('control-instance')/uploadStatus" value="'loaded'"/>
            <xf:setvalue ref="xxf:instance('control-instance')/importStatus" value="'ready'"/>
        </xf:action>
        <xf:action ev:event="xforms-submit-error">
            <xf:setvalue ref="xxf:instance('control-instance')/uploadStatus" value="'failed'"/>
            <xf:setvalue ref="xxf:instance('control-instance')/importStatus" value="'waiting'"/>
        </xf:action>
    </xf:submission>

    <!-- Submission to store a resource in the database -->
    <xf:submission id="store-resource-submission" ref="xxf:instance('control-instance')/resourceURL"
        resource="{xxf:instance('control-instance')/storageObject}" method="put" replace="none"
        serialization="application/octet-stream">
        <xf:action ev:event="xforms-submit-done">
            <xf:setvalue ref="xxf:instance('control-instance')/status">success</xf:setvalue>
        </xf:action>
        <xf:action ev:event="xforms-submit-error">
            <xf:setvalue ref="xxf:instance('control-instance')/status">failed</xf:setvalue>
            <xf:setvalue ref="xxf:instance('view-parameters-instance')/systemError"
                value="xxf:instance('view-parameters-instance')/systemErrorList/systemError[@type='failedStoreResource']"
            />
        </xf:action>
    </xf:submission>

    <!--
    <xf:submission id="save-submission" ref="instance('attachment')" method="put" serialization="application/octet-stream" replace="none" resource="http://example.com/foo.bin"/>
-->


    <!-- ========= Highlight Entries ========= 
         Apply the highlight style to entries that appear in the specified (specialty) model/composition.
         The styling scheme is specified in application-parameters in the highlight element:
         
            <highlight value="">
                <scheme value="" displayName="" specialtyIRI="" compositionIRI="" style=""/>
            </highlight>
          
         ===================================== -->

    <!-- Application defined action to load entry set for highlighting -->
    <xf:action ev:event="load-highlght-entries">
        <xxf:variable name="scheme" select="event('scheme')"/>

        <xxf:variable name="specialtyId"
            select="replace(substring($scheme/@specialtyIRI,2),':','-')"/>

        <!-- Only retrive entries if specialty is set -->
        <xf:action if="$specialtyId != ''">
            <xf:setvalue ref="xxf:instance('control-instance')/storageObject"
                value="concat(xxf:instance('view-parameters-instance')/applicationDatabaseLocation,'/systemConfiguration/',$specialtyId)"/>

            <xf:setvalue ref="xxf:instance('getCompositionEntriesXQuery-instance')/compositionIRI"
                value="$scheme/@compositionIRI"/>
            <xf:setvalue ref="xxf:instance('highlightQuery-instance')/exist:text"
                value="xxf:instance('getCompositionEntriesXQuery-instance')"/>

            <xf:send submission="getCompositionEntries-submission" target="main-model"/>

        </xf:action>

        <!-- Set view-parameter for scheme, so that its passed between pages -->
        <xf:setvalue ref="xxf:instance('view-parameters-instance')/highlightScheme"
            value="$scheme/@value"/>

        <!-- Set style of highlight -->
        <xf:setvalue ref="xxf:instance('control-instance')/highlightStyle"
            value="if (exists($scheme/@style)) then $scheme/@style else ''"/>
        <!-- Rebuild to apply the highlight style -->
        <xf:rebuild model="main-model"/>
    </xf:action>


    <!-- Query to get entries for a composition -->
    <xf:instance id="getCompositionEntriesXQuery-instance"
        src="oxf:/apps/ehr/xquery/getCompositionEntriesXQuery.xml"/>

    <!-- Query and return instances -->
    <xf:instance id="highlightQuery-instance">
        <exist:query start="1" max="-1">
            <exist:text/>
        </exist:query>
    </xf:instance>

    <xf:instance id="highlightEntryList-instance">
        <entrySet xmlns=""/>
    </xf:instance>

    <!-- Submission to load entry set for highlighting -->
    <xf:submission id="getCompositionEntries-submission"
        ref="xxf:instance('highlightQuery-instance')"
        action="{xxf:instance('control-instance')/storageObject}" method="post" replace="instance"
        instance="highlightEntryList-instance">
        <xf:action ev:event="xforms-submit-error">
            <xf:setvalue ref="xxf:instance('view-parameters-instance')/systemError"
                value="xxf:instance('view-parameters-instance')/systemErrorList/systemError[@type='failedGetEntryListSubmission']"
            />
        </xf:action>
    </xf:submission>


    <!-- ========= Enumerated Class Handling ============ 
         ================================================ -->

    <!-- Application defined action to set element after class node is selected by the user
         The selection comes from the class hierarchy browser - cityEHRSDSDialog
         Or the class dropdown - cityEHRClassDropdownDialog -->
    <xf:action ev:event="set-elementData">
        <xxf:variable name="element" select="event('element')"/>
        <xxf:variable name="selectedData" select="event('selectedData')"/>

        <xf:setvalue ref="$element/@value" value="$selectedData/@value"/>
        <xf:setvalue ref="$element/@displayName" value="$selectedData/@displayName"/>
        <xf:setvalue ref="$element/@code" value="$selectedData/@code"/>
        <xf:setvalue ref="$element/@codeSystem" value="$selectedData/@codeSystem"/>
        <xf:setvalue ref="$element/@cityEHR:suppDataSet" value="$selectedData/@cityEHR:suppDataSet"/>
        <xf:setvalue ref="$element/@units" value="$selectedData/@units"/>

        <!-- Reset the focus of the element -->
        <xf:setvalue ref="$element/@cityEHR:focus" value="''"/>

    </xf:action>


    <!-- ========= Handle knowledge sources =================== 
         ====================================================== -->

    <!-- Load the query from file -->
    <xf:instance id="knowledgeMapsXQuery-instance"
        src="oxf:/apps/ehr/xquery/knowledgeMapsXQuery.xml"/>

    <!-- Response instance  -->
    <xf:instance id="knowledgeMap-instance">
        <rdf:RDF>
            <!-- Gets replaced by query -->
        </rdf:RDF>
    </xf:instance>

    <!-- Submission to get all knowledge map rdf:Description as one big map -->
    <xf:submission id="knowledgeMap-submission" ref="xxf:instance('knowledgeMapsXQuery-instance')"
        action="{xxf:instance('view-parameters-instance')/applicationDatabaseLocation}/knowledgeMaps"
        method="post" replace="instance" instance="knowledgeMap-instance">
        <xf:action ev:event="xforms-submit-done">
            <!-- Not doing anything on success -->
        </xf:action>
        <xf:action ev:event="xforms-submit-error">
            <!-- TBD -->
        </xf:action>
    </xf:submission>


    <xf:action ev:event="get-knowledge-sources">
        <xf:send submission="knowledgeMap-submission"/>
    </xf:action>


    <!-- ========= Wordprocessor Rendition ============== 
         ================================================ -->

    <!-- Application defined action to export HTML rendtion as a spreadsheet.
         First save the html-instance in the HTML cache (user specific) 
         Then load pipeline to create and return spreadsheet -->
    <xf:action ev:event="store-cdaCache">
        <xxf:variable name="cdaInstance" select="event('cdaInstance')"/>

        <!-- Set the cache location (user specific) -->
        <xxf:variable name="userId" select="xxf:instance('view-parameters-instance')/userId"/>
        <xxf:variable name="cacheStorageLocation"
            select="concat('/xmlstore/users/',$userId,'/cdaCache')"/>

        <!-- Write cdaInstance to the user cache.
             Return the URL for the resource in the database (in view-parameters-instance) -->
        <xf:dispatch name="dal-write" target="databaseAccessLayer-model">
            <xxf:context name="system" select="'ehr'"/>
            <xxf:context name="storageLocation" select="$cacheStorageLocation"/>
            <xxf:context name="resource" select="$cdaInstance"/>
            <xxf:context name="resourceURL"
                select="xxf:instance('view-parameters-instance')/resourceHandle"/>
            <xxf:context name="status" select="xxf:instance('control-instance')/status"/>
        </xf:dispatch>
    </xf:action>


    <!-- Application defined action load wordprocessor templates for current composition
         Also sets the relevant view-controls -->
    <xf:action ev:event="initialize-wordProcessorTemplates">
        <xf:action if="xxf:instance('control-instance')/current-form/compositionIRI != ''">

            <!-- Get the stored letter templates -->
            <xf:dispatch name="get-storedLetterTemplateList" target="dictionary-model">
                <xxf:context name="compositionIRI"
                    select="xxf:instance('control-instance')/current-form/compositionIRI"/>
                <xxf:context name="applicationIRI"
                    select="xxf:instance('view-parameters-instance')/applicationIRI"/>
            </xf:dispatch>
            <xxf:variable name="letterTemplateList"
                select="xxf:instance('storedLetterTemplateList-instance')/*"/>

            <!--  Only show if there are templates configured -->
            <xf:setvalue
                ref="xxf:instance('viewControlsActions-instance')/view/select[@id='wordprocessorTemplate']/@display"
                value="if (exists($letterTemplateList[1])) then 'show' else 'hidden'"/>
            <xf:setvalue
                ref="xxf:instance('viewControlsActions-instance')/view/action[@id='wordprocessor']/@display"
                value="if (exists($letterTemplateList[1])) then 'show' else 'hidden'"/>

            <!-- Set the set of word processor templates for selection -->
            <xf:action xxf:iterate="$letterTemplateList">
                <xxf:variable name="letterTemplate" select="."/>
                <xf:insert
                    context="xxf:instance('viewControls-input-instance')/select[@id='wordprocessorTemplate']"
                    nodeset="*" origin="$letterTemplate" at="last()" position="after"/>
            </xf:action>

            <!-- Set the value for the first on the list (if it exists) -->
            <xf:setvalue
                ref="xxf:instance('viewControls-input-instance')/select[@id='wordprocessorTemplate']/@value"
                value="xxf:instance('viewControls-input-instance')/select[@id='wordprocessorTemplate']/*[1]/@value"
            />
        </xf:action>
    </xf:action>


    <!-- Application defined action to return word proceesor rendition to browser -->
    <xf:action ev:event="return-wordProcessorCDA">
        <xxf:variable name="applicationIRI" select="event('applicationIRI')"/>
        <xxf:variable name="letterTemplate" select="event('letterTemplate')"/>
        <xxf:variable name="cdaInstance" select="event('cdaInstance')"/>

        <!-- Store cdaInstance in the XML cache,
             Sets resourceHandle for use in cityEHRWordProcessorCDA pipelibe -->
        <xf:dispatch name="store-xmlCache" target="pageNavigation-model">
            <xxf:context name="xml-instance" select="$cdaInstance"/>
        </xf:dispatch>

        <!-- Load the letterTemplate, including its binary content -->
        <xf:dispatch name="load-letterTemplateContent" target="dictionary-model">
            <xxf:context name="letterTemplate" select="$letterTemplate"/>
            <xxf:context name="applicationIRI" select="$applicationIRI"/>
        </xf:dispatch>

        <!-- The template (binary) is stored to the binaryCache -->
        <xf:setvalue ref="xxf:instance('letterTemplateBinary-instance')"
            value="$letterTemplate/letterTemplateFile"/>
        <xxf:variable name="binaryCacheLocation"
            select="concat('/xmlstore/users/',xxf:instance('view-parameters-instance')/userId,'/binaryCache')"/>

        <xf:dispatch name="dal-write" target="databaseAccessLayer-model">
            <xxf:context name="system" select="'ehr'"/>
            <xxf:context name="storageLocation" select="$binaryCacheLocation"/>
            <xxf:context name="resource" select="xxf:instance('letterTemplateBinary-instance')"/>
            <xxf:context name="resourceURL"
                select="xxf:instance('view-parameters-instance')/binaryCacheHandle"/>
            <xxf:context name="status" select="xxf:instance('viewControlsActions-instance')/status"
            />
        </xf:dispatch>

        <!-- Call pipeline through page-flow.
             This uses resourceHandle and binaryCacheHandle to retrieve the cda and wordprocessor template.
             -->
        <xf:dispatch name="load-cityEHR-page" target="pageNavigation-model">
            <xxf:context name="page" select="'cityEHRWordProcessorCDA'"/>
            <xxf:context name="show" select="'new'"/>
            <xxf:context name="checkEdits" select="false()"/>
        </xf:dispatch>

    </xf:action>



    <!-- ========= Set up View when it is first loaded =================== 
         Sets the following, based on settings in view-parameters:
            
            set-patient-for-view    (patientId)
            load-dictionary         (specialtyIRI)
            Care Setting            (careSettingIRI)
            
         
         ================================================================= -->
    <xf:action ev:event="xforms-model-construct-done">
        <!-- Set up the patient for this patient-specific view -->
        <xf:dispatch name="set-patient-for-view" target="patientDemographics-model"/>

        <!-- Load dictionary for current specialty.
             This is language dependent -->
        <xf:dispatch name="load-dictionary" target="dictionary-model">
            <xxf:context name="specialtyIRI"
                select="xxf:instance('session-parameters-instance')/specialtyIRI"/>
            <xxf:context name="languageCode"
                select="xxf:instance('session-parameters-instance')/languageCode"/>
            <xxf:context name="baseLanguageCode"
                select="xxf:instance('session-parameters-instance')/baseLanguageCode"/>
        </xf:dispatch>

        <!-- Set the Care Setting.
             careSettingIRI is passed in view-parameters, but use the default if it is not set.
             Defaults to the specialtyIRI which is always the first folder listed in the dictionary
             Only needs to be set for pages that have the dictionary-instance loaded -->
        <xxf:variable name="careSetting"
            select="if (xxf:instance('view-parameters-instance')/careSettingIRI='') then xxf:instance('dictionary-instance')/iso-13606:folderCollection/iso-13606:folder[1] else xxf:instance('dictionary-instance')/iso-13606:folderCollection/iso-13606:folder[@code=xxf:instance('view-parameters-instance')/careSettingIRI]"/>
        <xf:setvalue ref="xxf:instance('view-parameters-instance')/careSettingIRI"
            value="$careSetting/@code"/>
        <xf:setvalue ref="xxf:instance('view-parameters-instance')/careSettingDisplayName"
            value="$careSetting/@displayName"/>

        <!-- Set up the care team 
             TBD - this may change when the care team is selectable -->
        <xf:dispatch name="getCareTeamsForUser" target="careTeam-model"/>
        <xf:dispatch name="getCareTeamUsers" target="careTeam-model"/>
        <xf:dispatch name="getUserSelectionList" target="careTeam-model">
            <xxf:context name="userListInput" select="()"/>
        </xf:dispatch>

        <!-- Set the externalId for use in print and export -->
        <xf:dispatch name="set-externalId" target="pageNavigation-model">
            <xxf:context name="type" select="'print'"/>
            <xxf:context name="externalId"
                select="xxf:instance('view-parameters-instance')/externalId"/>
        </xf:dispatch>

        <!-- Set the type of the composition.
             The page is passed in the parameters through page-flow, so can set the type based on that.
             This determines where the saved (in-progress) compositions are stored in the database.
             
             Note that for the cityEHRRegistration page there is no entry in xxf:instance('view-parameters-instance')/pageInformation so these parameters do not get set 
                -->
        <xxf:variable name="page" select="xxf:instance('view-parameters-instance')/page"/>
        <xf:setvalue ref="xxf:instance('view-parameters-instance')/compositionTypeIRI"
            value="xxf:instance('view-parameters-instance')/pageInformation/page[@page=$page]/@compositionTypeIRI"/>

        <!-- Expand composition selection view unless there is no current composition -->
        <xf:setvalue ref="xxf:instance('view-parameters-instance')/showViewNavigationItemList"
            value="if (xxf:instance('view-parameters-instance')/compositionStatus='none') then xxf:instance('view-parameters-instance')/pageInformation/page[@page=$page]/@showViewNavigationItemList else 'true'"/>

        <!-- Actions for patient-specific compositions.
             No need to do these for the patient registration page -->
        <xf:action if="$page!='cityEHRRegistration'">

            <!-- Get forms in progress for current patient -->
            <xf:dispatch name="get-patientCompositions" target="main-model"/>

            <!-- Set the Care Setting.
                    careSettingIRI is passed in view-parameters, but use the default if it is not set -->
            <xxf:variable name="careSetting"
                select="if (xxf:instance('view-parameters-instance')/careSettingIRI='') then xxf:instance('dictionary-instance')/iso-13606:folderCollection/iso-13606:folder[1] else xxf:instance('dictionary-instance')/iso-13606:folderCollection/iso-13606:folder[@code=xxf:instance('view-parameters-instance')/careSettingIRI]"/>
            <xf:setvalue ref="xxf:instance('view-parameters-instance')/careSettingIRI"
                value="$careSetting/@code"/>

        </xf:action>
        <!-- End of actions for patient-specific compositions -->

        <!-- Load composition if parameters are set.
             Will either be a new form, if compositionIRI has been set
             or a saved form for this patient, if savedCompositionId has been set -->
        <xf:action if="xxf:instance('view-parameters-instance')/compositionStatus!='none'">
            <xf:dispatch name="load-composition" target="main-model"/>
        </xf:action>

        <!-- Set the initial view navigation type.
             If a new form has been loaded then set to 'new'
             If a saved form has been loaded then set to 'inprogress'
             If no form has been loaded and there are compositions in progress then show them, otherwise show the new compositions.
          -->
        <xf:setvalue ref="xxf:instance('view-parameters-instance')/viewNavigationType"
            value="if (xxf:instance('view-parameters-instance')/compositionStatus='saved') then 'inProgress' else if (xxf:instance('view-parameters-instance')/compositionStatus='new') then 'new' else if (count(xxf:instance('patientCompositionsList-instance')/composition) !=0) then 'inProgress' else 'new'"/>

        <!-- Only show the view controls if there is a form to edit -->
        <xxf:variable name="showControlSet"
            select="if (xxf:instance('control-instance')/current-form/status = 'none') then 'hidden' else 'show'"/>
        <xf:setvalue
            ref="xxf:instance('application-parameters-instance')/viewControlsActions/@display"
            value="$showControlSet"/>

    </xf:action>


    <!-- ========== Set up once page has loaded =================== 
         ========================================================== -->
    <xf:action ev:event="xforms-ready">

        <!-- These three are just for testing - rebuild resets all bindings -->
        <!--
        <xf:refresh model="main-model"/>
        <xf:recalculate model="main-model"/>
        <xf:rebuild model="main-model"/>
        -->

        <!-- Look up all directory entries, in case key value is set as a default, pre-filled or calculated value.
             The calculated values are only set when the form is ready, which is why this one is here. -->
        <xf:action>
            <xf:dispatch name="refresh-directory-entries" target="main-model"/>
        </xf:action>

        <!-- Form must be initialised after the main model is loaded.
             This is because updates made as the model loads trigger update events 
             after editStatus has been set in control-instance and status has been set in cdaControl-instance
        -->
        <xf:action>
            <xf:dispatch name="initialise-form" target="main-model"/>
        </xf:action>

        <!-- Get the knowledge sources -->
        <xf:action>
            <xf:dispatch name="get-knowledge-sources" target="main-model"/>
        </xf:action>

        <!-- Rebuild so that bindings are reset (e.g. for visibility)
             and calculations are triggered (since these need current-form/status='loaded' which is set in initialise-form.
             The observer for element changes will noe set the editStatus -->
        <xf:rebuild model="cda-model"/>

        <!-- Reset the editStatus -->
        <xf:setvalue ref="xxf:instance('control-instance')/current-form/editStatus" value="'unedited'"/>

    </xf:action>

</xf:model>
